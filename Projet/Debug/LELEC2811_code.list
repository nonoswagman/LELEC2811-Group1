
LELEC2811_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f04  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d70  08013fc8  08013fc8  00014fc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d38  08014d38  00016208  2**0
                  CONTENTS
  4 .ARM          00000008  08014d38  08014d38  00015d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d40  08014d40  00016208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014d40  08014d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014d44  08014d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  08014d48  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  20000208  08014f50  00016208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  08014f50  00016a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00016208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038195  00000000  00000000  00016230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000597b  00000000  00000000  0004e3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003318  00000000  00000000  00053d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000276d  00000000  00000000  00057058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3a2  00000000  00000000  000597c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c425  00000000  00000000  00074b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f784  00000000  00000000  000a0f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140710  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d45c  00000000  00000000  00140754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000208 	.word	0x20000208
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08013fac 	.word	0x08013fac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000020c 	.word	0x2000020c
 8000104:	08013fac 	.word	0x08013fac

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	@ 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_cdrcmple>:
 8000248:	4684      	mov	ip, r0
 800024a:	0010      	movs	r0, r2
 800024c:	4662      	mov	r2, ip
 800024e:	468c      	mov	ip, r1
 8000250:	0019      	movs	r1, r3
 8000252:	4663      	mov	r3, ip
 8000254:	e000      	b.n	8000258 <__aeabi_cdcmpeq>
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_cdcmpeq>:
 8000258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800025a:	f001 ffbd 	bl	80021d8 <__ledf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	d401      	bmi.n	8000266 <__aeabi_cdcmpeq+0xe>
 8000262:	2100      	movs	r1, #0
 8000264:	42c8      	cmn	r0, r1
 8000266:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000268 <__aeabi_dcmpeq>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f001 fefd 	bl	8002068 <__eqdf2>
 800026e:	4240      	negs	r0, r0
 8000270:	3001      	adds	r0, #1
 8000272:	bd10      	pop	{r4, pc}

08000274 <__aeabi_dcmplt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 ffaf 	bl	80021d8 <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	db01      	blt.n	8000282 <__aeabi_dcmplt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmple>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 ffa5 	bl	80021d8 <__ledf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dd01      	ble.n	8000296 <__aeabi_dcmple+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_dcmpgt>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f001 ff27 	bl	80020f0 <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	dc01      	bgt.n	80002aa <__aeabi_dcmpgt+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_dcmpge>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	f001 ff1d 	bl	80020f0 <__gedf2>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	da01      	bge.n	80002be <__aeabi_dcmpge+0xe>
 80002ba:	2000      	movs	r0, #0
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	2001      	movs	r0, #1
 80002c0:	bd10      	pop	{r4, pc}
 80002c2:	46c0      	nop			@ (mov r8, r8)

080002c4 <__aeabi_cfrcmple>:
 80002c4:	4684      	mov	ip, r0
 80002c6:	0008      	movs	r0, r1
 80002c8:	4661      	mov	r1, ip
 80002ca:	e7ff      	b.n	80002cc <__aeabi_cfcmpeq>

080002cc <__aeabi_cfcmpeq>:
 80002cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002ce:	f000 fc6f 	bl	8000bb0 <__lesf2>
 80002d2:	2800      	cmp	r0, #0
 80002d4:	d401      	bmi.n	80002da <__aeabi_cfcmpeq+0xe>
 80002d6:	2100      	movs	r1, #0
 80002d8:	42c8      	cmn	r0, r1
 80002da:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002dc <__aeabi_fcmpeq>:
 80002dc:	b510      	push	{r4, lr}
 80002de:	f000 fbef 	bl	8000ac0 <__eqsf2>
 80002e2:	4240      	negs	r0, r0
 80002e4:	3001      	adds	r0, #1
 80002e6:	bd10      	pop	{r4, pc}

080002e8 <__aeabi_fcmplt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fc61 	bl	8000bb0 <__lesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	db01      	blt.n	80002f6 <__aeabi_fcmplt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			@ (mov r8, r8)

080002fc <__aeabi_fcmple>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 fc57 	bl	8000bb0 <__lesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	dd01      	ble.n	800030a <__aeabi_fcmple+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			@ (mov r8, r8)

08000310 <__aeabi_fcmpgt>:
 8000310:	b510      	push	{r4, lr}
 8000312:	f000 fbfd 	bl	8000b10 <__gesf2>
 8000316:	2800      	cmp	r0, #0
 8000318:	dc01      	bgt.n	800031e <__aeabi_fcmpgt+0xe>
 800031a:	2000      	movs	r0, #0
 800031c:	bd10      	pop	{r4, pc}
 800031e:	2001      	movs	r0, #1
 8000320:	bd10      	pop	{r4, pc}
 8000322:	46c0      	nop			@ (mov r8, r8)

08000324 <__aeabi_fcmpge>:
 8000324:	b510      	push	{r4, lr}
 8000326:	f000 fbf3 	bl	8000b10 <__gesf2>
 800032a:	2800      	cmp	r0, #0
 800032c:	da01      	bge.n	8000332 <__aeabi_fcmpge+0xe>
 800032e:	2000      	movs	r0, #0
 8000330:	bd10      	pop	{r4, pc}
 8000332:	2001      	movs	r0, #1
 8000334:	bd10      	pop	{r4, pc}
 8000336:	46c0      	nop			@ (mov r8, r8)

08000338 <__aeabi_uldivmod>:
 8000338:	2b00      	cmp	r3, #0
 800033a:	d111      	bne.n	8000360 <__aeabi_uldivmod+0x28>
 800033c:	2a00      	cmp	r2, #0
 800033e:	d10f      	bne.n	8000360 <__aeabi_uldivmod+0x28>
 8000340:	2900      	cmp	r1, #0
 8000342:	d100      	bne.n	8000346 <__aeabi_uldivmod+0xe>
 8000344:	2800      	cmp	r0, #0
 8000346:	d002      	beq.n	800034e <__aeabi_uldivmod+0x16>
 8000348:	2100      	movs	r1, #0
 800034a:	43c9      	mvns	r1, r1
 800034c:	0008      	movs	r0, r1
 800034e:	b407      	push	{r0, r1, r2}
 8000350:	4802      	ldr	r0, [pc, #8]	@ (800035c <__aeabi_uldivmod+0x24>)
 8000352:	a102      	add	r1, pc, #8	@ (adr r1, 800035c <__aeabi_uldivmod+0x24>)
 8000354:	1840      	adds	r0, r0, r1
 8000356:	9002      	str	r0, [sp, #8]
 8000358:	bd03      	pop	{r0, r1, pc}
 800035a:	46c0      	nop			@ (mov r8, r8)
 800035c:	fffffee9 	.word	0xfffffee9
 8000360:	b403      	push	{r0, r1}
 8000362:	4668      	mov	r0, sp
 8000364:	b501      	push	{r0, lr}
 8000366:	9802      	ldr	r0, [sp, #8]
 8000368:	f000 f834 	bl	80003d4 <__udivmoddi4>
 800036c:	9b01      	ldr	r3, [sp, #4]
 800036e:	469e      	mov	lr, r3
 8000370:	b002      	add	sp, #8
 8000372:	bc0c      	pop	{r2, r3}
 8000374:	4770      	bx	lr
 8000376:	46c0      	nop			@ (mov r8, r8)

08000378 <__aeabi_lmul>:
 8000378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037a:	46ce      	mov	lr, r9
 800037c:	4699      	mov	r9, r3
 800037e:	0c03      	lsrs	r3, r0, #16
 8000380:	469c      	mov	ip, r3
 8000382:	0413      	lsls	r3, r2, #16
 8000384:	4647      	mov	r7, r8
 8000386:	0c1b      	lsrs	r3, r3, #16
 8000388:	001d      	movs	r5, r3
 800038a:	000e      	movs	r6, r1
 800038c:	4661      	mov	r1, ip
 800038e:	0404      	lsls	r4, r0, #16
 8000390:	0c24      	lsrs	r4, r4, #16
 8000392:	b580      	push	{r7, lr}
 8000394:	0007      	movs	r7, r0
 8000396:	0c10      	lsrs	r0, r2, #16
 8000398:	434b      	muls	r3, r1
 800039a:	4365      	muls	r5, r4
 800039c:	4341      	muls	r1, r0
 800039e:	4360      	muls	r0, r4
 80003a0:	0c2c      	lsrs	r4, r5, #16
 80003a2:	18c0      	adds	r0, r0, r3
 80003a4:	1824      	adds	r4, r4, r0
 80003a6:	468c      	mov	ip, r1
 80003a8:	42a3      	cmp	r3, r4
 80003aa:	d903      	bls.n	80003b4 <__aeabi_lmul+0x3c>
 80003ac:	2380      	movs	r3, #128	@ 0x80
 80003ae:	025b      	lsls	r3, r3, #9
 80003b0:	4698      	mov	r8, r3
 80003b2:	44c4      	add	ip, r8
 80003b4:	4649      	mov	r1, r9
 80003b6:	4379      	muls	r1, r7
 80003b8:	4356      	muls	r6, r2
 80003ba:	0c23      	lsrs	r3, r4, #16
 80003bc:	042d      	lsls	r5, r5, #16
 80003be:	0c2d      	lsrs	r5, r5, #16
 80003c0:	1989      	adds	r1, r1, r6
 80003c2:	4463      	add	r3, ip
 80003c4:	0424      	lsls	r4, r4, #16
 80003c6:	1960      	adds	r0, r4, r5
 80003c8:	18c9      	adds	r1, r1, r3
 80003ca:	bcc0      	pop	{r6, r7}
 80003cc:	46b9      	mov	r9, r7
 80003ce:	46b0      	mov	r8, r6
 80003d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d2:	46c0      	nop			@ (mov r8, r8)

080003d4 <__udivmoddi4>:
 80003d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003d6:	4657      	mov	r7, sl
 80003d8:	464e      	mov	r6, r9
 80003da:	4645      	mov	r5, r8
 80003dc:	46de      	mov	lr, fp
 80003de:	b5e0      	push	{r5, r6, r7, lr}
 80003e0:	0004      	movs	r4, r0
 80003e2:	000d      	movs	r5, r1
 80003e4:	4692      	mov	sl, r2
 80003e6:	4699      	mov	r9, r3
 80003e8:	b083      	sub	sp, #12
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d830      	bhi.n	8000450 <__udivmoddi4+0x7c>
 80003ee:	d02d      	beq.n	800044c <__udivmoddi4+0x78>
 80003f0:	4649      	mov	r1, r9
 80003f2:	4650      	mov	r0, sl
 80003f4:	f002 ff60 	bl	80032b8 <__clzdi2>
 80003f8:	0029      	movs	r1, r5
 80003fa:	0006      	movs	r6, r0
 80003fc:	0020      	movs	r0, r4
 80003fe:	f002 ff5b 	bl	80032b8 <__clzdi2>
 8000402:	1a33      	subs	r3, r6, r0
 8000404:	4698      	mov	r8, r3
 8000406:	3b20      	subs	r3, #32
 8000408:	d434      	bmi.n	8000474 <__udivmoddi4+0xa0>
 800040a:	469b      	mov	fp, r3
 800040c:	4653      	mov	r3, sl
 800040e:	465a      	mov	r2, fp
 8000410:	4093      	lsls	r3, r2
 8000412:	4642      	mov	r2, r8
 8000414:	001f      	movs	r7, r3
 8000416:	4653      	mov	r3, sl
 8000418:	4093      	lsls	r3, r2
 800041a:	001e      	movs	r6, r3
 800041c:	42af      	cmp	r7, r5
 800041e:	d83b      	bhi.n	8000498 <__udivmoddi4+0xc4>
 8000420:	42af      	cmp	r7, r5
 8000422:	d100      	bne.n	8000426 <__udivmoddi4+0x52>
 8000424:	e079      	b.n	800051a <__udivmoddi4+0x146>
 8000426:	465b      	mov	r3, fp
 8000428:	1ba4      	subs	r4, r4, r6
 800042a:	41bd      	sbcs	r5, r7
 800042c:	2b00      	cmp	r3, #0
 800042e:	da00      	bge.n	8000432 <__udivmoddi4+0x5e>
 8000430:	e076      	b.n	8000520 <__udivmoddi4+0x14c>
 8000432:	2200      	movs	r2, #0
 8000434:	2300      	movs	r3, #0
 8000436:	9200      	str	r2, [sp, #0]
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	2301      	movs	r3, #1
 800043c:	465a      	mov	r2, fp
 800043e:	4093      	lsls	r3, r2
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	2301      	movs	r3, #1
 8000444:	4642      	mov	r2, r8
 8000446:	4093      	lsls	r3, r2
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	e029      	b.n	80004a0 <__udivmoddi4+0xcc>
 800044c:	4282      	cmp	r2, r0
 800044e:	d9cf      	bls.n	80003f0 <__udivmoddi4+0x1c>
 8000450:	2200      	movs	r2, #0
 8000452:	2300      	movs	r3, #0
 8000454:	9200      	str	r2, [sp, #0]
 8000456:	9301      	str	r3, [sp, #4]
 8000458:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <__udivmoddi4+0x8e>
 800045e:	601c      	str	r4, [r3, #0]
 8000460:	605d      	str	r5, [r3, #4]
 8000462:	9800      	ldr	r0, [sp, #0]
 8000464:	9901      	ldr	r1, [sp, #4]
 8000466:	b003      	add	sp, #12
 8000468:	bcf0      	pop	{r4, r5, r6, r7}
 800046a:	46bb      	mov	fp, r7
 800046c:	46b2      	mov	sl, r6
 800046e:	46a9      	mov	r9, r5
 8000470:	46a0      	mov	r8, r4
 8000472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000474:	4642      	mov	r2, r8
 8000476:	469b      	mov	fp, r3
 8000478:	2320      	movs	r3, #32
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	4652      	mov	r2, sl
 800047e:	40da      	lsrs	r2, r3
 8000480:	4641      	mov	r1, r8
 8000482:	0013      	movs	r3, r2
 8000484:	464a      	mov	r2, r9
 8000486:	408a      	lsls	r2, r1
 8000488:	0017      	movs	r7, r2
 800048a:	4642      	mov	r2, r8
 800048c:	431f      	orrs	r7, r3
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	001e      	movs	r6, r3
 8000494:	42af      	cmp	r7, r5
 8000496:	d9c3      	bls.n	8000420 <__udivmoddi4+0x4c>
 8000498:	2200      	movs	r2, #0
 800049a:	2300      	movs	r3, #0
 800049c:	9200      	str	r2, [sp, #0]
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	4643      	mov	r3, r8
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d0d8      	beq.n	8000458 <__udivmoddi4+0x84>
 80004a6:	07fb      	lsls	r3, r7, #31
 80004a8:	0872      	lsrs	r2, r6, #1
 80004aa:	431a      	orrs	r2, r3
 80004ac:	4646      	mov	r6, r8
 80004ae:	087b      	lsrs	r3, r7, #1
 80004b0:	e00e      	b.n	80004d0 <__udivmoddi4+0xfc>
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d101      	bne.n	80004ba <__udivmoddi4+0xe6>
 80004b6:	42a2      	cmp	r2, r4
 80004b8:	d80c      	bhi.n	80004d4 <__udivmoddi4+0x100>
 80004ba:	1aa4      	subs	r4, r4, r2
 80004bc:	419d      	sbcs	r5, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	1924      	adds	r4, r4, r4
 80004c2:	416d      	adcs	r5, r5
 80004c4:	2100      	movs	r1, #0
 80004c6:	3e01      	subs	r6, #1
 80004c8:	1824      	adds	r4, r4, r0
 80004ca:	414d      	adcs	r5, r1
 80004cc:	2e00      	cmp	r6, #0
 80004ce:	d006      	beq.n	80004de <__udivmoddi4+0x10a>
 80004d0:	42ab      	cmp	r3, r5
 80004d2:	d9ee      	bls.n	80004b2 <__udivmoddi4+0xde>
 80004d4:	3e01      	subs	r6, #1
 80004d6:	1924      	adds	r4, r4, r4
 80004d8:	416d      	adcs	r5, r5
 80004da:	2e00      	cmp	r6, #0
 80004dc:	d1f8      	bne.n	80004d0 <__udivmoddi4+0xfc>
 80004de:	9800      	ldr	r0, [sp, #0]
 80004e0:	9901      	ldr	r1, [sp, #4]
 80004e2:	465b      	mov	r3, fp
 80004e4:	1900      	adds	r0, r0, r4
 80004e6:	4169      	adcs	r1, r5
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	db24      	blt.n	8000536 <__udivmoddi4+0x162>
 80004ec:	002b      	movs	r3, r5
 80004ee:	465a      	mov	r2, fp
 80004f0:	4644      	mov	r4, r8
 80004f2:	40d3      	lsrs	r3, r2
 80004f4:	002a      	movs	r2, r5
 80004f6:	40e2      	lsrs	r2, r4
 80004f8:	001c      	movs	r4, r3
 80004fa:	465b      	mov	r3, fp
 80004fc:	0015      	movs	r5, r2
 80004fe:	2b00      	cmp	r3, #0
 8000500:	db2a      	blt.n	8000558 <__udivmoddi4+0x184>
 8000502:	0026      	movs	r6, r4
 8000504:	409e      	lsls	r6, r3
 8000506:	0033      	movs	r3, r6
 8000508:	0026      	movs	r6, r4
 800050a:	4647      	mov	r7, r8
 800050c:	40be      	lsls	r6, r7
 800050e:	0032      	movs	r2, r6
 8000510:	1a80      	subs	r0, r0, r2
 8000512:	4199      	sbcs	r1, r3
 8000514:	9000      	str	r0, [sp, #0]
 8000516:	9101      	str	r1, [sp, #4]
 8000518:	e79e      	b.n	8000458 <__udivmoddi4+0x84>
 800051a:	42a3      	cmp	r3, r4
 800051c:	d8bc      	bhi.n	8000498 <__udivmoddi4+0xc4>
 800051e:	e782      	b.n	8000426 <__udivmoddi4+0x52>
 8000520:	4642      	mov	r2, r8
 8000522:	2320      	movs	r3, #32
 8000524:	2100      	movs	r1, #0
 8000526:	1a9b      	subs	r3, r3, r2
 8000528:	2200      	movs	r2, #0
 800052a:	9100      	str	r1, [sp, #0]
 800052c:	9201      	str	r2, [sp, #4]
 800052e:	2201      	movs	r2, #1
 8000530:	40da      	lsrs	r2, r3
 8000532:	9201      	str	r2, [sp, #4]
 8000534:	e785      	b.n	8000442 <__udivmoddi4+0x6e>
 8000536:	4642      	mov	r2, r8
 8000538:	2320      	movs	r3, #32
 800053a:	1a9b      	subs	r3, r3, r2
 800053c:	002a      	movs	r2, r5
 800053e:	4646      	mov	r6, r8
 8000540:	409a      	lsls	r2, r3
 8000542:	0023      	movs	r3, r4
 8000544:	40f3      	lsrs	r3, r6
 8000546:	4644      	mov	r4, r8
 8000548:	4313      	orrs	r3, r2
 800054a:	002a      	movs	r2, r5
 800054c:	40e2      	lsrs	r2, r4
 800054e:	001c      	movs	r4, r3
 8000550:	465b      	mov	r3, fp
 8000552:	0015      	movs	r5, r2
 8000554:	2b00      	cmp	r3, #0
 8000556:	dad4      	bge.n	8000502 <__udivmoddi4+0x12e>
 8000558:	4642      	mov	r2, r8
 800055a:	002f      	movs	r7, r5
 800055c:	2320      	movs	r3, #32
 800055e:	0026      	movs	r6, r4
 8000560:	4097      	lsls	r7, r2
 8000562:	1a9b      	subs	r3, r3, r2
 8000564:	40de      	lsrs	r6, r3
 8000566:	003b      	movs	r3, r7
 8000568:	4333      	orrs	r3, r6
 800056a:	e7cd      	b.n	8000508 <__udivmoddi4+0x134>

0800056c <__aeabi_fadd>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0243      	lsls	r3, r0, #9
 8000574:	0a5a      	lsrs	r2, r3, #9
 8000576:	024e      	lsls	r6, r1, #9
 8000578:	0045      	lsls	r5, r0, #1
 800057a:	0fc4      	lsrs	r4, r0, #31
 800057c:	0048      	lsls	r0, r1, #1
 800057e:	4691      	mov	r9, r2
 8000580:	0e2d      	lsrs	r5, r5, #24
 8000582:	0a72      	lsrs	r2, r6, #9
 8000584:	0e00      	lsrs	r0, r0, #24
 8000586:	4694      	mov	ip, r2
 8000588:	b580      	push	{r7, lr}
 800058a:	099b      	lsrs	r3, r3, #6
 800058c:	0fc9      	lsrs	r1, r1, #31
 800058e:	09b6      	lsrs	r6, r6, #6
 8000590:	1a2a      	subs	r2, r5, r0
 8000592:	428c      	cmp	r4, r1
 8000594:	d021      	beq.n	80005da <__aeabi_fadd+0x6e>
 8000596:	2a00      	cmp	r2, #0
 8000598:	dd0d      	ble.n	80005b6 <__aeabi_fadd+0x4a>
 800059a:	2800      	cmp	r0, #0
 800059c:	d12d      	bne.n	80005fa <__aeabi_fadd+0x8e>
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d100      	bne.n	80005a4 <__aeabi_fadd+0x38>
 80005a2:	e08d      	b.n	80006c0 <__aeabi_fadd+0x154>
 80005a4:	1e51      	subs	r1, r2, #1
 80005a6:	2a01      	cmp	r2, #1
 80005a8:	d100      	bne.n	80005ac <__aeabi_fadd+0x40>
 80005aa:	e11d      	b.n	80007e8 <__aeabi_fadd+0x27c>
 80005ac:	2aff      	cmp	r2, #255	@ 0xff
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fadd+0x46>
 80005b0:	e0ab      	b.n	800070a <__aeabi_fadd+0x19e>
 80005b2:	000a      	movs	r2, r1
 80005b4:	e027      	b.n	8000606 <__aeabi_fadd+0x9a>
 80005b6:	2a00      	cmp	r2, #0
 80005b8:	d04d      	beq.n	8000656 <__aeabi_fadd+0xea>
 80005ba:	1b42      	subs	r2, r0, r5
 80005bc:	2d00      	cmp	r5, #0
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0x56>
 80005c0:	e0cc      	b.n	800075c <__aeabi_fadd+0x1f0>
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fadd+0x5c>
 80005c6:	e079      	b.n	80006bc <__aeabi_fadd+0x150>
 80005c8:	1e54      	subs	r4, r2, #1
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	d100      	bne.n	80005d0 <__aeabi_fadd+0x64>
 80005ce:	e128      	b.n	8000822 <__aeabi_fadd+0x2b6>
 80005d0:	2aff      	cmp	r2, #255	@ 0xff
 80005d2:	d100      	bne.n	80005d6 <__aeabi_fadd+0x6a>
 80005d4:	e097      	b.n	8000706 <__aeabi_fadd+0x19a>
 80005d6:	0022      	movs	r2, r4
 80005d8:	e0c5      	b.n	8000766 <__aeabi_fadd+0x1fa>
 80005da:	2a00      	cmp	r2, #0
 80005dc:	dc00      	bgt.n	80005e0 <__aeabi_fadd+0x74>
 80005de:	e096      	b.n	800070e <__aeabi_fadd+0x1a2>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d04f      	beq.n	8000684 <__aeabi_fadd+0x118>
 80005e4:	2dff      	cmp	r5, #255	@ 0xff
 80005e6:	d100      	bne.n	80005ea <__aeabi_fadd+0x7e>
 80005e8:	e08f      	b.n	800070a <__aeabi_fadd+0x19e>
 80005ea:	2180      	movs	r1, #128	@ 0x80
 80005ec:	04c9      	lsls	r1, r1, #19
 80005ee:	430e      	orrs	r6, r1
 80005f0:	2a1b      	cmp	r2, #27
 80005f2:	dd51      	ble.n	8000698 <__aeabi_fadd+0x12c>
 80005f4:	002a      	movs	r2, r5
 80005f6:	3301      	adds	r3, #1
 80005f8:	e018      	b.n	800062c <__aeabi_fadd+0xc0>
 80005fa:	2dff      	cmp	r5, #255	@ 0xff
 80005fc:	d100      	bne.n	8000600 <__aeabi_fadd+0x94>
 80005fe:	e084      	b.n	800070a <__aeabi_fadd+0x19e>
 8000600:	2180      	movs	r1, #128	@ 0x80
 8000602:	04c9      	lsls	r1, r1, #19
 8000604:	430e      	orrs	r6, r1
 8000606:	2101      	movs	r1, #1
 8000608:	2a1b      	cmp	r2, #27
 800060a:	dc08      	bgt.n	800061e <__aeabi_fadd+0xb2>
 800060c:	0031      	movs	r1, r6
 800060e:	2020      	movs	r0, #32
 8000610:	40d1      	lsrs	r1, r2
 8000612:	1a82      	subs	r2, r0, r2
 8000614:	4096      	lsls	r6, r2
 8000616:	0032      	movs	r2, r6
 8000618:	1e50      	subs	r0, r2, #1
 800061a:	4182      	sbcs	r2, r0
 800061c:	4311      	orrs	r1, r2
 800061e:	1a5b      	subs	r3, r3, r1
 8000620:	015a      	lsls	r2, r3, #5
 8000622:	d459      	bmi.n	80006d8 <__aeabi_fadd+0x16c>
 8000624:	2107      	movs	r1, #7
 8000626:	002a      	movs	r2, r5
 8000628:	4019      	ands	r1, r3
 800062a:	d049      	beq.n	80006c0 <__aeabi_fadd+0x154>
 800062c:	210f      	movs	r1, #15
 800062e:	4019      	ands	r1, r3
 8000630:	2904      	cmp	r1, #4
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0xca>
 8000634:	3304      	adds	r3, #4
 8000636:	0159      	lsls	r1, r3, #5
 8000638:	d542      	bpl.n	80006c0 <__aeabi_fadd+0x154>
 800063a:	1c50      	adds	r0, r2, #1
 800063c:	2afe      	cmp	r2, #254	@ 0xfe
 800063e:	d03a      	beq.n	80006b6 <__aeabi_fadd+0x14a>
 8000640:	019b      	lsls	r3, r3, #6
 8000642:	b2c0      	uxtb	r0, r0
 8000644:	0a5b      	lsrs	r3, r3, #9
 8000646:	05c0      	lsls	r0, r0, #23
 8000648:	4318      	orrs	r0, r3
 800064a:	07e4      	lsls	r4, r4, #31
 800064c:	4320      	orrs	r0, r4
 800064e:	bcc0      	pop	{r6, r7}
 8000650:	46b9      	mov	r9, r7
 8000652:	46b0      	mov	r8, r6
 8000654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000656:	20fe      	movs	r0, #254	@ 0xfe
 8000658:	4680      	mov	r8, r0
 800065a:	1c6f      	adds	r7, r5, #1
 800065c:	0038      	movs	r0, r7
 800065e:	4647      	mov	r7, r8
 8000660:	4207      	tst	r7, r0
 8000662:	d000      	beq.n	8000666 <__aeabi_fadd+0xfa>
 8000664:	e08e      	b.n	8000784 <__aeabi_fadd+0x218>
 8000666:	2d00      	cmp	r5, #0
 8000668:	d000      	beq.n	800066c <__aeabi_fadd+0x100>
 800066a:	e0b4      	b.n	80007d6 <__aeabi_fadd+0x26a>
 800066c:	2b00      	cmp	r3, #0
 800066e:	d100      	bne.n	8000672 <__aeabi_fadd+0x106>
 8000670:	e0db      	b.n	800082a <__aeabi_fadd+0x2be>
 8000672:	2e00      	cmp	r6, #0
 8000674:	d06c      	beq.n	8000750 <__aeabi_fadd+0x1e4>
 8000676:	1b98      	subs	r0, r3, r6
 8000678:	0145      	lsls	r5, r0, #5
 800067a:	d400      	bmi.n	800067e <__aeabi_fadd+0x112>
 800067c:	e0f7      	b.n	800086e <__aeabi_fadd+0x302>
 800067e:	000c      	movs	r4, r1
 8000680:	1af3      	subs	r3, r6, r3
 8000682:	e03d      	b.n	8000700 <__aeabi_fadd+0x194>
 8000684:	2e00      	cmp	r6, #0
 8000686:	d01b      	beq.n	80006c0 <__aeabi_fadd+0x154>
 8000688:	1e51      	subs	r1, r2, #1
 800068a:	2a01      	cmp	r2, #1
 800068c:	d100      	bne.n	8000690 <__aeabi_fadd+0x124>
 800068e:	e082      	b.n	8000796 <__aeabi_fadd+0x22a>
 8000690:	2aff      	cmp	r2, #255	@ 0xff
 8000692:	d03a      	beq.n	800070a <__aeabi_fadd+0x19e>
 8000694:	000a      	movs	r2, r1
 8000696:	e7ab      	b.n	80005f0 <__aeabi_fadd+0x84>
 8000698:	0031      	movs	r1, r6
 800069a:	2020      	movs	r0, #32
 800069c:	40d1      	lsrs	r1, r2
 800069e:	1a82      	subs	r2, r0, r2
 80006a0:	4096      	lsls	r6, r2
 80006a2:	0032      	movs	r2, r6
 80006a4:	1e50      	subs	r0, r2, #1
 80006a6:	4182      	sbcs	r2, r0
 80006a8:	430a      	orrs	r2, r1
 80006aa:	189b      	adds	r3, r3, r2
 80006ac:	015a      	lsls	r2, r3, #5
 80006ae:	d5b9      	bpl.n	8000624 <__aeabi_fadd+0xb8>
 80006b0:	1c6a      	adds	r2, r5, #1
 80006b2:	2dfe      	cmp	r5, #254	@ 0xfe
 80006b4:	d175      	bne.n	80007a2 <__aeabi_fadd+0x236>
 80006b6:	20ff      	movs	r0, #255	@ 0xff
 80006b8:	2300      	movs	r3, #0
 80006ba:	e7c4      	b.n	8000646 <__aeabi_fadd+0xda>
 80006bc:	000c      	movs	r4, r1
 80006be:	0033      	movs	r3, r6
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	2aff      	cmp	r2, #255	@ 0xff
 80006c4:	d146      	bne.n	8000754 <__aeabi_fadd+0x1e8>
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0f5      	beq.n	80006b6 <__aeabi_fadd+0x14a>
 80006ca:	2280      	movs	r2, #128	@ 0x80
 80006cc:	03d2      	lsls	r2, r2, #15
 80006ce:	4313      	orrs	r3, r2
 80006d0:	025b      	lsls	r3, r3, #9
 80006d2:	20ff      	movs	r0, #255	@ 0xff
 80006d4:	0a5b      	lsrs	r3, r3, #9
 80006d6:	e7b6      	b.n	8000646 <__aeabi_fadd+0xda>
 80006d8:	019f      	lsls	r7, r3, #6
 80006da:	09bf      	lsrs	r7, r7, #6
 80006dc:	0038      	movs	r0, r7
 80006de:	f002 fdcd 	bl	800327c <__clzsi2>
 80006e2:	3805      	subs	r0, #5
 80006e4:	4087      	lsls	r7, r0
 80006e6:	4285      	cmp	r5, r0
 80006e8:	dc24      	bgt.n	8000734 <__aeabi_fadd+0x1c8>
 80006ea:	003b      	movs	r3, r7
 80006ec:	2120      	movs	r1, #32
 80006ee:	1b42      	subs	r2, r0, r5
 80006f0:	3201      	adds	r2, #1
 80006f2:	40d3      	lsrs	r3, r2
 80006f4:	1a8a      	subs	r2, r1, r2
 80006f6:	4097      	lsls	r7, r2
 80006f8:	1e7a      	subs	r2, r7, #1
 80006fa:	4197      	sbcs	r7, r2
 80006fc:	2200      	movs	r2, #0
 80006fe:	433b      	orrs	r3, r7
 8000700:	0759      	lsls	r1, r3, #29
 8000702:	d193      	bne.n	800062c <__aeabi_fadd+0xc0>
 8000704:	e797      	b.n	8000636 <__aeabi_fadd+0xca>
 8000706:	000c      	movs	r4, r1
 8000708:	0033      	movs	r3, r6
 800070a:	08db      	lsrs	r3, r3, #3
 800070c:	e7db      	b.n	80006c6 <__aeabi_fadd+0x15a>
 800070e:	2a00      	cmp	r2, #0
 8000710:	d014      	beq.n	800073c <__aeabi_fadd+0x1d0>
 8000712:	1b42      	subs	r2, r0, r5
 8000714:	2d00      	cmp	r5, #0
 8000716:	d14b      	bne.n	80007b0 <__aeabi_fadd+0x244>
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0d0      	beq.n	80006be <__aeabi_fadd+0x152>
 800071c:	1e51      	subs	r1, r2, #1
 800071e:	2a01      	cmp	r2, #1
 8000720:	d100      	bne.n	8000724 <__aeabi_fadd+0x1b8>
 8000722:	e09e      	b.n	8000862 <__aeabi_fadd+0x2f6>
 8000724:	2aff      	cmp	r2, #255	@ 0xff
 8000726:	d0ef      	beq.n	8000708 <__aeabi_fadd+0x19c>
 8000728:	000a      	movs	r2, r1
 800072a:	2a1b      	cmp	r2, #27
 800072c:	dd5f      	ble.n	80007ee <__aeabi_fadd+0x282>
 800072e:	0002      	movs	r2, r0
 8000730:	1c73      	adds	r3, r6, #1
 8000732:	e77b      	b.n	800062c <__aeabi_fadd+0xc0>
 8000734:	4b50      	ldr	r3, [pc, #320]	@ (8000878 <__aeabi_fadd+0x30c>)
 8000736:	1a2a      	subs	r2, r5, r0
 8000738:	403b      	ands	r3, r7
 800073a:	e7e1      	b.n	8000700 <__aeabi_fadd+0x194>
 800073c:	21fe      	movs	r1, #254	@ 0xfe
 800073e:	1c6a      	adds	r2, r5, #1
 8000740:	4211      	tst	r1, r2
 8000742:	d13b      	bne.n	80007bc <__aeabi_fadd+0x250>
 8000744:	2d00      	cmp	r5, #0
 8000746:	d15d      	bne.n	8000804 <__aeabi_fadd+0x298>
 8000748:	2b00      	cmp	r3, #0
 800074a:	d07f      	beq.n	800084c <__aeabi_fadd+0x2e0>
 800074c:	2e00      	cmp	r6, #0
 800074e:	d17f      	bne.n	8000850 <__aeabi_fadd+0x2e4>
 8000750:	2200      	movs	r2, #0
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	025b      	lsls	r3, r3, #9
 8000756:	0a5b      	lsrs	r3, r3, #9
 8000758:	b2d0      	uxtb	r0, r2
 800075a:	e774      	b.n	8000646 <__aeabi_fadd+0xda>
 800075c:	28ff      	cmp	r0, #255	@ 0xff
 800075e:	d0d2      	beq.n	8000706 <__aeabi_fadd+0x19a>
 8000760:	2480      	movs	r4, #128	@ 0x80
 8000762:	04e4      	lsls	r4, r4, #19
 8000764:	4323      	orrs	r3, r4
 8000766:	2401      	movs	r4, #1
 8000768:	2a1b      	cmp	r2, #27
 800076a:	dc07      	bgt.n	800077c <__aeabi_fadd+0x210>
 800076c:	001c      	movs	r4, r3
 800076e:	2520      	movs	r5, #32
 8000770:	40d4      	lsrs	r4, r2
 8000772:	1aaa      	subs	r2, r5, r2
 8000774:	4093      	lsls	r3, r2
 8000776:	1e5a      	subs	r2, r3, #1
 8000778:	4193      	sbcs	r3, r2
 800077a:	431c      	orrs	r4, r3
 800077c:	1b33      	subs	r3, r6, r4
 800077e:	0005      	movs	r5, r0
 8000780:	000c      	movs	r4, r1
 8000782:	e74d      	b.n	8000620 <__aeabi_fadd+0xb4>
 8000784:	1b9f      	subs	r7, r3, r6
 8000786:	017a      	lsls	r2, r7, #5
 8000788:	d422      	bmi.n	80007d0 <__aeabi_fadd+0x264>
 800078a:	2f00      	cmp	r7, #0
 800078c:	d1a6      	bne.n	80006dc <__aeabi_fadd+0x170>
 800078e:	2400      	movs	r4, #0
 8000790:	2000      	movs	r0, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e757      	b.n	8000646 <__aeabi_fadd+0xda>
 8000796:	199b      	adds	r3, r3, r6
 8000798:	2501      	movs	r5, #1
 800079a:	3201      	adds	r2, #1
 800079c:	0159      	lsls	r1, r3, #5
 800079e:	d400      	bmi.n	80007a2 <__aeabi_fadd+0x236>
 80007a0:	e740      	b.n	8000624 <__aeabi_fadd+0xb8>
 80007a2:	2101      	movs	r1, #1
 80007a4:	4835      	ldr	r0, [pc, #212]	@ (800087c <__aeabi_fadd+0x310>)
 80007a6:	4019      	ands	r1, r3
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	4003      	ands	r3, r0
 80007ac:	430b      	orrs	r3, r1
 80007ae:	e7a7      	b.n	8000700 <__aeabi_fadd+0x194>
 80007b0:	28ff      	cmp	r0, #255	@ 0xff
 80007b2:	d0a9      	beq.n	8000708 <__aeabi_fadd+0x19c>
 80007b4:	2180      	movs	r1, #128	@ 0x80
 80007b6:	04c9      	lsls	r1, r1, #19
 80007b8:	430b      	orrs	r3, r1
 80007ba:	e7b6      	b.n	800072a <__aeabi_fadd+0x1be>
 80007bc:	2aff      	cmp	r2, #255	@ 0xff
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0x256>
 80007c0:	e779      	b.n	80006b6 <__aeabi_fadd+0x14a>
 80007c2:	199b      	adds	r3, r3, r6
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	0759      	lsls	r1, r3, #29
 80007c8:	d000      	beq.n	80007cc <__aeabi_fadd+0x260>
 80007ca:	e72f      	b.n	800062c <__aeabi_fadd+0xc0>
 80007cc:	08db      	lsrs	r3, r3, #3
 80007ce:	e7c1      	b.n	8000754 <__aeabi_fadd+0x1e8>
 80007d0:	000c      	movs	r4, r1
 80007d2:	1af7      	subs	r7, r6, r3
 80007d4:	e782      	b.n	80006dc <__aeabi_fadd+0x170>
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d12c      	bne.n	8000834 <__aeabi_fadd+0x2c8>
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d193      	bne.n	8000706 <__aeabi_fadd+0x19a>
 80007de:	2380      	movs	r3, #128	@ 0x80
 80007e0:	2400      	movs	r4, #0
 80007e2:	20ff      	movs	r0, #255	@ 0xff
 80007e4:	03db      	lsls	r3, r3, #15
 80007e6:	e72e      	b.n	8000646 <__aeabi_fadd+0xda>
 80007e8:	2501      	movs	r5, #1
 80007ea:	1b9b      	subs	r3, r3, r6
 80007ec:	e718      	b.n	8000620 <__aeabi_fadd+0xb4>
 80007ee:	0019      	movs	r1, r3
 80007f0:	2520      	movs	r5, #32
 80007f2:	40d1      	lsrs	r1, r2
 80007f4:	1aaa      	subs	r2, r5, r2
 80007f6:	4093      	lsls	r3, r2
 80007f8:	1e5a      	subs	r2, r3, #1
 80007fa:	4193      	sbcs	r3, r2
 80007fc:	430b      	orrs	r3, r1
 80007fe:	0005      	movs	r5, r0
 8000800:	199b      	adds	r3, r3, r6
 8000802:	e753      	b.n	80006ac <__aeabi_fadd+0x140>
 8000804:	2b00      	cmp	r3, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fadd+0x29e>
 8000808:	e77e      	b.n	8000708 <__aeabi_fadd+0x19c>
 800080a:	2e00      	cmp	r6, #0
 800080c:	d100      	bne.n	8000810 <__aeabi_fadd+0x2a4>
 800080e:	e77c      	b.n	800070a <__aeabi_fadd+0x19e>
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	03d2      	lsls	r2, r2, #15
 8000814:	4591      	cmp	r9, r2
 8000816:	d302      	bcc.n	800081e <__aeabi_fadd+0x2b2>
 8000818:	4594      	cmp	ip, r2
 800081a:	d200      	bcs.n	800081e <__aeabi_fadd+0x2b2>
 800081c:	0033      	movs	r3, r6
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	e753      	b.n	80006ca <__aeabi_fadd+0x15e>
 8000822:	000c      	movs	r4, r1
 8000824:	1af3      	subs	r3, r6, r3
 8000826:	3501      	adds	r5, #1
 8000828:	e6fa      	b.n	8000620 <__aeabi_fadd+0xb4>
 800082a:	2e00      	cmp	r6, #0
 800082c:	d0af      	beq.n	800078e <__aeabi_fadd+0x222>
 800082e:	000c      	movs	r4, r1
 8000830:	0033      	movs	r3, r6
 8000832:	e78d      	b.n	8000750 <__aeabi_fadd+0x1e4>
 8000834:	2e00      	cmp	r6, #0
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x2ce>
 8000838:	e767      	b.n	800070a <__aeabi_fadd+0x19e>
 800083a:	2280      	movs	r2, #128	@ 0x80
 800083c:	03d2      	lsls	r2, r2, #15
 800083e:	4591      	cmp	r9, r2
 8000840:	d3ed      	bcc.n	800081e <__aeabi_fadd+0x2b2>
 8000842:	4594      	cmp	ip, r2
 8000844:	d2eb      	bcs.n	800081e <__aeabi_fadd+0x2b2>
 8000846:	000c      	movs	r4, r1
 8000848:	0033      	movs	r3, r6
 800084a:	e7e8      	b.n	800081e <__aeabi_fadd+0x2b2>
 800084c:	0033      	movs	r3, r6
 800084e:	e77f      	b.n	8000750 <__aeabi_fadd+0x1e4>
 8000850:	199b      	adds	r3, r3, r6
 8000852:	2200      	movs	r2, #0
 8000854:	0159      	lsls	r1, r3, #5
 8000856:	d5b9      	bpl.n	80007cc <__aeabi_fadd+0x260>
 8000858:	4a07      	ldr	r2, [pc, #28]	@ (8000878 <__aeabi_fadd+0x30c>)
 800085a:	4013      	ands	r3, r2
 800085c:	08db      	lsrs	r3, r3, #3
 800085e:	2201      	movs	r2, #1
 8000860:	e778      	b.n	8000754 <__aeabi_fadd+0x1e8>
 8000862:	199b      	adds	r3, r3, r6
 8000864:	3201      	adds	r2, #1
 8000866:	3501      	adds	r5, #1
 8000868:	0159      	lsls	r1, r3, #5
 800086a:	d49a      	bmi.n	80007a2 <__aeabi_fadd+0x236>
 800086c:	e6da      	b.n	8000624 <__aeabi_fadd+0xb8>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d08d      	beq.n	800078e <__aeabi_fadd+0x222>
 8000872:	08db      	lsrs	r3, r3, #3
 8000874:	e76e      	b.n	8000754 <__aeabi_fadd+0x1e8>
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	fbffffff 	.word	0xfbffffff
 800087c:	7dffffff 	.word	0x7dffffff

08000880 <__aeabi_fdiv>:
 8000880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000882:	464f      	mov	r7, r9
 8000884:	4646      	mov	r6, r8
 8000886:	46d6      	mov	lr, sl
 8000888:	0244      	lsls	r4, r0, #9
 800088a:	b5c0      	push	{r6, r7, lr}
 800088c:	0047      	lsls	r7, r0, #1
 800088e:	1c0e      	adds	r6, r1, #0
 8000890:	0a64      	lsrs	r4, r4, #9
 8000892:	0e3f      	lsrs	r7, r7, #24
 8000894:	0fc5      	lsrs	r5, r0, #31
 8000896:	2f00      	cmp	r7, #0
 8000898:	d03c      	beq.n	8000914 <__aeabi_fdiv+0x94>
 800089a:	2fff      	cmp	r7, #255	@ 0xff
 800089c:	d042      	beq.n	8000924 <__aeabi_fdiv+0xa4>
 800089e:	2300      	movs	r3, #0
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	4699      	mov	r9, r3
 80008a4:	469a      	mov	sl, r3
 80008a6:	00e4      	lsls	r4, r4, #3
 80008a8:	04d2      	lsls	r2, r2, #19
 80008aa:	4314      	orrs	r4, r2
 80008ac:	3f7f      	subs	r7, #127	@ 0x7f
 80008ae:	0273      	lsls	r3, r6, #9
 80008b0:	0a5b      	lsrs	r3, r3, #9
 80008b2:	4698      	mov	r8, r3
 80008b4:	0073      	lsls	r3, r6, #1
 80008b6:	0e1b      	lsrs	r3, r3, #24
 80008b8:	0ff6      	lsrs	r6, r6, #31
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d01b      	beq.n	80008f6 <__aeabi_fdiv+0x76>
 80008be:	2bff      	cmp	r3, #255	@ 0xff
 80008c0:	d013      	beq.n	80008ea <__aeabi_fdiv+0x6a>
 80008c2:	4642      	mov	r2, r8
 80008c4:	2180      	movs	r1, #128	@ 0x80
 80008c6:	00d2      	lsls	r2, r2, #3
 80008c8:	04c9      	lsls	r1, r1, #19
 80008ca:	4311      	orrs	r1, r2
 80008cc:	4688      	mov	r8, r1
 80008ce:	2000      	movs	r0, #0
 80008d0:	3b7f      	subs	r3, #127	@ 0x7f
 80008d2:	0029      	movs	r1, r5
 80008d4:	1aff      	subs	r7, r7, r3
 80008d6:	464b      	mov	r3, r9
 80008d8:	4071      	eors	r1, r6
 80008da:	b2c9      	uxtb	r1, r1
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d900      	bls.n	80008e2 <__aeabi_fdiv+0x62>
 80008e0:	e0b5      	b.n	8000a4e <__aeabi_fdiv+0x1ce>
 80008e2:	4a74      	ldr	r2, [pc, #464]	@ (8000ab4 <__aeabi_fdiv+0x234>)
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	58d3      	ldr	r3, [r2, r3]
 80008e8:	469f      	mov	pc, r3
 80008ea:	4643      	mov	r3, r8
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d13f      	bne.n	8000970 <__aeabi_fdiv+0xf0>
 80008f0:	3fff      	subs	r7, #255	@ 0xff
 80008f2:	3302      	adds	r3, #2
 80008f4:	e003      	b.n	80008fe <__aeabi_fdiv+0x7e>
 80008f6:	4643      	mov	r3, r8
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d12d      	bne.n	8000958 <__aeabi_fdiv+0xd8>
 80008fc:	2301      	movs	r3, #1
 80008fe:	0029      	movs	r1, r5
 8000900:	464a      	mov	r2, r9
 8000902:	4071      	eors	r1, r6
 8000904:	b2c9      	uxtb	r1, r1
 8000906:	431a      	orrs	r2, r3
 8000908:	2a0e      	cmp	r2, #14
 800090a:	d838      	bhi.n	800097e <__aeabi_fdiv+0xfe>
 800090c:	486a      	ldr	r0, [pc, #424]	@ (8000ab8 <__aeabi_fdiv+0x238>)
 800090e:	0092      	lsls	r2, r2, #2
 8000910:	5882      	ldr	r2, [r0, r2]
 8000912:	4697      	mov	pc, r2
 8000914:	2c00      	cmp	r4, #0
 8000916:	d113      	bne.n	8000940 <__aeabi_fdiv+0xc0>
 8000918:	2304      	movs	r3, #4
 800091a:	4699      	mov	r9, r3
 800091c:	3b03      	subs	r3, #3
 800091e:	2700      	movs	r7, #0
 8000920:	469a      	mov	sl, r3
 8000922:	e7c4      	b.n	80008ae <__aeabi_fdiv+0x2e>
 8000924:	2c00      	cmp	r4, #0
 8000926:	d105      	bne.n	8000934 <__aeabi_fdiv+0xb4>
 8000928:	2308      	movs	r3, #8
 800092a:	4699      	mov	r9, r3
 800092c:	3b06      	subs	r3, #6
 800092e:	27ff      	movs	r7, #255	@ 0xff
 8000930:	469a      	mov	sl, r3
 8000932:	e7bc      	b.n	80008ae <__aeabi_fdiv+0x2e>
 8000934:	230c      	movs	r3, #12
 8000936:	4699      	mov	r9, r3
 8000938:	3b09      	subs	r3, #9
 800093a:	27ff      	movs	r7, #255	@ 0xff
 800093c:	469a      	mov	sl, r3
 800093e:	e7b6      	b.n	80008ae <__aeabi_fdiv+0x2e>
 8000940:	0020      	movs	r0, r4
 8000942:	f002 fc9b 	bl	800327c <__clzsi2>
 8000946:	2776      	movs	r7, #118	@ 0x76
 8000948:	1f43      	subs	r3, r0, #5
 800094a:	409c      	lsls	r4, r3
 800094c:	2300      	movs	r3, #0
 800094e:	427f      	negs	r7, r7
 8000950:	4699      	mov	r9, r3
 8000952:	469a      	mov	sl, r3
 8000954:	1a3f      	subs	r7, r7, r0
 8000956:	e7aa      	b.n	80008ae <__aeabi_fdiv+0x2e>
 8000958:	4640      	mov	r0, r8
 800095a:	f002 fc8f 	bl	800327c <__clzsi2>
 800095e:	4642      	mov	r2, r8
 8000960:	1f43      	subs	r3, r0, #5
 8000962:	409a      	lsls	r2, r3
 8000964:	2376      	movs	r3, #118	@ 0x76
 8000966:	425b      	negs	r3, r3
 8000968:	1a1b      	subs	r3, r3, r0
 800096a:	4690      	mov	r8, r2
 800096c:	2000      	movs	r0, #0
 800096e:	e7b0      	b.n	80008d2 <__aeabi_fdiv+0x52>
 8000970:	2303      	movs	r3, #3
 8000972:	464a      	mov	r2, r9
 8000974:	431a      	orrs	r2, r3
 8000976:	4691      	mov	r9, r2
 8000978:	2003      	movs	r0, #3
 800097a:	33fc      	adds	r3, #252	@ 0xfc
 800097c:	e7a9      	b.n	80008d2 <__aeabi_fdiv+0x52>
 800097e:	000d      	movs	r5, r1
 8000980:	20ff      	movs	r0, #255	@ 0xff
 8000982:	2200      	movs	r2, #0
 8000984:	05c0      	lsls	r0, r0, #23
 8000986:	07ed      	lsls	r5, r5, #31
 8000988:	4310      	orrs	r0, r2
 800098a:	4328      	orrs	r0, r5
 800098c:	bce0      	pop	{r5, r6, r7}
 800098e:	46ba      	mov	sl, r7
 8000990:	46b1      	mov	r9, r6
 8000992:	46a8      	mov	r8, r5
 8000994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000996:	000d      	movs	r5, r1
 8000998:	2000      	movs	r0, #0
 800099a:	2200      	movs	r2, #0
 800099c:	e7f2      	b.n	8000984 <__aeabi_fdiv+0x104>
 800099e:	4653      	mov	r3, sl
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d0ed      	beq.n	8000980 <__aeabi_fdiv+0x100>
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	d033      	beq.n	8000a10 <__aeabi_fdiv+0x190>
 80009a8:	46a0      	mov	r8, r4
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d105      	bne.n	80009ba <__aeabi_fdiv+0x13a>
 80009ae:	2000      	movs	r0, #0
 80009b0:	2200      	movs	r2, #0
 80009b2:	e7e7      	b.n	8000984 <__aeabi_fdiv+0x104>
 80009b4:	0035      	movs	r5, r6
 80009b6:	2803      	cmp	r0, #3
 80009b8:	d07a      	beq.n	8000ab0 <__aeabi_fdiv+0x230>
 80009ba:	003b      	movs	r3, r7
 80009bc:	337f      	adds	r3, #127	@ 0x7f
 80009be:	2b00      	cmp	r3, #0
 80009c0:	dd2d      	ble.n	8000a1e <__aeabi_fdiv+0x19e>
 80009c2:	4642      	mov	r2, r8
 80009c4:	0752      	lsls	r2, r2, #29
 80009c6:	d007      	beq.n	80009d8 <__aeabi_fdiv+0x158>
 80009c8:	220f      	movs	r2, #15
 80009ca:	4641      	mov	r1, r8
 80009cc:	400a      	ands	r2, r1
 80009ce:	2a04      	cmp	r2, #4
 80009d0:	d002      	beq.n	80009d8 <__aeabi_fdiv+0x158>
 80009d2:	2204      	movs	r2, #4
 80009d4:	4694      	mov	ip, r2
 80009d6:	44e0      	add	r8, ip
 80009d8:	4642      	mov	r2, r8
 80009da:	0112      	lsls	r2, r2, #4
 80009dc:	d505      	bpl.n	80009ea <__aeabi_fdiv+0x16a>
 80009de:	4642      	mov	r2, r8
 80009e0:	4b36      	ldr	r3, [pc, #216]	@ (8000abc <__aeabi_fdiv+0x23c>)
 80009e2:	401a      	ands	r2, r3
 80009e4:	003b      	movs	r3, r7
 80009e6:	4690      	mov	r8, r2
 80009e8:	3380      	adds	r3, #128	@ 0x80
 80009ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80009ec:	dcc8      	bgt.n	8000980 <__aeabi_fdiv+0x100>
 80009ee:	4642      	mov	r2, r8
 80009f0:	0192      	lsls	r2, r2, #6
 80009f2:	0a52      	lsrs	r2, r2, #9
 80009f4:	b2d8      	uxtb	r0, r3
 80009f6:	e7c5      	b.n	8000984 <__aeabi_fdiv+0x104>
 80009f8:	2280      	movs	r2, #128	@ 0x80
 80009fa:	2500      	movs	r5, #0
 80009fc:	20ff      	movs	r0, #255	@ 0xff
 80009fe:	03d2      	lsls	r2, r2, #15
 8000a00:	e7c0      	b.n	8000984 <__aeabi_fdiv+0x104>
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	03d2      	lsls	r2, r2, #15
 8000a06:	4214      	tst	r4, r2
 8000a08:	d002      	beq.n	8000a10 <__aeabi_fdiv+0x190>
 8000a0a:	4643      	mov	r3, r8
 8000a0c:	4213      	tst	r3, r2
 8000a0e:	d049      	beq.n	8000aa4 <__aeabi_fdiv+0x224>
 8000a10:	2280      	movs	r2, #128	@ 0x80
 8000a12:	03d2      	lsls	r2, r2, #15
 8000a14:	4322      	orrs	r2, r4
 8000a16:	0252      	lsls	r2, r2, #9
 8000a18:	20ff      	movs	r0, #255	@ 0xff
 8000a1a:	0a52      	lsrs	r2, r2, #9
 8000a1c:	e7b2      	b.n	8000984 <__aeabi_fdiv+0x104>
 8000a1e:	2201      	movs	r2, #1
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	2b1b      	cmp	r3, #27
 8000a24:	dcc3      	bgt.n	80009ae <__aeabi_fdiv+0x12e>
 8000a26:	4642      	mov	r2, r8
 8000a28:	40da      	lsrs	r2, r3
 8000a2a:	4643      	mov	r3, r8
 8000a2c:	379e      	adds	r7, #158	@ 0x9e
 8000a2e:	40bb      	lsls	r3, r7
 8000a30:	1e59      	subs	r1, r3, #1
 8000a32:	418b      	sbcs	r3, r1
 8000a34:	431a      	orrs	r2, r3
 8000a36:	0753      	lsls	r3, r2, #29
 8000a38:	d004      	beq.n	8000a44 <__aeabi_fdiv+0x1c4>
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	d000      	beq.n	8000a44 <__aeabi_fdiv+0x1c4>
 8000a42:	3204      	adds	r2, #4
 8000a44:	0153      	lsls	r3, r2, #5
 8000a46:	d529      	bpl.n	8000a9c <__aeabi_fdiv+0x21c>
 8000a48:	2001      	movs	r0, #1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	e79a      	b.n	8000984 <__aeabi_fdiv+0x104>
 8000a4e:	4642      	mov	r2, r8
 8000a50:	0163      	lsls	r3, r4, #5
 8000a52:	0155      	lsls	r5, r2, #5
 8000a54:	42ab      	cmp	r3, r5
 8000a56:	d215      	bcs.n	8000a84 <__aeabi_fdiv+0x204>
 8000a58:	201b      	movs	r0, #27
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	3f01      	subs	r7, #1
 8000a5e:	2601      	movs	r6, #1
 8000a60:	001c      	movs	r4, r3
 8000a62:	0052      	lsls	r2, r2, #1
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	2c00      	cmp	r4, #0
 8000a68:	db01      	blt.n	8000a6e <__aeabi_fdiv+0x1ee>
 8000a6a:	429d      	cmp	r5, r3
 8000a6c:	d801      	bhi.n	8000a72 <__aeabi_fdiv+0x1f2>
 8000a6e:	1b5b      	subs	r3, r3, r5
 8000a70:	4332      	orrs	r2, r6
 8000a72:	3801      	subs	r0, #1
 8000a74:	2800      	cmp	r0, #0
 8000a76:	d1f3      	bne.n	8000a60 <__aeabi_fdiv+0x1e0>
 8000a78:	1e58      	subs	r0, r3, #1
 8000a7a:	4183      	sbcs	r3, r0
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	4698      	mov	r8, r3
 8000a80:	000d      	movs	r5, r1
 8000a82:	e79a      	b.n	80009ba <__aeabi_fdiv+0x13a>
 8000a84:	201a      	movs	r0, #26
 8000a86:	2201      	movs	r2, #1
 8000a88:	1b5b      	subs	r3, r3, r5
 8000a8a:	e7e8      	b.n	8000a5e <__aeabi_fdiv+0x1de>
 8000a8c:	3b02      	subs	r3, #2
 8000a8e:	425a      	negs	r2, r3
 8000a90:	4153      	adcs	r3, r2
 8000a92:	425b      	negs	r3, r3
 8000a94:	0035      	movs	r5, r6
 8000a96:	2200      	movs	r2, #0
 8000a98:	b2d8      	uxtb	r0, r3
 8000a9a:	e773      	b.n	8000984 <__aeabi_fdiv+0x104>
 8000a9c:	0192      	lsls	r2, r2, #6
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	0a52      	lsrs	r2, r2, #9
 8000aa2:	e76f      	b.n	8000984 <__aeabi_fdiv+0x104>
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	0252      	lsls	r2, r2, #9
 8000aa8:	0035      	movs	r5, r6
 8000aaa:	20ff      	movs	r0, #255	@ 0xff
 8000aac:	0a52      	lsrs	r2, r2, #9
 8000aae:	e769      	b.n	8000984 <__aeabi_fdiv+0x104>
 8000ab0:	4644      	mov	r4, r8
 8000ab2:	e7ad      	b.n	8000a10 <__aeabi_fdiv+0x190>
 8000ab4:	0801469c 	.word	0x0801469c
 8000ab8:	080146dc 	.word	0x080146dc
 8000abc:	f7ffffff 	.word	0xf7ffffff

08000ac0 <__eqsf2>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	0042      	lsls	r2, r0, #1
 8000ac4:	024e      	lsls	r6, r1, #9
 8000ac6:	004c      	lsls	r4, r1, #1
 8000ac8:	0245      	lsls	r5, r0, #9
 8000aca:	0a6d      	lsrs	r5, r5, #9
 8000acc:	0e12      	lsrs	r2, r2, #24
 8000ace:	0fc3      	lsrs	r3, r0, #31
 8000ad0:	0a76      	lsrs	r6, r6, #9
 8000ad2:	0e24      	lsrs	r4, r4, #24
 8000ad4:	0fc9      	lsrs	r1, r1, #31
 8000ad6:	2aff      	cmp	r2, #255	@ 0xff
 8000ad8:	d010      	beq.n	8000afc <__eqsf2+0x3c>
 8000ada:	2cff      	cmp	r4, #255	@ 0xff
 8000adc:	d00c      	beq.n	8000af8 <__eqsf2+0x38>
 8000ade:	2001      	movs	r0, #1
 8000ae0:	42a2      	cmp	r2, r4
 8000ae2:	d10a      	bne.n	8000afa <__eqsf2+0x3a>
 8000ae4:	42b5      	cmp	r5, r6
 8000ae6:	d108      	bne.n	8000afa <__eqsf2+0x3a>
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d00f      	beq.n	8000b0c <__eqsf2+0x4c>
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d104      	bne.n	8000afa <__eqsf2+0x3a>
 8000af0:	0028      	movs	r0, r5
 8000af2:	1e43      	subs	r3, r0, #1
 8000af4:	4198      	sbcs	r0, r3
 8000af6:	e000      	b.n	8000afa <__eqsf2+0x3a>
 8000af8:	2001      	movs	r0, #1
 8000afa:	bd70      	pop	{r4, r5, r6, pc}
 8000afc:	2001      	movs	r0, #1
 8000afe:	2cff      	cmp	r4, #255	@ 0xff
 8000b00:	d1fb      	bne.n	8000afa <__eqsf2+0x3a>
 8000b02:	4335      	orrs	r5, r6
 8000b04:	d1f9      	bne.n	8000afa <__eqsf2+0x3a>
 8000b06:	404b      	eors	r3, r1
 8000b08:	0018      	movs	r0, r3
 8000b0a:	e7f6      	b.n	8000afa <__eqsf2+0x3a>
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	e7f4      	b.n	8000afa <__eqsf2+0x3a>

08000b10 <__gesf2>:
 8000b10:	b530      	push	{r4, r5, lr}
 8000b12:	0042      	lsls	r2, r0, #1
 8000b14:	0244      	lsls	r4, r0, #9
 8000b16:	024d      	lsls	r5, r1, #9
 8000b18:	0fc3      	lsrs	r3, r0, #31
 8000b1a:	0048      	lsls	r0, r1, #1
 8000b1c:	0a64      	lsrs	r4, r4, #9
 8000b1e:	0e12      	lsrs	r2, r2, #24
 8000b20:	0a6d      	lsrs	r5, r5, #9
 8000b22:	0e00      	lsrs	r0, r0, #24
 8000b24:	0fc9      	lsrs	r1, r1, #31
 8000b26:	2aff      	cmp	r2, #255	@ 0xff
 8000b28:	d019      	beq.n	8000b5e <__gesf2+0x4e>
 8000b2a:	28ff      	cmp	r0, #255	@ 0xff
 8000b2c:	d00b      	beq.n	8000b46 <__gesf2+0x36>
 8000b2e:	2a00      	cmp	r2, #0
 8000b30:	d11e      	bne.n	8000b70 <__gesf2+0x60>
 8000b32:	2800      	cmp	r0, #0
 8000b34:	d10b      	bne.n	8000b4e <__gesf2+0x3e>
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	d027      	beq.n	8000b8a <__gesf2+0x7a>
 8000b3a:	2c00      	cmp	r4, #0
 8000b3c:	d134      	bne.n	8000ba8 <__gesf2+0x98>
 8000b3e:	2900      	cmp	r1, #0
 8000b40:	d02f      	beq.n	8000ba2 <__gesf2+0x92>
 8000b42:	0008      	movs	r0, r1
 8000b44:	bd30      	pop	{r4, r5, pc}
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d128      	bne.n	8000b9c <__gesf2+0x8c>
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d101      	bne.n	8000b52 <__gesf2+0x42>
 8000b4e:	2c00      	cmp	r4, #0
 8000b50:	d0f5      	beq.n	8000b3e <__gesf2+0x2e>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d107      	bne.n	8000b66 <__gesf2+0x56>
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d023      	beq.n	8000ba2 <__gesf2+0x92>
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	e7f2      	b.n	8000b44 <__gesf2+0x34>
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	d11c      	bne.n	8000b9c <__gesf2+0x8c>
 8000b62:	28ff      	cmp	r0, #255	@ 0xff
 8000b64:	d014      	beq.n	8000b90 <__gesf2+0x80>
 8000b66:	1e58      	subs	r0, r3, #1
 8000b68:	2302      	movs	r3, #2
 8000b6a:	4018      	ands	r0, r3
 8000b6c:	3801      	subs	r0, #1
 8000b6e:	e7e9      	b.n	8000b44 <__gesf2+0x34>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d0f8      	beq.n	8000b66 <__gesf2+0x56>
 8000b74:	428b      	cmp	r3, r1
 8000b76:	d1f6      	bne.n	8000b66 <__gesf2+0x56>
 8000b78:	4282      	cmp	r2, r0
 8000b7a:	dcf4      	bgt.n	8000b66 <__gesf2+0x56>
 8000b7c:	dbeb      	blt.n	8000b56 <__gesf2+0x46>
 8000b7e:	42ac      	cmp	r4, r5
 8000b80:	d8f1      	bhi.n	8000b66 <__gesf2+0x56>
 8000b82:	2000      	movs	r0, #0
 8000b84:	42ac      	cmp	r4, r5
 8000b86:	d2dd      	bcs.n	8000b44 <__gesf2+0x34>
 8000b88:	e7e5      	b.n	8000b56 <__gesf2+0x46>
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	d0da      	beq.n	8000b44 <__gesf2+0x34>
 8000b8e:	e7ea      	b.n	8000b66 <__gesf2+0x56>
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d103      	bne.n	8000b9c <__gesf2+0x8c>
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d1e6      	bne.n	8000b66 <__gesf2+0x56>
 8000b98:	2000      	movs	r0, #0
 8000b9a:	e7d3      	b.n	8000b44 <__gesf2+0x34>
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	4240      	negs	r0, r0
 8000ba0:	e7d0      	b.n	8000b44 <__gesf2+0x34>
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4240      	negs	r0, r0
 8000ba6:	e7cd      	b.n	8000b44 <__gesf2+0x34>
 8000ba8:	428b      	cmp	r3, r1
 8000baa:	d0e8      	beq.n	8000b7e <__gesf2+0x6e>
 8000bac:	e7db      	b.n	8000b66 <__gesf2+0x56>
 8000bae:	46c0      	nop			@ (mov r8, r8)

08000bb0 <__lesf2>:
 8000bb0:	b530      	push	{r4, r5, lr}
 8000bb2:	0042      	lsls	r2, r0, #1
 8000bb4:	0244      	lsls	r4, r0, #9
 8000bb6:	024d      	lsls	r5, r1, #9
 8000bb8:	0fc3      	lsrs	r3, r0, #31
 8000bba:	0048      	lsls	r0, r1, #1
 8000bbc:	0a64      	lsrs	r4, r4, #9
 8000bbe:	0e12      	lsrs	r2, r2, #24
 8000bc0:	0a6d      	lsrs	r5, r5, #9
 8000bc2:	0e00      	lsrs	r0, r0, #24
 8000bc4:	0fc9      	lsrs	r1, r1, #31
 8000bc6:	2aff      	cmp	r2, #255	@ 0xff
 8000bc8:	d01a      	beq.n	8000c00 <__lesf2+0x50>
 8000bca:	28ff      	cmp	r0, #255	@ 0xff
 8000bcc:	d00e      	beq.n	8000bec <__lesf2+0x3c>
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d11e      	bne.n	8000c10 <__lesf2+0x60>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	d10e      	bne.n	8000bf4 <__lesf2+0x44>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d02a      	beq.n	8000c30 <__lesf2+0x80>
 8000bda:	2c00      	cmp	r4, #0
 8000bdc:	d00c      	beq.n	8000bf8 <__lesf2+0x48>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d01d      	beq.n	8000c1e <__lesf2+0x6e>
 8000be2:	1e58      	subs	r0, r3, #1
 8000be4:	2302      	movs	r3, #2
 8000be6:	4018      	ands	r0, r3
 8000be8:	3801      	subs	r0, #1
 8000bea:	e010      	b.n	8000c0e <__lesf2+0x5e>
 8000bec:	2d00      	cmp	r5, #0
 8000bee:	d10d      	bne.n	8000c0c <__lesf2+0x5c>
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	d120      	bne.n	8000c36 <__lesf2+0x86>
 8000bf4:	2c00      	cmp	r4, #0
 8000bf6:	d11e      	bne.n	8000c36 <__lesf2+0x86>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	d023      	beq.n	8000c44 <__lesf2+0x94>
 8000bfc:	0008      	movs	r0, r1
 8000bfe:	e006      	b.n	8000c0e <__lesf2+0x5e>
 8000c00:	2c00      	cmp	r4, #0
 8000c02:	d103      	bne.n	8000c0c <__lesf2+0x5c>
 8000c04:	28ff      	cmp	r0, #255	@ 0xff
 8000c06:	d1ec      	bne.n	8000be2 <__lesf2+0x32>
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d017      	beq.n	8000c3c <__lesf2+0x8c>
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	bd30      	pop	{r4, r5, pc}
 8000c10:	2800      	cmp	r0, #0
 8000c12:	d0e6      	beq.n	8000be2 <__lesf2+0x32>
 8000c14:	428b      	cmp	r3, r1
 8000c16:	d1e4      	bne.n	8000be2 <__lesf2+0x32>
 8000c18:	4282      	cmp	r2, r0
 8000c1a:	dce2      	bgt.n	8000be2 <__lesf2+0x32>
 8000c1c:	db04      	blt.n	8000c28 <__lesf2+0x78>
 8000c1e:	42ac      	cmp	r4, r5
 8000c20:	d8df      	bhi.n	8000be2 <__lesf2+0x32>
 8000c22:	2000      	movs	r0, #0
 8000c24:	42ac      	cmp	r4, r5
 8000c26:	d2f2      	bcs.n	8000c0e <__lesf2+0x5e>
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d00b      	beq.n	8000c44 <__lesf2+0x94>
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	e7ee      	b.n	8000c0e <__lesf2+0x5e>
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d0ec      	beq.n	8000c0e <__lesf2+0x5e>
 8000c34:	e7d5      	b.n	8000be2 <__lesf2+0x32>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d1d3      	bne.n	8000be2 <__lesf2+0x32>
 8000c3a:	e7f5      	b.n	8000c28 <__lesf2+0x78>
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d0e5      	beq.n	8000c0e <__lesf2+0x5e>
 8000c42:	e7ce      	b.n	8000be2 <__lesf2+0x32>
 8000c44:	2001      	movs	r0, #1
 8000c46:	4240      	negs	r0, r0
 8000c48:	e7e1      	b.n	8000c0e <__lesf2+0x5e>
 8000c4a:	46c0      	nop			@ (mov r8, r8)

08000c4c <__aeabi_fmul>:
 8000c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4e:	464f      	mov	r7, r9
 8000c50:	4646      	mov	r6, r8
 8000c52:	46d6      	mov	lr, sl
 8000c54:	0243      	lsls	r3, r0, #9
 8000c56:	0a5b      	lsrs	r3, r3, #9
 8000c58:	0045      	lsls	r5, r0, #1
 8000c5a:	b5c0      	push	{r6, r7, lr}
 8000c5c:	4699      	mov	r9, r3
 8000c5e:	1c0f      	adds	r7, r1, #0
 8000c60:	0e2d      	lsrs	r5, r5, #24
 8000c62:	0fc6      	lsrs	r6, r0, #31
 8000c64:	2d00      	cmp	r5, #0
 8000c66:	d100      	bne.n	8000c6a <__aeabi_fmul+0x1e>
 8000c68:	e088      	b.n	8000d7c <__aeabi_fmul+0x130>
 8000c6a:	2dff      	cmp	r5, #255	@ 0xff
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_fmul+0x24>
 8000c6e:	e08d      	b.n	8000d8c <__aeabi_fmul+0x140>
 8000c70:	2280      	movs	r2, #128	@ 0x80
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	04d2      	lsls	r2, r2, #19
 8000c76:	431a      	orrs	r2, r3
 8000c78:	2300      	movs	r3, #0
 8000c7a:	4691      	mov	r9, r2
 8000c7c:	4698      	mov	r8, r3
 8000c7e:	469a      	mov	sl, r3
 8000c80:	3d7f      	subs	r5, #127	@ 0x7f
 8000c82:	027c      	lsls	r4, r7, #9
 8000c84:	007b      	lsls	r3, r7, #1
 8000c86:	0a64      	lsrs	r4, r4, #9
 8000c88:	0e1b      	lsrs	r3, r3, #24
 8000c8a:	0fff      	lsrs	r7, r7, #31
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d068      	beq.n	8000d62 <__aeabi_fmul+0x116>
 8000c90:	2bff      	cmp	r3, #255	@ 0xff
 8000c92:	d021      	beq.n	8000cd8 <__aeabi_fmul+0x8c>
 8000c94:	2280      	movs	r2, #128	@ 0x80
 8000c96:	00e4      	lsls	r4, r4, #3
 8000c98:	04d2      	lsls	r2, r2, #19
 8000c9a:	4314      	orrs	r4, r2
 8000c9c:	4642      	mov	r2, r8
 8000c9e:	3b7f      	subs	r3, #127	@ 0x7f
 8000ca0:	195b      	adds	r3, r3, r5
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	1c5d      	adds	r5, r3, #1
 8000ca6:	2a0a      	cmp	r2, #10
 8000ca8:	dc2e      	bgt.n	8000d08 <__aeabi_fmul+0xbc>
 8000caa:	407e      	eors	r6, r7
 8000cac:	4642      	mov	r2, r8
 8000cae:	2a02      	cmp	r2, #2
 8000cb0:	dc23      	bgt.n	8000cfa <__aeabi_fmul+0xae>
 8000cb2:	3a01      	subs	r2, #1
 8000cb4:	2a01      	cmp	r2, #1
 8000cb6:	d900      	bls.n	8000cba <__aeabi_fmul+0x6e>
 8000cb8:	e0bd      	b.n	8000e36 <__aeabi_fmul+0x1ea>
 8000cba:	2902      	cmp	r1, #2
 8000cbc:	d06e      	beq.n	8000d9c <__aeabi_fmul+0x150>
 8000cbe:	2901      	cmp	r1, #1
 8000cc0:	d12c      	bne.n	8000d1c <__aeabi_fmul+0xd0>
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	05c0      	lsls	r0, r0, #23
 8000cc8:	07f6      	lsls	r6, r6, #31
 8000cca:	4310      	orrs	r0, r2
 8000ccc:	4330      	orrs	r0, r6
 8000cce:	bce0      	pop	{r5, r6, r7}
 8000cd0:	46ba      	mov	sl, r7
 8000cd2:	46b1      	mov	r9, r6
 8000cd4:	46a8      	mov	r8, r5
 8000cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd8:	002b      	movs	r3, r5
 8000cda:	33ff      	adds	r3, #255	@ 0xff
 8000cdc:	2c00      	cmp	r4, #0
 8000cde:	d065      	beq.n	8000dac <__aeabi_fmul+0x160>
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	4641      	mov	r1, r8
 8000ce4:	4311      	orrs	r1, r2
 8000ce6:	0032      	movs	r2, r6
 8000ce8:	3501      	adds	r5, #1
 8000cea:	4688      	mov	r8, r1
 8000cec:	407a      	eors	r2, r7
 8000cee:	35ff      	adds	r5, #255	@ 0xff
 8000cf0:	290a      	cmp	r1, #10
 8000cf2:	dd00      	ble.n	8000cf6 <__aeabi_fmul+0xaa>
 8000cf4:	e0d8      	b.n	8000ea8 <__aeabi_fmul+0x25c>
 8000cf6:	0016      	movs	r6, r2
 8000cf8:	2103      	movs	r1, #3
 8000cfa:	4640      	mov	r0, r8
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4082      	lsls	r2, r0
 8000d00:	20a6      	movs	r0, #166	@ 0xa6
 8000d02:	00c0      	lsls	r0, r0, #3
 8000d04:	4202      	tst	r2, r0
 8000d06:	d020      	beq.n	8000d4a <__aeabi_fmul+0xfe>
 8000d08:	4653      	mov	r3, sl
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d046      	beq.n	8000d9c <__aeabi_fmul+0x150>
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d100      	bne.n	8000d14 <__aeabi_fmul+0xc8>
 8000d12:	e0bb      	b.n	8000e8c <__aeabi_fmul+0x240>
 8000d14:	4651      	mov	r1, sl
 8000d16:	464c      	mov	r4, r9
 8000d18:	2901      	cmp	r1, #1
 8000d1a:	d0d2      	beq.n	8000cc2 <__aeabi_fmul+0x76>
 8000d1c:	002b      	movs	r3, r5
 8000d1e:	337f      	adds	r3, #127	@ 0x7f
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	dd70      	ble.n	8000e06 <__aeabi_fmul+0x1ba>
 8000d24:	0762      	lsls	r2, r4, #29
 8000d26:	d004      	beq.n	8000d32 <__aeabi_fmul+0xe6>
 8000d28:	220f      	movs	r2, #15
 8000d2a:	4022      	ands	r2, r4
 8000d2c:	2a04      	cmp	r2, #4
 8000d2e:	d000      	beq.n	8000d32 <__aeabi_fmul+0xe6>
 8000d30:	3404      	adds	r4, #4
 8000d32:	0122      	lsls	r2, r4, #4
 8000d34:	d503      	bpl.n	8000d3e <__aeabi_fmul+0xf2>
 8000d36:	4b63      	ldr	r3, [pc, #396]	@ (8000ec4 <__aeabi_fmul+0x278>)
 8000d38:	401c      	ands	r4, r3
 8000d3a:	002b      	movs	r3, r5
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dc2c      	bgt.n	8000d9c <__aeabi_fmul+0x150>
 8000d42:	01a2      	lsls	r2, r4, #6
 8000d44:	0a52      	lsrs	r2, r2, #9
 8000d46:	b2d8      	uxtb	r0, r3
 8000d48:	e7bd      	b.n	8000cc6 <__aeabi_fmul+0x7a>
 8000d4a:	2090      	movs	r0, #144	@ 0x90
 8000d4c:	0080      	lsls	r0, r0, #2
 8000d4e:	4202      	tst	r2, r0
 8000d50:	d127      	bne.n	8000da2 <__aeabi_fmul+0x156>
 8000d52:	38b9      	subs	r0, #185	@ 0xb9
 8000d54:	38ff      	subs	r0, #255	@ 0xff
 8000d56:	4210      	tst	r0, r2
 8000d58:	d06d      	beq.n	8000e36 <__aeabi_fmul+0x1ea>
 8000d5a:	003e      	movs	r6, r7
 8000d5c:	46a1      	mov	r9, r4
 8000d5e:	468a      	mov	sl, r1
 8000d60:	e7d2      	b.n	8000d08 <__aeabi_fmul+0xbc>
 8000d62:	2c00      	cmp	r4, #0
 8000d64:	d141      	bne.n	8000dea <__aeabi_fmul+0x19e>
 8000d66:	2301      	movs	r3, #1
 8000d68:	4642      	mov	r2, r8
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	4690      	mov	r8, r2
 8000d6e:	002b      	movs	r3, r5
 8000d70:	4642      	mov	r2, r8
 8000d72:	2101      	movs	r1, #1
 8000d74:	1c5d      	adds	r5, r3, #1
 8000d76:	2a0a      	cmp	r2, #10
 8000d78:	dd97      	ble.n	8000caa <__aeabi_fmul+0x5e>
 8000d7a:	e7c5      	b.n	8000d08 <__aeabi_fmul+0xbc>
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d126      	bne.n	8000dce <__aeabi_fmul+0x182>
 8000d80:	2304      	movs	r3, #4
 8000d82:	4698      	mov	r8, r3
 8000d84:	3b03      	subs	r3, #3
 8000d86:	2500      	movs	r5, #0
 8000d88:	469a      	mov	sl, r3
 8000d8a:	e77a      	b.n	8000c82 <__aeabi_fmul+0x36>
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d118      	bne.n	8000dc2 <__aeabi_fmul+0x176>
 8000d90:	2308      	movs	r3, #8
 8000d92:	4698      	mov	r8, r3
 8000d94:	3b06      	subs	r3, #6
 8000d96:	25ff      	movs	r5, #255	@ 0xff
 8000d98:	469a      	mov	sl, r3
 8000d9a:	e772      	b.n	8000c82 <__aeabi_fmul+0x36>
 8000d9c:	20ff      	movs	r0, #255	@ 0xff
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e791      	b.n	8000cc6 <__aeabi_fmul+0x7a>
 8000da2:	2280      	movs	r2, #128	@ 0x80
 8000da4:	2600      	movs	r6, #0
 8000da6:	20ff      	movs	r0, #255	@ 0xff
 8000da8:	03d2      	lsls	r2, r2, #15
 8000daa:	e78c      	b.n	8000cc6 <__aeabi_fmul+0x7a>
 8000dac:	4641      	mov	r1, r8
 8000dae:	2202      	movs	r2, #2
 8000db0:	3501      	adds	r5, #1
 8000db2:	4311      	orrs	r1, r2
 8000db4:	4688      	mov	r8, r1
 8000db6:	35ff      	adds	r5, #255	@ 0xff
 8000db8:	290a      	cmp	r1, #10
 8000dba:	dca5      	bgt.n	8000d08 <__aeabi_fmul+0xbc>
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	407e      	eors	r6, r7
 8000dc0:	e774      	b.n	8000cac <__aeabi_fmul+0x60>
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	4698      	mov	r8, r3
 8000dc6:	3b09      	subs	r3, #9
 8000dc8:	25ff      	movs	r5, #255	@ 0xff
 8000dca:	469a      	mov	sl, r3
 8000dcc:	e759      	b.n	8000c82 <__aeabi_fmul+0x36>
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f002 fa54 	bl	800327c <__clzsi2>
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	1f43      	subs	r3, r0, #5
 8000dd8:	2576      	movs	r5, #118	@ 0x76
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	2300      	movs	r3, #0
 8000dde:	426d      	negs	r5, r5
 8000de0:	4691      	mov	r9, r2
 8000de2:	4698      	mov	r8, r3
 8000de4:	469a      	mov	sl, r3
 8000de6:	1a2d      	subs	r5, r5, r0
 8000de8:	e74b      	b.n	8000c82 <__aeabi_fmul+0x36>
 8000dea:	0020      	movs	r0, r4
 8000dec:	f002 fa46 	bl	800327c <__clzsi2>
 8000df0:	4642      	mov	r2, r8
 8000df2:	1f43      	subs	r3, r0, #5
 8000df4:	409c      	lsls	r4, r3
 8000df6:	1a2b      	subs	r3, r5, r0
 8000df8:	3b76      	subs	r3, #118	@ 0x76
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	1c5d      	adds	r5, r3, #1
 8000dfe:	2a0a      	cmp	r2, #10
 8000e00:	dc00      	bgt.n	8000e04 <__aeabi_fmul+0x1b8>
 8000e02:	e752      	b.n	8000caa <__aeabi_fmul+0x5e>
 8000e04:	e780      	b.n	8000d08 <__aeabi_fmul+0xbc>
 8000e06:	2201      	movs	r2, #1
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b1b      	cmp	r3, #27
 8000e0c:	dd00      	ble.n	8000e10 <__aeabi_fmul+0x1c4>
 8000e0e:	e758      	b.n	8000cc2 <__aeabi_fmul+0x76>
 8000e10:	359e      	adds	r5, #158	@ 0x9e
 8000e12:	0022      	movs	r2, r4
 8000e14:	40ac      	lsls	r4, r5
 8000e16:	40da      	lsrs	r2, r3
 8000e18:	1e63      	subs	r3, r4, #1
 8000e1a:	419c      	sbcs	r4, r3
 8000e1c:	4322      	orrs	r2, r4
 8000e1e:	0753      	lsls	r3, r2, #29
 8000e20:	d004      	beq.n	8000e2c <__aeabi_fmul+0x1e0>
 8000e22:	230f      	movs	r3, #15
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	d000      	beq.n	8000e2c <__aeabi_fmul+0x1e0>
 8000e2a:	3204      	adds	r2, #4
 8000e2c:	0153      	lsls	r3, r2, #5
 8000e2e:	d537      	bpl.n	8000ea0 <__aeabi_fmul+0x254>
 8000e30:	2001      	movs	r0, #1
 8000e32:	2200      	movs	r2, #0
 8000e34:	e747      	b.n	8000cc6 <__aeabi_fmul+0x7a>
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	464a      	mov	r2, r9
 8000e3a:	0424      	lsls	r4, r4, #16
 8000e3c:	0c24      	lsrs	r4, r4, #16
 8000e3e:	0027      	movs	r7, r4
 8000e40:	0c10      	lsrs	r0, r2, #16
 8000e42:	0412      	lsls	r2, r2, #16
 8000e44:	0c12      	lsrs	r2, r2, #16
 8000e46:	4344      	muls	r4, r0
 8000e48:	4357      	muls	r7, r2
 8000e4a:	4348      	muls	r0, r1
 8000e4c:	4351      	muls	r1, r2
 8000e4e:	0c3a      	lsrs	r2, r7, #16
 8000e50:	1909      	adds	r1, r1, r4
 8000e52:	1852      	adds	r2, r2, r1
 8000e54:	4294      	cmp	r4, r2
 8000e56:	d903      	bls.n	8000e60 <__aeabi_fmul+0x214>
 8000e58:	2180      	movs	r1, #128	@ 0x80
 8000e5a:	0249      	lsls	r1, r1, #9
 8000e5c:	468c      	mov	ip, r1
 8000e5e:	4460      	add	r0, ip
 8000e60:	043f      	lsls	r7, r7, #16
 8000e62:	0411      	lsls	r1, r2, #16
 8000e64:	0c3f      	lsrs	r7, r7, #16
 8000e66:	19c9      	adds	r1, r1, r7
 8000e68:	018c      	lsls	r4, r1, #6
 8000e6a:	1e67      	subs	r7, r4, #1
 8000e6c:	41bc      	sbcs	r4, r7
 8000e6e:	0c12      	lsrs	r2, r2, #16
 8000e70:	0e89      	lsrs	r1, r1, #26
 8000e72:	1812      	adds	r2, r2, r0
 8000e74:	430c      	orrs	r4, r1
 8000e76:	0192      	lsls	r2, r2, #6
 8000e78:	4314      	orrs	r4, r2
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	d50e      	bpl.n	8000e9c <__aeabi_fmul+0x250>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	0862      	lsrs	r2, r4, #1
 8000e82:	401c      	ands	r4, r3
 8000e84:	4314      	orrs	r4, r2
 8000e86:	e749      	b.n	8000d1c <__aeabi_fmul+0xd0>
 8000e88:	003e      	movs	r6, r7
 8000e8a:	46a1      	mov	r9, r4
 8000e8c:	2280      	movs	r2, #128	@ 0x80
 8000e8e:	464b      	mov	r3, r9
 8000e90:	03d2      	lsls	r2, r2, #15
 8000e92:	431a      	orrs	r2, r3
 8000e94:	0252      	lsls	r2, r2, #9
 8000e96:	20ff      	movs	r0, #255	@ 0xff
 8000e98:	0a52      	lsrs	r2, r2, #9
 8000e9a:	e714      	b.n	8000cc6 <__aeabi_fmul+0x7a>
 8000e9c:	001d      	movs	r5, r3
 8000e9e:	e73d      	b.n	8000d1c <__aeabi_fmul+0xd0>
 8000ea0:	0192      	lsls	r2, r2, #6
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	0a52      	lsrs	r2, r2, #9
 8000ea6:	e70e      	b.n	8000cc6 <__aeabi_fmul+0x7a>
 8000ea8:	290f      	cmp	r1, #15
 8000eaa:	d1ed      	bne.n	8000e88 <__aeabi_fmul+0x23c>
 8000eac:	2280      	movs	r2, #128	@ 0x80
 8000eae:	464b      	mov	r3, r9
 8000eb0:	03d2      	lsls	r2, r2, #15
 8000eb2:	4213      	tst	r3, r2
 8000eb4:	d0ea      	beq.n	8000e8c <__aeabi_fmul+0x240>
 8000eb6:	4214      	tst	r4, r2
 8000eb8:	d1e8      	bne.n	8000e8c <__aeabi_fmul+0x240>
 8000eba:	003e      	movs	r6, r7
 8000ebc:	20ff      	movs	r0, #255	@ 0xff
 8000ebe:	4322      	orrs	r2, r4
 8000ec0:	e701      	b.n	8000cc6 <__aeabi_fmul+0x7a>
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	f7ffffff 	.word	0xf7ffffff

08000ec8 <__aeabi_fsub>:
 8000ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eca:	4647      	mov	r7, r8
 8000ecc:	46ce      	mov	lr, r9
 8000ece:	024e      	lsls	r6, r1, #9
 8000ed0:	0243      	lsls	r3, r0, #9
 8000ed2:	0045      	lsls	r5, r0, #1
 8000ed4:	0a72      	lsrs	r2, r6, #9
 8000ed6:	0fc4      	lsrs	r4, r0, #31
 8000ed8:	0048      	lsls	r0, r1, #1
 8000eda:	b580      	push	{r7, lr}
 8000edc:	4694      	mov	ip, r2
 8000ede:	0a5f      	lsrs	r7, r3, #9
 8000ee0:	0e2d      	lsrs	r5, r5, #24
 8000ee2:	099b      	lsrs	r3, r3, #6
 8000ee4:	0e00      	lsrs	r0, r0, #24
 8000ee6:	0fc9      	lsrs	r1, r1, #31
 8000ee8:	09b6      	lsrs	r6, r6, #6
 8000eea:	28ff      	cmp	r0, #255	@ 0xff
 8000eec:	d024      	beq.n	8000f38 <__aeabi_fsub+0x70>
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4051      	eors	r1, r2
 8000ef2:	1a2a      	subs	r2, r5, r0
 8000ef4:	428c      	cmp	r4, r1
 8000ef6:	d00f      	beq.n	8000f18 <__aeabi_fsub+0x50>
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	dc00      	bgt.n	8000efe <__aeabi_fsub+0x36>
 8000efc:	e16a      	b.n	80011d4 <__aeabi_fsub+0x30c>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	d135      	bne.n	8000f6e <__aeabi_fsub+0xa6>
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x40>
 8000f06:	e0a2      	b.n	800104e <__aeabi_fsub+0x186>
 8000f08:	1e51      	subs	r1, r2, #1
 8000f0a:	2a01      	cmp	r2, #1
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_fsub+0x48>
 8000f0e:	e124      	b.n	800115a <__aeabi_fsub+0x292>
 8000f10:	2aff      	cmp	r2, #255	@ 0xff
 8000f12:	d021      	beq.n	8000f58 <__aeabi_fsub+0x90>
 8000f14:	000a      	movs	r2, r1
 8000f16:	e02f      	b.n	8000f78 <__aeabi_fsub+0xb0>
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	dc00      	bgt.n	8000f1e <__aeabi_fsub+0x56>
 8000f1c:	e167      	b.n	80011ee <__aeabi_fsub+0x326>
 8000f1e:	2800      	cmp	r0, #0
 8000f20:	d05e      	beq.n	8000fe0 <__aeabi_fsub+0x118>
 8000f22:	2dff      	cmp	r5, #255	@ 0xff
 8000f24:	d018      	beq.n	8000f58 <__aeabi_fsub+0x90>
 8000f26:	2180      	movs	r1, #128	@ 0x80
 8000f28:	04c9      	lsls	r1, r1, #19
 8000f2a:	430e      	orrs	r6, r1
 8000f2c:	2a1b      	cmp	r2, #27
 8000f2e:	dc00      	bgt.n	8000f32 <__aeabi_fsub+0x6a>
 8000f30:	e076      	b.n	8001020 <__aeabi_fsub+0x158>
 8000f32:	002a      	movs	r2, r5
 8000f34:	3301      	adds	r3, #1
 8000f36:	e032      	b.n	8000f9e <__aeabi_fsub+0xd6>
 8000f38:	002a      	movs	r2, r5
 8000f3a:	3aff      	subs	r2, #255	@ 0xff
 8000f3c:	4691      	mov	r9, r2
 8000f3e:	2e00      	cmp	r6, #0
 8000f40:	d042      	beq.n	8000fc8 <__aeabi_fsub+0x100>
 8000f42:	428c      	cmp	r4, r1
 8000f44:	d055      	beq.n	8000ff2 <__aeabi_fsub+0x12a>
 8000f46:	464a      	mov	r2, r9
 8000f48:	2a00      	cmp	r2, #0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_fsub+0x86>
 8000f4c:	e09c      	b.n	8001088 <__aeabi_fsub+0x1c0>
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x8c>
 8000f52:	e077      	b.n	8001044 <__aeabi_fsub+0x17c>
 8000f54:	000c      	movs	r4, r1
 8000f56:	0033      	movs	r3, r6
 8000f58:	08db      	lsrs	r3, r3, #3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_fsub+0x98>
 8000f5e:	e06e      	b.n	800103e <__aeabi_fsub+0x176>
 8000f60:	2280      	movs	r2, #128	@ 0x80
 8000f62:	03d2      	lsls	r2, r2, #15
 8000f64:	4313      	orrs	r3, r2
 8000f66:	025b      	lsls	r3, r3, #9
 8000f68:	20ff      	movs	r0, #255	@ 0xff
 8000f6a:	0a5b      	lsrs	r3, r3, #9
 8000f6c:	e024      	b.n	8000fb8 <__aeabi_fsub+0xf0>
 8000f6e:	2dff      	cmp	r5, #255	@ 0xff
 8000f70:	d0f2      	beq.n	8000f58 <__aeabi_fsub+0x90>
 8000f72:	2180      	movs	r1, #128	@ 0x80
 8000f74:	04c9      	lsls	r1, r1, #19
 8000f76:	430e      	orrs	r6, r1
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2a1b      	cmp	r2, #27
 8000f7c:	dc08      	bgt.n	8000f90 <__aeabi_fsub+0xc8>
 8000f7e:	0031      	movs	r1, r6
 8000f80:	2020      	movs	r0, #32
 8000f82:	40d1      	lsrs	r1, r2
 8000f84:	1a82      	subs	r2, r0, r2
 8000f86:	4096      	lsls	r6, r2
 8000f88:	0032      	movs	r2, r6
 8000f8a:	1e50      	subs	r0, r2, #1
 8000f8c:	4182      	sbcs	r2, r0
 8000f8e:	4311      	orrs	r1, r2
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	015a      	lsls	r2, r3, #5
 8000f94:	d460      	bmi.n	8001058 <__aeabi_fsub+0x190>
 8000f96:	2107      	movs	r1, #7
 8000f98:	002a      	movs	r2, r5
 8000f9a:	4019      	ands	r1, r3
 8000f9c:	d057      	beq.n	800104e <__aeabi_fsub+0x186>
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	4019      	ands	r1, r3
 8000fa2:	2904      	cmp	r1, #4
 8000fa4:	d000      	beq.n	8000fa8 <__aeabi_fsub+0xe0>
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	0159      	lsls	r1, r3, #5
 8000faa:	d550      	bpl.n	800104e <__aeabi_fsub+0x186>
 8000fac:	1c50      	adds	r0, r2, #1
 8000fae:	2afe      	cmp	r2, #254	@ 0xfe
 8000fb0:	d045      	beq.n	800103e <__aeabi_fsub+0x176>
 8000fb2:	019b      	lsls	r3, r3, #6
 8000fb4:	b2c0      	uxtb	r0, r0
 8000fb6:	0a5b      	lsrs	r3, r3, #9
 8000fb8:	05c0      	lsls	r0, r0, #23
 8000fba:	4318      	orrs	r0, r3
 8000fbc:	07e4      	lsls	r4, r4, #31
 8000fbe:	4320      	orrs	r0, r4
 8000fc0:	bcc0      	pop	{r6, r7}
 8000fc2:	46b9      	mov	r9, r7
 8000fc4:	46b0      	mov	r8, r6
 8000fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4051      	eors	r1, r2
 8000fcc:	428c      	cmp	r4, r1
 8000fce:	d1ba      	bne.n	8000f46 <__aeabi_fsub+0x7e>
 8000fd0:	464a      	mov	r2, r9
 8000fd2:	2a00      	cmp	r2, #0
 8000fd4:	d010      	beq.n	8000ff8 <__aeabi_fsub+0x130>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_fsub+0x114>
 8000fda:	e098      	b.n	800110e <__aeabi_fsub+0x246>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e7bb      	b.n	8000f58 <__aeabi_fsub+0x90>
 8000fe0:	2e00      	cmp	r6, #0
 8000fe2:	d034      	beq.n	800104e <__aeabi_fsub+0x186>
 8000fe4:	1e51      	subs	r1, r2, #1
 8000fe6:	2a01      	cmp	r2, #1
 8000fe8:	d06e      	beq.n	80010c8 <__aeabi_fsub+0x200>
 8000fea:	2aff      	cmp	r2, #255	@ 0xff
 8000fec:	d0b4      	beq.n	8000f58 <__aeabi_fsub+0x90>
 8000fee:	000a      	movs	r2, r1
 8000ff0:	e79c      	b.n	8000f2c <__aeabi_fsub+0x64>
 8000ff2:	2a00      	cmp	r2, #0
 8000ff4:	d000      	beq.n	8000ff8 <__aeabi_fsub+0x130>
 8000ff6:	e088      	b.n	800110a <__aeabi_fsub+0x242>
 8000ff8:	20fe      	movs	r0, #254	@ 0xfe
 8000ffa:	1c6a      	adds	r2, r5, #1
 8000ffc:	4210      	tst	r0, r2
 8000ffe:	d000      	beq.n	8001002 <__aeabi_fsub+0x13a>
 8001000:	e092      	b.n	8001128 <__aeabi_fsub+0x260>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d000      	beq.n	8001008 <__aeabi_fsub+0x140>
 8001006:	e0a4      	b.n	8001152 <__aeabi_fsub+0x28a>
 8001008:	2b00      	cmp	r3, #0
 800100a:	d100      	bne.n	800100e <__aeabi_fsub+0x146>
 800100c:	e0cb      	b.n	80011a6 <__aeabi_fsub+0x2de>
 800100e:	2e00      	cmp	r6, #0
 8001010:	d000      	beq.n	8001014 <__aeabi_fsub+0x14c>
 8001012:	e0ca      	b.n	80011aa <__aeabi_fsub+0x2e2>
 8001014:	2200      	movs	r2, #0
 8001016:	08db      	lsrs	r3, r3, #3
 8001018:	025b      	lsls	r3, r3, #9
 800101a:	0a5b      	lsrs	r3, r3, #9
 800101c:	b2d0      	uxtb	r0, r2
 800101e:	e7cb      	b.n	8000fb8 <__aeabi_fsub+0xf0>
 8001020:	0031      	movs	r1, r6
 8001022:	2020      	movs	r0, #32
 8001024:	40d1      	lsrs	r1, r2
 8001026:	1a82      	subs	r2, r0, r2
 8001028:	4096      	lsls	r6, r2
 800102a:	0032      	movs	r2, r6
 800102c:	1e50      	subs	r0, r2, #1
 800102e:	4182      	sbcs	r2, r0
 8001030:	430a      	orrs	r2, r1
 8001032:	189b      	adds	r3, r3, r2
 8001034:	015a      	lsls	r2, r3, #5
 8001036:	d5ae      	bpl.n	8000f96 <__aeabi_fsub+0xce>
 8001038:	1c6a      	adds	r2, r5, #1
 800103a:	2dfe      	cmp	r5, #254	@ 0xfe
 800103c:	d14a      	bne.n	80010d4 <__aeabi_fsub+0x20c>
 800103e:	20ff      	movs	r0, #255	@ 0xff
 8001040:	2300      	movs	r3, #0
 8001042:	e7b9      	b.n	8000fb8 <__aeabi_fsub+0xf0>
 8001044:	22ff      	movs	r2, #255	@ 0xff
 8001046:	2b00      	cmp	r3, #0
 8001048:	d14b      	bne.n	80010e2 <__aeabi_fsub+0x21a>
 800104a:	000c      	movs	r4, r1
 800104c:	0033      	movs	r3, r6
 800104e:	08db      	lsrs	r3, r3, #3
 8001050:	2aff      	cmp	r2, #255	@ 0xff
 8001052:	d100      	bne.n	8001056 <__aeabi_fsub+0x18e>
 8001054:	e781      	b.n	8000f5a <__aeabi_fsub+0x92>
 8001056:	e7df      	b.n	8001018 <__aeabi_fsub+0x150>
 8001058:	019f      	lsls	r7, r3, #6
 800105a:	09bf      	lsrs	r7, r7, #6
 800105c:	0038      	movs	r0, r7
 800105e:	f002 f90d 	bl	800327c <__clzsi2>
 8001062:	3805      	subs	r0, #5
 8001064:	4087      	lsls	r7, r0
 8001066:	4285      	cmp	r5, r0
 8001068:	dc21      	bgt.n	80010ae <__aeabi_fsub+0x1e6>
 800106a:	003b      	movs	r3, r7
 800106c:	2120      	movs	r1, #32
 800106e:	1b42      	subs	r2, r0, r5
 8001070:	3201      	adds	r2, #1
 8001072:	40d3      	lsrs	r3, r2
 8001074:	1a8a      	subs	r2, r1, r2
 8001076:	4097      	lsls	r7, r2
 8001078:	1e7a      	subs	r2, r7, #1
 800107a:	4197      	sbcs	r7, r2
 800107c:	2200      	movs	r2, #0
 800107e:	433b      	orrs	r3, r7
 8001080:	0759      	lsls	r1, r3, #29
 8001082:	d000      	beq.n	8001086 <__aeabi_fsub+0x1be>
 8001084:	e78b      	b.n	8000f9e <__aeabi_fsub+0xd6>
 8001086:	e78f      	b.n	8000fa8 <__aeabi_fsub+0xe0>
 8001088:	20fe      	movs	r0, #254	@ 0xfe
 800108a:	1c6a      	adds	r2, r5, #1
 800108c:	4210      	tst	r0, r2
 800108e:	d112      	bne.n	80010b6 <__aeabi_fsub+0x1ee>
 8001090:	2d00      	cmp	r5, #0
 8001092:	d152      	bne.n	800113a <__aeabi_fsub+0x272>
 8001094:	2b00      	cmp	r3, #0
 8001096:	d07c      	beq.n	8001192 <__aeabi_fsub+0x2ca>
 8001098:	2e00      	cmp	r6, #0
 800109a:	d0bb      	beq.n	8001014 <__aeabi_fsub+0x14c>
 800109c:	1b9a      	subs	r2, r3, r6
 800109e:	0150      	lsls	r0, r2, #5
 80010a0:	d400      	bmi.n	80010a4 <__aeabi_fsub+0x1dc>
 80010a2:	e08b      	b.n	80011bc <__aeabi_fsub+0x2f4>
 80010a4:	2401      	movs	r4, #1
 80010a6:	2200      	movs	r2, #0
 80010a8:	1af3      	subs	r3, r6, r3
 80010aa:	400c      	ands	r4, r1
 80010ac:	e7e8      	b.n	8001080 <__aeabi_fsub+0x1b8>
 80010ae:	4b56      	ldr	r3, [pc, #344]	@ (8001208 <__aeabi_fsub+0x340>)
 80010b0:	1a2a      	subs	r2, r5, r0
 80010b2:	403b      	ands	r3, r7
 80010b4:	e7e4      	b.n	8001080 <__aeabi_fsub+0x1b8>
 80010b6:	1b9f      	subs	r7, r3, r6
 80010b8:	017a      	lsls	r2, r7, #5
 80010ba:	d446      	bmi.n	800114a <__aeabi_fsub+0x282>
 80010bc:	2f00      	cmp	r7, #0
 80010be:	d1cd      	bne.n	800105c <__aeabi_fsub+0x194>
 80010c0:	2400      	movs	r4, #0
 80010c2:	2000      	movs	r0, #0
 80010c4:	2300      	movs	r3, #0
 80010c6:	e777      	b.n	8000fb8 <__aeabi_fsub+0xf0>
 80010c8:	199b      	adds	r3, r3, r6
 80010ca:	2501      	movs	r5, #1
 80010cc:	3201      	adds	r2, #1
 80010ce:	0159      	lsls	r1, r3, #5
 80010d0:	d400      	bmi.n	80010d4 <__aeabi_fsub+0x20c>
 80010d2:	e760      	b.n	8000f96 <__aeabi_fsub+0xce>
 80010d4:	2101      	movs	r1, #1
 80010d6:	484d      	ldr	r0, [pc, #308]	@ (800120c <__aeabi_fsub+0x344>)
 80010d8:	4019      	ands	r1, r3
 80010da:	085b      	lsrs	r3, r3, #1
 80010dc:	4003      	ands	r3, r0
 80010de:	430b      	orrs	r3, r1
 80010e0:	e7ce      	b.n	8001080 <__aeabi_fsub+0x1b8>
 80010e2:	1e57      	subs	r7, r2, #1
 80010e4:	2a01      	cmp	r2, #1
 80010e6:	d05a      	beq.n	800119e <__aeabi_fsub+0x2d6>
 80010e8:	000c      	movs	r4, r1
 80010ea:	2aff      	cmp	r2, #255	@ 0xff
 80010ec:	d033      	beq.n	8001156 <__aeabi_fsub+0x28e>
 80010ee:	2201      	movs	r2, #1
 80010f0:	2f1b      	cmp	r7, #27
 80010f2:	dc07      	bgt.n	8001104 <__aeabi_fsub+0x23c>
 80010f4:	2120      	movs	r1, #32
 80010f6:	1bc9      	subs	r1, r1, r7
 80010f8:	001a      	movs	r2, r3
 80010fa:	408b      	lsls	r3, r1
 80010fc:	40fa      	lsrs	r2, r7
 80010fe:	1e59      	subs	r1, r3, #1
 8001100:	418b      	sbcs	r3, r1
 8001102:	431a      	orrs	r2, r3
 8001104:	0005      	movs	r5, r0
 8001106:	1ab3      	subs	r3, r6, r2
 8001108:	e743      	b.n	8000f92 <__aeabi_fsub+0xca>
 800110a:	2d00      	cmp	r5, #0
 800110c:	d123      	bne.n	8001156 <__aeabi_fsub+0x28e>
 800110e:	22ff      	movs	r2, #255	@ 0xff
 8001110:	2b00      	cmp	r3, #0
 8001112:	d09b      	beq.n	800104c <__aeabi_fsub+0x184>
 8001114:	1e51      	subs	r1, r2, #1
 8001116:	2a01      	cmp	r2, #1
 8001118:	d0d6      	beq.n	80010c8 <__aeabi_fsub+0x200>
 800111a:	2aff      	cmp	r2, #255	@ 0xff
 800111c:	d01b      	beq.n	8001156 <__aeabi_fsub+0x28e>
 800111e:	291b      	cmp	r1, #27
 8001120:	dd2c      	ble.n	800117c <__aeabi_fsub+0x2b4>
 8001122:	0002      	movs	r2, r0
 8001124:	1c73      	adds	r3, r6, #1
 8001126:	e73a      	b.n	8000f9e <__aeabi_fsub+0xd6>
 8001128:	2aff      	cmp	r2, #255	@ 0xff
 800112a:	d088      	beq.n	800103e <__aeabi_fsub+0x176>
 800112c:	199b      	adds	r3, r3, r6
 800112e:	085b      	lsrs	r3, r3, #1
 8001130:	0759      	lsls	r1, r3, #29
 8001132:	d000      	beq.n	8001136 <__aeabi_fsub+0x26e>
 8001134:	e733      	b.n	8000f9e <__aeabi_fsub+0xd6>
 8001136:	08db      	lsrs	r3, r3, #3
 8001138:	e76e      	b.n	8001018 <__aeabi_fsub+0x150>
 800113a:	2b00      	cmp	r3, #0
 800113c:	d110      	bne.n	8001160 <__aeabi_fsub+0x298>
 800113e:	2e00      	cmp	r6, #0
 8001140:	d043      	beq.n	80011ca <__aeabi_fsub+0x302>
 8001142:	2401      	movs	r4, #1
 8001144:	0033      	movs	r3, r6
 8001146:	400c      	ands	r4, r1
 8001148:	e706      	b.n	8000f58 <__aeabi_fsub+0x90>
 800114a:	2401      	movs	r4, #1
 800114c:	1af7      	subs	r7, r6, r3
 800114e:	400c      	ands	r4, r1
 8001150:	e784      	b.n	800105c <__aeabi_fsub+0x194>
 8001152:	2b00      	cmp	r3, #0
 8001154:	d104      	bne.n	8001160 <__aeabi_fsub+0x298>
 8001156:	0033      	movs	r3, r6
 8001158:	e6fe      	b.n	8000f58 <__aeabi_fsub+0x90>
 800115a:	2501      	movs	r5, #1
 800115c:	1b9b      	subs	r3, r3, r6
 800115e:	e718      	b.n	8000f92 <__aeabi_fsub+0xca>
 8001160:	2e00      	cmp	r6, #0
 8001162:	d100      	bne.n	8001166 <__aeabi_fsub+0x29e>
 8001164:	e6f8      	b.n	8000f58 <__aeabi_fsub+0x90>
 8001166:	2280      	movs	r2, #128	@ 0x80
 8001168:	03d2      	lsls	r2, r2, #15
 800116a:	4297      	cmp	r7, r2
 800116c:	d304      	bcc.n	8001178 <__aeabi_fsub+0x2b0>
 800116e:	4594      	cmp	ip, r2
 8001170:	d202      	bcs.n	8001178 <__aeabi_fsub+0x2b0>
 8001172:	2401      	movs	r4, #1
 8001174:	0033      	movs	r3, r6
 8001176:	400c      	ands	r4, r1
 8001178:	08db      	lsrs	r3, r3, #3
 800117a:	e6f1      	b.n	8000f60 <__aeabi_fsub+0x98>
 800117c:	001a      	movs	r2, r3
 800117e:	2520      	movs	r5, #32
 8001180:	40ca      	lsrs	r2, r1
 8001182:	1a69      	subs	r1, r5, r1
 8001184:	408b      	lsls	r3, r1
 8001186:	1e59      	subs	r1, r3, #1
 8001188:	418b      	sbcs	r3, r1
 800118a:	4313      	orrs	r3, r2
 800118c:	0005      	movs	r5, r0
 800118e:	199b      	adds	r3, r3, r6
 8001190:	e750      	b.n	8001034 <__aeabi_fsub+0x16c>
 8001192:	2e00      	cmp	r6, #0
 8001194:	d094      	beq.n	80010c0 <__aeabi_fsub+0x1f8>
 8001196:	2401      	movs	r4, #1
 8001198:	0033      	movs	r3, r6
 800119a:	400c      	ands	r4, r1
 800119c:	e73a      	b.n	8001014 <__aeabi_fsub+0x14c>
 800119e:	000c      	movs	r4, r1
 80011a0:	2501      	movs	r5, #1
 80011a2:	1af3      	subs	r3, r6, r3
 80011a4:	e6f5      	b.n	8000f92 <__aeabi_fsub+0xca>
 80011a6:	0033      	movs	r3, r6
 80011a8:	e734      	b.n	8001014 <__aeabi_fsub+0x14c>
 80011aa:	199b      	adds	r3, r3, r6
 80011ac:	2200      	movs	r2, #0
 80011ae:	0159      	lsls	r1, r3, #5
 80011b0:	d5c1      	bpl.n	8001136 <__aeabi_fsub+0x26e>
 80011b2:	4a15      	ldr	r2, [pc, #84]	@ (8001208 <__aeabi_fsub+0x340>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	08db      	lsrs	r3, r3, #3
 80011b8:	2201      	movs	r2, #1
 80011ba:	e72d      	b.n	8001018 <__aeabi_fsub+0x150>
 80011bc:	2a00      	cmp	r2, #0
 80011be:	d100      	bne.n	80011c2 <__aeabi_fsub+0x2fa>
 80011c0:	e77e      	b.n	80010c0 <__aeabi_fsub+0x1f8>
 80011c2:	0013      	movs	r3, r2
 80011c4:	2200      	movs	r2, #0
 80011c6:	08db      	lsrs	r3, r3, #3
 80011c8:	e726      	b.n	8001018 <__aeabi_fsub+0x150>
 80011ca:	2380      	movs	r3, #128	@ 0x80
 80011cc:	2400      	movs	r4, #0
 80011ce:	20ff      	movs	r0, #255	@ 0xff
 80011d0:	03db      	lsls	r3, r3, #15
 80011d2:	e6f1      	b.n	8000fb8 <__aeabi_fsub+0xf0>
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	d100      	bne.n	80011da <__aeabi_fsub+0x312>
 80011d8:	e756      	b.n	8001088 <__aeabi_fsub+0x1c0>
 80011da:	1b47      	subs	r7, r0, r5
 80011dc:	003a      	movs	r2, r7
 80011de:	2d00      	cmp	r5, #0
 80011e0:	d100      	bne.n	80011e4 <__aeabi_fsub+0x31c>
 80011e2:	e730      	b.n	8001046 <__aeabi_fsub+0x17e>
 80011e4:	2280      	movs	r2, #128	@ 0x80
 80011e6:	04d2      	lsls	r2, r2, #19
 80011e8:	000c      	movs	r4, r1
 80011ea:	4313      	orrs	r3, r2
 80011ec:	e77f      	b.n	80010ee <__aeabi_fsub+0x226>
 80011ee:	2a00      	cmp	r2, #0
 80011f0:	d100      	bne.n	80011f4 <__aeabi_fsub+0x32c>
 80011f2:	e701      	b.n	8000ff8 <__aeabi_fsub+0x130>
 80011f4:	1b41      	subs	r1, r0, r5
 80011f6:	2d00      	cmp	r5, #0
 80011f8:	d101      	bne.n	80011fe <__aeabi_fsub+0x336>
 80011fa:	000a      	movs	r2, r1
 80011fc:	e788      	b.n	8001110 <__aeabi_fsub+0x248>
 80011fe:	2280      	movs	r2, #128	@ 0x80
 8001200:	04d2      	lsls	r2, r2, #19
 8001202:	4313      	orrs	r3, r2
 8001204:	e78b      	b.n	800111e <__aeabi_fsub+0x256>
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	fbffffff 	.word	0xfbffffff
 800120c:	7dffffff 	.word	0x7dffffff

08001210 <__aeabi_f2iz>:
 8001210:	0241      	lsls	r1, r0, #9
 8001212:	0042      	lsls	r2, r0, #1
 8001214:	0fc3      	lsrs	r3, r0, #31
 8001216:	0a49      	lsrs	r1, r1, #9
 8001218:	2000      	movs	r0, #0
 800121a:	0e12      	lsrs	r2, r2, #24
 800121c:	2a7e      	cmp	r2, #126	@ 0x7e
 800121e:	dd03      	ble.n	8001228 <__aeabi_f2iz+0x18>
 8001220:	2a9d      	cmp	r2, #157	@ 0x9d
 8001222:	dd02      	ble.n	800122a <__aeabi_f2iz+0x1a>
 8001224:	4a09      	ldr	r2, [pc, #36]	@ (800124c <__aeabi_f2iz+0x3c>)
 8001226:	1898      	adds	r0, r3, r2
 8001228:	4770      	bx	lr
 800122a:	2080      	movs	r0, #128	@ 0x80
 800122c:	0400      	lsls	r0, r0, #16
 800122e:	4301      	orrs	r1, r0
 8001230:	2a95      	cmp	r2, #149	@ 0x95
 8001232:	dc07      	bgt.n	8001244 <__aeabi_f2iz+0x34>
 8001234:	2096      	movs	r0, #150	@ 0x96
 8001236:	1a82      	subs	r2, r0, r2
 8001238:	40d1      	lsrs	r1, r2
 800123a:	4248      	negs	r0, r1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f3      	bne.n	8001228 <__aeabi_f2iz+0x18>
 8001240:	0008      	movs	r0, r1
 8001242:	e7f1      	b.n	8001228 <__aeabi_f2iz+0x18>
 8001244:	3a96      	subs	r2, #150	@ 0x96
 8001246:	4091      	lsls	r1, r2
 8001248:	e7f7      	b.n	800123a <__aeabi_f2iz+0x2a>
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	7fffffff 	.word	0x7fffffff

08001250 <__aeabi_i2f>:
 8001250:	b570      	push	{r4, r5, r6, lr}
 8001252:	2800      	cmp	r0, #0
 8001254:	d013      	beq.n	800127e <__aeabi_i2f+0x2e>
 8001256:	17c3      	asrs	r3, r0, #31
 8001258:	18c5      	adds	r5, r0, r3
 800125a:	405d      	eors	r5, r3
 800125c:	0fc4      	lsrs	r4, r0, #31
 800125e:	0028      	movs	r0, r5
 8001260:	f002 f80c 	bl	800327c <__clzsi2>
 8001264:	239e      	movs	r3, #158	@ 0x9e
 8001266:	0001      	movs	r1, r0
 8001268:	1a1b      	subs	r3, r3, r0
 800126a:	2b96      	cmp	r3, #150	@ 0x96
 800126c:	dc0f      	bgt.n	800128e <__aeabi_i2f+0x3e>
 800126e:	2808      	cmp	r0, #8
 8001270:	d034      	beq.n	80012dc <__aeabi_i2f+0x8c>
 8001272:	3908      	subs	r1, #8
 8001274:	408d      	lsls	r5, r1
 8001276:	026d      	lsls	r5, r5, #9
 8001278:	0a6d      	lsrs	r5, r5, #9
 800127a:	b2d8      	uxtb	r0, r3
 800127c:	e002      	b.n	8001284 <__aeabi_i2f+0x34>
 800127e:	2400      	movs	r4, #0
 8001280:	2000      	movs	r0, #0
 8001282:	2500      	movs	r5, #0
 8001284:	05c0      	lsls	r0, r0, #23
 8001286:	4328      	orrs	r0, r5
 8001288:	07e4      	lsls	r4, r4, #31
 800128a:	4320      	orrs	r0, r4
 800128c:	bd70      	pop	{r4, r5, r6, pc}
 800128e:	2b99      	cmp	r3, #153	@ 0x99
 8001290:	dc16      	bgt.n	80012c0 <__aeabi_i2f+0x70>
 8001292:	1f42      	subs	r2, r0, #5
 8001294:	2805      	cmp	r0, #5
 8001296:	d000      	beq.n	800129a <__aeabi_i2f+0x4a>
 8001298:	4095      	lsls	r5, r2
 800129a:	002a      	movs	r2, r5
 800129c:	4811      	ldr	r0, [pc, #68]	@ (80012e4 <__aeabi_i2f+0x94>)
 800129e:	4002      	ands	r2, r0
 80012a0:	076e      	lsls	r6, r5, #29
 80012a2:	d009      	beq.n	80012b8 <__aeabi_i2f+0x68>
 80012a4:	260f      	movs	r6, #15
 80012a6:	4035      	ands	r5, r6
 80012a8:	2d04      	cmp	r5, #4
 80012aa:	d005      	beq.n	80012b8 <__aeabi_i2f+0x68>
 80012ac:	3204      	adds	r2, #4
 80012ae:	0155      	lsls	r5, r2, #5
 80012b0:	d502      	bpl.n	80012b8 <__aeabi_i2f+0x68>
 80012b2:	239f      	movs	r3, #159	@ 0x9f
 80012b4:	4002      	ands	r2, r0
 80012b6:	1a5b      	subs	r3, r3, r1
 80012b8:	0192      	lsls	r2, r2, #6
 80012ba:	0a55      	lsrs	r5, r2, #9
 80012bc:	b2d8      	uxtb	r0, r3
 80012be:	e7e1      	b.n	8001284 <__aeabi_i2f+0x34>
 80012c0:	2205      	movs	r2, #5
 80012c2:	1a12      	subs	r2, r2, r0
 80012c4:	0028      	movs	r0, r5
 80012c6:	40d0      	lsrs	r0, r2
 80012c8:	0002      	movs	r2, r0
 80012ca:	0008      	movs	r0, r1
 80012cc:	301b      	adds	r0, #27
 80012ce:	4085      	lsls	r5, r0
 80012d0:	0028      	movs	r0, r5
 80012d2:	1e45      	subs	r5, r0, #1
 80012d4:	41a8      	sbcs	r0, r5
 80012d6:	4302      	orrs	r2, r0
 80012d8:	0015      	movs	r5, r2
 80012da:	e7de      	b.n	800129a <__aeabi_i2f+0x4a>
 80012dc:	026d      	lsls	r5, r5, #9
 80012de:	2096      	movs	r0, #150	@ 0x96
 80012e0:	0a6d      	lsrs	r5, r5, #9
 80012e2:	e7cf      	b.n	8001284 <__aeabi_i2f+0x34>
 80012e4:	fbffffff 	.word	0xfbffffff

080012e8 <__aeabi_ui2f>:
 80012e8:	b570      	push	{r4, r5, r6, lr}
 80012ea:	1e04      	subs	r4, r0, #0
 80012ec:	d00e      	beq.n	800130c <__aeabi_ui2f+0x24>
 80012ee:	f001 ffc5 	bl	800327c <__clzsi2>
 80012f2:	239e      	movs	r3, #158	@ 0x9e
 80012f4:	0001      	movs	r1, r0
 80012f6:	1a1b      	subs	r3, r3, r0
 80012f8:	2b96      	cmp	r3, #150	@ 0x96
 80012fa:	dc0c      	bgt.n	8001316 <__aeabi_ui2f+0x2e>
 80012fc:	2808      	cmp	r0, #8
 80012fe:	d02f      	beq.n	8001360 <__aeabi_ui2f+0x78>
 8001300:	3908      	subs	r1, #8
 8001302:	408c      	lsls	r4, r1
 8001304:	0264      	lsls	r4, r4, #9
 8001306:	0a64      	lsrs	r4, r4, #9
 8001308:	b2d8      	uxtb	r0, r3
 800130a:	e001      	b.n	8001310 <__aeabi_ui2f+0x28>
 800130c:	2000      	movs	r0, #0
 800130e:	2400      	movs	r4, #0
 8001310:	05c0      	lsls	r0, r0, #23
 8001312:	4320      	orrs	r0, r4
 8001314:	bd70      	pop	{r4, r5, r6, pc}
 8001316:	2b99      	cmp	r3, #153	@ 0x99
 8001318:	dc16      	bgt.n	8001348 <__aeabi_ui2f+0x60>
 800131a:	1f42      	subs	r2, r0, #5
 800131c:	2805      	cmp	r0, #5
 800131e:	d000      	beq.n	8001322 <__aeabi_ui2f+0x3a>
 8001320:	4094      	lsls	r4, r2
 8001322:	0022      	movs	r2, r4
 8001324:	4810      	ldr	r0, [pc, #64]	@ (8001368 <__aeabi_ui2f+0x80>)
 8001326:	4002      	ands	r2, r0
 8001328:	0765      	lsls	r5, r4, #29
 800132a:	d009      	beq.n	8001340 <__aeabi_ui2f+0x58>
 800132c:	250f      	movs	r5, #15
 800132e:	402c      	ands	r4, r5
 8001330:	2c04      	cmp	r4, #4
 8001332:	d005      	beq.n	8001340 <__aeabi_ui2f+0x58>
 8001334:	3204      	adds	r2, #4
 8001336:	0154      	lsls	r4, r2, #5
 8001338:	d502      	bpl.n	8001340 <__aeabi_ui2f+0x58>
 800133a:	239f      	movs	r3, #159	@ 0x9f
 800133c:	4002      	ands	r2, r0
 800133e:	1a5b      	subs	r3, r3, r1
 8001340:	0192      	lsls	r2, r2, #6
 8001342:	0a54      	lsrs	r4, r2, #9
 8001344:	b2d8      	uxtb	r0, r3
 8001346:	e7e3      	b.n	8001310 <__aeabi_ui2f+0x28>
 8001348:	0002      	movs	r2, r0
 800134a:	0020      	movs	r0, r4
 800134c:	321b      	adds	r2, #27
 800134e:	4090      	lsls	r0, r2
 8001350:	0002      	movs	r2, r0
 8001352:	1e50      	subs	r0, r2, #1
 8001354:	4182      	sbcs	r2, r0
 8001356:	2005      	movs	r0, #5
 8001358:	1a40      	subs	r0, r0, r1
 800135a:	40c4      	lsrs	r4, r0
 800135c:	4314      	orrs	r4, r2
 800135e:	e7e0      	b.n	8001322 <__aeabi_ui2f+0x3a>
 8001360:	0264      	lsls	r4, r4, #9
 8001362:	2096      	movs	r0, #150	@ 0x96
 8001364:	0a64      	lsrs	r4, r4, #9
 8001366:	e7d3      	b.n	8001310 <__aeabi_ui2f+0x28>
 8001368:	fbffffff 	.word	0xfbffffff

0800136c <__aeabi_dadd>:
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	4657      	mov	r7, sl
 8001370:	464e      	mov	r6, r9
 8001372:	4645      	mov	r5, r8
 8001374:	46de      	mov	lr, fp
 8001376:	b5e0      	push	{r5, r6, r7, lr}
 8001378:	b083      	sub	sp, #12
 800137a:	9000      	str	r0, [sp, #0]
 800137c:	9101      	str	r1, [sp, #4]
 800137e:	030c      	lsls	r4, r1, #12
 8001380:	004f      	lsls	r7, r1, #1
 8001382:	0fce      	lsrs	r6, r1, #31
 8001384:	0a61      	lsrs	r1, r4, #9
 8001386:	9c00      	ldr	r4, [sp, #0]
 8001388:	031d      	lsls	r5, r3, #12
 800138a:	0f64      	lsrs	r4, r4, #29
 800138c:	430c      	orrs	r4, r1
 800138e:	9900      	ldr	r1, [sp, #0]
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	00c8      	lsls	r0, r1, #3
 8001396:	0059      	lsls	r1, r3, #1
 8001398:	0d4b      	lsrs	r3, r1, #21
 800139a:	4699      	mov	r9, r3
 800139c:	9a00      	ldr	r2, [sp, #0]
 800139e:	9b01      	ldr	r3, [sp, #4]
 80013a0:	0a6d      	lsrs	r5, r5, #9
 80013a2:	0fd9      	lsrs	r1, r3, #31
 80013a4:	0f53      	lsrs	r3, r2, #29
 80013a6:	432b      	orrs	r3, r5
 80013a8:	469a      	mov	sl, r3
 80013aa:	9b00      	ldr	r3, [sp, #0]
 80013ac:	0d7f      	lsrs	r7, r7, #21
 80013ae:	00da      	lsls	r2, r3, #3
 80013b0:	4694      	mov	ip, r2
 80013b2:	464a      	mov	r2, r9
 80013b4:	46b0      	mov	r8, r6
 80013b6:	1aba      	subs	r2, r7, r2
 80013b8:	428e      	cmp	r6, r1
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x52>
 80013bc:	e0b0      	b.n	8001520 <__aeabi_dadd+0x1b4>
 80013be:	2a00      	cmp	r2, #0
 80013c0:	dc00      	bgt.n	80013c4 <__aeabi_dadd+0x58>
 80013c2:	e078      	b.n	80014b6 <__aeabi_dadd+0x14a>
 80013c4:	4649      	mov	r1, r9
 80013c6:	2900      	cmp	r1, #0
 80013c8:	d100      	bne.n	80013cc <__aeabi_dadd+0x60>
 80013ca:	e0e9      	b.n	80015a0 <__aeabi_dadd+0x234>
 80013cc:	49c9      	ldr	r1, [pc, #804]	@ (80016f4 <__aeabi_dadd+0x388>)
 80013ce:	428f      	cmp	r7, r1
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dadd+0x68>
 80013d2:	e195      	b.n	8001700 <__aeabi_dadd+0x394>
 80013d4:	2501      	movs	r5, #1
 80013d6:	2a38      	cmp	r2, #56	@ 0x38
 80013d8:	dc16      	bgt.n	8001408 <__aeabi_dadd+0x9c>
 80013da:	2180      	movs	r1, #128	@ 0x80
 80013dc:	4653      	mov	r3, sl
 80013de:	0409      	lsls	r1, r1, #16
 80013e0:	430b      	orrs	r3, r1
 80013e2:	469a      	mov	sl, r3
 80013e4:	2a1f      	cmp	r2, #31
 80013e6:	dd00      	ble.n	80013ea <__aeabi_dadd+0x7e>
 80013e8:	e1e7      	b.n	80017ba <__aeabi_dadd+0x44e>
 80013ea:	2120      	movs	r1, #32
 80013ec:	4655      	mov	r5, sl
 80013ee:	1a8b      	subs	r3, r1, r2
 80013f0:	4661      	mov	r1, ip
 80013f2:	409d      	lsls	r5, r3
 80013f4:	40d1      	lsrs	r1, r2
 80013f6:	430d      	orrs	r5, r1
 80013f8:	4661      	mov	r1, ip
 80013fa:	4099      	lsls	r1, r3
 80013fc:	1e4b      	subs	r3, r1, #1
 80013fe:	4199      	sbcs	r1, r3
 8001400:	4653      	mov	r3, sl
 8001402:	40d3      	lsrs	r3, r2
 8001404:	430d      	orrs	r5, r1
 8001406:	1ae4      	subs	r4, r4, r3
 8001408:	1b45      	subs	r5, r0, r5
 800140a:	42a8      	cmp	r0, r5
 800140c:	4180      	sbcs	r0, r0
 800140e:	4240      	negs	r0, r0
 8001410:	1a24      	subs	r4, r4, r0
 8001412:	0223      	lsls	r3, r4, #8
 8001414:	d400      	bmi.n	8001418 <__aeabi_dadd+0xac>
 8001416:	e10f      	b.n	8001638 <__aeabi_dadd+0x2cc>
 8001418:	0264      	lsls	r4, r4, #9
 800141a:	0a64      	lsrs	r4, r4, #9
 800141c:	2c00      	cmp	r4, #0
 800141e:	d100      	bne.n	8001422 <__aeabi_dadd+0xb6>
 8001420:	e139      	b.n	8001696 <__aeabi_dadd+0x32a>
 8001422:	0020      	movs	r0, r4
 8001424:	f001 ff2a 	bl	800327c <__clzsi2>
 8001428:	0003      	movs	r3, r0
 800142a:	3b08      	subs	r3, #8
 800142c:	2120      	movs	r1, #32
 800142e:	0028      	movs	r0, r5
 8001430:	1aca      	subs	r2, r1, r3
 8001432:	40d0      	lsrs	r0, r2
 8001434:	409c      	lsls	r4, r3
 8001436:	0002      	movs	r2, r0
 8001438:	409d      	lsls	r5, r3
 800143a:	4322      	orrs	r2, r4
 800143c:	429f      	cmp	r7, r3
 800143e:	dd00      	ble.n	8001442 <__aeabi_dadd+0xd6>
 8001440:	e173      	b.n	800172a <__aeabi_dadd+0x3be>
 8001442:	1bd8      	subs	r0, r3, r7
 8001444:	3001      	adds	r0, #1
 8001446:	1a09      	subs	r1, r1, r0
 8001448:	002c      	movs	r4, r5
 800144a:	408d      	lsls	r5, r1
 800144c:	40c4      	lsrs	r4, r0
 800144e:	1e6b      	subs	r3, r5, #1
 8001450:	419d      	sbcs	r5, r3
 8001452:	0013      	movs	r3, r2
 8001454:	40c2      	lsrs	r2, r0
 8001456:	408b      	lsls	r3, r1
 8001458:	4325      	orrs	r5, r4
 800145a:	2700      	movs	r7, #0
 800145c:	0014      	movs	r4, r2
 800145e:	431d      	orrs	r5, r3
 8001460:	076b      	lsls	r3, r5, #29
 8001462:	d009      	beq.n	8001478 <__aeabi_dadd+0x10c>
 8001464:	230f      	movs	r3, #15
 8001466:	402b      	ands	r3, r5
 8001468:	2b04      	cmp	r3, #4
 800146a:	d005      	beq.n	8001478 <__aeabi_dadd+0x10c>
 800146c:	1d2b      	adds	r3, r5, #4
 800146e:	42ab      	cmp	r3, r5
 8001470:	41ad      	sbcs	r5, r5
 8001472:	426d      	negs	r5, r5
 8001474:	1964      	adds	r4, r4, r5
 8001476:	001d      	movs	r5, r3
 8001478:	0223      	lsls	r3, r4, #8
 800147a:	d400      	bmi.n	800147e <__aeabi_dadd+0x112>
 800147c:	e12d      	b.n	80016da <__aeabi_dadd+0x36e>
 800147e:	4a9d      	ldr	r2, [pc, #628]	@ (80016f4 <__aeabi_dadd+0x388>)
 8001480:	3701      	adds	r7, #1
 8001482:	4297      	cmp	r7, r2
 8001484:	d100      	bne.n	8001488 <__aeabi_dadd+0x11c>
 8001486:	e0d3      	b.n	8001630 <__aeabi_dadd+0x2c4>
 8001488:	4646      	mov	r6, r8
 800148a:	499b      	ldr	r1, [pc, #620]	@ (80016f8 <__aeabi_dadd+0x38c>)
 800148c:	08ed      	lsrs	r5, r5, #3
 800148e:	4021      	ands	r1, r4
 8001490:	074a      	lsls	r2, r1, #29
 8001492:	432a      	orrs	r2, r5
 8001494:	057c      	lsls	r4, r7, #21
 8001496:	024d      	lsls	r5, r1, #9
 8001498:	0b2d      	lsrs	r5, r5, #12
 800149a:	0d64      	lsrs	r4, r4, #21
 800149c:	0524      	lsls	r4, r4, #20
 800149e:	432c      	orrs	r4, r5
 80014a0:	07f6      	lsls	r6, r6, #31
 80014a2:	4334      	orrs	r4, r6
 80014a4:	0010      	movs	r0, r2
 80014a6:	0021      	movs	r1, r4
 80014a8:	b003      	add	sp, #12
 80014aa:	bcf0      	pop	{r4, r5, r6, r7}
 80014ac:	46bb      	mov	fp, r7
 80014ae:	46b2      	mov	sl, r6
 80014b0:	46a9      	mov	r9, r5
 80014b2:	46a0      	mov	r8, r4
 80014b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b6:	2a00      	cmp	r2, #0
 80014b8:	d100      	bne.n	80014bc <__aeabi_dadd+0x150>
 80014ba:	e084      	b.n	80015c6 <__aeabi_dadd+0x25a>
 80014bc:	464a      	mov	r2, r9
 80014be:	1bd2      	subs	r2, r2, r7
 80014c0:	2f00      	cmp	r7, #0
 80014c2:	d000      	beq.n	80014c6 <__aeabi_dadd+0x15a>
 80014c4:	e16d      	b.n	80017a2 <__aeabi_dadd+0x436>
 80014c6:	0025      	movs	r5, r4
 80014c8:	4305      	orrs	r5, r0
 80014ca:	d100      	bne.n	80014ce <__aeabi_dadd+0x162>
 80014cc:	e127      	b.n	800171e <__aeabi_dadd+0x3b2>
 80014ce:	1e56      	subs	r6, r2, #1
 80014d0:	2a01      	cmp	r2, #1
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dadd+0x16a>
 80014d4:	e23b      	b.n	800194e <__aeabi_dadd+0x5e2>
 80014d6:	4d87      	ldr	r5, [pc, #540]	@ (80016f4 <__aeabi_dadd+0x388>)
 80014d8:	42aa      	cmp	r2, r5
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x172>
 80014dc:	e26a      	b.n	80019b4 <__aeabi_dadd+0x648>
 80014de:	2501      	movs	r5, #1
 80014e0:	2e38      	cmp	r6, #56	@ 0x38
 80014e2:	dc12      	bgt.n	800150a <__aeabi_dadd+0x19e>
 80014e4:	0032      	movs	r2, r6
 80014e6:	2a1f      	cmp	r2, #31
 80014e8:	dd00      	ble.n	80014ec <__aeabi_dadd+0x180>
 80014ea:	e1f8      	b.n	80018de <__aeabi_dadd+0x572>
 80014ec:	2620      	movs	r6, #32
 80014ee:	0025      	movs	r5, r4
 80014f0:	1ab6      	subs	r6, r6, r2
 80014f2:	0007      	movs	r7, r0
 80014f4:	4653      	mov	r3, sl
 80014f6:	40b0      	lsls	r0, r6
 80014f8:	40d4      	lsrs	r4, r2
 80014fa:	40b5      	lsls	r5, r6
 80014fc:	40d7      	lsrs	r7, r2
 80014fe:	1e46      	subs	r6, r0, #1
 8001500:	41b0      	sbcs	r0, r6
 8001502:	1b1b      	subs	r3, r3, r4
 8001504:	469a      	mov	sl, r3
 8001506:	433d      	orrs	r5, r7
 8001508:	4305      	orrs	r5, r0
 800150a:	4662      	mov	r2, ip
 800150c:	1b55      	subs	r5, r2, r5
 800150e:	45ac      	cmp	ip, r5
 8001510:	4192      	sbcs	r2, r2
 8001512:	4653      	mov	r3, sl
 8001514:	4252      	negs	r2, r2
 8001516:	000e      	movs	r6, r1
 8001518:	464f      	mov	r7, r9
 800151a:	4688      	mov	r8, r1
 800151c:	1a9c      	subs	r4, r3, r2
 800151e:	e778      	b.n	8001412 <__aeabi_dadd+0xa6>
 8001520:	2a00      	cmp	r2, #0
 8001522:	dc00      	bgt.n	8001526 <__aeabi_dadd+0x1ba>
 8001524:	e08e      	b.n	8001644 <__aeabi_dadd+0x2d8>
 8001526:	4649      	mov	r1, r9
 8001528:	2900      	cmp	r1, #0
 800152a:	d175      	bne.n	8001618 <__aeabi_dadd+0x2ac>
 800152c:	4661      	mov	r1, ip
 800152e:	4653      	mov	r3, sl
 8001530:	4319      	orrs	r1, r3
 8001532:	d100      	bne.n	8001536 <__aeabi_dadd+0x1ca>
 8001534:	e0f6      	b.n	8001724 <__aeabi_dadd+0x3b8>
 8001536:	1e51      	subs	r1, r2, #1
 8001538:	2a01      	cmp	r2, #1
 800153a:	d100      	bne.n	800153e <__aeabi_dadd+0x1d2>
 800153c:	e191      	b.n	8001862 <__aeabi_dadd+0x4f6>
 800153e:	4d6d      	ldr	r5, [pc, #436]	@ (80016f4 <__aeabi_dadd+0x388>)
 8001540:	42aa      	cmp	r2, r5
 8001542:	d100      	bne.n	8001546 <__aeabi_dadd+0x1da>
 8001544:	e0dc      	b.n	8001700 <__aeabi_dadd+0x394>
 8001546:	2501      	movs	r5, #1
 8001548:	2938      	cmp	r1, #56	@ 0x38
 800154a:	dc14      	bgt.n	8001576 <__aeabi_dadd+0x20a>
 800154c:	000a      	movs	r2, r1
 800154e:	2a1f      	cmp	r2, #31
 8001550:	dd00      	ble.n	8001554 <__aeabi_dadd+0x1e8>
 8001552:	e1a2      	b.n	800189a <__aeabi_dadd+0x52e>
 8001554:	2120      	movs	r1, #32
 8001556:	4653      	mov	r3, sl
 8001558:	1a89      	subs	r1, r1, r2
 800155a:	408b      	lsls	r3, r1
 800155c:	001d      	movs	r5, r3
 800155e:	4663      	mov	r3, ip
 8001560:	40d3      	lsrs	r3, r2
 8001562:	431d      	orrs	r5, r3
 8001564:	4663      	mov	r3, ip
 8001566:	408b      	lsls	r3, r1
 8001568:	0019      	movs	r1, r3
 800156a:	1e4b      	subs	r3, r1, #1
 800156c:	4199      	sbcs	r1, r3
 800156e:	4653      	mov	r3, sl
 8001570:	40d3      	lsrs	r3, r2
 8001572:	430d      	orrs	r5, r1
 8001574:	18e4      	adds	r4, r4, r3
 8001576:	182d      	adds	r5, r5, r0
 8001578:	4285      	cmp	r5, r0
 800157a:	4180      	sbcs	r0, r0
 800157c:	4240      	negs	r0, r0
 800157e:	1824      	adds	r4, r4, r0
 8001580:	0223      	lsls	r3, r4, #8
 8001582:	d559      	bpl.n	8001638 <__aeabi_dadd+0x2cc>
 8001584:	4b5b      	ldr	r3, [pc, #364]	@ (80016f4 <__aeabi_dadd+0x388>)
 8001586:	3701      	adds	r7, #1
 8001588:	429f      	cmp	r7, r3
 800158a:	d051      	beq.n	8001630 <__aeabi_dadd+0x2c4>
 800158c:	2101      	movs	r1, #1
 800158e:	4b5a      	ldr	r3, [pc, #360]	@ (80016f8 <__aeabi_dadd+0x38c>)
 8001590:	086a      	lsrs	r2, r5, #1
 8001592:	401c      	ands	r4, r3
 8001594:	4029      	ands	r1, r5
 8001596:	430a      	orrs	r2, r1
 8001598:	07e5      	lsls	r5, r4, #31
 800159a:	4315      	orrs	r5, r2
 800159c:	0864      	lsrs	r4, r4, #1
 800159e:	e75f      	b.n	8001460 <__aeabi_dadd+0xf4>
 80015a0:	4661      	mov	r1, ip
 80015a2:	4653      	mov	r3, sl
 80015a4:	4319      	orrs	r1, r3
 80015a6:	d100      	bne.n	80015aa <__aeabi_dadd+0x23e>
 80015a8:	e0bc      	b.n	8001724 <__aeabi_dadd+0x3b8>
 80015aa:	1e51      	subs	r1, r2, #1
 80015ac:	2a01      	cmp	r2, #1
 80015ae:	d100      	bne.n	80015b2 <__aeabi_dadd+0x246>
 80015b0:	e164      	b.n	800187c <__aeabi_dadd+0x510>
 80015b2:	4d50      	ldr	r5, [pc, #320]	@ (80016f4 <__aeabi_dadd+0x388>)
 80015b4:	42aa      	cmp	r2, r5
 80015b6:	d100      	bne.n	80015ba <__aeabi_dadd+0x24e>
 80015b8:	e16a      	b.n	8001890 <__aeabi_dadd+0x524>
 80015ba:	2501      	movs	r5, #1
 80015bc:	2938      	cmp	r1, #56	@ 0x38
 80015be:	dd00      	ble.n	80015c2 <__aeabi_dadd+0x256>
 80015c0:	e722      	b.n	8001408 <__aeabi_dadd+0x9c>
 80015c2:	000a      	movs	r2, r1
 80015c4:	e70e      	b.n	80013e4 <__aeabi_dadd+0x78>
 80015c6:	4a4d      	ldr	r2, [pc, #308]	@ (80016fc <__aeabi_dadd+0x390>)
 80015c8:	1c7d      	adds	r5, r7, #1
 80015ca:	4215      	tst	r5, r2
 80015cc:	d000      	beq.n	80015d0 <__aeabi_dadd+0x264>
 80015ce:	e0d0      	b.n	8001772 <__aeabi_dadd+0x406>
 80015d0:	0025      	movs	r5, r4
 80015d2:	4662      	mov	r2, ip
 80015d4:	4653      	mov	r3, sl
 80015d6:	4305      	orrs	r5, r0
 80015d8:	431a      	orrs	r2, r3
 80015da:	2f00      	cmp	r7, #0
 80015dc:	d000      	beq.n	80015e0 <__aeabi_dadd+0x274>
 80015de:	e137      	b.n	8001850 <__aeabi_dadd+0x4e4>
 80015e0:	2d00      	cmp	r5, #0
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dadd+0x27a>
 80015e4:	e1a8      	b.n	8001938 <__aeabi_dadd+0x5cc>
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d100      	bne.n	80015ec <__aeabi_dadd+0x280>
 80015ea:	e16a      	b.n	80018c2 <__aeabi_dadd+0x556>
 80015ec:	4663      	mov	r3, ip
 80015ee:	1ac5      	subs	r5, r0, r3
 80015f0:	4653      	mov	r3, sl
 80015f2:	1ae2      	subs	r2, r4, r3
 80015f4:	42a8      	cmp	r0, r5
 80015f6:	419b      	sbcs	r3, r3
 80015f8:	425b      	negs	r3, r3
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	021a      	lsls	r2, r3, #8
 80015fe:	d400      	bmi.n	8001602 <__aeabi_dadd+0x296>
 8001600:	e203      	b.n	8001a0a <__aeabi_dadd+0x69e>
 8001602:	4663      	mov	r3, ip
 8001604:	1a1d      	subs	r5, r3, r0
 8001606:	45ac      	cmp	ip, r5
 8001608:	4192      	sbcs	r2, r2
 800160a:	4653      	mov	r3, sl
 800160c:	4252      	negs	r2, r2
 800160e:	1b1c      	subs	r4, r3, r4
 8001610:	000e      	movs	r6, r1
 8001612:	4688      	mov	r8, r1
 8001614:	1aa4      	subs	r4, r4, r2
 8001616:	e723      	b.n	8001460 <__aeabi_dadd+0xf4>
 8001618:	4936      	ldr	r1, [pc, #216]	@ (80016f4 <__aeabi_dadd+0x388>)
 800161a:	428f      	cmp	r7, r1
 800161c:	d070      	beq.n	8001700 <__aeabi_dadd+0x394>
 800161e:	2501      	movs	r5, #1
 8001620:	2a38      	cmp	r2, #56	@ 0x38
 8001622:	dca8      	bgt.n	8001576 <__aeabi_dadd+0x20a>
 8001624:	2180      	movs	r1, #128	@ 0x80
 8001626:	4653      	mov	r3, sl
 8001628:	0409      	lsls	r1, r1, #16
 800162a:	430b      	orrs	r3, r1
 800162c:	469a      	mov	sl, r3
 800162e:	e78e      	b.n	800154e <__aeabi_dadd+0x1e2>
 8001630:	003c      	movs	r4, r7
 8001632:	2500      	movs	r5, #0
 8001634:	2200      	movs	r2, #0
 8001636:	e731      	b.n	800149c <__aeabi_dadd+0x130>
 8001638:	2307      	movs	r3, #7
 800163a:	402b      	ands	r3, r5
 800163c:	2b00      	cmp	r3, #0
 800163e:	d000      	beq.n	8001642 <__aeabi_dadd+0x2d6>
 8001640:	e710      	b.n	8001464 <__aeabi_dadd+0xf8>
 8001642:	e093      	b.n	800176c <__aeabi_dadd+0x400>
 8001644:	2a00      	cmp	r2, #0
 8001646:	d074      	beq.n	8001732 <__aeabi_dadd+0x3c6>
 8001648:	464a      	mov	r2, r9
 800164a:	1bd2      	subs	r2, r2, r7
 800164c:	2f00      	cmp	r7, #0
 800164e:	d100      	bne.n	8001652 <__aeabi_dadd+0x2e6>
 8001650:	e0c7      	b.n	80017e2 <__aeabi_dadd+0x476>
 8001652:	4928      	ldr	r1, [pc, #160]	@ (80016f4 <__aeabi_dadd+0x388>)
 8001654:	4589      	cmp	r9, r1
 8001656:	d100      	bne.n	800165a <__aeabi_dadd+0x2ee>
 8001658:	e185      	b.n	8001966 <__aeabi_dadd+0x5fa>
 800165a:	2501      	movs	r5, #1
 800165c:	2a38      	cmp	r2, #56	@ 0x38
 800165e:	dc12      	bgt.n	8001686 <__aeabi_dadd+0x31a>
 8001660:	2180      	movs	r1, #128	@ 0x80
 8001662:	0409      	lsls	r1, r1, #16
 8001664:	430c      	orrs	r4, r1
 8001666:	2a1f      	cmp	r2, #31
 8001668:	dd00      	ble.n	800166c <__aeabi_dadd+0x300>
 800166a:	e1ab      	b.n	80019c4 <__aeabi_dadd+0x658>
 800166c:	2120      	movs	r1, #32
 800166e:	0025      	movs	r5, r4
 8001670:	1a89      	subs	r1, r1, r2
 8001672:	0007      	movs	r7, r0
 8001674:	4088      	lsls	r0, r1
 8001676:	408d      	lsls	r5, r1
 8001678:	40d7      	lsrs	r7, r2
 800167a:	1e41      	subs	r1, r0, #1
 800167c:	4188      	sbcs	r0, r1
 800167e:	40d4      	lsrs	r4, r2
 8001680:	433d      	orrs	r5, r7
 8001682:	4305      	orrs	r5, r0
 8001684:	44a2      	add	sl, r4
 8001686:	4465      	add	r5, ip
 8001688:	4565      	cmp	r5, ip
 800168a:	4192      	sbcs	r2, r2
 800168c:	4252      	negs	r2, r2
 800168e:	4452      	add	r2, sl
 8001690:	0014      	movs	r4, r2
 8001692:	464f      	mov	r7, r9
 8001694:	e774      	b.n	8001580 <__aeabi_dadd+0x214>
 8001696:	0028      	movs	r0, r5
 8001698:	f001 fdf0 	bl	800327c <__clzsi2>
 800169c:	0003      	movs	r3, r0
 800169e:	3318      	adds	r3, #24
 80016a0:	2b1f      	cmp	r3, #31
 80016a2:	dc00      	bgt.n	80016a6 <__aeabi_dadd+0x33a>
 80016a4:	e6c2      	b.n	800142c <__aeabi_dadd+0xc0>
 80016a6:	002a      	movs	r2, r5
 80016a8:	3808      	subs	r0, #8
 80016aa:	4082      	lsls	r2, r0
 80016ac:	429f      	cmp	r7, r3
 80016ae:	dd00      	ble.n	80016b2 <__aeabi_dadd+0x346>
 80016b0:	e0a9      	b.n	8001806 <__aeabi_dadd+0x49a>
 80016b2:	1bdb      	subs	r3, r3, r7
 80016b4:	1c58      	adds	r0, r3, #1
 80016b6:	281f      	cmp	r0, #31
 80016b8:	dc00      	bgt.n	80016bc <__aeabi_dadd+0x350>
 80016ba:	e1ac      	b.n	8001a16 <__aeabi_dadd+0x6aa>
 80016bc:	0015      	movs	r5, r2
 80016be:	3b1f      	subs	r3, #31
 80016c0:	40dd      	lsrs	r5, r3
 80016c2:	2820      	cmp	r0, #32
 80016c4:	d005      	beq.n	80016d2 <__aeabi_dadd+0x366>
 80016c6:	2340      	movs	r3, #64	@ 0x40
 80016c8:	1a1b      	subs	r3, r3, r0
 80016ca:	409a      	lsls	r2, r3
 80016cc:	1e53      	subs	r3, r2, #1
 80016ce:	419a      	sbcs	r2, r3
 80016d0:	4315      	orrs	r5, r2
 80016d2:	2307      	movs	r3, #7
 80016d4:	2700      	movs	r7, #0
 80016d6:	402b      	ands	r3, r5
 80016d8:	e7b0      	b.n	800163c <__aeabi_dadd+0x2d0>
 80016da:	08ed      	lsrs	r5, r5, #3
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <__aeabi_dadd+0x388>)
 80016de:	0762      	lsls	r2, r4, #29
 80016e0:	432a      	orrs	r2, r5
 80016e2:	08e4      	lsrs	r4, r4, #3
 80016e4:	429f      	cmp	r7, r3
 80016e6:	d00f      	beq.n	8001708 <__aeabi_dadd+0x39c>
 80016e8:	0324      	lsls	r4, r4, #12
 80016ea:	0b25      	lsrs	r5, r4, #12
 80016ec:	057c      	lsls	r4, r7, #21
 80016ee:	0d64      	lsrs	r4, r4, #21
 80016f0:	e6d4      	b.n	800149c <__aeabi_dadd+0x130>
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	000007ff 	.word	0x000007ff
 80016f8:	ff7fffff 	.word	0xff7fffff
 80016fc:	000007fe 	.word	0x000007fe
 8001700:	08c0      	lsrs	r0, r0, #3
 8001702:	0762      	lsls	r2, r4, #29
 8001704:	4302      	orrs	r2, r0
 8001706:	08e4      	lsrs	r4, r4, #3
 8001708:	0013      	movs	r3, r2
 800170a:	4323      	orrs	r3, r4
 800170c:	d100      	bne.n	8001710 <__aeabi_dadd+0x3a4>
 800170e:	e186      	b.n	8001a1e <__aeabi_dadd+0x6b2>
 8001710:	2580      	movs	r5, #128	@ 0x80
 8001712:	032d      	lsls	r5, r5, #12
 8001714:	4325      	orrs	r5, r4
 8001716:	032d      	lsls	r5, r5, #12
 8001718:	4cc3      	ldr	r4, [pc, #780]	@ (8001a28 <__aeabi_dadd+0x6bc>)
 800171a:	0b2d      	lsrs	r5, r5, #12
 800171c:	e6be      	b.n	800149c <__aeabi_dadd+0x130>
 800171e:	4660      	mov	r0, ip
 8001720:	4654      	mov	r4, sl
 8001722:	000e      	movs	r6, r1
 8001724:	0017      	movs	r7, r2
 8001726:	08c5      	lsrs	r5, r0, #3
 8001728:	e7d8      	b.n	80016dc <__aeabi_dadd+0x370>
 800172a:	4cc0      	ldr	r4, [pc, #768]	@ (8001a2c <__aeabi_dadd+0x6c0>)
 800172c:	1aff      	subs	r7, r7, r3
 800172e:	4014      	ands	r4, r2
 8001730:	e696      	b.n	8001460 <__aeabi_dadd+0xf4>
 8001732:	4abf      	ldr	r2, [pc, #764]	@ (8001a30 <__aeabi_dadd+0x6c4>)
 8001734:	1c79      	adds	r1, r7, #1
 8001736:	4211      	tst	r1, r2
 8001738:	d16b      	bne.n	8001812 <__aeabi_dadd+0x4a6>
 800173a:	0022      	movs	r2, r4
 800173c:	4302      	orrs	r2, r0
 800173e:	2f00      	cmp	r7, #0
 8001740:	d000      	beq.n	8001744 <__aeabi_dadd+0x3d8>
 8001742:	e0db      	b.n	80018fc <__aeabi_dadd+0x590>
 8001744:	2a00      	cmp	r2, #0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x3de>
 8001748:	e12d      	b.n	80019a6 <__aeabi_dadd+0x63a>
 800174a:	4662      	mov	r2, ip
 800174c:	4653      	mov	r3, sl
 800174e:	431a      	orrs	r2, r3
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x3e8>
 8001752:	e0b6      	b.n	80018c2 <__aeabi_dadd+0x556>
 8001754:	4663      	mov	r3, ip
 8001756:	18c5      	adds	r5, r0, r3
 8001758:	4285      	cmp	r5, r0
 800175a:	4180      	sbcs	r0, r0
 800175c:	4454      	add	r4, sl
 800175e:	4240      	negs	r0, r0
 8001760:	1824      	adds	r4, r4, r0
 8001762:	0223      	lsls	r3, r4, #8
 8001764:	d502      	bpl.n	800176c <__aeabi_dadd+0x400>
 8001766:	000f      	movs	r7, r1
 8001768:	4bb0      	ldr	r3, [pc, #704]	@ (8001a2c <__aeabi_dadd+0x6c0>)
 800176a:	401c      	ands	r4, r3
 800176c:	003a      	movs	r2, r7
 800176e:	0028      	movs	r0, r5
 8001770:	e7d8      	b.n	8001724 <__aeabi_dadd+0x3b8>
 8001772:	4662      	mov	r2, ip
 8001774:	1a85      	subs	r5, r0, r2
 8001776:	42a8      	cmp	r0, r5
 8001778:	4192      	sbcs	r2, r2
 800177a:	4653      	mov	r3, sl
 800177c:	4252      	negs	r2, r2
 800177e:	4691      	mov	r9, r2
 8001780:	1ae3      	subs	r3, r4, r3
 8001782:	001a      	movs	r2, r3
 8001784:	464b      	mov	r3, r9
 8001786:	1ad2      	subs	r2, r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	4691      	mov	r9, r2
 800178c:	021a      	lsls	r2, r3, #8
 800178e:	d454      	bmi.n	800183a <__aeabi_dadd+0x4ce>
 8001790:	464a      	mov	r2, r9
 8001792:	464c      	mov	r4, r9
 8001794:	432a      	orrs	r2, r5
 8001796:	d000      	beq.n	800179a <__aeabi_dadd+0x42e>
 8001798:	e640      	b.n	800141c <__aeabi_dadd+0xb0>
 800179a:	2600      	movs	r6, #0
 800179c:	2400      	movs	r4, #0
 800179e:	2500      	movs	r5, #0
 80017a0:	e67c      	b.n	800149c <__aeabi_dadd+0x130>
 80017a2:	4da1      	ldr	r5, [pc, #644]	@ (8001a28 <__aeabi_dadd+0x6bc>)
 80017a4:	45a9      	cmp	r9, r5
 80017a6:	d100      	bne.n	80017aa <__aeabi_dadd+0x43e>
 80017a8:	e090      	b.n	80018cc <__aeabi_dadd+0x560>
 80017aa:	2501      	movs	r5, #1
 80017ac:	2a38      	cmp	r2, #56	@ 0x38
 80017ae:	dd00      	ble.n	80017b2 <__aeabi_dadd+0x446>
 80017b0:	e6ab      	b.n	800150a <__aeabi_dadd+0x19e>
 80017b2:	2580      	movs	r5, #128	@ 0x80
 80017b4:	042d      	lsls	r5, r5, #16
 80017b6:	432c      	orrs	r4, r5
 80017b8:	e695      	b.n	80014e6 <__aeabi_dadd+0x17a>
 80017ba:	0011      	movs	r1, r2
 80017bc:	4655      	mov	r5, sl
 80017be:	3920      	subs	r1, #32
 80017c0:	40cd      	lsrs	r5, r1
 80017c2:	46a9      	mov	r9, r5
 80017c4:	2a20      	cmp	r2, #32
 80017c6:	d006      	beq.n	80017d6 <__aeabi_dadd+0x46a>
 80017c8:	2140      	movs	r1, #64	@ 0x40
 80017ca:	4653      	mov	r3, sl
 80017cc:	1a8a      	subs	r2, r1, r2
 80017ce:	4093      	lsls	r3, r2
 80017d0:	4662      	mov	r2, ip
 80017d2:	431a      	orrs	r2, r3
 80017d4:	4694      	mov	ip, r2
 80017d6:	4665      	mov	r5, ip
 80017d8:	1e6b      	subs	r3, r5, #1
 80017da:	419d      	sbcs	r5, r3
 80017dc:	464b      	mov	r3, r9
 80017de:	431d      	orrs	r5, r3
 80017e0:	e612      	b.n	8001408 <__aeabi_dadd+0x9c>
 80017e2:	0021      	movs	r1, r4
 80017e4:	4301      	orrs	r1, r0
 80017e6:	d100      	bne.n	80017ea <__aeabi_dadd+0x47e>
 80017e8:	e0c4      	b.n	8001974 <__aeabi_dadd+0x608>
 80017ea:	1e51      	subs	r1, r2, #1
 80017ec:	2a01      	cmp	r2, #1
 80017ee:	d100      	bne.n	80017f2 <__aeabi_dadd+0x486>
 80017f0:	e0fb      	b.n	80019ea <__aeabi_dadd+0x67e>
 80017f2:	4d8d      	ldr	r5, [pc, #564]	@ (8001a28 <__aeabi_dadd+0x6bc>)
 80017f4:	42aa      	cmp	r2, r5
 80017f6:	d100      	bne.n	80017fa <__aeabi_dadd+0x48e>
 80017f8:	e0b5      	b.n	8001966 <__aeabi_dadd+0x5fa>
 80017fa:	2501      	movs	r5, #1
 80017fc:	2938      	cmp	r1, #56	@ 0x38
 80017fe:	dd00      	ble.n	8001802 <__aeabi_dadd+0x496>
 8001800:	e741      	b.n	8001686 <__aeabi_dadd+0x31a>
 8001802:	000a      	movs	r2, r1
 8001804:	e72f      	b.n	8001666 <__aeabi_dadd+0x2fa>
 8001806:	4c89      	ldr	r4, [pc, #548]	@ (8001a2c <__aeabi_dadd+0x6c0>)
 8001808:	1aff      	subs	r7, r7, r3
 800180a:	4014      	ands	r4, r2
 800180c:	0762      	lsls	r2, r4, #29
 800180e:	08e4      	lsrs	r4, r4, #3
 8001810:	e76a      	b.n	80016e8 <__aeabi_dadd+0x37c>
 8001812:	4a85      	ldr	r2, [pc, #532]	@ (8001a28 <__aeabi_dadd+0x6bc>)
 8001814:	4291      	cmp	r1, r2
 8001816:	d100      	bne.n	800181a <__aeabi_dadd+0x4ae>
 8001818:	e0e3      	b.n	80019e2 <__aeabi_dadd+0x676>
 800181a:	4663      	mov	r3, ip
 800181c:	18c2      	adds	r2, r0, r3
 800181e:	4282      	cmp	r2, r0
 8001820:	4180      	sbcs	r0, r0
 8001822:	0023      	movs	r3, r4
 8001824:	4240      	negs	r0, r0
 8001826:	4453      	add	r3, sl
 8001828:	181b      	adds	r3, r3, r0
 800182a:	07dd      	lsls	r5, r3, #31
 800182c:	085c      	lsrs	r4, r3, #1
 800182e:	2307      	movs	r3, #7
 8001830:	0852      	lsrs	r2, r2, #1
 8001832:	4315      	orrs	r5, r2
 8001834:	000f      	movs	r7, r1
 8001836:	402b      	ands	r3, r5
 8001838:	e700      	b.n	800163c <__aeabi_dadd+0x2d0>
 800183a:	4663      	mov	r3, ip
 800183c:	1a1d      	subs	r5, r3, r0
 800183e:	45ac      	cmp	ip, r5
 8001840:	4192      	sbcs	r2, r2
 8001842:	4653      	mov	r3, sl
 8001844:	4252      	negs	r2, r2
 8001846:	1b1c      	subs	r4, r3, r4
 8001848:	000e      	movs	r6, r1
 800184a:	4688      	mov	r8, r1
 800184c:	1aa4      	subs	r4, r4, r2
 800184e:	e5e5      	b.n	800141c <__aeabi_dadd+0xb0>
 8001850:	2d00      	cmp	r5, #0
 8001852:	d000      	beq.n	8001856 <__aeabi_dadd+0x4ea>
 8001854:	e091      	b.n	800197a <__aeabi_dadd+0x60e>
 8001856:	2a00      	cmp	r2, #0
 8001858:	d138      	bne.n	80018cc <__aeabi_dadd+0x560>
 800185a:	2480      	movs	r4, #128	@ 0x80
 800185c:	2600      	movs	r6, #0
 800185e:	0324      	lsls	r4, r4, #12
 8001860:	e756      	b.n	8001710 <__aeabi_dadd+0x3a4>
 8001862:	4663      	mov	r3, ip
 8001864:	18c5      	adds	r5, r0, r3
 8001866:	4285      	cmp	r5, r0
 8001868:	4180      	sbcs	r0, r0
 800186a:	4454      	add	r4, sl
 800186c:	4240      	negs	r0, r0
 800186e:	1824      	adds	r4, r4, r0
 8001870:	2701      	movs	r7, #1
 8001872:	0223      	lsls	r3, r4, #8
 8001874:	d400      	bmi.n	8001878 <__aeabi_dadd+0x50c>
 8001876:	e6df      	b.n	8001638 <__aeabi_dadd+0x2cc>
 8001878:	2702      	movs	r7, #2
 800187a:	e687      	b.n	800158c <__aeabi_dadd+0x220>
 800187c:	4663      	mov	r3, ip
 800187e:	1ac5      	subs	r5, r0, r3
 8001880:	42a8      	cmp	r0, r5
 8001882:	4180      	sbcs	r0, r0
 8001884:	4653      	mov	r3, sl
 8001886:	4240      	negs	r0, r0
 8001888:	1ae4      	subs	r4, r4, r3
 800188a:	2701      	movs	r7, #1
 800188c:	1a24      	subs	r4, r4, r0
 800188e:	e5c0      	b.n	8001412 <__aeabi_dadd+0xa6>
 8001890:	0762      	lsls	r2, r4, #29
 8001892:	08c0      	lsrs	r0, r0, #3
 8001894:	4302      	orrs	r2, r0
 8001896:	08e4      	lsrs	r4, r4, #3
 8001898:	e736      	b.n	8001708 <__aeabi_dadd+0x39c>
 800189a:	0011      	movs	r1, r2
 800189c:	4653      	mov	r3, sl
 800189e:	3920      	subs	r1, #32
 80018a0:	40cb      	lsrs	r3, r1
 80018a2:	4699      	mov	r9, r3
 80018a4:	2a20      	cmp	r2, #32
 80018a6:	d006      	beq.n	80018b6 <__aeabi_dadd+0x54a>
 80018a8:	2140      	movs	r1, #64	@ 0x40
 80018aa:	4653      	mov	r3, sl
 80018ac:	1a8a      	subs	r2, r1, r2
 80018ae:	4093      	lsls	r3, r2
 80018b0:	4662      	mov	r2, ip
 80018b2:	431a      	orrs	r2, r3
 80018b4:	4694      	mov	ip, r2
 80018b6:	4665      	mov	r5, ip
 80018b8:	1e6b      	subs	r3, r5, #1
 80018ba:	419d      	sbcs	r5, r3
 80018bc:	464b      	mov	r3, r9
 80018be:	431d      	orrs	r5, r3
 80018c0:	e659      	b.n	8001576 <__aeabi_dadd+0x20a>
 80018c2:	0762      	lsls	r2, r4, #29
 80018c4:	08c0      	lsrs	r0, r0, #3
 80018c6:	4302      	orrs	r2, r0
 80018c8:	08e4      	lsrs	r4, r4, #3
 80018ca:	e70d      	b.n	80016e8 <__aeabi_dadd+0x37c>
 80018cc:	4653      	mov	r3, sl
 80018ce:	075a      	lsls	r2, r3, #29
 80018d0:	4663      	mov	r3, ip
 80018d2:	08d8      	lsrs	r0, r3, #3
 80018d4:	4653      	mov	r3, sl
 80018d6:	000e      	movs	r6, r1
 80018d8:	4302      	orrs	r2, r0
 80018da:	08dc      	lsrs	r4, r3, #3
 80018dc:	e714      	b.n	8001708 <__aeabi_dadd+0x39c>
 80018de:	0015      	movs	r5, r2
 80018e0:	0026      	movs	r6, r4
 80018e2:	3d20      	subs	r5, #32
 80018e4:	40ee      	lsrs	r6, r5
 80018e6:	2a20      	cmp	r2, #32
 80018e8:	d003      	beq.n	80018f2 <__aeabi_dadd+0x586>
 80018ea:	2540      	movs	r5, #64	@ 0x40
 80018ec:	1aaa      	subs	r2, r5, r2
 80018ee:	4094      	lsls	r4, r2
 80018f0:	4320      	orrs	r0, r4
 80018f2:	1e42      	subs	r2, r0, #1
 80018f4:	4190      	sbcs	r0, r2
 80018f6:	0005      	movs	r5, r0
 80018f8:	4335      	orrs	r5, r6
 80018fa:	e606      	b.n	800150a <__aeabi_dadd+0x19e>
 80018fc:	2a00      	cmp	r2, #0
 80018fe:	d07c      	beq.n	80019fa <__aeabi_dadd+0x68e>
 8001900:	4662      	mov	r2, ip
 8001902:	4653      	mov	r3, sl
 8001904:	08c0      	lsrs	r0, r0, #3
 8001906:	431a      	orrs	r2, r3
 8001908:	d100      	bne.n	800190c <__aeabi_dadd+0x5a0>
 800190a:	e6fa      	b.n	8001702 <__aeabi_dadd+0x396>
 800190c:	0762      	lsls	r2, r4, #29
 800190e:	4310      	orrs	r0, r2
 8001910:	2280      	movs	r2, #128	@ 0x80
 8001912:	08e4      	lsrs	r4, r4, #3
 8001914:	0312      	lsls	r2, r2, #12
 8001916:	4214      	tst	r4, r2
 8001918:	d008      	beq.n	800192c <__aeabi_dadd+0x5c0>
 800191a:	08d9      	lsrs	r1, r3, #3
 800191c:	4211      	tst	r1, r2
 800191e:	d105      	bne.n	800192c <__aeabi_dadd+0x5c0>
 8001920:	4663      	mov	r3, ip
 8001922:	08d8      	lsrs	r0, r3, #3
 8001924:	4653      	mov	r3, sl
 8001926:	000c      	movs	r4, r1
 8001928:	075b      	lsls	r3, r3, #29
 800192a:	4318      	orrs	r0, r3
 800192c:	0f42      	lsrs	r2, r0, #29
 800192e:	00c0      	lsls	r0, r0, #3
 8001930:	08c0      	lsrs	r0, r0, #3
 8001932:	0752      	lsls	r2, r2, #29
 8001934:	4302      	orrs	r2, r0
 8001936:	e6e7      	b.n	8001708 <__aeabi_dadd+0x39c>
 8001938:	2a00      	cmp	r2, #0
 800193a:	d100      	bne.n	800193e <__aeabi_dadd+0x5d2>
 800193c:	e72d      	b.n	800179a <__aeabi_dadd+0x42e>
 800193e:	4663      	mov	r3, ip
 8001940:	08d8      	lsrs	r0, r3, #3
 8001942:	4653      	mov	r3, sl
 8001944:	075a      	lsls	r2, r3, #29
 8001946:	000e      	movs	r6, r1
 8001948:	4302      	orrs	r2, r0
 800194a:	08dc      	lsrs	r4, r3, #3
 800194c:	e6cc      	b.n	80016e8 <__aeabi_dadd+0x37c>
 800194e:	4663      	mov	r3, ip
 8001950:	1a1d      	subs	r5, r3, r0
 8001952:	45ac      	cmp	ip, r5
 8001954:	4192      	sbcs	r2, r2
 8001956:	4653      	mov	r3, sl
 8001958:	4252      	negs	r2, r2
 800195a:	1b1c      	subs	r4, r3, r4
 800195c:	000e      	movs	r6, r1
 800195e:	4688      	mov	r8, r1
 8001960:	1aa4      	subs	r4, r4, r2
 8001962:	3701      	adds	r7, #1
 8001964:	e555      	b.n	8001412 <__aeabi_dadd+0xa6>
 8001966:	4663      	mov	r3, ip
 8001968:	08d9      	lsrs	r1, r3, #3
 800196a:	4653      	mov	r3, sl
 800196c:	075a      	lsls	r2, r3, #29
 800196e:	430a      	orrs	r2, r1
 8001970:	08dc      	lsrs	r4, r3, #3
 8001972:	e6c9      	b.n	8001708 <__aeabi_dadd+0x39c>
 8001974:	4660      	mov	r0, ip
 8001976:	4654      	mov	r4, sl
 8001978:	e6d4      	b.n	8001724 <__aeabi_dadd+0x3b8>
 800197a:	08c0      	lsrs	r0, r0, #3
 800197c:	2a00      	cmp	r2, #0
 800197e:	d100      	bne.n	8001982 <__aeabi_dadd+0x616>
 8001980:	e6bf      	b.n	8001702 <__aeabi_dadd+0x396>
 8001982:	0762      	lsls	r2, r4, #29
 8001984:	4310      	orrs	r0, r2
 8001986:	2280      	movs	r2, #128	@ 0x80
 8001988:	08e4      	lsrs	r4, r4, #3
 800198a:	0312      	lsls	r2, r2, #12
 800198c:	4214      	tst	r4, r2
 800198e:	d0cd      	beq.n	800192c <__aeabi_dadd+0x5c0>
 8001990:	08dd      	lsrs	r5, r3, #3
 8001992:	4215      	tst	r5, r2
 8001994:	d1ca      	bne.n	800192c <__aeabi_dadd+0x5c0>
 8001996:	4663      	mov	r3, ip
 8001998:	08d8      	lsrs	r0, r3, #3
 800199a:	4653      	mov	r3, sl
 800199c:	075b      	lsls	r3, r3, #29
 800199e:	000e      	movs	r6, r1
 80019a0:	002c      	movs	r4, r5
 80019a2:	4318      	orrs	r0, r3
 80019a4:	e7c2      	b.n	800192c <__aeabi_dadd+0x5c0>
 80019a6:	4663      	mov	r3, ip
 80019a8:	08d9      	lsrs	r1, r3, #3
 80019aa:	4653      	mov	r3, sl
 80019ac:	075a      	lsls	r2, r3, #29
 80019ae:	430a      	orrs	r2, r1
 80019b0:	08dc      	lsrs	r4, r3, #3
 80019b2:	e699      	b.n	80016e8 <__aeabi_dadd+0x37c>
 80019b4:	4663      	mov	r3, ip
 80019b6:	08d8      	lsrs	r0, r3, #3
 80019b8:	4653      	mov	r3, sl
 80019ba:	075a      	lsls	r2, r3, #29
 80019bc:	000e      	movs	r6, r1
 80019be:	4302      	orrs	r2, r0
 80019c0:	08dc      	lsrs	r4, r3, #3
 80019c2:	e6a1      	b.n	8001708 <__aeabi_dadd+0x39c>
 80019c4:	0011      	movs	r1, r2
 80019c6:	0027      	movs	r7, r4
 80019c8:	3920      	subs	r1, #32
 80019ca:	40cf      	lsrs	r7, r1
 80019cc:	2a20      	cmp	r2, #32
 80019ce:	d003      	beq.n	80019d8 <__aeabi_dadd+0x66c>
 80019d0:	2140      	movs	r1, #64	@ 0x40
 80019d2:	1a8a      	subs	r2, r1, r2
 80019d4:	4094      	lsls	r4, r2
 80019d6:	4320      	orrs	r0, r4
 80019d8:	1e42      	subs	r2, r0, #1
 80019da:	4190      	sbcs	r0, r2
 80019dc:	0005      	movs	r5, r0
 80019de:	433d      	orrs	r5, r7
 80019e0:	e651      	b.n	8001686 <__aeabi_dadd+0x31a>
 80019e2:	000c      	movs	r4, r1
 80019e4:	2500      	movs	r5, #0
 80019e6:	2200      	movs	r2, #0
 80019e8:	e558      	b.n	800149c <__aeabi_dadd+0x130>
 80019ea:	4460      	add	r0, ip
 80019ec:	4560      	cmp	r0, ip
 80019ee:	4192      	sbcs	r2, r2
 80019f0:	4454      	add	r4, sl
 80019f2:	4252      	negs	r2, r2
 80019f4:	0005      	movs	r5, r0
 80019f6:	18a4      	adds	r4, r4, r2
 80019f8:	e73a      	b.n	8001870 <__aeabi_dadd+0x504>
 80019fa:	4653      	mov	r3, sl
 80019fc:	075a      	lsls	r2, r3, #29
 80019fe:	4663      	mov	r3, ip
 8001a00:	08d9      	lsrs	r1, r3, #3
 8001a02:	4653      	mov	r3, sl
 8001a04:	430a      	orrs	r2, r1
 8001a06:	08dc      	lsrs	r4, r3, #3
 8001a08:	e67e      	b.n	8001708 <__aeabi_dadd+0x39c>
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	001c      	movs	r4, r3
 8001a0e:	432a      	orrs	r2, r5
 8001a10:	d000      	beq.n	8001a14 <__aeabi_dadd+0x6a8>
 8001a12:	e6ab      	b.n	800176c <__aeabi_dadd+0x400>
 8001a14:	e6c1      	b.n	800179a <__aeabi_dadd+0x42e>
 8001a16:	2120      	movs	r1, #32
 8001a18:	2500      	movs	r5, #0
 8001a1a:	1a09      	subs	r1, r1, r0
 8001a1c:	e519      	b.n	8001452 <__aeabi_dadd+0xe6>
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2500      	movs	r5, #0
 8001a22:	4c01      	ldr	r4, [pc, #4]	@ (8001a28 <__aeabi_dadd+0x6bc>)
 8001a24:	e53a      	b.n	800149c <__aeabi_dadd+0x130>
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	000007ff 	.word	0x000007ff
 8001a2c:	ff7fffff 	.word	0xff7fffff
 8001a30:	000007fe 	.word	0x000007fe

08001a34 <__aeabi_ddiv>:
 8001a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a36:	46de      	mov	lr, fp
 8001a38:	4645      	mov	r5, r8
 8001a3a:	4657      	mov	r7, sl
 8001a3c:	464e      	mov	r6, r9
 8001a3e:	b5e0      	push	{r5, r6, r7, lr}
 8001a40:	b087      	sub	sp, #28
 8001a42:	9200      	str	r2, [sp, #0]
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	030b      	lsls	r3, r1, #12
 8001a48:	0b1b      	lsrs	r3, r3, #12
 8001a4a:	469b      	mov	fp, r3
 8001a4c:	0fca      	lsrs	r2, r1, #31
 8001a4e:	004b      	lsls	r3, r1, #1
 8001a50:	0004      	movs	r4, r0
 8001a52:	4680      	mov	r8, r0
 8001a54:	0d5b      	lsrs	r3, r3, #21
 8001a56:	9202      	str	r2, [sp, #8]
 8001a58:	d100      	bne.n	8001a5c <__aeabi_ddiv+0x28>
 8001a5a:	e16a      	b.n	8001d32 <__aeabi_ddiv+0x2fe>
 8001a5c:	4ad4      	ldr	r2, [pc, #848]	@ (8001db0 <__aeabi_ddiv+0x37c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d100      	bne.n	8001a64 <__aeabi_ddiv+0x30>
 8001a62:	e18c      	b.n	8001d7e <__aeabi_ddiv+0x34a>
 8001a64:	4659      	mov	r1, fp
 8001a66:	0f42      	lsrs	r2, r0, #29
 8001a68:	00c9      	lsls	r1, r1, #3
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	2180      	movs	r1, #128	@ 0x80
 8001a6e:	0409      	lsls	r1, r1, #16
 8001a70:	4311      	orrs	r1, r2
 8001a72:	00c2      	lsls	r2, r0, #3
 8001a74:	4690      	mov	r8, r2
 8001a76:	4acf      	ldr	r2, [pc, #828]	@ (8001db4 <__aeabi_ddiv+0x380>)
 8001a78:	4689      	mov	r9, r1
 8001a7a:	4692      	mov	sl, r2
 8001a7c:	449a      	add	sl, r3
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2400      	movs	r4, #0
 8001a82:	9303      	str	r3, [sp, #12]
 8001a84:	9e00      	ldr	r6, [sp, #0]
 8001a86:	9f01      	ldr	r7, [sp, #4]
 8001a88:	033b      	lsls	r3, r7, #12
 8001a8a:	0b1b      	lsrs	r3, r3, #12
 8001a8c:	469b      	mov	fp, r3
 8001a8e:	007b      	lsls	r3, r7, #1
 8001a90:	0030      	movs	r0, r6
 8001a92:	0d5b      	lsrs	r3, r3, #21
 8001a94:	0ffd      	lsrs	r5, r7, #31
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d100      	bne.n	8001a9c <__aeabi_ddiv+0x68>
 8001a9a:	e128      	b.n	8001cee <__aeabi_ddiv+0x2ba>
 8001a9c:	4ac4      	ldr	r2, [pc, #784]	@ (8001db0 <__aeabi_ddiv+0x37c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_ddiv+0x70>
 8001aa2:	e177      	b.n	8001d94 <__aeabi_ddiv+0x360>
 8001aa4:	4659      	mov	r1, fp
 8001aa6:	0f72      	lsrs	r2, r6, #29
 8001aa8:	00c9      	lsls	r1, r1, #3
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	2180      	movs	r1, #128	@ 0x80
 8001aae:	0409      	lsls	r1, r1, #16
 8001ab0:	4311      	orrs	r1, r2
 8001ab2:	468b      	mov	fp, r1
 8001ab4:	49bf      	ldr	r1, [pc, #764]	@ (8001db4 <__aeabi_ddiv+0x380>)
 8001ab6:	00f2      	lsls	r2, r6, #3
 8001ab8:	468c      	mov	ip, r1
 8001aba:	4651      	mov	r1, sl
 8001abc:	4463      	add	r3, ip
 8001abe:	1acb      	subs	r3, r1, r3
 8001ac0:	469a      	mov	sl, r3
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9e02      	ldr	r6, [sp, #8]
 8001ac6:	406e      	eors	r6, r5
 8001ac8:	2c0f      	cmp	r4, #15
 8001aca:	d827      	bhi.n	8001b1c <__aeabi_ddiv+0xe8>
 8001acc:	49ba      	ldr	r1, [pc, #744]	@ (8001db8 <__aeabi_ddiv+0x384>)
 8001ace:	00a4      	lsls	r4, r4, #2
 8001ad0:	5909      	ldr	r1, [r1, r4]
 8001ad2:	468f      	mov	pc, r1
 8001ad4:	46cb      	mov	fp, r9
 8001ad6:	4642      	mov	r2, r8
 8001ad8:	9e02      	ldr	r6, [sp, #8]
 8001ada:	9b03      	ldr	r3, [sp, #12]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d016      	beq.n	8001b0e <__aeabi_ddiv+0xda>
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_ddiv+0xb2>
 8001ae4:	e2a6      	b.n	8002034 <__aeabi_ddiv+0x600>
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d000      	beq.n	8001aec <__aeabi_ddiv+0xb8>
 8001aea:	e0df      	b.n	8001cac <__aeabi_ddiv+0x278>
 8001aec:	2200      	movs	r2, #0
 8001aee:	2300      	movs	r3, #0
 8001af0:	2400      	movs	r4, #0
 8001af2:	4690      	mov	r8, r2
 8001af4:	051b      	lsls	r3, r3, #20
 8001af6:	4323      	orrs	r3, r4
 8001af8:	07f6      	lsls	r6, r6, #31
 8001afa:	4333      	orrs	r3, r6
 8001afc:	4640      	mov	r0, r8
 8001afe:	0019      	movs	r1, r3
 8001b00:	b007      	add	sp, #28
 8001b02:	bcf0      	pop	{r4, r5, r6, r7}
 8001b04:	46bb      	mov	fp, r7
 8001b06:	46b2      	mov	sl, r6
 8001b08:	46a9      	mov	r9, r5
 8001b0a:	46a0      	mov	r8, r4
 8001b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2400      	movs	r4, #0
 8001b12:	4690      	mov	r8, r2
 8001b14:	4ba6      	ldr	r3, [pc, #664]	@ (8001db0 <__aeabi_ddiv+0x37c>)
 8001b16:	e7ed      	b.n	8001af4 <__aeabi_ddiv+0xc0>
 8001b18:	002e      	movs	r6, r5
 8001b1a:	e7df      	b.n	8001adc <__aeabi_ddiv+0xa8>
 8001b1c:	45cb      	cmp	fp, r9
 8001b1e:	d200      	bcs.n	8001b22 <__aeabi_ddiv+0xee>
 8001b20:	e1d4      	b.n	8001ecc <__aeabi_ddiv+0x498>
 8001b22:	d100      	bne.n	8001b26 <__aeabi_ddiv+0xf2>
 8001b24:	e1cf      	b.n	8001ec6 <__aeabi_ddiv+0x492>
 8001b26:	2301      	movs	r3, #1
 8001b28:	425b      	negs	r3, r3
 8001b2a:	469c      	mov	ip, r3
 8001b2c:	4644      	mov	r4, r8
 8001b2e:	4648      	mov	r0, r9
 8001b30:	2700      	movs	r7, #0
 8001b32:	44e2      	add	sl, ip
 8001b34:	465b      	mov	r3, fp
 8001b36:	0e15      	lsrs	r5, r2, #24
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	0c19      	lsrs	r1, r3, #16
 8001b3e:	042b      	lsls	r3, r5, #16
 8001b40:	0212      	lsls	r2, r2, #8
 8001b42:	9500      	str	r5, [sp, #0]
 8001b44:	0c1d      	lsrs	r5, r3, #16
 8001b46:	4691      	mov	r9, r2
 8001b48:	9102      	str	r1, [sp, #8]
 8001b4a:	9503      	str	r5, [sp, #12]
 8001b4c:	f7fe fb76 	bl	800023c <__aeabi_uidivmod>
 8001b50:	0002      	movs	r2, r0
 8001b52:	436a      	muls	r2, r5
 8001b54:	040b      	lsls	r3, r1, #16
 8001b56:	0c21      	lsrs	r1, r4, #16
 8001b58:	4680      	mov	r8, r0
 8001b5a:	4319      	orrs	r1, r3
 8001b5c:	428a      	cmp	r2, r1
 8001b5e:	d909      	bls.n	8001b74 <__aeabi_ddiv+0x140>
 8001b60:	9d00      	ldr	r5, [sp, #0]
 8001b62:	2301      	movs	r3, #1
 8001b64:	46ac      	mov	ip, r5
 8001b66:	425b      	negs	r3, r3
 8001b68:	4461      	add	r1, ip
 8001b6a:	469c      	mov	ip, r3
 8001b6c:	44e0      	add	r8, ip
 8001b6e:	428d      	cmp	r5, r1
 8001b70:	d800      	bhi.n	8001b74 <__aeabi_ddiv+0x140>
 8001b72:	e1fb      	b.n	8001f6c <__aeabi_ddiv+0x538>
 8001b74:	1a88      	subs	r0, r1, r2
 8001b76:	9902      	ldr	r1, [sp, #8]
 8001b78:	f7fe fb60 	bl	800023c <__aeabi_uidivmod>
 8001b7c:	9a03      	ldr	r2, [sp, #12]
 8001b7e:	0424      	lsls	r4, r4, #16
 8001b80:	4342      	muls	r2, r0
 8001b82:	0409      	lsls	r1, r1, #16
 8001b84:	0c24      	lsrs	r4, r4, #16
 8001b86:	0003      	movs	r3, r0
 8001b88:	430c      	orrs	r4, r1
 8001b8a:	42a2      	cmp	r2, r4
 8001b8c:	d906      	bls.n	8001b9c <__aeabi_ddiv+0x168>
 8001b8e:	9900      	ldr	r1, [sp, #0]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	468c      	mov	ip, r1
 8001b94:	4464      	add	r4, ip
 8001b96:	42a1      	cmp	r1, r4
 8001b98:	d800      	bhi.n	8001b9c <__aeabi_ddiv+0x168>
 8001b9a:	e1e1      	b.n	8001f60 <__aeabi_ddiv+0x52c>
 8001b9c:	1aa0      	subs	r0, r4, r2
 8001b9e:	4642      	mov	r2, r8
 8001ba0:	0412      	lsls	r2, r2, #16
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	4693      	mov	fp, r2
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	4659      	mov	r1, fp
 8001baa:	0c1b      	lsrs	r3, r3, #16
 8001bac:	001d      	movs	r5, r3
 8001bae:	9304      	str	r3, [sp, #16]
 8001bb0:	040b      	lsls	r3, r1, #16
 8001bb2:	4649      	mov	r1, r9
 8001bb4:	0409      	lsls	r1, r1, #16
 8001bb6:	0c09      	lsrs	r1, r1, #16
 8001bb8:	000c      	movs	r4, r1
 8001bba:	0c1b      	lsrs	r3, r3, #16
 8001bbc:	435c      	muls	r4, r3
 8001bbe:	0c12      	lsrs	r2, r2, #16
 8001bc0:	436b      	muls	r3, r5
 8001bc2:	4688      	mov	r8, r1
 8001bc4:	4351      	muls	r1, r2
 8001bc6:	436a      	muls	r2, r5
 8001bc8:	0c25      	lsrs	r5, r4, #16
 8001bca:	46ac      	mov	ip, r5
 8001bcc:	185b      	adds	r3, r3, r1
 8001bce:	4463      	add	r3, ip
 8001bd0:	4299      	cmp	r1, r3
 8001bd2:	d903      	bls.n	8001bdc <__aeabi_ddiv+0x1a8>
 8001bd4:	2180      	movs	r1, #128	@ 0x80
 8001bd6:	0249      	lsls	r1, r1, #9
 8001bd8:	468c      	mov	ip, r1
 8001bda:	4462      	add	r2, ip
 8001bdc:	0c19      	lsrs	r1, r3, #16
 8001bde:	0424      	lsls	r4, r4, #16
 8001be0:	041b      	lsls	r3, r3, #16
 8001be2:	0c24      	lsrs	r4, r4, #16
 8001be4:	188a      	adds	r2, r1, r2
 8001be6:	191c      	adds	r4, r3, r4
 8001be8:	4290      	cmp	r0, r2
 8001bea:	d302      	bcc.n	8001bf2 <__aeabi_ddiv+0x1be>
 8001bec:	d116      	bne.n	8001c1c <__aeabi_ddiv+0x1e8>
 8001bee:	42a7      	cmp	r7, r4
 8001bf0:	d214      	bcs.n	8001c1c <__aeabi_ddiv+0x1e8>
 8001bf2:	465b      	mov	r3, fp
 8001bf4:	9d00      	ldr	r5, [sp, #0]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	444f      	add	r7, r9
 8001bfa:	9305      	str	r3, [sp, #20]
 8001bfc:	454f      	cmp	r7, r9
 8001bfe:	419b      	sbcs	r3, r3
 8001c00:	46ac      	mov	ip, r5
 8001c02:	425b      	negs	r3, r3
 8001c04:	4463      	add	r3, ip
 8001c06:	18c0      	adds	r0, r0, r3
 8001c08:	4285      	cmp	r5, r0
 8001c0a:	d300      	bcc.n	8001c0e <__aeabi_ddiv+0x1da>
 8001c0c:	e1a1      	b.n	8001f52 <__aeabi_ddiv+0x51e>
 8001c0e:	4282      	cmp	r2, r0
 8001c10:	d900      	bls.n	8001c14 <__aeabi_ddiv+0x1e0>
 8001c12:	e1f6      	b.n	8002002 <__aeabi_ddiv+0x5ce>
 8001c14:	d100      	bne.n	8001c18 <__aeabi_ddiv+0x1e4>
 8001c16:	e1f1      	b.n	8001ffc <__aeabi_ddiv+0x5c8>
 8001c18:	9b05      	ldr	r3, [sp, #20]
 8001c1a:	469b      	mov	fp, r3
 8001c1c:	1b3c      	subs	r4, r7, r4
 8001c1e:	42a7      	cmp	r7, r4
 8001c20:	41bf      	sbcs	r7, r7
 8001c22:	9d00      	ldr	r5, [sp, #0]
 8001c24:	1a80      	subs	r0, r0, r2
 8001c26:	427f      	negs	r7, r7
 8001c28:	1bc0      	subs	r0, r0, r7
 8001c2a:	4285      	cmp	r5, r0
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_ddiv+0x1fc>
 8001c2e:	e1d0      	b.n	8001fd2 <__aeabi_ddiv+0x59e>
 8001c30:	9902      	ldr	r1, [sp, #8]
 8001c32:	f7fe fb03 	bl	800023c <__aeabi_uidivmod>
 8001c36:	9a03      	ldr	r2, [sp, #12]
 8001c38:	040b      	lsls	r3, r1, #16
 8001c3a:	4342      	muls	r2, r0
 8001c3c:	0c21      	lsrs	r1, r4, #16
 8001c3e:	0007      	movs	r7, r0
 8001c40:	4319      	orrs	r1, r3
 8001c42:	428a      	cmp	r2, r1
 8001c44:	d900      	bls.n	8001c48 <__aeabi_ddiv+0x214>
 8001c46:	e178      	b.n	8001f3a <__aeabi_ddiv+0x506>
 8001c48:	1a88      	subs	r0, r1, r2
 8001c4a:	9902      	ldr	r1, [sp, #8]
 8001c4c:	f7fe faf6 	bl	800023c <__aeabi_uidivmod>
 8001c50:	9a03      	ldr	r2, [sp, #12]
 8001c52:	0424      	lsls	r4, r4, #16
 8001c54:	4342      	muls	r2, r0
 8001c56:	0409      	lsls	r1, r1, #16
 8001c58:	0c24      	lsrs	r4, r4, #16
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	430c      	orrs	r4, r1
 8001c5e:	42a2      	cmp	r2, r4
 8001c60:	d900      	bls.n	8001c64 <__aeabi_ddiv+0x230>
 8001c62:	e15d      	b.n	8001f20 <__aeabi_ddiv+0x4ec>
 8001c64:	4641      	mov	r1, r8
 8001c66:	1aa4      	subs	r4, r4, r2
 8001c68:	043a      	lsls	r2, r7, #16
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	9d04      	ldr	r5, [sp, #16]
 8001c6e:	0413      	lsls	r3, r2, #16
 8001c70:	0c1b      	lsrs	r3, r3, #16
 8001c72:	4359      	muls	r1, r3
 8001c74:	4647      	mov	r7, r8
 8001c76:	436b      	muls	r3, r5
 8001c78:	469c      	mov	ip, r3
 8001c7a:	0c10      	lsrs	r0, r2, #16
 8001c7c:	4347      	muls	r7, r0
 8001c7e:	0c0b      	lsrs	r3, r1, #16
 8001c80:	44bc      	add	ip, r7
 8001c82:	4463      	add	r3, ip
 8001c84:	4368      	muls	r0, r5
 8001c86:	429f      	cmp	r7, r3
 8001c88:	d903      	bls.n	8001c92 <__aeabi_ddiv+0x25e>
 8001c8a:	2580      	movs	r5, #128	@ 0x80
 8001c8c:	026d      	lsls	r5, r5, #9
 8001c8e:	46ac      	mov	ip, r5
 8001c90:	4460      	add	r0, ip
 8001c92:	0c1f      	lsrs	r7, r3, #16
 8001c94:	0409      	lsls	r1, r1, #16
 8001c96:	041b      	lsls	r3, r3, #16
 8001c98:	0c09      	lsrs	r1, r1, #16
 8001c9a:	183f      	adds	r7, r7, r0
 8001c9c:	185b      	adds	r3, r3, r1
 8001c9e:	42bc      	cmp	r4, r7
 8001ca0:	d200      	bcs.n	8001ca4 <__aeabi_ddiv+0x270>
 8001ca2:	e102      	b.n	8001eaa <__aeabi_ddiv+0x476>
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_ddiv+0x274>
 8001ca6:	e0fd      	b.n	8001ea4 <__aeabi_ddiv+0x470>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	431a      	orrs	r2, r3
 8001cac:	4b43      	ldr	r3, [pc, #268]	@ (8001dbc <__aeabi_ddiv+0x388>)
 8001cae:	4453      	add	r3, sl
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	dc00      	bgt.n	8001cb6 <__aeabi_ddiv+0x282>
 8001cb4:	e0ae      	b.n	8001e14 <__aeabi_ddiv+0x3e0>
 8001cb6:	0751      	lsls	r1, r2, #29
 8001cb8:	d000      	beq.n	8001cbc <__aeabi_ddiv+0x288>
 8001cba:	e198      	b.n	8001fee <__aeabi_ddiv+0x5ba>
 8001cbc:	4659      	mov	r1, fp
 8001cbe:	01c9      	lsls	r1, r1, #7
 8001cc0:	d506      	bpl.n	8001cd0 <__aeabi_ddiv+0x29c>
 8001cc2:	4659      	mov	r1, fp
 8001cc4:	4b3e      	ldr	r3, [pc, #248]	@ (8001dc0 <__aeabi_ddiv+0x38c>)
 8001cc6:	4019      	ands	r1, r3
 8001cc8:	2380      	movs	r3, #128	@ 0x80
 8001cca:	468b      	mov	fp, r1
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4453      	add	r3, sl
 8001cd0:	493c      	ldr	r1, [pc, #240]	@ (8001dc4 <__aeabi_ddiv+0x390>)
 8001cd2:	428b      	cmp	r3, r1
 8001cd4:	dd00      	ble.n	8001cd8 <__aeabi_ddiv+0x2a4>
 8001cd6:	e71a      	b.n	8001b0e <__aeabi_ddiv+0xda>
 8001cd8:	4659      	mov	r1, fp
 8001cda:	08d2      	lsrs	r2, r2, #3
 8001cdc:	0749      	lsls	r1, r1, #29
 8001cde:	4311      	orrs	r1, r2
 8001ce0:	465a      	mov	r2, fp
 8001ce2:	055b      	lsls	r3, r3, #21
 8001ce4:	0254      	lsls	r4, r2, #9
 8001ce6:	4688      	mov	r8, r1
 8001ce8:	0b24      	lsrs	r4, r4, #12
 8001cea:	0d5b      	lsrs	r3, r3, #21
 8001cec:	e702      	b.n	8001af4 <__aeabi_ddiv+0xc0>
 8001cee:	465a      	mov	r2, fp
 8001cf0:	9b00      	ldr	r3, [sp, #0]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_ddiv+0x2c4>
 8001cf6:	e07e      	b.n	8001df6 <__aeabi_ddiv+0x3c2>
 8001cf8:	465b      	mov	r3, fp
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_ddiv+0x2cc>
 8001cfe:	e100      	b.n	8001f02 <__aeabi_ddiv+0x4ce>
 8001d00:	4658      	mov	r0, fp
 8001d02:	f001 fabb 	bl	800327c <__clzsi2>
 8001d06:	0002      	movs	r2, r0
 8001d08:	0003      	movs	r3, r0
 8001d0a:	3a0b      	subs	r2, #11
 8001d0c:	271d      	movs	r7, #29
 8001d0e:	9e00      	ldr	r6, [sp, #0]
 8001d10:	1aba      	subs	r2, r7, r2
 8001d12:	0019      	movs	r1, r3
 8001d14:	4658      	mov	r0, fp
 8001d16:	40d6      	lsrs	r6, r2
 8001d18:	3908      	subs	r1, #8
 8001d1a:	4088      	lsls	r0, r1
 8001d1c:	0032      	movs	r2, r6
 8001d1e:	4302      	orrs	r2, r0
 8001d20:	4693      	mov	fp, r2
 8001d22:	9a00      	ldr	r2, [sp, #0]
 8001d24:	408a      	lsls	r2, r1
 8001d26:	4928      	ldr	r1, [pc, #160]	@ (8001dc8 <__aeabi_ddiv+0x394>)
 8001d28:	4453      	add	r3, sl
 8001d2a:	468a      	mov	sl, r1
 8001d2c:	449a      	add	sl, r3
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e6c8      	b.n	8001ac4 <__aeabi_ddiv+0x90>
 8001d32:	465b      	mov	r3, fp
 8001d34:	4303      	orrs	r3, r0
 8001d36:	4699      	mov	r9, r3
 8001d38:	d056      	beq.n	8001de8 <__aeabi_ddiv+0x3b4>
 8001d3a:	465b      	mov	r3, fp
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_ddiv+0x30e>
 8001d40:	e0cd      	b.n	8001ede <__aeabi_ddiv+0x4aa>
 8001d42:	4658      	mov	r0, fp
 8001d44:	f001 fa9a 	bl	800327c <__clzsi2>
 8001d48:	230b      	movs	r3, #11
 8001d4a:	425b      	negs	r3, r3
 8001d4c:	469c      	mov	ip, r3
 8001d4e:	0002      	movs	r2, r0
 8001d50:	4484      	add	ip, r0
 8001d52:	4666      	mov	r6, ip
 8001d54:	231d      	movs	r3, #29
 8001d56:	1b9b      	subs	r3, r3, r6
 8001d58:	0026      	movs	r6, r4
 8001d5a:	0011      	movs	r1, r2
 8001d5c:	4658      	mov	r0, fp
 8001d5e:	40de      	lsrs	r6, r3
 8001d60:	3908      	subs	r1, #8
 8001d62:	4088      	lsls	r0, r1
 8001d64:	0033      	movs	r3, r6
 8001d66:	4303      	orrs	r3, r0
 8001d68:	4699      	mov	r9, r3
 8001d6a:	0023      	movs	r3, r4
 8001d6c:	408b      	lsls	r3, r1
 8001d6e:	4698      	mov	r8, r3
 8001d70:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <__aeabi_ddiv+0x398>)
 8001d72:	2400      	movs	r4, #0
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	469a      	mov	sl, r3
 8001d78:	2300      	movs	r3, #0
 8001d7a:	9303      	str	r3, [sp, #12]
 8001d7c:	e682      	b.n	8001a84 <__aeabi_ddiv+0x50>
 8001d7e:	465a      	mov	r2, fp
 8001d80:	4302      	orrs	r2, r0
 8001d82:	4691      	mov	r9, r2
 8001d84:	d12a      	bne.n	8001ddc <__aeabi_ddiv+0x3a8>
 8001d86:	2200      	movs	r2, #0
 8001d88:	469a      	mov	sl, r3
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	4690      	mov	r8, r2
 8001d8e:	2408      	movs	r4, #8
 8001d90:	9303      	str	r3, [sp, #12]
 8001d92:	e677      	b.n	8001a84 <__aeabi_ddiv+0x50>
 8001d94:	465a      	mov	r2, fp
 8001d96:	9b00      	ldr	r3, [sp, #0]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <__aeabi_ddiv+0x39c>)
 8001d9c:	469c      	mov	ip, r3
 8001d9e:	44e2      	add	sl, ip
 8001da0:	2a00      	cmp	r2, #0
 8001da2:	d117      	bne.n	8001dd4 <__aeabi_ddiv+0x3a0>
 8001da4:	2302      	movs	r3, #2
 8001da6:	431c      	orrs	r4, r3
 8001da8:	2300      	movs	r3, #0
 8001daa:	469b      	mov	fp, r3
 8001dac:	3302      	adds	r3, #2
 8001dae:	e689      	b.n	8001ac4 <__aeabi_ddiv+0x90>
 8001db0:	000007ff 	.word	0x000007ff
 8001db4:	fffffc01 	.word	0xfffffc01
 8001db8:	08014718 	.word	0x08014718
 8001dbc:	000003ff 	.word	0x000003ff
 8001dc0:	feffffff 	.word	0xfeffffff
 8001dc4:	000007fe 	.word	0x000007fe
 8001dc8:	000003f3 	.word	0x000003f3
 8001dcc:	fffffc0d 	.word	0xfffffc0d
 8001dd0:	fffff801 	.word	0xfffff801
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	0032      	movs	r2, r6
 8001dd8:	431c      	orrs	r4, r3
 8001dda:	e673      	b.n	8001ac4 <__aeabi_ddiv+0x90>
 8001ddc:	469a      	mov	sl, r3
 8001dde:	2303      	movs	r3, #3
 8001de0:	46d9      	mov	r9, fp
 8001de2:	240c      	movs	r4, #12
 8001de4:	9303      	str	r3, [sp, #12]
 8001de6:	e64d      	b.n	8001a84 <__aeabi_ddiv+0x50>
 8001de8:	2300      	movs	r3, #0
 8001dea:	4698      	mov	r8, r3
 8001dec:	469a      	mov	sl, r3
 8001dee:	3301      	adds	r3, #1
 8001df0:	2404      	movs	r4, #4
 8001df2:	9303      	str	r3, [sp, #12]
 8001df4:	e646      	b.n	8001a84 <__aeabi_ddiv+0x50>
 8001df6:	2301      	movs	r3, #1
 8001df8:	431c      	orrs	r4, r3
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	469b      	mov	fp, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	e660      	b.n	8001ac4 <__aeabi_ddiv+0x90>
 8001e02:	2300      	movs	r3, #0
 8001e04:	2480      	movs	r4, #128	@ 0x80
 8001e06:	4698      	mov	r8, r3
 8001e08:	2600      	movs	r6, #0
 8001e0a:	4b92      	ldr	r3, [pc, #584]	@ (8002054 <__aeabi_ddiv+0x620>)
 8001e0c:	0324      	lsls	r4, r4, #12
 8001e0e:	e671      	b.n	8001af4 <__aeabi_ddiv+0xc0>
 8001e10:	2201      	movs	r2, #1
 8001e12:	4252      	negs	r2, r2
 8001e14:	2101      	movs	r1, #1
 8001e16:	1ac9      	subs	r1, r1, r3
 8001e18:	2938      	cmp	r1, #56	@ 0x38
 8001e1a:	dd00      	ble.n	8001e1e <__aeabi_ddiv+0x3ea>
 8001e1c:	e666      	b.n	8001aec <__aeabi_ddiv+0xb8>
 8001e1e:	291f      	cmp	r1, #31
 8001e20:	dc00      	bgt.n	8001e24 <__aeabi_ddiv+0x3f0>
 8001e22:	e0ab      	b.n	8001f7c <__aeabi_ddiv+0x548>
 8001e24:	201f      	movs	r0, #31
 8001e26:	4240      	negs	r0, r0
 8001e28:	1ac3      	subs	r3, r0, r3
 8001e2a:	4658      	mov	r0, fp
 8001e2c:	40d8      	lsrs	r0, r3
 8001e2e:	0003      	movs	r3, r0
 8001e30:	2920      	cmp	r1, #32
 8001e32:	d004      	beq.n	8001e3e <__aeabi_ddiv+0x40a>
 8001e34:	4658      	mov	r0, fp
 8001e36:	4988      	ldr	r1, [pc, #544]	@ (8002058 <__aeabi_ddiv+0x624>)
 8001e38:	4451      	add	r1, sl
 8001e3a:	4088      	lsls	r0, r1
 8001e3c:	4302      	orrs	r2, r0
 8001e3e:	1e51      	subs	r1, r2, #1
 8001e40:	418a      	sbcs	r2, r1
 8001e42:	431a      	orrs	r2, r3
 8001e44:	2307      	movs	r3, #7
 8001e46:	0019      	movs	r1, r3
 8001e48:	2400      	movs	r4, #0
 8001e4a:	4011      	ands	r1, r2
 8001e4c:	4213      	tst	r3, r2
 8001e4e:	d00c      	beq.n	8001e6a <__aeabi_ddiv+0x436>
 8001e50:	230f      	movs	r3, #15
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d100      	bne.n	8001e5a <__aeabi_ddiv+0x426>
 8001e58:	e0f9      	b.n	800204e <__aeabi_ddiv+0x61a>
 8001e5a:	1d11      	adds	r1, r2, #4
 8001e5c:	4291      	cmp	r1, r2
 8001e5e:	419b      	sbcs	r3, r3
 8001e60:	000a      	movs	r2, r1
 8001e62:	425b      	negs	r3, r3
 8001e64:	0759      	lsls	r1, r3, #29
 8001e66:	025b      	lsls	r3, r3, #9
 8001e68:	0b1c      	lsrs	r4, r3, #12
 8001e6a:	08d2      	lsrs	r2, r2, #3
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	4690      	mov	r8, r2
 8001e70:	2300      	movs	r3, #0
 8001e72:	e63f      	b.n	8001af4 <__aeabi_ddiv+0xc0>
 8001e74:	2480      	movs	r4, #128	@ 0x80
 8001e76:	464b      	mov	r3, r9
 8001e78:	0324      	lsls	r4, r4, #12
 8001e7a:	4223      	tst	r3, r4
 8001e7c:	d009      	beq.n	8001e92 <__aeabi_ddiv+0x45e>
 8001e7e:	465b      	mov	r3, fp
 8001e80:	4223      	tst	r3, r4
 8001e82:	d106      	bne.n	8001e92 <__aeabi_ddiv+0x45e>
 8001e84:	431c      	orrs	r4, r3
 8001e86:	0324      	lsls	r4, r4, #12
 8001e88:	002e      	movs	r6, r5
 8001e8a:	4690      	mov	r8, r2
 8001e8c:	4b71      	ldr	r3, [pc, #452]	@ (8002054 <__aeabi_ddiv+0x620>)
 8001e8e:	0b24      	lsrs	r4, r4, #12
 8001e90:	e630      	b.n	8001af4 <__aeabi_ddiv+0xc0>
 8001e92:	2480      	movs	r4, #128	@ 0x80
 8001e94:	464b      	mov	r3, r9
 8001e96:	0324      	lsls	r4, r4, #12
 8001e98:	431c      	orrs	r4, r3
 8001e9a:	0324      	lsls	r4, r4, #12
 8001e9c:	9e02      	ldr	r6, [sp, #8]
 8001e9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002054 <__aeabi_ddiv+0x620>)
 8001ea0:	0b24      	lsrs	r4, r4, #12
 8001ea2:	e627      	b.n	8001af4 <__aeabi_ddiv+0xc0>
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d100      	bne.n	8001eaa <__aeabi_ddiv+0x476>
 8001ea8:	e700      	b.n	8001cac <__aeabi_ddiv+0x278>
 8001eaa:	9800      	ldr	r0, [sp, #0]
 8001eac:	1e51      	subs	r1, r2, #1
 8001eae:	4684      	mov	ip, r0
 8001eb0:	4464      	add	r4, ip
 8001eb2:	4284      	cmp	r4, r0
 8001eb4:	d200      	bcs.n	8001eb8 <__aeabi_ddiv+0x484>
 8001eb6:	e084      	b.n	8001fc2 <__aeabi_ddiv+0x58e>
 8001eb8:	42bc      	cmp	r4, r7
 8001eba:	d200      	bcs.n	8001ebe <__aeabi_ddiv+0x48a>
 8001ebc:	e0ae      	b.n	800201c <__aeabi_ddiv+0x5e8>
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_ddiv+0x48e>
 8001ec0:	e0c1      	b.n	8002046 <__aeabi_ddiv+0x612>
 8001ec2:	000a      	movs	r2, r1
 8001ec4:	e6f0      	b.n	8001ca8 <__aeabi_ddiv+0x274>
 8001ec6:	4542      	cmp	r2, r8
 8001ec8:	d900      	bls.n	8001ecc <__aeabi_ddiv+0x498>
 8001eca:	e62c      	b.n	8001b26 <__aeabi_ddiv+0xf2>
 8001ecc:	464b      	mov	r3, r9
 8001ece:	07dc      	lsls	r4, r3, #31
 8001ed0:	0858      	lsrs	r0, r3, #1
 8001ed2:	4643      	mov	r3, r8
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	431c      	orrs	r4, r3
 8001ed8:	4643      	mov	r3, r8
 8001eda:	07df      	lsls	r7, r3, #31
 8001edc:	e62a      	b.n	8001b34 <__aeabi_ddiv+0x100>
 8001ede:	f001 f9cd 	bl	800327c <__clzsi2>
 8001ee2:	2315      	movs	r3, #21
 8001ee4:	469c      	mov	ip, r3
 8001ee6:	4484      	add	ip, r0
 8001ee8:	0002      	movs	r2, r0
 8001eea:	4663      	mov	r3, ip
 8001eec:	3220      	adds	r2, #32
 8001eee:	2b1c      	cmp	r3, #28
 8001ef0:	dc00      	bgt.n	8001ef4 <__aeabi_ddiv+0x4c0>
 8001ef2:	e72e      	b.n	8001d52 <__aeabi_ddiv+0x31e>
 8001ef4:	0023      	movs	r3, r4
 8001ef6:	3808      	subs	r0, #8
 8001ef8:	4083      	lsls	r3, r0
 8001efa:	4699      	mov	r9, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	4698      	mov	r8, r3
 8001f00:	e736      	b.n	8001d70 <__aeabi_ddiv+0x33c>
 8001f02:	f001 f9bb 	bl	800327c <__clzsi2>
 8001f06:	0002      	movs	r2, r0
 8001f08:	0003      	movs	r3, r0
 8001f0a:	3215      	adds	r2, #21
 8001f0c:	3320      	adds	r3, #32
 8001f0e:	2a1c      	cmp	r2, #28
 8001f10:	dc00      	bgt.n	8001f14 <__aeabi_ddiv+0x4e0>
 8001f12:	e6fb      	b.n	8001d0c <__aeabi_ddiv+0x2d8>
 8001f14:	9900      	ldr	r1, [sp, #0]
 8001f16:	3808      	subs	r0, #8
 8001f18:	4081      	lsls	r1, r0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	468b      	mov	fp, r1
 8001f1e:	e702      	b.n	8001d26 <__aeabi_ddiv+0x2f2>
 8001f20:	9900      	ldr	r1, [sp, #0]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	468c      	mov	ip, r1
 8001f26:	4464      	add	r4, ip
 8001f28:	42a1      	cmp	r1, r4
 8001f2a:	d900      	bls.n	8001f2e <__aeabi_ddiv+0x4fa>
 8001f2c:	e69a      	b.n	8001c64 <__aeabi_ddiv+0x230>
 8001f2e:	42a2      	cmp	r2, r4
 8001f30:	d800      	bhi.n	8001f34 <__aeabi_ddiv+0x500>
 8001f32:	e697      	b.n	8001c64 <__aeabi_ddiv+0x230>
 8001f34:	1e83      	subs	r3, r0, #2
 8001f36:	4464      	add	r4, ip
 8001f38:	e694      	b.n	8001c64 <__aeabi_ddiv+0x230>
 8001f3a:	46ac      	mov	ip, r5
 8001f3c:	4461      	add	r1, ip
 8001f3e:	3f01      	subs	r7, #1
 8001f40:	428d      	cmp	r5, r1
 8001f42:	d900      	bls.n	8001f46 <__aeabi_ddiv+0x512>
 8001f44:	e680      	b.n	8001c48 <__aeabi_ddiv+0x214>
 8001f46:	428a      	cmp	r2, r1
 8001f48:	d800      	bhi.n	8001f4c <__aeabi_ddiv+0x518>
 8001f4a:	e67d      	b.n	8001c48 <__aeabi_ddiv+0x214>
 8001f4c:	1e87      	subs	r7, r0, #2
 8001f4e:	4461      	add	r1, ip
 8001f50:	e67a      	b.n	8001c48 <__aeabi_ddiv+0x214>
 8001f52:	4285      	cmp	r5, r0
 8001f54:	d000      	beq.n	8001f58 <__aeabi_ddiv+0x524>
 8001f56:	e65f      	b.n	8001c18 <__aeabi_ddiv+0x1e4>
 8001f58:	45b9      	cmp	r9, r7
 8001f5a:	d900      	bls.n	8001f5e <__aeabi_ddiv+0x52a>
 8001f5c:	e65c      	b.n	8001c18 <__aeabi_ddiv+0x1e4>
 8001f5e:	e656      	b.n	8001c0e <__aeabi_ddiv+0x1da>
 8001f60:	42a2      	cmp	r2, r4
 8001f62:	d800      	bhi.n	8001f66 <__aeabi_ddiv+0x532>
 8001f64:	e61a      	b.n	8001b9c <__aeabi_ddiv+0x168>
 8001f66:	1e83      	subs	r3, r0, #2
 8001f68:	4464      	add	r4, ip
 8001f6a:	e617      	b.n	8001b9c <__aeabi_ddiv+0x168>
 8001f6c:	428a      	cmp	r2, r1
 8001f6e:	d800      	bhi.n	8001f72 <__aeabi_ddiv+0x53e>
 8001f70:	e600      	b.n	8001b74 <__aeabi_ddiv+0x140>
 8001f72:	46ac      	mov	ip, r5
 8001f74:	1e83      	subs	r3, r0, #2
 8001f76:	4698      	mov	r8, r3
 8001f78:	4461      	add	r1, ip
 8001f7a:	e5fb      	b.n	8001b74 <__aeabi_ddiv+0x140>
 8001f7c:	4837      	ldr	r0, [pc, #220]	@ (800205c <__aeabi_ddiv+0x628>)
 8001f7e:	0014      	movs	r4, r2
 8001f80:	4450      	add	r0, sl
 8001f82:	4082      	lsls	r2, r0
 8001f84:	465b      	mov	r3, fp
 8001f86:	0017      	movs	r7, r2
 8001f88:	4083      	lsls	r3, r0
 8001f8a:	40cc      	lsrs	r4, r1
 8001f8c:	1e7a      	subs	r2, r7, #1
 8001f8e:	4197      	sbcs	r7, r2
 8001f90:	4323      	orrs	r3, r4
 8001f92:	433b      	orrs	r3, r7
 8001f94:	001a      	movs	r2, r3
 8001f96:	465b      	mov	r3, fp
 8001f98:	40cb      	lsrs	r3, r1
 8001f9a:	0751      	lsls	r1, r2, #29
 8001f9c:	d009      	beq.n	8001fb2 <__aeabi_ddiv+0x57e>
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	4011      	ands	r1, r2
 8001fa2:	2904      	cmp	r1, #4
 8001fa4:	d005      	beq.n	8001fb2 <__aeabi_ddiv+0x57e>
 8001fa6:	1d11      	adds	r1, r2, #4
 8001fa8:	4291      	cmp	r1, r2
 8001faa:	4192      	sbcs	r2, r2
 8001fac:	4252      	negs	r2, r2
 8001fae:	189b      	adds	r3, r3, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	0219      	lsls	r1, r3, #8
 8001fb4:	d400      	bmi.n	8001fb8 <__aeabi_ddiv+0x584>
 8001fb6:	e755      	b.n	8001e64 <__aeabi_ddiv+0x430>
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2301      	movs	r3, #1
 8001fbc:	2400      	movs	r4, #0
 8001fbe:	4690      	mov	r8, r2
 8001fc0:	e598      	b.n	8001af4 <__aeabi_ddiv+0xc0>
 8001fc2:	000a      	movs	r2, r1
 8001fc4:	42bc      	cmp	r4, r7
 8001fc6:	d000      	beq.n	8001fca <__aeabi_ddiv+0x596>
 8001fc8:	e66e      	b.n	8001ca8 <__aeabi_ddiv+0x274>
 8001fca:	454b      	cmp	r3, r9
 8001fcc:	d000      	beq.n	8001fd0 <__aeabi_ddiv+0x59c>
 8001fce:	e66b      	b.n	8001ca8 <__aeabi_ddiv+0x274>
 8001fd0:	e66c      	b.n	8001cac <__aeabi_ddiv+0x278>
 8001fd2:	4b23      	ldr	r3, [pc, #140]	@ (8002060 <__aeabi_ddiv+0x62c>)
 8001fd4:	4a23      	ldr	r2, [pc, #140]	@ (8002064 <__aeabi_ddiv+0x630>)
 8001fd6:	4453      	add	r3, sl
 8001fd8:	4592      	cmp	sl, r2
 8001fda:	da00      	bge.n	8001fde <__aeabi_ddiv+0x5aa>
 8001fdc:	e718      	b.n	8001e10 <__aeabi_ddiv+0x3dc>
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4249      	negs	r1, r1
 8001fe2:	1d0a      	adds	r2, r1, #4
 8001fe4:	428a      	cmp	r2, r1
 8001fe6:	4189      	sbcs	r1, r1
 8001fe8:	4249      	negs	r1, r1
 8001fea:	448b      	add	fp, r1
 8001fec:	e666      	b.n	8001cbc <__aeabi_ddiv+0x288>
 8001fee:	210f      	movs	r1, #15
 8001ff0:	4011      	ands	r1, r2
 8001ff2:	2904      	cmp	r1, #4
 8001ff4:	d100      	bne.n	8001ff8 <__aeabi_ddiv+0x5c4>
 8001ff6:	e661      	b.n	8001cbc <__aeabi_ddiv+0x288>
 8001ff8:	0011      	movs	r1, r2
 8001ffa:	e7f2      	b.n	8001fe2 <__aeabi_ddiv+0x5ae>
 8001ffc:	42bc      	cmp	r4, r7
 8001ffe:	d800      	bhi.n	8002002 <__aeabi_ddiv+0x5ce>
 8002000:	e60a      	b.n	8001c18 <__aeabi_ddiv+0x1e4>
 8002002:	2302      	movs	r3, #2
 8002004:	425b      	negs	r3, r3
 8002006:	469c      	mov	ip, r3
 8002008:	9900      	ldr	r1, [sp, #0]
 800200a:	444f      	add	r7, r9
 800200c:	454f      	cmp	r7, r9
 800200e:	419b      	sbcs	r3, r3
 8002010:	44e3      	add	fp, ip
 8002012:	468c      	mov	ip, r1
 8002014:	425b      	negs	r3, r3
 8002016:	4463      	add	r3, ip
 8002018:	18c0      	adds	r0, r0, r3
 800201a:	e5ff      	b.n	8001c1c <__aeabi_ddiv+0x1e8>
 800201c:	4649      	mov	r1, r9
 800201e:	9d00      	ldr	r5, [sp, #0]
 8002020:	0048      	lsls	r0, r1, #1
 8002022:	4548      	cmp	r0, r9
 8002024:	4189      	sbcs	r1, r1
 8002026:	46ac      	mov	ip, r5
 8002028:	4249      	negs	r1, r1
 800202a:	4461      	add	r1, ip
 800202c:	4681      	mov	r9, r0
 800202e:	3a02      	subs	r2, #2
 8002030:	1864      	adds	r4, r4, r1
 8002032:	e7c7      	b.n	8001fc4 <__aeabi_ddiv+0x590>
 8002034:	2480      	movs	r4, #128	@ 0x80
 8002036:	465b      	mov	r3, fp
 8002038:	0324      	lsls	r4, r4, #12
 800203a:	431c      	orrs	r4, r3
 800203c:	0324      	lsls	r4, r4, #12
 800203e:	4690      	mov	r8, r2
 8002040:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <__aeabi_ddiv+0x620>)
 8002042:	0b24      	lsrs	r4, r4, #12
 8002044:	e556      	b.n	8001af4 <__aeabi_ddiv+0xc0>
 8002046:	4599      	cmp	r9, r3
 8002048:	d3e8      	bcc.n	800201c <__aeabi_ddiv+0x5e8>
 800204a:	000a      	movs	r2, r1
 800204c:	e7bd      	b.n	8001fca <__aeabi_ddiv+0x596>
 800204e:	2300      	movs	r3, #0
 8002050:	e708      	b.n	8001e64 <__aeabi_ddiv+0x430>
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	000007ff 	.word	0x000007ff
 8002058:	0000043e 	.word	0x0000043e
 800205c:	0000041e 	.word	0x0000041e
 8002060:	000003ff 	.word	0x000003ff
 8002064:	fffffc02 	.word	0xfffffc02

08002068 <__eqdf2>:
 8002068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206a:	4657      	mov	r7, sl
 800206c:	46de      	mov	lr, fp
 800206e:	464e      	mov	r6, r9
 8002070:	4645      	mov	r5, r8
 8002072:	b5e0      	push	{r5, r6, r7, lr}
 8002074:	000d      	movs	r5, r1
 8002076:	0004      	movs	r4, r0
 8002078:	0fe8      	lsrs	r0, r5, #31
 800207a:	4683      	mov	fp, r0
 800207c:	0309      	lsls	r1, r1, #12
 800207e:	0fd8      	lsrs	r0, r3, #31
 8002080:	0b09      	lsrs	r1, r1, #12
 8002082:	4682      	mov	sl, r0
 8002084:	4819      	ldr	r0, [pc, #100]	@ (80020ec <__eqdf2+0x84>)
 8002086:	468c      	mov	ip, r1
 8002088:	031f      	lsls	r7, r3, #12
 800208a:	0069      	lsls	r1, r5, #1
 800208c:	005e      	lsls	r6, r3, #1
 800208e:	0d49      	lsrs	r1, r1, #21
 8002090:	0b3f      	lsrs	r7, r7, #12
 8002092:	0d76      	lsrs	r6, r6, #21
 8002094:	4281      	cmp	r1, r0
 8002096:	d018      	beq.n	80020ca <__eqdf2+0x62>
 8002098:	4286      	cmp	r6, r0
 800209a:	d00f      	beq.n	80020bc <__eqdf2+0x54>
 800209c:	2001      	movs	r0, #1
 800209e:	42b1      	cmp	r1, r6
 80020a0:	d10d      	bne.n	80020be <__eqdf2+0x56>
 80020a2:	45bc      	cmp	ip, r7
 80020a4:	d10b      	bne.n	80020be <__eqdf2+0x56>
 80020a6:	4294      	cmp	r4, r2
 80020a8:	d109      	bne.n	80020be <__eqdf2+0x56>
 80020aa:	45d3      	cmp	fp, sl
 80020ac:	d01c      	beq.n	80020e8 <__eqdf2+0x80>
 80020ae:	2900      	cmp	r1, #0
 80020b0:	d105      	bne.n	80020be <__eqdf2+0x56>
 80020b2:	4660      	mov	r0, ip
 80020b4:	4320      	orrs	r0, r4
 80020b6:	1e43      	subs	r3, r0, #1
 80020b8:	4198      	sbcs	r0, r3
 80020ba:	e000      	b.n	80020be <__eqdf2+0x56>
 80020bc:	2001      	movs	r0, #1
 80020be:	bcf0      	pop	{r4, r5, r6, r7}
 80020c0:	46bb      	mov	fp, r7
 80020c2:	46b2      	mov	sl, r6
 80020c4:	46a9      	mov	r9, r5
 80020c6:	46a0      	mov	r8, r4
 80020c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ca:	2001      	movs	r0, #1
 80020cc:	428e      	cmp	r6, r1
 80020ce:	d1f6      	bne.n	80020be <__eqdf2+0x56>
 80020d0:	4661      	mov	r1, ip
 80020d2:	4339      	orrs	r1, r7
 80020d4:	000f      	movs	r7, r1
 80020d6:	4317      	orrs	r7, r2
 80020d8:	4327      	orrs	r7, r4
 80020da:	d1f0      	bne.n	80020be <__eqdf2+0x56>
 80020dc:	465b      	mov	r3, fp
 80020de:	4652      	mov	r2, sl
 80020e0:	1a98      	subs	r0, r3, r2
 80020e2:	1e43      	subs	r3, r0, #1
 80020e4:	4198      	sbcs	r0, r3
 80020e6:	e7ea      	b.n	80020be <__eqdf2+0x56>
 80020e8:	2000      	movs	r0, #0
 80020ea:	e7e8      	b.n	80020be <__eqdf2+0x56>
 80020ec:	000007ff 	.word	0x000007ff

080020f0 <__gedf2>:
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	4657      	mov	r7, sl
 80020f4:	464e      	mov	r6, r9
 80020f6:	4645      	mov	r5, r8
 80020f8:	46de      	mov	lr, fp
 80020fa:	b5e0      	push	{r5, r6, r7, lr}
 80020fc:	000d      	movs	r5, r1
 80020fe:	030f      	lsls	r7, r1, #12
 8002100:	0b39      	lsrs	r1, r7, #12
 8002102:	b083      	sub	sp, #12
 8002104:	0004      	movs	r4, r0
 8002106:	4680      	mov	r8, r0
 8002108:	9101      	str	r1, [sp, #4]
 800210a:	0058      	lsls	r0, r3, #1
 800210c:	0fe9      	lsrs	r1, r5, #31
 800210e:	4f31      	ldr	r7, [pc, #196]	@ (80021d4 <__gedf2+0xe4>)
 8002110:	0d40      	lsrs	r0, r0, #21
 8002112:	468c      	mov	ip, r1
 8002114:	006e      	lsls	r6, r5, #1
 8002116:	0319      	lsls	r1, r3, #12
 8002118:	4682      	mov	sl, r0
 800211a:	4691      	mov	r9, r2
 800211c:	0d76      	lsrs	r6, r6, #21
 800211e:	0b09      	lsrs	r1, r1, #12
 8002120:	0fd8      	lsrs	r0, r3, #31
 8002122:	42be      	cmp	r6, r7
 8002124:	d01f      	beq.n	8002166 <__gedf2+0x76>
 8002126:	45ba      	cmp	sl, r7
 8002128:	d00f      	beq.n	800214a <__gedf2+0x5a>
 800212a:	2e00      	cmp	r6, #0
 800212c:	d12f      	bne.n	800218e <__gedf2+0x9e>
 800212e:	4655      	mov	r5, sl
 8002130:	9e01      	ldr	r6, [sp, #4]
 8002132:	4334      	orrs	r4, r6
 8002134:	2d00      	cmp	r5, #0
 8002136:	d127      	bne.n	8002188 <__gedf2+0x98>
 8002138:	430a      	orrs	r2, r1
 800213a:	d03a      	beq.n	80021b2 <__gedf2+0xc2>
 800213c:	2c00      	cmp	r4, #0
 800213e:	d145      	bne.n	80021cc <__gedf2+0xdc>
 8002140:	2800      	cmp	r0, #0
 8002142:	d11a      	bne.n	800217a <__gedf2+0x8a>
 8002144:	2001      	movs	r0, #1
 8002146:	4240      	negs	r0, r0
 8002148:	e017      	b.n	800217a <__gedf2+0x8a>
 800214a:	4311      	orrs	r1, r2
 800214c:	d13b      	bne.n	80021c6 <__gedf2+0xd6>
 800214e:	2e00      	cmp	r6, #0
 8002150:	d102      	bne.n	8002158 <__gedf2+0x68>
 8002152:	9f01      	ldr	r7, [sp, #4]
 8002154:	4327      	orrs	r7, r4
 8002156:	d0f3      	beq.n	8002140 <__gedf2+0x50>
 8002158:	4584      	cmp	ip, r0
 800215a:	d109      	bne.n	8002170 <__gedf2+0x80>
 800215c:	4663      	mov	r3, ip
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <__gedf2+0x54>
 8002162:	4660      	mov	r0, ip
 8002164:	e009      	b.n	800217a <__gedf2+0x8a>
 8002166:	9f01      	ldr	r7, [sp, #4]
 8002168:	4327      	orrs	r7, r4
 800216a:	d12c      	bne.n	80021c6 <__gedf2+0xd6>
 800216c:	45b2      	cmp	sl, r6
 800216e:	d024      	beq.n	80021ba <__gedf2+0xca>
 8002170:	4663      	mov	r3, ip
 8002172:	2002      	movs	r0, #2
 8002174:	3b01      	subs	r3, #1
 8002176:	4018      	ands	r0, r3
 8002178:	3801      	subs	r0, #1
 800217a:	b003      	add	sp, #12
 800217c:	bcf0      	pop	{r4, r5, r6, r7}
 800217e:	46bb      	mov	fp, r7
 8002180:	46b2      	mov	sl, r6
 8002182:	46a9      	mov	r9, r5
 8002184:	46a0      	mov	r8, r4
 8002186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002188:	2c00      	cmp	r4, #0
 800218a:	d0d9      	beq.n	8002140 <__gedf2+0x50>
 800218c:	e7e4      	b.n	8002158 <__gedf2+0x68>
 800218e:	4654      	mov	r4, sl
 8002190:	2c00      	cmp	r4, #0
 8002192:	d0ed      	beq.n	8002170 <__gedf2+0x80>
 8002194:	4584      	cmp	ip, r0
 8002196:	d1eb      	bne.n	8002170 <__gedf2+0x80>
 8002198:	4556      	cmp	r6, sl
 800219a:	dce9      	bgt.n	8002170 <__gedf2+0x80>
 800219c:	dbde      	blt.n	800215c <__gedf2+0x6c>
 800219e:	9b01      	ldr	r3, [sp, #4]
 80021a0:	428b      	cmp	r3, r1
 80021a2:	d8e5      	bhi.n	8002170 <__gedf2+0x80>
 80021a4:	d1da      	bne.n	800215c <__gedf2+0x6c>
 80021a6:	45c8      	cmp	r8, r9
 80021a8:	d8e2      	bhi.n	8002170 <__gedf2+0x80>
 80021aa:	2000      	movs	r0, #0
 80021ac:	45c8      	cmp	r8, r9
 80021ae:	d2e4      	bcs.n	800217a <__gedf2+0x8a>
 80021b0:	e7d4      	b.n	800215c <__gedf2+0x6c>
 80021b2:	2000      	movs	r0, #0
 80021b4:	2c00      	cmp	r4, #0
 80021b6:	d0e0      	beq.n	800217a <__gedf2+0x8a>
 80021b8:	e7da      	b.n	8002170 <__gedf2+0x80>
 80021ba:	4311      	orrs	r1, r2
 80021bc:	d103      	bne.n	80021c6 <__gedf2+0xd6>
 80021be:	4584      	cmp	ip, r0
 80021c0:	d1d6      	bne.n	8002170 <__gedf2+0x80>
 80021c2:	2000      	movs	r0, #0
 80021c4:	e7d9      	b.n	800217a <__gedf2+0x8a>
 80021c6:	2002      	movs	r0, #2
 80021c8:	4240      	negs	r0, r0
 80021ca:	e7d6      	b.n	800217a <__gedf2+0x8a>
 80021cc:	4584      	cmp	ip, r0
 80021ce:	d0e6      	beq.n	800219e <__gedf2+0xae>
 80021d0:	e7ce      	b.n	8002170 <__gedf2+0x80>
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff

080021d8 <__ledf2>:
 80021d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021da:	4657      	mov	r7, sl
 80021dc:	464e      	mov	r6, r9
 80021de:	4645      	mov	r5, r8
 80021e0:	46de      	mov	lr, fp
 80021e2:	b5e0      	push	{r5, r6, r7, lr}
 80021e4:	000d      	movs	r5, r1
 80021e6:	030f      	lsls	r7, r1, #12
 80021e8:	0004      	movs	r4, r0
 80021ea:	4680      	mov	r8, r0
 80021ec:	0fe8      	lsrs	r0, r5, #31
 80021ee:	0b39      	lsrs	r1, r7, #12
 80021f0:	4684      	mov	ip, r0
 80021f2:	b083      	sub	sp, #12
 80021f4:	0058      	lsls	r0, r3, #1
 80021f6:	4f30      	ldr	r7, [pc, #192]	@ (80022b8 <__ledf2+0xe0>)
 80021f8:	0d40      	lsrs	r0, r0, #21
 80021fa:	9101      	str	r1, [sp, #4]
 80021fc:	031e      	lsls	r6, r3, #12
 80021fe:	0069      	lsls	r1, r5, #1
 8002200:	4682      	mov	sl, r0
 8002202:	4691      	mov	r9, r2
 8002204:	0d49      	lsrs	r1, r1, #21
 8002206:	0b36      	lsrs	r6, r6, #12
 8002208:	0fd8      	lsrs	r0, r3, #31
 800220a:	42b9      	cmp	r1, r7
 800220c:	d020      	beq.n	8002250 <__ledf2+0x78>
 800220e:	45ba      	cmp	sl, r7
 8002210:	d00f      	beq.n	8002232 <__ledf2+0x5a>
 8002212:	2900      	cmp	r1, #0
 8002214:	d12b      	bne.n	800226e <__ledf2+0x96>
 8002216:	9901      	ldr	r1, [sp, #4]
 8002218:	430c      	orrs	r4, r1
 800221a:	4651      	mov	r1, sl
 800221c:	2900      	cmp	r1, #0
 800221e:	d137      	bne.n	8002290 <__ledf2+0xb8>
 8002220:	4332      	orrs	r2, r6
 8002222:	d038      	beq.n	8002296 <__ledf2+0xbe>
 8002224:	2c00      	cmp	r4, #0
 8002226:	d144      	bne.n	80022b2 <__ledf2+0xda>
 8002228:	2800      	cmp	r0, #0
 800222a:	d119      	bne.n	8002260 <__ledf2+0x88>
 800222c:	2001      	movs	r0, #1
 800222e:	4240      	negs	r0, r0
 8002230:	e016      	b.n	8002260 <__ledf2+0x88>
 8002232:	4316      	orrs	r6, r2
 8002234:	d113      	bne.n	800225e <__ledf2+0x86>
 8002236:	2900      	cmp	r1, #0
 8002238:	d102      	bne.n	8002240 <__ledf2+0x68>
 800223a:	9f01      	ldr	r7, [sp, #4]
 800223c:	4327      	orrs	r7, r4
 800223e:	d0f3      	beq.n	8002228 <__ledf2+0x50>
 8002240:	4584      	cmp	ip, r0
 8002242:	d020      	beq.n	8002286 <__ledf2+0xae>
 8002244:	4663      	mov	r3, ip
 8002246:	2002      	movs	r0, #2
 8002248:	3b01      	subs	r3, #1
 800224a:	4018      	ands	r0, r3
 800224c:	3801      	subs	r0, #1
 800224e:	e007      	b.n	8002260 <__ledf2+0x88>
 8002250:	9f01      	ldr	r7, [sp, #4]
 8002252:	4327      	orrs	r7, r4
 8002254:	d103      	bne.n	800225e <__ledf2+0x86>
 8002256:	458a      	cmp	sl, r1
 8002258:	d1f4      	bne.n	8002244 <__ledf2+0x6c>
 800225a:	4316      	orrs	r6, r2
 800225c:	d01f      	beq.n	800229e <__ledf2+0xc6>
 800225e:	2002      	movs	r0, #2
 8002260:	b003      	add	sp, #12
 8002262:	bcf0      	pop	{r4, r5, r6, r7}
 8002264:	46bb      	mov	fp, r7
 8002266:	46b2      	mov	sl, r6
 8002268:	46a9      	mov	r9, r5
 800226a:	46a0      	mov	r8, r4
 800226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800226e:	4654      	mov	r4, sl
 8002270:	2c00      	cmp	r4, #0
 8002272:	d0e7      	beq.n	8002244 <__ledf2+0x6c>
 8002274:	4584      	cmp	ip, r0
 8002276:	d1e5      	bne.n	8002244 <__ledf2+0x6c>
 8002278:	4551      	cmp	r1, sl
 800227a:	dce3      	bgt.n	8002244 <__ledf2+0x6c>
 800227c:	db03      	blt.n	8002286 <__ledf2+0xae>
 800227e:	9b01      	ldr	r3, [sp, #4]
 8002280:	42b3      	cmp	r3, r6
 8002282:	d8df      	bhi.n	8002244 <__ledf2+0x6c>
 8002284:	d00f      	beq.n	80022a6 <__ledf2+0xce>
 8002286:	4663      	mov	r3, ip
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0cf      	beq.n	800222c <__ledf2+0x54>
 800228c:	4660      	mov	r0, ip
 800228e:	e7e7      	b.n	8002260 <__ledf2+0x88>
 8002290:	2c00      	cmp	r4, #0
 8002292:	d0c9      	beq.n	8002228 <__ledf2+0x50>
 8002294:	e7d4      	b.n	8002240 <__ledf2+0x68>
 8002296:	2000      	movs	r0, #0
 8002298:	2c00      	cmp	r4, #0
 800229a:	d0e1      	beq.n	8002260 <__ledf2+0x88>
 800229c:	e7d2      	b.n	8002244 <__ledf2+0x6c>
 800229e:	4584      	cmp	ip, r0
 80022a0:	d1d0      	bne.n	8002244 <__ledf2+0x6c>
 80022a2:	2000      	movs	r0, #0
 80022a4:	e7dc      	b.n	8002260 <__ledf2+0x88>
 80022a6:	45c8      	cmp	r8, r9
 80022a8:	d8cc      	bhi.n	8002244 <__ledf2+0x6c>
 80022aa:	2000      	movs	r0, #0
 80022ac:	45c8      	cmp	r8, r9
 80022ae:	d2d7      	bcs.n	8002260 <__ledf2+0x88>
 80022b0:	e7e9      	b.n	8002286 <__ledf2+0xae>
 80022b2:	4584      	cmp	ip, r0
 80022b4:	d0e3      	beq.n	800227e <__ledf2+0xa6>
 80022b6:	e7c5      	b.n	8002244 <__ledf2+0x6c>
 80022b8:	000007ff 	.word	0x000007ff

080022bc <__aeabi_dmul>:
 80022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022be:	4657      	mov	r7, sl
 80022c0:	46de      	mov	lr, fp
 80022c2:	464e      	mov	r6, r9
 80022c4:	4645      	mov	r5, r8
 80022c6:	b5e0      	push	{r5, r6, r7, lr}
 80022c8:	001f      	movs	r7, r3
 80022ca:	030b      	lsls	r3, r1, #12
 80022cc:	0b1b      	lsrs	r3, r3, #12
 80022ce:	0016      	movs	r6, r2
 80022d0:	469a      	mov	sl, r3
 80022d2:	0fca      	lsrs	r2, r1, #31
 80022d4:	004b      	lsls	r3, r1, #1
 80022d6:	0004      	movs	r4, r0
 80022d8:	4693      	mov	fp, r2
 80022da:	b087      	sub	sp, #28
 80022dc:	0d5b      	lsrs	r3, r3, #21
 80022de:	d100      	bne.n	80022e2 <__aeabi_dmul+0x26>
 80022e0:	e0d5      	b.n	800248e <__aeabi_dmul+0x1d2>
 80022e2:	4abb      	ldr	r2, [pc, #748]	@ (80025d0 <__aeabi_dmul+0x314>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d100      	bne.n	80022ea <__aeabi_dmul+0x2e>
 80022e8:	e0f8      	b.n	80024dc <__aeabi_dmul+0x220>
 80022ea:	4651      	mov	r1, sl
 80022ec:	0f42      	lsrs	r2, r0, #29
 80022ee:	00c9      	lsls	r1, r1, #3
 80022f0:	430a      	orrs	r2, r1
 80022f2:	2180      	movs	r1, #128	@ 0x80
 80022f4:	0409      	lsls	r1, r1, #16
 80022f6:	4311      	orrs	r1, r2
 80022f8:	00c2      	lsls	r2, r0, #3
 80022fa:	4691      	mov	r9, r2
 80022fc:	4ab5      	ldr	r2, [pc, #724]	@ (80025d4 <__aeabi_dmul+0x318>)
 80022fe:	468a      	mov	sl, r1
 8002300:	189d      	adds	r5, r3, r2
 8002302:	2300      	movs	r3, #0
 8002304:	4698      	mov	r8, r3
 8002306:	9302      	str	r3, [sp, #8]
 8002308:	033c      	lsls	r4, r7, #12
 800230a:	007b      	lsls	r3, r7, #1
 800230c:	0ffa      	lsrs	r2, r7, #31
 800230e:	0030      	movs	r0, r6
 8002310:	0b24      	lsrs	r4, r4, #12
 8002312:	0d5b      	lsrs	r3, r3, #21
 8002314:	9200      	str	r2, [sp, #0]
 8002316:	d100      	bne.n	800231a <__aeabi_dmul+0x5e>
 8002318:	e096      	b.n	8002448 <__aeabi_dmul+0x18c>
 800231a:	4aad      	ldr	r2, [pc, #692]	@ (80025d0 <__aeabi_dmul+0x314>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d031      	beq.n	8002384 <__aeabi_dmul+0xc8>
 8002320:	0f72      	lsrs	r2, r6, #29
 8002322:	00e4      	lsls	r4, r4, #3
 8002324:	4322      	orrs	r2, r4
 8002326:	2480      	movs	r4, #128	@ 0x80
 8002328:	0424      	lsls	r4, r4, #16
 800232a:	4314      	orrs	r4, r2
 800232c:	4aa9      	ldr	r2, [pc, #676]	@ (80025d4 <__aeabi_dmul+0x318>)
 800232e:	00f0      	lsls	r0, r6, #3
 8002330:	4694      	mov	ip, r2
 8002332:	4463      	add	r3, ip
 8002334:	195b      	adds	r3, r3, r5
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	9201      	str	r2, [sp, #4]
 800233a:	4642      	mov	r2, r8
 800233c:	2600      	movs	r6, #0
 800233e:	2a0a      	cmp	r2, #10
 8002340:	dc42      	bgt.n	80023c8 <__aeabi_dmul+0x10c>
 8002342:	465a      	mov	r2, fp
 8002344:	9900      	ldr	r1, [sp, #0]
 8002346:	404a      	eors	r2, r1
 8002348:	4693      	mov	fp, r2
 800234a:	4642      	mov	r2, r8
 800234c:	2a02      	cmp	r2, #2
 800234e:	dc32      	bgt.n	80023b6 <__aeabi_dmul+0xfa>
 8002350:	3a01      	subs	r2, #1
 8002352:	2a01      	cmp	r2, #1
 8002354:	d900      	bls.n	8002358 <__aeabi_dmul+0x9c>
 8002356:	e149      	b.n	80025ec <__aeabi_dmul+0x330>
 8002358:	2e02      	cmp	r6, #2
 800235a:	d100      	bne.n	800235e <__aeabi_dmul+0xa2>
 800235c:	e0ca      	b.n	80024f4 <__aeabi_dmul+0x238>
 800235e:	2e01      	cmp	r6, #1
 8002360:	d13d      	bne.n	80023de <__aeabi_dmul+0x122>
 8002362:	2300      	movs	r3, #0
 8002364:	2400      	movs	r4, #0
 8002366:	2200      	movs	r2, #0
 8002368:	0010      	movs	r0, r2
 800236a:	465a      	mov	r2, fp
 800236c:	051b      	lsls	r3, r3, #20
 800236e:	4323      	orrs	r3, r4
 8002370:	07d2      	lsls	r2, r2, #31
 8002372:	4313      	orrs	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	b007      	add	sp, #28
 8002378:	bcf0      	pop	{r4, r5, r6, r7}
 800237a:	46bb      	mov	fp, r7
 800237c:	46b2      	mov	sl, r6
 800237e:	46a9      	mov	r9, r5
 8002380:	46a0      	mov	r8, r4
 8002382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002384:	4b92      	ldr	r3, [pc, #584]	@ (80025d0 <__aeabi_dmul+0x314>)
 8002386:	4326      	orrs	r6, r4
 8002388:	18eb      	adds	r3, r5, r3
 800238a:	2e00      	cmp	r6, #0
 800238c:	d100      	bne.n	8002390 <__aeabi_dmul+0xd4>
 800238e:	e0bb      	b.n	8002508 <__aeabi_dmul+0x24c>
 8002390:	2203      	movs	r2, #3
 8002392:	4641      	mov	r1, r8
 8002394:	4311      	orrs	r1, r2
 8002396:	465a      	mov	r2, fp
 8002398:	4688      	mov	r8, r1
 800239a:	9900      	ldr	r1, [sp, #0]
 800239c:	404a      	eors	r2, r1
 800239e:	2180      	movs	r1, #128	@ 0x80
 80023a0:	0109      	lsls	r1, r1, #4
 80023a2:	468c      	mov	ip, r1
 80023a4:	0029      	movs	r1, r5
 80023a6:	4461      	add	r1, ip
 80023a8:	9101      	str	r1, [sp, #4]
 80023aa:	4641      	mov	r1, r8
 80023ac:	290a      	cmp	r1, #10
 80023ae:	dd00      	ble.n	80023b2 <__aeabi_dmul+0xf6>
 80023b0:	e233      	b.n	800281a <__aeabi_dmul+0x55e>
 80023b2:	4693      	mov	fp, r2
 80023b4:	2603      	movs	r6, #3
 80023b6:	4642      	mov	r2, r8
 80023b8:	2701      	movs	r7, #1
 80023ba:	4097      	lsls	r7, r2
 80023bc:	21a6      	movs	r1, #166	@ 0xa6
 80023be:	003a      	movs	r2, r7
 80023c0:	00c9      	lsls	r1, r1, #3
 80023c2:	400a      	ands	r2, r1
 80023c4:	420f      	tst	r7, r1
 80023c6:	d031      	beq.n	800242c <__aeabi_dmul+0x170>
 80023c8:	9e02      	ldr	r6, [sp, #8]
 80023ca:	2e02      	cmp	r6, #2
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dmul+0x114>
 80023ce:	e235      	b.n	800283c <__aeabi_dmul+0x580>
 80023d0:	2e03      	cmp	r6, #3
 80023d2:	d100      	bne.n	80023d6 <__aeabi_dmul+0x11a>
 80023d4:	e1d2      	b.n	800277c <__aeabi_dmul+0x4c0>
 80023d6:	4654      	mov	r4, sl
 80023d8:	4648      	mov	r0, r9
 80023da:	2e01      	cmp	r6, #1
 80023dc:	d0c1      	beq.n	8002362 <__aeabi_dmul+0xa6>
 80023de:	9a01      	ldr	r2, [sp, #4]
 80023e0:	4b7d      	ldr	r3, [pc, #500]	@ (80025d8 <__aeabi_dmul+0x31c>)
 80023e2:	4694      	mov	ip, r2
 80023e4:	4463      	add	r3, ip
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	dc00      	bgt.n	80023ec <__aeabi_dmul+0x130>
 80023ea:	e0c0      	b.n	800256e <__aeabi_dmul+0x2b2>
 80023ec:	0742      	lsls	r2, r0, #29
 80023ee:	d009      	beq.n	8002404 <__aeabi_dmul+0x148>
 80023f0:	220f      	movs	r2, #15
 80023f2:	4002      	ands	r2, r0
 80023f4:	2a04      	cmp	r2, #4
 80023f6:	d005      	beq.n	8002404 <__aeabi_dmul+0x148>
 80023f8:	1d02      	adds	r2, r0, #4
 80023fa:	4282      	cmp	r2, r0
 80023fc:	4180      	sbcs	r0, r0
 80023fe:	4240      	negs	r0, r0
 8002400:	1824      	adds	r4, r4, r0
 8002402:	0010      	movs	r0, r2
 8002404:	01e2      	lsls	r2, r4, #7
 8002406:	d506      	bpl.n	8002416 <__aeabi_dmul+0x15a>
 8002408:	4b74      	ldr	r3, [pc, #464]	@ (80025dc <__aeabi_dmul+0x320>)
 800240a:	9a01      	ldr	r2, [sp, #4]
 800240c:	401c      	ands	r4, r3
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	4694      	mov	ip, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4463      	add	r3, ip
 8002416:	4a72      	ldr	r2, [pc, #456]	@ (80025e0 <__aeabi_dmul+0x324>)
 8002418:	4293      	cmp	r3, r2
 800241a:	dc6b      	bgt.n	80024f4 <__aeabi_dmul+0x238>
 800241c:	0762      	lsls	r2, r4, #29
 800241e:	08c0      	lsrs	r0, r0, #3
 8002420:	0264      	lsls	r4, r4, #9
 8002422:	055b      	lsls	r3, r3, #21
 8002424:	4302      	orrs	r2, r0
 8002426:	0b24      	lsrs	r4, r4, #12
 8002428:	0d5b      	lsrs	r3, r3, #21
 800242a:	e79d      	b.n	8002368 <__aeabi_dmul+0xac>
 800242c:	2190      	movs	r1, #144	@ 0x90
 800242e:	0089      	lsls	r1, r1, #2
 8002430:	420f      	tst	r7, r1
 8002432:	d163      	bne.n	80024fc <__aeabi_dmul+0x240>
 8002434:	2288      	movs	r2, #136	@ 0x88
 8002436:	423a      	tst	r2, r7
 8002438:	d100      	bne.n	800243c <__aeabi_dmul+0x180>
 800243a:	e0d7      	b.n	80025ec <__aeabi_dmul+0x330>
 800243c:	9b00      	ldr	r3, [sp, #0]
 800243e:	46a2      	mov	sl, r4
 8002440:	469b      	mov	fp, r3
 8002442:	4681      	mov	r9, r0
 8002444:	9602      	str	r6, [sp, #8]
 8002446:	e7bf      	b.n	80023c8 <__aeabi_dmul+0x10c>
 8002448:	0023      	movs	r3, r4
 800244a:	4333      	orrs	r3, r6
 800244c:	d100      	bne.n	8002450 <__aeabi_dmul+0x194>
 800244e:	e07f      	b.n	8002550 <__aeabi_dmul+0x294>
 8002450:	2c00      	cmp	r4, #0
 8002452:	d100      	bne.n	8002456 <__aeabi_dmul+0x19a>
 8002454:	e1ad      	b.n	80027b2 <__aeabi_dmul+0x4f6>
 8002456:	0020      	movs	r0, r4
 8002458:	f000 ff10 	bl	800327c <__clzsi2>
 800245c:	0002      	movs	r2, r0
 800245e:	0003      	movs	r3, r0
 8002460:	3a0b      	subs	r2, #11
 8002462:	201d      	movs	r0, #29
 8002464:	0019      	movs	r1, r3
 8002466:	1a82      	subs	r2, r0, r2
 8002468:	0030      	movs	r0, r6
 800246a:	3908      	subs	r1, #8
 800246c:	40d0      	lsrs	r0, r2
 800246e:	408c      	lsls	r4, r1
 8002470:	4304      	orrs	r4, r0
 8002472:	0030      	movs	r0, r6
 8002474:	4088      	lsls	r0, r1
 8002476:	4a5b      	ldr	r2, [pc, #364]	@ (80025e4 <__aeabi_dmul+0x328>)
 8002478:	1aeb      	subs	r3, r5, r3
 800247a:	4694      	mov	ip, r2
 800247c:	4463      	add	r3, ip
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	9201      	str	r2, [sp, #4]
 8002482:	4642      	mov	r2, r8
 8002484:	2600      	movs	r6, #0
 8002486:	2a0a      	cmp	r2, #10
 8002488:	dc00      	bgt.n	800248c <__aeabi_dmul+0x1d0>
 800248a:	e75a      	b.n	8002342 <__aeabi_dmul+0x86>
 800248c:	e79c      	b.n	80023c8 <__aeabi_dmul+0x10c>
 800248e:	4653      	mov	r3, sl
 8002490:	4303      	orrs	r3, r0
 8002492:	4699      	mov	r9, r3
 8002494:	d054      	beq.n	8002540 <__aeabi_dmul+0x284>
 8002496:	4653      	mov	r3, sl
 8002498:	2b00      	cmp	r3, #0
 800249a:	d100      	bne.n	800249e <__aeabi_dmul+0x1e2>
 800249c:	e177      	b.n	800278e <__aeabi_dmul+0x4d2>
 800249e:	4650      	mov	r0, sl
 80024a0:	f000 feec 	bl	800327c <__clzsi2>
 80024a4:	230b      	movs	r3, #11
 80024a6:	425b      	negs	r3, r3
 80024a8:	469c      	mov	ip, r3
 80024aa:	0002      	movs	r2, r0
 80024ac:	4484      	add	ip, r0
 80024ae:	0011      	movs	r1, r2
 80024b0:	4650      	mov	r0, sl
 80024b2:	3908      	subs	r1, #8
 80024b4:	4088      	lsls	r0, r1
 80024b6:	231d      	movs	r3, #29
 80024b8:	4680      	mov	r8, r0
 80024ba:	4660      	mov	r0, ip
 80024bc:	1a1b      	subs	r3, r3, r0
 80024be:	0020      	movs	r0, r4
 80024c0:	40d8      	lsrs	r0, r3
 80024c2:	0003      	movs	r3, r0
 80024c4:	4640      	mov	r0, r8
 80024c6:	4303      	orrs	r3, r0
 80024c8:	469a      	mov	sl, r3
 80024ca:	0023      	movs	r3, r4
 80024cc:	408b      	lsls	r3, r1
 80024ce:	4699      	mov	r9, r3
 80024d0:	2300      	movs	r3, #0
 80024d2:	4d44      	ldr	r5, [pc, #272]	@ (80025e4 <__aeabi_dmul+0x328>)
 80024d4:	4698      	mov	r8, r3
 80024d6:	1aad      	subs	r5, r5, r2
 80024d8:	9302      	str	r3, [sp, #8]
 80024da:	e715      	b.n	8002308 <__aeabi_dmul+0x4c>
 80024dc:	4652      	mov	r2, sl
 80024de:	4302      	orrs	r2, r0
 80024e0:	4691      	mov	r9, r2
 80024e2:	d126      	bne.n	8002532 <__aeabi_dmul+0x276>
 80024e4:	2200      	movs	r2, #0
 80024e6:	001d      	movs	r5, r3
 80024e8:	2302      	movs	r3, #2
 80024ea:	4692      	mov	sl, r2
 80024ec:	3208      	adds	r2, #8
 80024ee:	4690      	mov	r8, r2
 80024f0:	9302      	str	r3, [sp, #8]
 80024f2:	e709      	b.n	8002308 <__aeabi_dmul+0x4c>
 80024f4:	2400      	movs	r4, #0
 80024f6:	2200      	movs	r2, #0
 80024f8:	4b35      	ldr	r3, [pc, #212]	@ (80025d0 <__aeabi_dmul+0x314>)
 80024fa:	e735      	b.n	8002368 <__aeabi_dmul+0xac>
 80024fc:	2300      	movs	r3, #0
 80024fe:	2480      	movs	r4, #128	@ 0x80
 8002500:	469b      	mov	fp, r3
 8002502:	0324      	lsls	r4, r4, #12
 8002504:	4b32      	ldr	r3, [pc, #200]	@ (80025d0 <__aeabi_dmul+0x314>)
 8002506:	e72f      	b.n	8002368 <__aeabi_dmul+0xac>
 8002508:	2202      	movs	r2, #2
 800250a:	4641      	mov	r1, r8
 800250c:	4311      	orrs	r1, r2
 800250e:	2280      	movs	r2, #128	@ 0x80
 8002510:	0112      	lsls	r2, r2, #4
 8002512:	4694      	mov	ip, r2
 8002514:	002a      	movs	r2, r5
 8002516:	4462      	add	r2, ip
 8002518:	4688      	mov	r8, r1
 800251a:	9201      	str	r2, [sp, #4]
 800251c:	290a      	cmp	r1, #10
 800251e:	dd00      	ble.n	8002522 <__aeabi_dmul+0x266>
 8002520:	e752      	b.n	80023c8 <__aeabi_dmul+0x10c>
 8002522:	465a      	mov	r2, fp
 8002524:	2000      	movs	r0, #0
 8002526:	9900      	ldr	r1, [sp, #0]
 8002528:	0004      	movs	r4, r0
 800252a:	404a      	eors	r2, r1
 800252c:	4693      	mov	fp, r2
 800252e:	2602      	movs	r6, #2
 8002530:	e70b      	b.n	800234a <__aeabi_dmul+0x8e>
 8002532:	220c      	movs	r2, #12
 8002534:	001d      	movs	r5, r3
 8002536:	2303      	movs	r3, #3
 8002538:	4681      	mov	r9, r0
 800253a:	4690      	mov	r8, r2
 800253c:	9302      	str	r3, [sp, #8]
 800253e:	e6e3      	b.n	8002308 <__aeabi_dmul+0x4c>
 8002540:	2300      	movs	r3, #0
 8002542:	469a      	mov	sl, r3
 8002544:	3304      	adds	r3, #4
 8002546:	4698      	mov	r8, r3
 8002548:	3b03      	subs	r3, #3
 800254a:	2500      	movs	r5, #0
 800254c:	9302      	str	r3, [sp, #8]
 800254e:	e6db      	b.n	8002308 <__aeabi_dmul+0x4c>
 8002550:	4642      	mov	r2, r8
 8002552:	3301      	adds	r3, #1
 8002554:	431a      	orrs	r2, r3
 8002556:	002b      	movs	r3, r5
 8002558:	4690      	mov	r8, r2
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	9201      	str	r2, [sp, #4]
 800255e:	4642      	mov	r2, r8
 8002560:	2400      	movs	r4, #0
 8002562:	2000      	movs	r0, #0
 8002564:	2601      	movs	r6, #1
 8002566:	2a0a      	cmp	r2, #10
 8002568:	dc00      	bgt.n	800256c <__aeabi_dmul+0x2b0>
 800256a:	e6ea      	b.n	8002342 <__aeabi_dmul+0x86>
 800256c:	e72c      	b.n	80023c8 <__aeabi_dmul+0x10c>
 800256e:	2201      	movs	r2, #1
 8002570:	1ad2      	subs	r2, r2, r3
 8002572:	2a38      	cmp	r2, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_dmul+0x2bc>
 8002576:	e6f4      	b.n	8002362 <__aeabi_dmul+0xa6>
 8002578:	2a1f      	cmp	r2, #31
 800257a:	dc00      	bgt.n	800257e <__aeabi_dmul+0x2c2>
 800257c:	e12a      	b.n	80027d4 <__aeabi_dmul+0x518>
 800257e:	211f      	movs	r1, #31
 8002580:	4249      	negs	r1, r1
 8002582:	1acb      	subs	r3, r1, r3
 8002584:	0021      	movs	r1, r4
 8002586:	40d9      	lsrs	r1, r3
 8002588:	000b      	movs	r3, r1
 800258a:	2a20      	cmp	r2, #32
 800258c:	d005      	beq.n	800259a <__aeabi_dmul+0x2de>
 800258e:	4a16      	ldr	r2, [pc, #88]	@ (80025e8 <__aeabi_dmul+0x32c>)
 8002590:	9d01      	ldr	r5, [sp, #4]
 8002592:	4694      	mov	ip, r2
 8002594:	4465      	add	r5, ip
 8002596:	40ac      	lsls	r4, r5
 8002598:	4320      	orrs	r0, r4
 800259a:	1e42      	subs	r2, r0, #1
 800259c:	4190      	sbcs	r0, r2
 800259e:	4318      	orrs	r0, r3
 80025a0:	2307      	movs	r3, #7
 80025a2:	0019      	movs	r1, r3
 80025a4:	2400      	movs	r4, #0
 80025a6:	4001      	ands	r1, r0
 80025a8:	4203      	tst	r3, r0
 80025aa:	d00c      	beq.n	80025c6 <__aeabi_dmul+0x30a>
 80025ac:	230f      	movs	r3, #15
 80025ae:	4003      	ands	r3, r0
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d100      	bne.n	80025b6 <__aeabi_dmul+0x2fa>
 80025b4:	e140      	b.n	8002838 <__aeabi_dmul+0x57c>
 80025b6:	1d03      	adds	r3, r0, #4
 80025b8:	4283      	cmp	r3, r0
 80025ba:	41a4      	sbcs	r4, r4
 80025bc:	0018      	movs	r0, r3
 80025be:	4264      	negs	r4, r4
 80025c0:	0761      	lsls	r1, r4, #29
 80025c2:	0264      	lsls	r4, r4, #9
 80025c4:	0b24      	lsrs	r4, r4, #12
 80025c6:	08c2      	lsrs	r2, r0, #3
 80025c8:	2300      	movs	r3, #0
 80025ca:	430a      	orrs	r2, r1
 80025cc:	e6cc      	b.n	8002368 <__aeabi_dmul+0xac>
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	000007ff 	.word	0x000007ff
 80025d4:	fffffc01 	.word	0xfffffc01
 80025d8:	000003ff 	.word	0x000003ff
 80025dc:	feffffff 	.word	0xfeffffff
 80025e0:	000007fe 	.word	0x000007fe
 80025e4:	fffffc0d 	.word	0xfffffc0d
 80025e8:	0000043e 	.word	0x0000043e
 80025ec:	4649      	mov	r1, r9
 80025ee:	464a      	mov	r2, r9
 80025f0:	0409      	lsls	r1, r1, #16
 80025f2:	0c09      	lsrs	r1, r1, #16
 80025f4:	000d      	movs	r5, r1
 80025f6:	0c16      	lsrs	r6, r2, #16
 80025f8:	0c02      	lsrs	r2, r0, #16
 80025fa:	0400      	lsls	r0, r0, #16
 80025fc:	0c00      	lsrs	r0, r0, #16
 80025fe:	4345      	muls	r5, r0
 8002600:	46ac      	mov	ip, r5
 8002602:	0005      	movs	r5, r0
 8002604:	4375      	muls	r5, r6
 8002606:	46a8      	mov	r8, r5
 8002608:	0015      	movs	r5, r2
 800260a:	000f      	movs	r7, r1
 800260c:	4375      	muls	r5, r6
 800260e:	9200      	str	r2, [sp, #0]
 8002610:	9502      	str	r5, [sp, #8]
 8002612:	002a      	movs	r2, r5
 8002614:	9d00      	ldr	r5, [sp, #0]
 8002616:	436f      	muls	r7, r5
 8002618:	4665      	mov	r5, ip
 800261a:	0c2d      	lsrs	r5, r5, #16
 800261c:	46a9      	mov	r9, r5
 800261e:	4447      	add	r7, r8
 8002620:	444f      	add	r7, r9
 8002622:	45b8      	cmp	r8, r7
 8002624:	d905      	bls.n	8002632 <__aeabi_dmul+0x376>
 8002626:	0015      	movs	r5, r2
 8002628:	2280      	movs	r2, #128	@ 0x80
 800262a:	0252      	lsls	r2, r2, #9
 800262c:	4690      	mov	r8, r2
 800262e:	4445      	add	r5, r8
 8002630:	9502      	str	r5, [sp, #8]
 8002632:	0c3d      	lsrs	r5, r7, #16
 8002634:	9503      	str	r5, [sp, #12]
 8002636:	4665      	mov	r5, ip
 8002638:	042d      	lsls	r5, r5, #16
 800263a:	043f      	lsls	r7, r7, #16
 800263c:	0c2d      	lsrs	r5, r5, #16
 800263e:	46ac      	mov	ip, r5
 8002640:	003d      	movs	r5, r7
 8002642:	4465      	add	r5, ip
 8002644:	9504      	str	r5, [sp, #16]
 8002646:	0c25      	lsrs	r5, r4, #16
 8002648:	0424      	lsls	r4, r4, #16
 800264a:	0c24      	lsrs	r4, r4, #16
 800264c:	46ac      	mov	ip, r5
 800264e:	0025      	movs	r5, r4
 8002650:	4375      	muls	r5, r6
 8002652:	46a8      	mov	r8, r5
 8002654:	4665      	mov	r5, ip
 8002656:	000f      	movs	r7, r1
 8002658:	4369      	muls	r1, r5
 800265a:	4441      	add	r1, r8
 800265c:	4689      	mov	r9, r1
 800265e:	4367      	muls	r7, r4
 8002660:	0c39      	lsrs	r1, r7, #16
 8002662:	4449      	add	r1, r9
 8002664:	436e      	muls	r6, r5
 8002666:	4588      	cmp	r8, r1
 8002668:	d903      	bls.n	8002672 <__aeabi_dmul+0x3b6>
 800266a:	2280      	movs	r2, #128	@ 0x80
 800266c:	0252      	lsls	r2, r2, #9
 800266e:	4690      	mov	r8, r2
 8002670:	4446      	add	r6, r8
 8002672:	0c0d      	lsrs	r5, r1, #16
 8002674:	46a8      	mov	r8, r5
 8002676:	0035      	movs	r5, r6
 8002678:	4445      	add	r5, r8
 800267a:	9505      	str	r5, [sp, #20]
 800267c:	9d03      	ldr	r5, [sp, #12]
 800267e:	043f      	lsls	r7, r7, #16
 8002680:	46a8      	mov	r8, r5
 8002682:	0c3f      	lsrs	r7, r7, #16
 8002684:	0409      	lsls	r1, r1, #16
 8002686:	19c9      	adds	r1, r1, r7
 8002688:	4488      	add	r8, r1
 800268a:	4645      	mov	r5, r8
 800268c:	9503      	str	r5, [sp, #12]
 800268e:	4655      	mov	r5, sl
 8002690:	042e      	lsls	r6, r5, #16
 8002692:	0c36      	lsrs	r6, r6, #16
 8002694:	0c2f      	lsrs	r7, r5, #16
 8002696:	0035      	movs	r5, r6
 8002698:	4345      	muls	r5, r0
 800269a:	4378      	muls	r0, r7
 800269c:	4681      	mov	r9, r0
 800269e:	0038      	movs	r0, r7
 80026a0:	46a8      	mov	r8, r5
 80026a2:	0c2d      	lsrs	r5, r5, #16
 80026a4:	46aa      	mov	sl, r5
 80026a6:	9a00      	ldr	r2, [sp, #0]
 80026a8:	4350      	muls	r0, r2
 80026aa:	4372      	muls	r2, r6
 80026ac:	444a      	add	r2, r9
 80026ae:	4452      	add	r2, sl
 80026b0:	4591      	cmp	r9, r2
 80026b2:	d903      	bls.n	80026bc <__aeabi_dmul+0x400>
 80026b4:	2580      	movs	r5, #128	@ 0x80
 80026b6:	026d      	lsls	r5, r5, #9
 80026b8:	46a9      	mov	r9, r5
 80026ba:	4448      	add	r0, r9
 80026bc:	0c15      	lsrs	r5, r2, #16
 80026be:	46a9      	mov	r9, r5
 80026c0:	4645      	mov	r5, r8
 80026c2:	042d      	lsls	r5, r5, #16
 80026c4:	0c2d      	lsrs	r5, r5, #16
 80026c6:	46a8      	mov	r8, r5
 80026c8:	4665      	mov	r5, ip
 80026ca:	437d      	muls	r5, r7
 80026cc:	0412      	lsls	r2, r2, #16
 80026ce:	4448      	add	r0, r9
 80026d0:	4490      	add	r8, r2
 80026d2:	46a9      	mov	r9, r5
 80026d4:	0032      	movs	r2, r6
 80026d6:	4665      	mov	r5, ip
 80026d8:	4362      	muls	r2, r4
 80026da:	436e      	muls	r6, r5
 80026dc:	437c      	muls	r4, r7
 80026de:	0c17      	lsrs	r7, r2, #16
 80026e0:	1936      	adds	r6, r6, r4
 80026e2:	19bf      	adds	r7, r7, r6
 80026e4:	42bc      	cmp	r4, r7
 80026e6:	d903      	bls.n	80026f0 <__aeabi_dmul+0x434>
 80026e8:	2480      	movs	r4, #128	@ 0x80
 80026ea:	0264      	lsls	r4, r4, #9
 80026ec:	46a4      	mov	ip, r4
 80026ee:	44e1      	add	r9, ip
 80026f0:	9c02      	ldr	r4, [sp, #8]
 80026f2:	9e03      	ldr	r6, [sp, #12]
 80026f4:	46a4      	mov	ip, r4
 80026f6:	9d05      	ldr	r5, [sp, #20]
 80026f8:	4466      	add	r6, ip
 80026fa:	428e      	cmp	r6, r1
 80026fc:	4189      	sbcs	r1, r1
 80026fe:	46ac      	mov	ip, r5
 8002700:	0412      	lsls	r2, r2, #16
 8002702:	043c      	lsls	r4, r7, #16
 8002704:	0c12      	lsrs	r2, r2, #16
 8002706:	18a2      	adds	r2, r4, r2
 8002708:	4462      	add	r2, ip
 800270a:	4249      	negs	r1, r1
 800270c:	1854      	adds	r4, r2, r1
 800270e:	4446      	add	r6, r8
 8002710:	46a4      	mov	ip, r4
 8002712:	4546      	cmp	r6, r8
 8002714:	41a4      	sbcs	r4, r4
 8002716:	4682      	mov	sl, r0
 8002718:	4264      	negs	r4, r4
 800271a:	46a0      	mov	r8, r4
 800271c:	42aa      	cmp	r2, r5
 800271e:	4192      	sbcs	r2, r2
 8002720:	458c      	cmp	ip, r1
 8002722:	4189      	sbcs	r1, r1
 8002724:	44e2      	add	sl, ip
 8002726:	44d0      	add	r8, sl
 8002728:	4249      	negs	r1, r1
 800272a:	4252      	negs	r2, r2
 800272c:	430a      	orrs	r2, r1
 800272e:	45a0      	cmp	r8, r4
 8002730:	41a4      	sbcs	r4, r4
 8002732:	4582      	cmp	sl, r0
 8002734:	4189      	sbcs	r1, r1
 8002736:	4264      	negs	r4, r4
 8002738:	4249      	negs	r1, r1
 800273a:	430c      	orrs	r4, r1
 800273c:	4641      	mov	r1, r8
 800273e:	0c3f      	lsrs	r7, r7, #16
 8002740:	19d2      	adds	r2, r2, r7
 8002742:	1912      	adds	r2, r2, r4
 8002744:	0dcc      	lsrs	r4, r1, #23
 8002746:	9904      	ldr	r1, [sp, #16]
 8002748:	0270      	lsls	r0, r6, #9
 800274a:	4308      	orrs	r0, r1
 800274c:	1e41      	subs	r1, r0, #1
 800274e:	4188      	sbcs	r0, r1
 8002750:	4641      	mov	r1, r8
 8002752:	444a      	add	r2, r9
 8002754:	0df6      	lsrs	r6, r6, #23
 8002756:	0252      	lsls	r2, r2, #9
 8002758:	4330      	orrs	r0, r6
 800275a:	0249      	lsls	r1, r1, #9
 800275c:	4314      	orrs	r4, r2
 800275e:	4308      	orrs	r0, r1
 8002760:	01d2      	lsls	r2, r2, #7
 8002762:	d535      	bpl.n	80027d0 <__aeabi_dmul+0x514>
 8002764:	2201      	movs	r2, #1
 8002766:	0843      	lsrs	r3, r0, #1
 8002768:	4002      	ands	r2, r0
 800276a:	4313      	orrs	r3, r2
 800276c:	07e0      	lsls	r0, r4, #31
 800276e:	4318      	orrs	r0, r3
 8002770:	0864      	lsrs	r4, r4, #1
 8002772:	e634      	b.n	80023de <__aeabi_dmul+0x122>
 8002774:	9b00      	ldr	r3, [sp, #0]
 8002776:	46a2      	mov	sl, r4
 8002778:	469b      	mov	fp, r3
 800277a:	4681      	mov	r9, r0
 800277c:	2480      	movs	r4, #128	@ 0x80
 800277e:	4653      	mov	r3, sl
 8002780:	0324      	lsls	r4, r4, #12
 8002782:	431c      	orrs	r4, r3
 8002784:	0324      	lsls	r4, r4, #12
 8002786:	464a      	mov	r2, r9
 8002788:	4b2e      	ldr	r3, [pc, #184]	@ (8002844 <__aeabi_dmul+0x588>)
 800278a:	0b24      	lsrs	r4, r4, #12
 800278c:	e5ec      	b.n	8002368 <__aeabi_dmul+0xac>
 800278e:	f000 fd75 	bl	800327c <__clzsi2>
 8002792:	2315      	movs	r3, #21
 8002794:	469c      	mov	ip, r3
 8002796:	4484      	add	ip, r0
 8002798:	0002      	movs	r2, r0
 800279a:	4663      	mov	r3, ip
 800279c:	3220      	adds	r2, #32
 800279e:	2b1c      	cmp	r3, #28
 80027a0:	dc00      	bgt.n	80027a4 <__aeabi_dmul+0x4e8>
 80027a2:	e684      	b.n	80024ae <__aeabi_dmul+0x1f2>
 80027a4:	2300      	movs	r3, #0
 80027a6:	4699      	mov	r9, r3
 80027a8:	0023      	movs	r3, r4
 80027aa:	3808      	subs	r0, #8
 80027ac:	4083      	lsls	r3, r0
 80027ae:	469a      	mov	sl, r3
 80027b0:	e68e      	b.n	80024d0 <__aeabi_dmul+0x214>
 80027b2:	f000 fd63 	bl	800327c <__clzsi2>
 80027b6:	0002      	movs	r2, r0
 80027b8:	0003      	movs	r3, r0
 80027ba:	3215      	adds	r2, #21
 80027bc:	3320      	adds	r3, #32
 80027be:	2a1c      	cmp	r2, #28
 80027c0:	dc00      	bgt.n	80027c4 <__aeabi_dmul+0x508>
 80027c2:	e64e      	b.n	8002462 <__aeabi_dmul+0x1a6>
 80027c4:	0002      	movs	r2, r0
 80027c6:	0034      	movs	r4, r6
 80027c8:	3a08      	subs	r2, #8
 80027ca:	2000      	movs	r0, #0
 80027cc:	4094      	lsls	r4, r2
 80027ce:	e652      	b.n	8002476 <__aeabi_dmul+0x1ba>
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	e604      	b.n	80023de <__aeabi_dmul+0x122>
 80027d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002848 <__aeabi_dmul+0x58c>)
 80027d6:	0021      	movs	r1, r4
 80027d8:	469c      	mov	ip, r3
 80027da:	0003      	movs	r3, r0
 80027dc:	9d01      	ldr	r5, [sp, #4]
 80027de:	40d3      	lsrs	r3, r2
 80027e0:	4465      	add	r5, ip
 80027e2:	40a9      	lsls	r1, r5
 80027e4:	4319      	orrs	r1, r3
 80027e6:	0003      	movs	r3, r0
 80027e8:	40ab      	lsls	r3, r5
 80027ea:	1e58      	subs	r0, r3, #1
 80027ec:	4183      	sbcs	r3, r0
 80027ee:	4319      	orrs	r1, r3
 80027f0:	0008      	movs	r0, r1
 80027f2:	40d4      	lsrs	r4, r2
 80027f4:	074b      	lsls	r3, r1, #29
 80027f6:	d009      	beq.n	800280c <__aeabi_dmul+0x550>
 80027f8:	230f      	movs	r3, #15
 80027fa:	400b      	ands	r3, r1
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d005      	beq.n	800280c <__aeabi_dmul+0x550>
 8002800:	1d0b      	adds	r3, r1, #4
 8002802:	428b      	cmp	r3, r1
 8002804:	4180      	sbcs	r0, r0
 8002806:	4240      	negs	r0, r0
 8002808:	1824      	adds	r4, r4, r0
 800280a:	0018      	movs	r0, r3
 800280c:	0223      	lsls	r3, r4, #8
 800280e:	d400      	bmi.n	8002812 <__aeabi_dmul+0x556>
 8002810:	e6d6      	b.n	80025c0 <__aeabi_dmul+0x304>
 8002812:	2301      	movs	r3, #1
 8002814:	2400      	movs	r4, #0
 8002816:	2200      	movs	r2, #0
 8002818:	e5a6      	b.n	8002368 <__aeabi_dmul+0xac>
 800281a:	290f      	cmp	r1, #15
 800281c:	d1aa      	bne.n	8002774 <__aeabi_dmul+0x4b8>
 800281e:	2380      	movs	r3, #128	@ 0x80
 8002820:	4652      	mov	r2, sl
 8002822:	031b      	lsls	r3, r3, #12
 8002824:	421a      	tst	r2, r3
 8002826:	d0a9      	beq.n	800277c <__aeabi_dmul+0x4c0>
 8002828:	421c      	tst	r4, r3
 800282a:	d1a7      	bne.n	800277c <__aeabi_dmul+0x4c0>
 800282c:	431c      	orrs	r4, r3
 800282e:	9b00      	ldr	r3, [sp, #0]
 8002830:	0002      	movs	r2, r0
 8002832:	469b      	mov	fp, r3
 8002834:	4b03      	ldr	r3, [pc, #12]	@ (8002844 <__aeabi_dmul+0x588>)
 8002836:	e597      	b.n	8002368 <__aeabi_dmul+0xac>
 8002838:	2400      	movs	r4, #0
 800283a:	e6c1      	b.n	80025c0 <__aeabi_dmul+0x304>
 800283c:	2400      	movs	r4, #0
 800283e:	4b01      	ldr	r3, [pc, #4]	@ (8002844 <__aeabi_dmul+0x588>)
 8002840:	0022      	movs	r2, r4
 8002842:	e591      	b.n	8002368 <__aeabi_dmul+0xac>
 8002844:	000007ff 	.word	0x000007ff
 8002848:	0000041e 	.word	0x0000041e

0800284c <__aeabi_dsub>:
 800284c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284e:	464e      	mov	r6, r9
 8002850:	4645      	mov	r5, r8
 8002852:	46de      	mov	lr, fp
 8002854:	4657      	mov	r7, sl
 8002856:	b5e0      	push	{r5, r6, r7, lr}
 8002858:	b085      	sub	sp, #20
 800285a:	9000      	str	r0, [sp, #0]
 800285c:	9101      	str	r1, [sp, #4]
 800285e:	030c      	lsls	r4, r1, #12
 8002860:	004f      	lsls	r7, r1, #1
 8002862:	0fce      	lsrs	r6, r1, #31
 8002864:	0a61      	lsrs	r1, r4, #9
 8002866:	9c00      	ldr	r4, [sp, #0]
 8002868:	46b0      	mov	r8, r6
 800286a:	0f64      	lsrs	r4, r4, #29
 800286c:	430c      	orrs	r4, r1
 800286e:	9900      	ldr	r1, [sp, #0]
 8002870:	0d7f      	lsrs	r7, r7, #21
 8002872:	00c8      	lsls	r0, r1, #3
 8002874:	0011      	movs	r1, r2
 8002876:	001a      	movs	r2, r3
 8002878:	031b      	lsls	r3, r3, #12
 800287a:	469c      	mov	ip, r3
 800287c:	9100      	str	r1, [sp, #0]
 800287e:	9201      	str	r2, [sp, #4]
 8002880:	0051      	lsls	r1, r2, #1
 8002882:	0d4b      	lsrs	r3, r1, #21
 8002884:	4699      	mov	r9, r3
 8002886:	9b01      	ldr	r3, [sp, #4]
 8002888:	9d00      	ldr	r5, [sp, #0]
 800288a:	0fd9      	lsrs	r1, r3, #31
 800288c:	4663      	mov	r3, ip
 800288e:	0f6a      	lsrs	r2, r5, #29
 8002890:	0a5b      	lsrs	r3, r3, #9
 8002892:	4313      	orrs	r3, r2
 8002894:	00ea      	lsls	r2, r5, #3
 8002896:	4694      	mov	ip, r2
 8002898:	4693      	mov	fp, r2
 800289a:	4ac1      	ldr	r2, [pc, #772]	@ (8002ba0 <__aeabi_dsub+0x354>)
 800289c:	9003      	str	r0, [sp, #12]
 800289e:	9302      	str	r3, [sp, #8]
 80028a0:	4591      	cmp	r9, r2
 80028a2:	d100      	bne.n	80028a6 <__aeabi_dsub+0x5a>
 80028a4:	e0cd      	b.n	8002a42 <__aeabi_dsub+0x1f6>
 80028a6:	2501      	movs	r5, #1
 80028a8:	4069      	eors	r1, r5
 80028aa:	464d      	mov	r5, r9
 80028ac:	1b7d      	subs	r5, r7, r5
 80028ae:	46aa      	mov	sl, r5
 80028b0:	428e      	cmp	r6, r1
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dsub+0x6a>
 80028b4:	e080      	b.n	80029b8 <__aeabi_dsub+0x16c>
 80028b6:	2d00      	cmp	r5, #0
 80028b8:	dc00      	bgt.n	80028bc <__aeabi_dsub+0x70>
 80028ba:	e335      	b.n	8002f28 <__aeabi_dsub+0x6dc>
 80028bc:	4649      	mov	r1, r9
 80028be:	2900      	cmp	r1, #0
 80028c0:	d100      	bne.n	80028c4 <__aeabi_dsub+0x78>
 80028c2:	e0df      	b.n	8002a84 <__aeabi_dsub+0x238>
 80028c4:	4297      	cmp	r7, r2
 80028c6:	d100      	bne.n	80028ca <__aeabi_dsub+0x7e>
 80028c8:	e194      	b.n	8002bf4 <__aeabi_dsub+0x3a8>
 80028ca:	4652      	mov	r2, sl
 80028cc:	2501      	movs	r5, #1
 80028ce:	2a38      	cmp	r2, #56	@ 0x38
 80028d0:	dc19      	bgt.n	8002906 <__aeabi_dsub+0xba>
 80028d2:	2280      	movs	r2, #128	@ 0x80
 80028d4:	9b02      	ldr	r3, [sp, #8]
 80028d6:	0412      	lsls	r2, r2, #16
 80028d8:	4313      	orrs	r3, r2
 80028da:	9302      	str	r3, [sp, #8]
 80028dc:	4652      	mov	r2, sl
 80028de:	2a1f      	cmp	r2, #31
 80028e0:	dd00      	ble.n	80028e4 <__aeabi_dsub+0x98>
 80028e2:	e1e3      	b.n	8002cac <__aeabi_dsub+0x460>
 80028e4:	4653      	mov	r3, sl
 80028e6:	2220      	movs	r2, #32
 80028e8:	4661      	mov	r1, ip
 80028ea:	9d02      	ldr	r5, [sp, #8]
 80028ec:	1ad2      	subs	r2, r2, r3
 80028ee:	4095      	lsls	r5, r2
 80028f0:	40d9      	lsrs	r1, r3
 80028f2:	430d      	orrs	r5, r1
 80028f4:	4661      	mov	r1, ip
 80028f6:	4091      	lsls	r1, r2
 80028f8:	000a      	movs	r2, r1
 80028fa:	1e51      	subs	r1, r2, #1
 80028fc:	418a      	sbcs	r2, r1
 80028fe:	4315      	orrs	r5, r2
 8002900:	9a02      	ldr	r2, [sp, #8]
 8002902:	40da      	lsrs	r2, r3
 8002904:	1aa4      	subs	r4, r4, r2
 8002906:	1b45      	subs	r5, r0, r5
 8002908:	42a8      	cmp	r0, r5
 800290a:	4180      	sbcs	r0, r0
 800290c:	4240      	negs	r0, r0
 800290e:	1a24      	subs	r4, r4, r0
 8002910:	0223      	lsls	r3, r4, #8
 8002912:	d400      	bmi.n	8002916 <__aeabi_dsub+0xca>
 8002914:	e13d      	b.n	8002b92 <__aeabi_dsub+0x346>
 8002916:	0264      	lsls	r4, r4, #9
 8002918:	0a64      	lsrs	r4, r4, #9
 800291a:	2c00      	cmp	r4, #0
 800291c:	d100      	bne.n	8002920 <__aeabi_dsub+0xd4>
 800291e:	e147      	b.n	8002bb0 <__aeabi_dsub+0x364>
 8002920:	0020      	movs	r0, r4
 8002922:	f000 fcab 	bl	800327c <__clzsi2>
 8002926:	0003      	movs	r3, r0
 8002928:	3b08      	subs	r3, #8
 800292a:	2120      	movs	r1, #32
 800292c:	0028      	movs	r0, r5
 800292e:	1aca      	subs	r2, r1, r3
 8002930:	40d0      	lsrs	r0, r2
 8002932:	409c      	lsls	r4, r3
 8002934:	0002      	movs	r2, r0
 8002936:	409d      	lsls	r5, r3
 8002938:	4322      	orrs	r2, r4
 800293a:	429f      	cmp	r7, r3
 800293c:	dd00      	ble.n	8002940 <__aeabi_dsub+0xf4>
 800293e:	e177      	b.n	8002c30 <__aeabi_dsub+0x3e4>
 8002940:	1bd8      	subs	r0, r3, r7
 8002942:	3001      	adds	r0, #1
 8002944:	1a09      	subs	r1, r1, r0
 8002946:	002c      	movs	r4, r5
 8002948:	408d      	lsls	r5, r1
 800294a:	40c4      	lsrs	r4, r0
 800294c:	1e6b      	subs	r3, r5, #1
 800294e:	419d      	sbcs	r5, r3
 8002950:	0013      	movs	r3, r2
 8002952:	40c2      	lsrs	r2, r0
 8002954:	408b      	lsls	r3, r1
 8002956:	4325      	orrs	r5, r4
 8002958:	2700      	movs	r7, #0
 800295a:	0014      	movs	r4, r2
 800295c:	431d      	orrs	r5, r3
 800295e:	076b      	lsls	r3, r5, #29
 8002960:	d009      	beq.n	8002976 <__aeabi_dsub+0x12a>
 8002962:	230f      	movs	r3, #15
 8002964:	402b      	ands	r3, r5
 8002966:	2b04      	cmp	r3, #4
 8002968:	d005      	beq.n	8002976 <__aeabi_dsub+0x12a>
 800296a:	1d2b      	adds	r3, r5, #4
 800296c:	42ab      	cmp	r3, r5
 800296e:	41ad      	sbcs	r5, r5
 8002970:	426d      	negs	r5, r5
 8002972:	1964      	adds	r4, r4, r5
 8002974:	001d      	movs	r5, r3
 8002976:	0223      	lsls	r3, r4, #8
 8002978:	d400      	bmi.n	800297c <__aeabi_dsub+0x130>
 800297a:	e140      	b.n	8002bfe <__aeabi_dsub+0x3b2>
 800297c:	4a88      	ldr	r2, [pc, #544]	@ (8002ba0 <__aeabi_dsub+0x354>)
 800297e:	3701      	adds	r7, #1
 8002980:	4297      	cmp	r7, r2
 8002982:	d100      	bne.n	8002986 <__aeabi_dsub+0x13a>
 8002984:	e101      	b.n	8002b8a <__aeabi_dsub+0x33e>
 8002986:	2601      	movs	r6, #1
 8002988:	4643      	mov	r3, r8
 800298a:	4986      	ldr	r1, [pc, #536]	@ (8002ba4 <__aeabi_dsub+0x358>)
 800298c:	08ed      	lsrs	r5, r5, #3
 800298e:	4021      	ands	r1, r4
 8002990:	074a      	lsls	r2, r1, #29
 8002992:	432a      	orrs	r2, r5
 8002994:	057c      	lsls	r4, r7, #21
 8002996:	024d      	lsls	r5, r1, #9
 8002998:	0b2d      	lsrs	r5, r5, #12
 800299a:	0d64      	lsrs	r4, r4, #21
 800299c:	401e      	ands	r6, r3
 800299e:	0524      	lsls	r4, r4, #20
 80029a0:	432c      	orrs	r4, r5
 80029a2:	07f6      	lsls	r6, r6, #31
 80029a4:	4334      	orrs	r4, r6
 80029a6:	0010      	movs	r0, r2
 80029a8:	0021      	movs	r1, r4
 80029aa:	b005      	add	sp, #20
 80029ac:	bcf0      	pop	{r4, r5, r6, r7}
 80029ae:	46bb      	mov	fp, r7
 80029b0:	46b2      	mov	sl, r6
 80029b2:	46a9      	mov	r9, r5
 80029b4:	46a0      	mov	r8, r4
 80029b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029b8:	2d00      	cmp	r5, #0
 80029ba:	dc00      	bgt.n	80029be <__aeabi_dsub+0x172>
 80029bc:	e2d0      	b.n	8002f60 <__aeabi_dsub+0x714>
 80029be:	4649      	mov	r1, r9
 80029c0:	2900      	cmp	r1, #0
 80029c2:	d000      	beq.n	80029c6 <__aeabi_dsub+0x17a>
 80029c4:	e0d4      	b.n	8002b70 <__aeabi_dsub+0x324>
 80029c6:	4661      	mov	r1, ip
 80029c8:	9b02      	ldr	r3, [sp, #8]
 80029ca:	4319      	orrs	r1, r3
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x184>
 80029ce:	e12b      	b.n	8002c28 <__aeabi_dsub+0x3dc>
 80029d0:	1e69      	subs	r1, r5, #1
 80029d2:	2d01      	cmp	r5, #1
 80029d4:	d100      	bne.n	80029d8 <__aeabi_dsub+0x18c>
 80029d6:	e1d9      	b.n	8002d8c <__aeabi_dsub+0x540>
 80029d8:	4295      	cmp	r5, r2
 80029da:	d100      	bne.n	80029de <__aeabi_dsub+0x192>
 80029dc:	e10a      	b.n	8002bf4 <__aeabi_dsub+0x3a8>
 80029de:	2501      	movs	r5, #1
 80029e0:	2938      	cmp	r1, #56	@ 0x38
 80029e2:	dc17      	bgt.n	8002a14 <__aeabi_dsub+0x1c8>
 80029e4:	468a      	mov	sl, r1
 80029e6:	4653      	mov	r3, sl
 80029e8:	2b1f      	cmp	r3, #31
 80029ea:	dd00      	ble.n	80029ee <__aeabi_dsub+0x1a2>
 80029ec:	e1e7      	b.n	8002dbe <__aeabi_dsub+0x572>
 80029ee:	2220      	movs	r2, #32
 80029f0:	1ad2      	subs	r2, r2, r3
 80029f2:	9b02      	ldr	r3, [sp, #8]
 80029f4:	4661      	mov	r1, ip
 80029f6:	4093      	lsls	r3, r2
 80029f8:	001d      	movs	r5, r3
 80029fa:	4653      	mov	r3, sl
 80029fc:	40d9      	lsrs	r1, r3
 80029fe:	4663      	mov	r3, ip
 8002a00:	4093      	lsls	r3, r2
 8002a02:	001a      	movs	r2, r3
 8002a04:	430d      	orrs	r5, r1
 8002a06:	1e51      	subs	r1, r2, #1
 8002a08:	418a      	sbcs	r2, r1
 8002a0a:	4653      	mov	r3, sl
 8002a0c:	4315      	orrs	r5, r2
 8002a0e:	9a02      	ldr	r2, [sp, #8]
 8002a10:	40da      	lsrs	r2, r3
 8002a12:	18a4      	adds	r4, r4, r2
 8002a14:	182d      	adds	r5, r5, r0
 8002a16:	4285      	cmp	r5, r0
 8002a18:	4180      	sbcs	r0, r0
 8002a1a:	4240      	negs	r0, r0
 8002a1c:	1824      	adds	r4, r4, r0
 8002a1e:	0223      	lsls	r3, r4, #8
 8002a20:	d400      	bmi.n	8002a24 <__aeabi_dsub+0x1d8>
 8002a22:	e0b6      	b.n	8002b92 <__aeabi_dsub+0x346>
 8002a24:	4b5e      	ldr	r3, [pc, #376]	@ (8002ba0 <__aeabi_dsub+0x354>)
 8002a26:	3701      	adds	r7, #1
 8002a28:	429f      	cmp	r7, r3
 8002a2a:	d100      	bne.n	8002a2e <__aeabi_dsub+0x1e2>
 8002a2c:	e0ad      	b.n	8002b8a <__aeabi_dsub+0x33e>
 8002a2e:	2101      	movs	r1, #1
 8002a30:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba4 <__aeabi_dsub+0x358>)
 8002a32:	086a      	lsrs	r2, r5, #1
 8002a34:	401c      	ands	r4, r3
 8002a36:	4029      	ands	r1, r5
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	07e5      	lsls	r5, r4, #31
 8002a3c:	4315      	orrs	r5, r2
 8002a3e:	0864      	lsrs	r4, r4, #1
 8002a40:	e78d      	b.n	800295e <__aeabi_dsub+0x112>
 8002a42:	4a59      	ldr	r2, [pc, #356]	@ (8002ba8 <__aeabi_dsub+0x35c>)
 8002a44:	9b02      	ldr	r3, [sp, #8]
 8002a46:	4692      	mov	sl, r2
 8002a48:	4662      	mov	r2, ip
 8002a4a:	44ba      	add	sl, r7
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	d02c      	beq.n	8002aaa <__aeabi_dsub+0x25e>
 8002a50:	428e      	cmp	r6, r1
 8002a52:	d02e      	beq.n	8002ab2 <__aeabi_dsub+0x266>
 8002a54:	4652      	mov	r2, sl
 8002a56:	2a00      	cmp	r2, #0
 8002a58:	d060      	beq.n	8002b1c <__aeabi_dsub+0x2d0>
 8002a5a:	2f00      	cmp	r7, #0
 8002a5c:	d100      	bne.n	8002a60 <__aeabi_dsub+0x214>
 8002a5e:	e0db      	b.n	8002c18 <__aeabi_dsub+0x3cc>
 8002a60:	4663      	mov	r3, ip
 8002a62:	000e      	movs	r6, r1
 8002a64:	9c02      	ldr	r4, [sp, #8]
 8002a66:	08d8      	lsrs	r0, r3, #3
 8002a68:	0762      	lsls	r2, r4, #29
 8002a6a:	4302      	orrs	r2, r0
 8002a6c:	08e4      	lsrs	r4, r4, #3
 8002a6e:	0013      	movs	r3, r2
 8002a70:	4323      	orrs	r3, r4
 8002a72:	d100      	bne.n	8002a76 <__aeabi_dsub+0x22a>
 8002a74:	e254      	b.n	8002f20 <__aeabi_dsub+0x6d4>
 8002a76:	2580      	movs	r5, #128	@ 0x80
 8002a78:	032d      	lsls	r5, r5, #12
 8002a7a:	4325      	orrs	r5, r4
 8002a7c:	032d      	lsls	r5, r5, #12
 8002a7e:	4c48      	ldr	r4, [pc, #288]	@ (8002ba0 <__aeabi_dsub+0x354>)
 8002a80:	0b2d      	lsrs	r5, r5, #12
 8002a82:	e78c      	b.n	800299e <__aeabi_dsub+0x152>
 8002a84:	4661      	mov	r1, ip
 8002a86:	9b02      	ldr	r3, [sp, #8]
 8002a88:	4319      	orrs	r1, r3
 8002a8a:	d100      	bne.n	8002a8e <__aeabi_dsub+0x242>
 8002a8c:	e0cc      	b.n	8002c28 <__aeabi_dsub+0x3dc>
 8002a8e:	0029      	movs	r1, r5
 8002a90:	3901      	subs	r1, #1
 8002a92:	2d01      	cmp	r5, #1
 8002a94:	d100      	bne.n	8002a98 <__aeabi_dsub+0x24c>
 8002a96:	e188      	b.n	8002daa <__aeabi_dsub+0x55e>
 8002a98:	4295      	cmp	r5, r2
 8002a9a:	d100      	bne.n	8002a9e <__aeabi_dsub+0x252>
 8002a9c:	e0aa      	b.n	8002bf4 <__aeabi_dsub+0x3a8>
 8002a9e:	2501      	movs	r5, #1
 8002aa0:	2938      	cmp	r1, #56	@ 0x38
 8002aa2:	dd00      	ble.n	8002aa6 <__aeabi_dsub+0x25a>
 8002aa4:	e72f      	b.n	8002906 <__aeabi_dsub+0xba>
 8002aa6:	468a      	mov	sl, r1
 8002aa8:	e718      	b.n	80028dc <__aeabi_dsub+0x90>
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4051      	eors	r1, r2
 8002aae:	428e      	cmp	r6, r1
 8002ab0:	d1d0      	bne.n	8002a54 <__aeabi_dsub+0x208>
 8002ab2:	4653      	mov	r3, sl
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d100      	bne.n	8002aba <__aeabi_dsub+0x26e>
 8002ab8:	e0be      	b.n	8002c38 <__aeabi_dsub+0x3ec>
 8002aba:	2f00      	cmp	r7, #0
 8002abc:	d000      	beq.n	8002ac0 <__aeabi_dsub+0x274>
 8002abe:	e138      	b.n	8002d32 <__aeabi_dsub+0x4e6>
 8002ac0:	46ca      	mov	sl, r9
 8002ac2:	0022      	movs	r2, r4
 8002ac4:	4302      	orrs	r2, r0
 8002ac6:	d100      	bne.n	8002aca <__aeabi_dsub+0x27e>
 8002ac8:	e1e2      	b.n	8002e90 <__aeabi_dsub+0x644>
 8002aca:	4653      	mov	r3, sl
 8002acc:	1e59      	subs	r1, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dsub+0x288>
 8002ad2:	e20d      	b.n	8002ef0 <__aeabi_dsub+0x6a4>
 8002ad4:	4a32      	ldr	r2, [pc, #200]	@ (8002ba0 <__aeabi_dsub+0x354>)
 8002ad6:	4592      	cmp	sl, r2
 8002ad8:	d100      	bne.n	8002adc <__aeabi_dsub+0x290>
 8002ada:	e1d2      	b.n	8002e82 <__aeabi_dsub+0x636>
 8002adc:	2701      	movs	r7, #1
 8002ade:	2938      	cmp	r1, #56	@ 0x38
 8002ae0:	dc13      	bgt.n	8002b0a <__aeabi_dsub+0x2be>
 8002ae2:	291f      	cmp	r1, #31
 8002ae4:	dd00      	ble.n	8002ae8 <__aeabi_dsub+0x29c>
 8002ae6:	e1ee      	b.n	8002ec6 <__aeabi_dsub+0x67a>
 8002ae8:	2220      	movs	r2, #32
 8002aea:	9b02      	ldr	r3, [sp, #8]
 8002aec:	1a52      	subs	r2, r2, r1
 8002aee:	0025      	movs	r5, r4
 8002af0:	0007      	movs	r7, r0
 8002af2:	469a      	mov	sl, r3
 8002af4:	40cc      	lsrs	r4, r1
 8002af6:	4090      	lsls	r0, r2
 8002af8:	4095      	lsls	r5, r2
 8002afa:	40cf      	lsrs	r7, r1
 8002afc:	44a2      	add	sl, r4
 8002afe:	1e42      	subs	r2, r0, #1
 8002b00:	4190      	sbcs	r0, r2
 8002b02:	4653      	mov	r3, sl
 8002b04:	432f      	orrs	r7, r5
 8002b06:	4307      	orrs	r7, r0
 8002b08:	9302      	str	r3, [sp, #8]
 8002b0a:	003d      	movs	r5, r7
 8002b0c:	4465      	add	r5, ip
 8002b0e:	4565      	cmp	r5, ip
 8002b10:	4192      	sbcs	r2, r2
 8002b12:	9b02      	ldr	r3, [sp, #8]
 8002b14:	4252      	negs	r2, r2
 8002b16:	464f      	mov	r7, r9
 8002b18:	18d4      	adds	r4, r2, r3
 8002b1a:	e780      	b.n	8002a1e <__aeabi_dsub+0x1d2>
 8002b1c:	4a23      	ldr	r2, [pc, #140]	@ (8002bac <__aeabi_dsub+0x360>)
 8002b1e:	1c7d      	adds	r5, r7, #1
 8002b20:	4215      	tst	r5, r2
 8002b22:	d000      	beq.n	8002b26 <__aeabi_dsub+0x2da>
 8002b24:	e0aa      	b.n	8002c7c <__aeabi_dsub+0x430>
 8002b26:	4662      	mov	r2, ip
 8002b28:	0025      	movs	r5, r4
 8002b2a:	9b02      	ldr	r3, [sp, #8]
 8002b2c:	4305      	orrs	r5, r0
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	2f00      	cmp	r7, #0
 8002b32:	d000      	beq.n	8002b36 <__aeabi_dsub+0x2ea>
 8002b34:	e0f5      	b.n	8002d22 <__aeabi_dsub+0x4d6>
 8002b36:	2d00      	cmp	r5, #0
 8002b38:	d100      	bne.n	8002b3c <__aeabi_dsub+0x2f0>
 8002b3a:	e16b      	b.n	8002e14 <__aeabi_dsub+0x5c8>
 8002b3c:	2a00      	cmp	r2, #0
 8002b3e:	d100      	bne.n	8002b42 <__aeabi_dsub+0x2f6>
 8002b40:	e152      	b.n	8002de8 <__aeabi_dsub+0x59c>
 8002b42:	4663      	mov	r3, ip
 8002b44:	1ac5      	subs	r5, r0, r3
 8002b46:	9b02      	ldr	r3, [sp, #8]
 8002b48:	1ae2      	subs	r2, r4, r3
 8002b4a:	42a8      	cmp	r0, r5
 8002b4c:	419b      	sbcs	r3, r3
 8002b4e:	425b      	negs	r3, r3
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	021a      	lsls	r2, r3, #8
 8002b54:	d400      	bmi.n	8002b58 <__aeabi_dsub+0x30c>
 8002b56:	e1d5      	b.n	8002f04 <__aeabi_dsub+0x6b8>
 8002b58:	4663      	mov	r3, ip
 8002b5a:	1a1d      	subs	r5, r3, r0
 8002b5c:	45ac      	cmp	ip, r5
 8002b5e:	4192      	sbcs	r2, r2
 8002b60:	2601      	movs	r6, #1
 8002b62:	9b02      	ldr	r3, [sp, #8]
 8002b64:	4252      	negs	r2, r2
 8002b66:	1b1c      	subs	r4, r3, r4
 8002b68:	4688      	mov	r8, r1
 8002b6a:	1aa4      	subs	r4, r4, r2
 8002b6c:	400e      	ands	r6, r1
 8002b6e:	e6f6      	b.n	800295e <__aeabi_dsub+0x112>
 8002b70:	4297      	cmp	r7, r2
 8002b72:	d03f      	beq.n	8002bf4 <__aeabi_dsub+0x3a8>
 8002b74:	4652      	mov	r2, sl
 8002b76:	2501      	movs	r5, #1
 8002b78:	2a38      	cmp	r2, #56	@ 0x38
 8002b7a:	dd00      	ble.n	8002b7e <__aeabi_dsub+0x332>
 8002b7c:	e74a      	b.n	8002a14 <__aeabi_dsub+0x1c8>
 8002b7e:	2280      	movs	r2, #128	@ 0x80
 8002b80:	9b02      	ldr	r3, [sp, #8]
 8002b82:	0412      	lsls	r2, r2, #16
 8002b84:	4313      	orrs	r3, r2
 8002b86:	9302      	str	r3, [sp, #8]
 8002b88:	e72d      	b.n	80029e6 <__aeabi_dsub+0x19a>
 8002b8a:	003c      	movs	r4, r7
 8002b8c:	2500      	movs	r5, #0
 8002b8e:	2200      	movs	r2, #0
 8002b90:	e705      	b.n	800299e <__aeabi_dsub+0x152>
 8002b92:	2307      	movs	r3, #7
 8002b94:	402b      	ands	r3, r5
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d000      	beq.n	8002b9c <__aeabi_dsub+0x350>
 8002b9a:	e6e2      	b.n	8002962 <__aeabi_dsub+0x116>
 8002b9c:	e06b      	b.n	8002c76 <__aeabi_dsub+0x42a>
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	000007ff 	.word	0x000007ff
 8002ba4:	ff7fffff 	.word	0xff7fffff
 8002ba8:	fffff801 	.word	0xfffff801
 8002bac:	000007fe 	.word	0x000007fe
 8002bb0:	0028      	movs	r0, r5
 8002bb2:	f000 fb63 	bl	800327c <__clzsi2>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	3318      	adds	r3, #24
 8002bba:	2b1f      	cmp	r3, #31
 8002bbc:	dc00      	bgt.n	8002bc0 <__aeabi_dsub+0x374>
 8002bbe:	e6b4      	b.n	800292a <__aeabi_dsub+0xde>
 8002bc0:	002a      	movs	r2, r5
 8002bc2:	3808      	subs	r0, #8
 8002bc4:	4082      	lsls	r2, r0
 8002bc6:	429f      	cmp	r7, r3
 8002bc8:	dd00      	ble.n	8002bcc <__aeabi_dsub+0x380>
 8002bca:	e0b9      	b.n	8002d40 <__aeabi_dsub+0x4f4>
 8002bcc:	1bdb      	subs	r3, r3, r7
 8002bce:	1c58      	adds	r0, r3, #1
 8002bd0:	281f      	cmp	r0, #31
 8002bd2:	dc00      	bgt.n	8002bd6 <__aeabi_dsub+0x38a>
 8002bd4:	e1a0      	b.n	8002f18 <__aeabi_dsub+0x6cc>
 8002bd6:	0015      	movs	r5, r2
 8002bd8:	3b1f      	subs	r3, #31
 8002bda:	40dd      	lsrs	r5, r3
 8002bdc:	2820      	cmp	r0, #32
 8002bde:	d005      	beq.n	8002bec <__aeabi_dsub+0x3a0>
 8002be0:	2340      	movs	r3, #64	@ 0x40
 8002be2:	1a1b      	subs	r3, r3, r0
 8002be4:	409a      	lsls	r2, r3
 8002be6:	1e53      	subs	r3, r2, #1
 8002be8:	419a      	sbcs	r2, r3
 8002bea:	4315      	orrs	r5, r2
 8002bec:	2307      	movs	r3, #7
 8002bee:	2700      	movs	r7, #0
 8002bf0:	402b      	ands	r3, r5
 8002bf2:	e7d0      	b.n	8002b96 <__aeabi_dsub+0x34a>
 8002bf4:	08c0      	lsrs	r0, r0, #3
 8002bf6:	0762      	lsls	r2, r4, #29
 8002bf8:	4302      	orrs	r2, r0
 8002bfa:	08e4      	lsrs	r4, r4, #3
 8002bfc:	e737      	b.n	8002a6e <__aeabi_dsub+0x222>
 8002bfe:	08ea      	lsrs	r2, r5, #3
 8002c00:	0763      	lsls	r3, r4, #29
 8002c02:	431a      	orrs	r2, r3
 8002c04:	4bd3      	ldr	r3, [pc, #844]	@ (8002f54 <__aeabi_dsub+0x708>)
 8002c06:	08e4      	lsrs	r4, r4, #3
 8002c08:	429f      	cmp	r7, r3
 8002c0a:	d100      	bne.n	8002c0e <__aeabi_dsub+0x3c2>
 8002c0c:	e72f      	b.n	8002a6e <__aeabi_dsub+0x222>
 8002c0e:	0324      	lsls	r4, r4, #12
 8002c10:	0b25      	lsrs	r5, r4, #12
 8002c12:	057c      	lsls	r4, r7, #21
 8002c14:	0d64      	lsrs	r4, r4, #21
 8002c16:	e6c2      	b.n	800299e <__aeabi_dsub+0x152>
 8002c18:	46ca      	mov	sl, r9
 8002c1a:	0022      	movs	r2, r4
 8002c1c:	4302      	orrs	r2, r0
 8002c1e:	d158      	bne.n	8002cd2 <__aeabi_dsub+0x486>
 8002c20:	4663      	mov	r3, ip
 8002c22:	000e      	movs	r6, r1
 8002c24:	9c02      	ldr	r4, [sp, #8]
 8002c26:	9303      	str	r3, [sp, #12]
 8002c28:	9b03      	ldr	r3, [sp, #12]
 8002c2a:	4657      	mov	r7, sl
 8002c2c:	08da      	lsrs	r2, r3, #3
 8002c2e:	e7e7      	b.n	8002c00 <__aeabi_dsub+0x3b4>
 8002c30:	4cc9      	ldr	r4, [pc, #804]	@ (8002f58 <__aeabi_dsub+0x70c>)
 8002c32:	1aff      	subs	r7, r7, r3
 8002c34:	4014      	ands	r4, r2
 8002c36:	e692      	b.n	800295e <__aeabi_dsub+0x112>
 8002c38:	4dc8      	ldr	r5, [pc, #800]	@ (8002f5c <__aeabi_dsub+0x710>)
 8002c3a:	1c7a      	adds	r2, r7, #1
 8002c3c:	422a      	tst	r2, r5
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x3f6>
 8002c40:	e084      	b.n	8002d4c <__aeabi_dsub+0x500>
 8002c42:	0022      	movs	r2, r4
 8002c44:	4302      	orrs	r2, r0
 8002c46:	2f00      	cmp	r7, #0
 8002c48:	d000      	beq.n	8002c4c <__aeabi_dsub+0x400>
 8002c4a:	e0ef      	b.n	8002e2c <__aeabi_dsub+0x5e0>
 8002c4c:	2a00      	cmp	r2, #0
 8002c4e:	d100      	bne.n	8002c52 <__aeabi_dsub+0x406>
 8002c50:	e0e5      	b.n	8002e1e <__aeabi_dsub+0x5d2>
 8002c52:	4662      	mov	r2, ip
 8002c54:	9902      	ldr	r1, [sp, #8]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	d100      	bne.n	8002c5c <__aeabi_dsub+0x410>
 8002c5a:	e0c5      	b.n	8002de8 <__aeabi_dsub+0x59c>
 8002c5c:	4663      	mov	r3, ip
 8002c5e:	18c5      	adds	r5, r0, r3
 8002c60:	468c      	mov	ip, r1
 8002c62:	4285      	cmp	r5, r0
 8002c64:	4180      	sbcs	r0, r0
 8002c66:	4464      	add	r4, ip
 8002c68:	4240      	negs	r0, r0
 8002c6a:	1824      	adds	r4, r4, r0
 8002c6c:	0223      	lsls	r3, r4, #8
 8002c6e:	d502      	bpl.n	8002c76 <__aeabi_dsub+0x42a>
 8002c70:	4bb9      	ldr	r3, [pc, #740]	@ (8002f58 <__aeabi_dsub+0x70c>)
 8002c72:	3701      	adds	r7, #1
 8002c74:	401c      	ands	r4, r3
 8002c76:	46ba      	mov	sl, r7
 8002c78:	9503      	str	r5, [sp, #12]
 8002c7a:	e7d5      	b.n	8002c28 <__aeabi_dsub+0x3dc>
 8002c7c:	4662      	mov	r2, ip
 8002c7e:	1a85      	subs	r5, r0, r2
 8002c80:	42a8      	cmp	r0, r5
 8002c82:	4192      	sbcs	r2, r2
 8002c84:	4252      	negs	r2, r2
 8002c86:	4691      	mov	r9, r2
 8002c88:	9b02      	ldr	r3, [sp, #8]
 8002c8a:	1ae3      	subs	r3, r4, r3
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	464b      	mov	r3, r9
 8002c90:	1ad2      	subs	r2, r2, r3
 8002c92:	0013      	movs	r3, r2
 8002c94:	4691      	mov	r9, r2
 8002c96:	021a      	lsls	r2, r3, #8
 8002c98:	d46c      	bmi.n	8002d74 <__aeabi_dsub+0x528>
 8002c9a:	464a      	mov	r2, r9
 8002c9c:	464c      	mov	r4, r9
 8002c9e:	432a      	orrs	r2, r5
 8002ca0:	d000      	beq.n	8002ca4 <__aeabi_dsub+0x458>
 8002ca2:	e63a      	b.n	800291a <__aeabi_dsub+0xce>
 8002ca4:	2600      	movs	r6, #0
 8002ca6:	2400      	movs	r4, #0
 8002ca8:	2500      	movs	r5, #0
 8002caa:	e678      	b.n	800299e <__aeabi_dsub+0x152>
 8002cac:	9902      	ldr	r1, [sp, #8]
 8002cae:	4653      	mov	r3, sl
 8002cb0:	000d      	movs	r5, r1
 8002cb2:	3a20      	subs	r2, #32
 8002cb4:	40d5      	lsrs	r5, r2
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d006      	beq.n	8002cc8 <__aeabi_dsub+0x47c>
 8002cba:	2240      	movs	r2, #64	@ 0x40
 8002cbc:	1ad2      	subs	r2, r2, r3
 8002cbe:	000b      	movs	r3, r1
 8002cc0:	4093      	lsls	r3, r2
 8002cc2:	4662      	mov	r2, ip
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	4693      	mov	fp, r2
 8002cc8:	465b      	mov	r3, fp
 8002cca:	1e5a      	subs	r2, r3, #1
 8002ccc:	4193      	sbcs	r3, r2
 8002cce:	431d      	orrs	r5, r3
 8002cd0:	e619      	b.n	8002906 <__aeabi_dsub+0xba>
 8002cd2:	4653      	mov	r3, sl
 8002cd4:	1e5a      	subs	r2, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x490>
 8002cda:	e0c6      	b.n	8002e6a <__aeabi_dsub+0x61e>
 8002cdc:	4e9d      	ldr	r6, [pc, #628]	@ (8002f54 <__aeabi_dsub+0x708>)
 8002cde:	45b2      	cmp	sl, r6
 8002ce0:	d100      	bne.n	8002ce4 <__aeabi_dsub+0x498>
 8002ce2:	e6bd      	b.n	8002a60 <__aeabi_dsub+0x214>
 8002ce4:	4688      	mov	r8, r1
 8002ce6:	000e      	movs	r6, r1
 8002ce8:	2501      	movs	r5, #1
 8002cea:	2a38      	cmp	r2, #56	@ 0x38
 8002cec:	dc10      	bgt.n	8002d10 <__aeabi_dsub+0x4c4>
 8002cee:	2a1f      	cmp	r2, #31
 8002cf0:	dc7f      	bgt.n	8002df2 <__aeabi_dsub+0x5a6>
 8002cf2:	2120      	movs	r1, #32
 8002cf4:	0025      	movs	r5, r4
 8002cf6:	1a89      	subs	r1, r1, r2
 8002cf8:	0007      	movs	r7, r0
 8002cfa:	4088      	lsls	r0, r1
 8002cfc:	408d      	lsls	r5, r1
 8002cfe:	40d7      	lsrs	r7, r2
 8002d00:	40d4      	lsrs	r4, r2
 8002d02:	1e41      	subs	r1, r0, #1
 8002d04:	4188      	sbcs	r0, r1
 8002d06:	9b02      	ldr	r3, [sp, #8]
 8002d08:	433d      	orrs	r5, r7
 8002d0a:	1b1b      	subs	r3, r3, r4
 8002d0c:	4305      	orrs	r5, r0
 8002d0e:	9302      	str	r3, [sp, #8]
 8002d10:	4662      	mov	r2, ip
 8002d12:	1b55      	subs	r5, r2, r5
 8002d14:	45ac      	cmp	ip, r5
 8002d16:	4192      	sbcs	r2, r2
 8002d18:	9b02      	ldr	r3, [sp, #8]
 8002d1a:	4252      	negs	r2, r2
 8002d1c:	464f      	mov	r7, r9
 8002d1e:	1a9c      	subs	r4, r3, r2
 8002d20:	e5f6      	b.n	8002910 <__aeabi_dsub+0xc4>
 8002d22:	2d00      	cmp	r5, #0
 8002d24:	d000      	beq.n	8002d28 <__aeabi_dsub+0x4dc>
 8002d26:	e0b7      	b.n	8002e98 <__aeabi_dsub+0x64c>
 8002d28:	2a00      	cmp	r2, #0
 8002d2a:	d100      	bne.n	8002d2e <__aeabi_dsub+0x4e2>
 8002d2c:	e0f0      	b.n	8002f10 <__aeabi_dsub+0x6c4>
 8002d2e:	2601      	movs	r6, #1
 8002d30:	400e      	ands	r6, r1
 8002d32:	4663      	mov	r3, ip
 8002d34:	9802      	ldr	r0, [sp, #8]
 8002d36:	08d9      	lsrs	r1, r3, #3
 8002d38:	0742      	lsls	r2, r0, #29
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	08c4      	lsrs	r4, r0, #3
 8002d3e:	e696      	b.n	8002a6e <__aeabi_dsub+0x222>
 8002d40:	4c85      	ldr	r4, [pc, #532]	@ (8002f58 <__aeabi_dsub+0x70c>)
 8002d42:	1aff      	subs	r7, r7, r3
 8002d44:	4014      	ands	r4, r2
 8002d46:	0762      	lsls	r2, r4, #29
 8002d48:	08e4      	lsrs	r4, r4, #3
 8002d4a:	e760      	b.n	8002c0e <__aeabi_dsub+0x3c2>
 8002d4c:	4981      	ldr	r1, [pc, #516]	@ (8002f54 <__aeabi_dsub+0x708>)
 8002d4e:	428a      	cmp	r2, r1
 8002d50:	d100      	bne.n	8002d54 <__aeabi_dsub+0x508>
 8002d52:	e0c9      	b.n	8002ee8 <__aeabi_dsub+0x69c>
 8002d54:	4663      	mov	r3, ip
 8002d56:	18c1      	adds	r1, r0, r3
 8002d58:	4281      	cmp	r1, r0
 8002d5a:	4180      	sbcs	r0, r0
 8002d5c:	9b02      	ldr	r3, [sp, #8]
 8002d5e:	4240      	negs	r0, r0
 8002d60:	18e3      	adds	r3, r4, r3
 8002d62:	181b      	adds	r3, r3, r0
 8002d64:	07dd      	lsls	r5, r3, #31
 8002d66:	085c      	lsrs	r4, r3, #1
 8002d68:	2307      	movs	r3, #7
 8002d6a:	0849      	lsrs	r1, r1, #1
 8002d6c:	430d      	orrs	r5, r1
 8002d6e:	0017      	movs	r7, r2
 8002d70:	402b      	ands	r3, r5
 8002d72:	e710      	b.n	8002b96 <__aeabi_dsub+0x34a>
 8002d74:	4663      	mov	r3, ip
 8002d76:	1a1d      	subs	r5, r3, r0
 8002d78:	45ac      	cmp	ip, r5
 8002d7a:	4192      	sbcs	r2, r2
 8002d7c:	2601      	movs	r6, #1
 8002d7e:	9b02      	ldr	r3, [sp, #8]
 8002d80:	4252      	negs	r2, r2
 8002d82:	1b1c      	subs	r4, r3, r4
 8002d84:	4688      	mov	r8, r1
 8002d86:	1aa4      	subs	r4, r4, r2
 8002d88:	400e      	ands	r6, r1
 8002d8a:	e5c6      	b.n	800291a <__aeabi_dsub+0xce>
 8002d8c:	4663      	mov	r3, ip
 8002d8e:	18c5      	adds	r5, r0, r3
 8002d90:	9b02      	ldr	r3, [sp, #8]
 8002d92:	4285      	cmp	r5, r0
 8002d94:	4180      	sbcs	r0, r0
 8002d96:	469c      	mov	ip, r3
 8002d98:	4240      	negs	r0, r0
 8002d9a:	4464      	add	r4, ip
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	2701      	movs	r7, #1
 8002da0:	0223      	lsls	r3, r4, #8
 8002da2:	d400      	bmi.n	8002da6 <__aeabi_dsub+0x55a>
 8002da4:	e6f5      	b.n	8002b92 <__aeabi_dsub+0x346>
 8002da6:	2702      	movs	r7, #2
 8002da8:	e641      	b.n	8002a2e <__aeabi_dsub+0x1e2>
 8002daa:	4663      	mov	r3, ip
 8002dac:	1ac5      	subs	r5, r0, r3
 8002dae:	42a8      	cmp	r0, r5
 8002db0:	4180      	sbcs	r0, r0
 8002db2:	9b02      	ldr	r3, [sp, #8]
 8002db4:	4240      	negs	r0, r0
 8002db6:	1ae4      	subs	r4, r4, r3
 8002db8:	2701      	movs	r7, #1
 8002dba:	1a24      	subs	r4, r4, r0
 8002dbc:	e5a8      	b.n	8002910 <__aeabi_dsub+0xc4>
 8002dbe:	9d02      	ldr	r5, [sp, #8]
 8002dc0:	4652      	mov	r2, sl
 8002dc2:	002b      	movs	r3, r5
 8002dc4:	3a20      	subs	r2, #32
 8002dc6:	40d3      	lsrs	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	4653      	mov	r3, sl
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d006      	beq.n	8002dde <__aeabi_dsub+0x592>
 8002dd0:	2240      	movs	r2, #64	@ 0x40
 8002dd2:	1ad2      	subs	r2, r2, r3
 8002dd4:	002b      	movs	r3, r5
 8002dd6:	4093      	lsls	r3, r2
 8002dd8:	4662      	mov	r2, ip
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	4693      	mov	fp, r2
 8002dde:	465d      	mov	r5, fp
 8002de0:	1e6b      	subs	r3, r5, #1
 8002de2:	419d      	sbcs	r5, r3
 8002de4:	430d      	orrs	r5, r1
 8002de6:	e615      	b.n	8002a14 <__aeabi_dsub+0x1c8>
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	08c0      	lsrs	r0, r0, #3
 8002dec:	4302      	orrs	r2, r0
 8002dee:	08e4      	lsrs	r4, r4, #3
 8002df0:	e70d      	b.n	8002c0e <__aeabi_dsub+0x3c2>
 8002df2:	0011      	movs	r1, r2
 8002df4:	0027      	movs	r7, r4
 8002df6:	3920      	subs	r1, #32
 8002df8:	40cf      	lsrs	r7, r1
 8002dfa:	2a20      	cmp	r2, #32
 8002dfc:	d005      	beq.n	8002e0a <__aeabi_dsub+0x5be>
 8002dfe:	2140      	movs	r1, #64	@ 0x40
 8002e00:	1a8a      	subs	r2, r1, r2
 8002e02:	4094      	lsls	r4, r2
 8002e04:	0025      	movs	r5, r4
 8002e06:	4305      	orrs	r5, r0
 8002e08:	9503      	str	r5, [sp, #12]
 8002e0a:	9d03      	ldr	r5, [sp, #12]
 8002e0c:	1e6a      	subs	r2, r5, #1
 8002e0e:	4195      	sbcs	r5, r2
 8002e10:	433d      	orrs	r5, r7
 8002e12:	e77d      	b.n	8002d10 <__aeabi_dsub+0x4c4>
 8002e14:	2a00      	cmp	r2, #0
 8002e16:	d100      	bne.n	8002e1a <__aeabi_dsub+0x5ce>
 8002e18:	e744      	b.n	8002ca4 <__aeabi_dsub+0x458>
 8002e1a:	2601      	movs	r6, #1
 8002e1c:	400e      	ands	r6, r1
 8002e1e:	4663      	mov	r3, ip
 8002e20:	08d9      	lsrs	r1, r3, #3
 8002e22:	9b02      	ldr	r3, [sp, #8]
 8002e24:	075a      	lsls	r2, r3, #29
 8002e26:	430a      	orrs	r2, r1
 8002e28:	08dc      	lsrs	r4, r3, #3
 8002e2a:	e6f0      	b.n	8002c0e <__aeabi_dsub+0x3c2>
 8002e2c:	2a00      	cmp	r2, #0
 8002e2e:	d028      	beq.n	8002e82 <__aeabi_dsub+0x636>
 8002e30:	4662      	mov	r2, ip
 8002e32:	9f02      	ldr	r7, [sp, #8]
 8002e34:	08c0      	lsrs	r0, r0, #3
 8002e36:	433a      	orrs	r2, r7
 8002e38:	d100      	bne.n	8002e3c <__aeabi_dsub+0x5f0>
 8002e3a:	e6dc      	b.n	8002bf6 <__aeabi_dsub+0x3aa>
 8002e3c:	0762      	lsls	r2, r4, #29
 8002e3e:	4310      	orrs	r0, r2
 8002e40:	2280      	movs	r2, #128	@ 0x80
 8002e42:	08e4      	lsrs	r4, r4, #3
 8002e44:	0312      	lsls	r2, r2, #12
 8002e46:	4214      	tst	r4, r2
 8002e48:	d009      	beq.n	8002e5e <__aeabi_dsub+0x612>
 8002e4a:	08fd      	lsrs	r5, r7, #3
 8002e4c:	4215      	tst	r5, r2
 8002e4e:	d106      	bne.n	8002e5e <__aeabi_dsub+0x612>
 8002e50:	4663      	mov	r3, ip
 8002e52:	2601      	movs	r6, #1
 8002e54:	002c      	movs	r4, r5
 8002e56:	08d8      	lsrs	r0, r3, #3
 8002e58:	077b      	lsls	r3, r7, #29
 8002e5a:	4318      	orrs	r0, r3
 8002e5c:	400e      	ands	r6, r1
 8002e5e:	0f42      	lsrs	r2, r0, #29
 8002e60:	00c0      	lsls	r0, r0, #3
 8002e62:	08c0      	lsrs	r0, r0, #3
 8002e64:	0752      	lsls	r2, r2, #29
 8002e66:	4302      	orrs	r2, r0
 8002e68:	e601      	b.n	8002a6e <__aeabi_dsub+0x222>
 8002e6a:	4663      	mov	r3, ip
 8002e6c:	1a1d      	subs	r5, r3, r0
 8002e6e:	45ac      	cmp	ip, r5
 8002e70:	4192      	sbcs	r2, r2
 8002e72:	9b02      	ldr	r3, [sp, #8]
 8002e74:	4252      	negs	r2, r2
 8002e76:	1b1c      	subs	r4, r3, r4
 8002e78:	000e      	movs	r6, r1
 8002e7a:	4688      	mov	r8, r1
 8002e7c:	2701      	movs	r7, #1
 8002e7e:	1aa4      	subs	r4, r4, r2
 8002e80:	e546      	b.n	8002910 <__aeabi_dsub+0xc4>
 8002e82:	4663      	mov	r3, ip
 8002e84:	08d9      	lsrs	r1, r3, #3
 8002e86:	9b02      	ldr	r3, [sp, #8]
 8002e88:	075a      	lsls	r2, r3, #29
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	08dc      	lsrs	r4, r3, #3
 8002e8e:	e5ee      	b.n	8002a6e <__aeabi_dsub+0x222>
 8002e90:	4663      	mov	r3, ip
 8002e92:	9c02      	ldr	r4, [sp, #8]
 8002e94:	9303      	str	r3, [sp, #12]
 8002e96:	e6c7      	b.n	8002c28 <__aeabi_dsub+0x3dc>
 8002e98:	08c0      	lsrs	r0, r0, #3
 8002e9a:	2a00      	cmp	r2, #0
 8002e9c:	d100      	bne.n	8002ea0 <__aeabi_dsub+0x654>
 8002e9e:	e6aa      	b.n	8002bf6 <__aeabi_dsub+0x3aa>
 8002ea0:	0762      	lsls	r2, r4, #29
 8002ea2:	4310      	orrs	r0, r2
 8002ea4:	2280      	movs	r2, #128	@ 0x80
 8002ea6:	08e4      	lsrs	r4, r4, #3
 8002ea8:	0312      	lsls	r2, r2, #12
 8002eaa:	4214      	tst	r4, r2
 8002eac:	d0d7      	beq.n	8002e5e <__aeabi_dsub+0x612>
 8002eae:	9f02      	ldr	r7, [sp, #8]
 8002eb0:	08fd      	lsrs	r5, r7, #3
 8002eb2:	4215      	tst	r5, r2
 8002eb4:	d1d3      	bne.n	8002e5e <__aeabi_dsub+0x612>
 8002eb6:	4663      	mov	r3, ip
 8002eb8:	2601      	movs	r6, #1
 8002eba:	08d8      	lsrs	r0, r3, #3
 8002ebc:	077b      	lsls	r3, r7, #29
 8002ebe:	002c      	movs	r4, r5
 8002ec0:	4318      	orrs	r0, r3
 8002ec2:	400e      	ands	r6, r1
 8002ec4:	e7cb      	b.n	8002e5e <__aeabi_dsub+0x612>
 8002ec6:	000a      	movs	r2, r1
 8002ec8:	0027      	movs	r7, r4
 8002eca:	3a20      	subs	r2, #32
 8002ecc:	40d7      	lsrs	r7, r2
 8002ece:	2920      	cmp	r1, #32
 8002ed0:	d005      	beq.n	8002ede <__aeabi_dsub+0x692>
 8002ed2:	2240      	movs	r2, #64	@ 0x40
 8002ed4:	1a52      	subs	r2, r2, r1
 8002ed6:	4094      	lsls	r4, r2
 8002ed8:	0025      	movs	r5, r4
 8002eda:	4305      	orrs	r5, r0
 8002edc:	9503      	str	r5, [sp, #12]
 8002ede:	9d03      	ldr	r5, [sp, #12]
 8002ee0:	1e6a      	subs	r2, r5, #1
 8002ee2:	4195      	sbcs	r5, r2
 8002ee4:	432f      	orrs	r7, r5
 8002ee6:	e610      	b.n	8002b0a <__aeabi_dsub+0x2be>
 8002ee8:	0014      	movs	r4, r2
 8002eea:	2500      	movs	r5, #0
 8002eec:	2200      	movs	r2, #0
 8002eee:	e556      	b.n	800299e <__aeabi_dsub+0x152>
 8002ef0:	9b02      	ldr	r3, [sp, #8]
 8002ef2:	4460      	add	r0, ip
 8002ef4:	4699      	mov	r9, r3
 8002ef6:	4560      	cmp	r0, ip
 8002ef8:	4192      	sbcs	r2, r2
 8002efa:	444c      	add	r4, r9
 8002efc:	4252      	negs	r2, r2
 8002efe:	0005      	movs	r5, r0
 8002f00:	18a4      	adds	r4, r4, r2
 8002f02:	e74c      	b.n	8002d9e <__aeabi_dsub+0x552>
 8002f04:	001a      	movs	r2, r3
 8002f06:	001c      	movs	r4, r3
 8002f08:	432a      	orrs	r2, r5
 8002f0a:	d000      	beq.n	8002f0e <__aeabi_dsub+0x6c2>
 8002f0c:	e6b3      	b.n	8002c76 <__aeabi_dsub+0x42a>
 8002f0e:	e6c9      	b.n	8002ca4 <__aeabi_dsub+0x458>
 8002f10:	2480      	movs	r4, #128	@ 0x80
 8002f12:	2600      	movs	r6, #0
 8002f14:	0324      	lsls	r4, r4, #12
 8002f16:	e5ae      	b.n	8002a76 <__aeabi_dsub+0x22a>
 8002f18:	2120      	movs	r1, #32
 8002f1a:	2500      	movs	r5, #0
 8002f1c:	1a09      	subs	r1, r1, r0
 8002f1e:	e517      	b.n	8002950 <__aeabi_dsub+0x104>
 8002f20:	2200      	movs	r2, #0
 8002f22:	2500      	movs	r5, #0
 8002f24:	4c0b      	ldr	r4, [pc, #44]	@ (8002f54 <__aeabi_dsub+0x708>)
 8002f26:	e53a      	b.n	800299e <__aeabi_dsub+0x152>
 8002f28:	2d00      	cmp	r5, #0
 8002f2a:	d100      	bne.n	8002f2e <__aeabi_dsub+0x6e2>
 8002f2c:	e5f6      	b.n	8002b1c <__aeabi_dsub+0x2d0>
 8002f2e:	464b      	mov	r3, r9
 8002f30:	1bda      	subs	r2, r3, r7
 8002f32:	4692      	mov	sl, r2
 8002f34:	2f00      	cmp	r7, #0
 8002f36:	d100      	bne.n	8002f3a <__aeabi_dsub+0x6ee>
 8002f38:	e66f      	b.n	8002c1a <__aeabi_dsub+0x3ce>
 8002f3a:	2a38      	cmp	r2, #56	@ 0x38
 8002f3c:	dc05      	bgt.n	8002f4a <__aeabi_dsub+0x6fe>
 8002f3e:	2680      	movs	r6, #128	@ 0x80
 8002f40:	0436      	lsls	r6, r6, #16
 8002f42:	4334      	orrs	r4, r6
 8002f44:	4688      	mov	r8, r1
 8002f46:	000e      	movs	r6, r1
 8002f48:	e6d1      	b.n	8002cee <__aeabi_dsub+0x4a2>
 8002f4a:	4688      	mov	r8, r1
 8002f4c:	000e      	movs	r6, r1
 8002f4e:	2501      	movs	r5, #1
 8002f50:	e6de      	b.n	8002d10 <__aeabi_dsub+0x4c4>
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	000007ff 	.word	0x000007ff
 8002f58:	ff7fffff 	.word	0xff7fffff
 8002f5c:	000007fe 	.word	0x000007fe
 8002f60:	2d00      	cmp	r5, #0
 8002f62:	d100      	bne.n	8002f66 <__aeabi_dsub+0x71a>
 8002f64:	e668      	b.n	8002c38 <__aeabi_dsub+0x3ec>
 8002f66:	464b      	mov	r3, r9
 8002f68:	1bd9      	subs	r1, r3, r7
 8002f6a:	2f00      	cmp	r7, #0
 8002f6c:	d101      	bne.n	8002f72 <__aeabi_dsub+0x726>
 8002f6e:	468a      	mov	sl, r1
 8002f70:	e5a7      	b.n	8002ac2 <__aeabi_dsub+0x276>
 8002f72:	2701      	movs	r7, #1
 8002f74:	2938      	cmp	r1, #56	@ 0x38
 8002f76:	dd00      	ble.n	8002f7a <__aeabi_dsub+0x72e>
 8002f78:	e5c7      	b.n	8002b0a <__aeabi_dsub+0x2be>
 8002f7a:	2280      	movs	r2, #128	@ 0x80
 8002f7c:	0412      	lsls	r2, r2, #16
 8002f7e:	4314      	orrs	r4, r2
 8002f80:	e5af      	b.n	8002ae2 <__aeabi_dsub+0x296>
 8002f82:	46c0      	nop			@ (mov r8, r8)

08002f84 <__aeabi_dcmpun>:
 8002f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f86:	46c6      	mov	lr, r8
 8002f88:	031e      	lsls	r6, r3, #12
 8002f8a:	0b36      	lsrs	r6, r6, #12
 8002f8c:	46b0      	mov	r8, r6
 8002f8e:	4e0d      	ldr	r6, [pc, #52]	@ (8002fc4 <__aeabi_dcmpun+0x40>)
 8002f90:	030c      	lsls	r4, r1, #12
 8002f92:	004d      	lsls	r5, r1, #1
 8002f94:	005f      	lsls	r7, r3, #1
 8002f96:	b500      	push	{lr}
 8002f98:	0b24      	lsrs	r4, r4, #12
 8002f9a:	0d6d      	lsrs	r5, r5, #21
 8002f9c:	0d7f      	lsrs	r7, r7, #21
 8002f9e:	42b5      	cmp	r5, r6
 8002fa0:	d00b      	beq.n	8002fba <__aeabi_dcmpun+0x36>
 8002fa2:	4908      	ldr	r1, [pc, #32]	@ (8002fc4 <__aeabi_dcmpun+0x40>)
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	428f      	cmp	r7, r1
 8002fa8:	d104      	bne.n	8002fb4 <__aeabi_dcmpun+0x30>
 8002faa:	4646      	mov	r6, r8
 8002fac:	4316      	orrs	r6, r2
 8002fae:	0030      	movs	r0, r6
 8002fb0:	1e43      	subs	r3, r0, #1
 8002fb2:	4198      	sbcs	r0, r3
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	46b8      	mov	r8, r7
 8002fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fba:	4304      	orrs	r4, r0
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	2c00      	cmp	r4, #0
 8002fc0:	d1f8      	bne.n	8002fb4 <__aeabi_dcmpun+0x30>
 8002fc2:	e7ee      	b.n	8002fa2 <__aeabi_dcmpun+0x1e>
 8002fc4:	000007ff 	.word	0x000007ff

08002fc8 <__aeabi_d2iz>:
 8002fc8:	000b      	movs	r3, r1
 8002fca:	0002      	movs	r2, r0
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	4d16      	ldr	r5, [pc, #88]	@ (8003028 <__aeabi_d2iz+0x60>)
 8002fd0:	030c      	lsls	r4, r1, #12
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	0049      	lsls	r1, r1, #1
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	9200      	str	r2, [sp, #0]
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	0b24      	lsrs	r4, r4, #12
 8002fde:	0d49      	lsrs	r1, r1, #21
 8002fe0:	0fde      	lsrs	r6, r3, #31
 8002fe2:	42a9      	cmp	r1, r5
 8002fe4:	dd04      	ble.n	8002ff0 <__aeabi_d2iz+0x28>
 8002fe6:	4811      	ldr	r0, [pc, #68]	@ (800302c <__aeabi_d2iz+0x64>)
 8002fe8:	4281      	cmp	r1, r0
 8002fea:	dd03      	ble.n	8002ff4 <__aeabi_d2iz+0x2c>
 8002fec:	4b10      	ldr	r3, [pc, #64]	@ (8003030 <__aeabi_d2iz+0x68>)
 8002fee:	18f0      	adds	r0, r6, r3
 8002ff0:	b002      	add	sp, #8
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	2080      	movs	r0, #128	@ 0x80
 8002ff6:	0340      	lsls	r0, r0, #13
 8002ff8:	4320      	orrs	r0, r4
 8002ffa:	4c0e      	ldr	r4, [pc, #56]	@ (8003034 <__aeabi_d2iz+0x6c>)
 8002ffc:	1a64      	subs	r4, r4, r1
 8002ffe:	2c1f      	cmp	r4, #31
 8003000:	dd08      	ble.n	8003014 <__aeabi_d2iz+0x4c>
 8003002:	4b0d      	ldr	r3, [pc, #52]	@ (8003038 <__aeabi_d2iz+0x70>)
 8003004:	1a5b      	subs	r3, r3, r1
 8003006:	40d8      	lsrs	r0, r3
 8003008:	0003      	movs	r3, r0
 800300a:	4258      	negs	r0, r3
 800300c:	2e00      	cmp	r6, #0
 800300e:	d1ef      	bne.n	8002ff0 <__aeabi_d2iz+0x28>
 8003010:	0018      	movs	r0, r3
 8003012:	e7ed      	b.n	8002ff0 <__aeabi_d2iz+0x28>
 8003014:	4b09      	ldr	r3, [pc, #36]	@ (800303c <__aeabi_d2iz+0x74>)
 8003016:	9a00      	ldr	r2, [sp, #0]
 8003018:	469c      	mov	ip, r3
 800301a:	0003      	movs	r3, r0
 800301c:	4461      	add	r1, ip
 800301e:	408b      	lsls	r3, r1
 8003020:	40e2      	lsrs	r2, r4
 8003022:	4313      	orrs	r3, r2
 8003024:	e7f1      	b.n	800300a <__aeabi_d2iz+0x42>
 8003026:	46c0      	nop			@ (mov r8, r8)
 8003028:	000003fe 	.word	0x000003fe
 800302c:	0000041d 	.word	0x0000041d
 8003030:	7fffffff 	.word	0x7fffffff
 8003034:	00000433 	.word	0x00000433
 8003038:	00000413 	.word	0x00000413
 800303c:	fffffbed 	.word	0xfffffbed

08003040 <__aeabi_i2d>:
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	2800      	cmp	r0, #0
 8003044:	d016      	beq.n	8003074 <__aeabi_i2d+0x34>
 8003046:	17c3      	asrs	r3, r0, #31
 8003048:	18c5      	adds	r5, r0, r3
 800304a:	405d      	eors	r5, r3
 800304c:	0fc4      	lsrs	r4, r0, #31
 800304e:	0028      	movs	r0, r5
 8003050:	f000 f914 	bl	800327c <__clzsi2>
 8003054:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <__aeabi_i2d+0x58>)
 8003056:	1a1b      	subs	r3, r3, r0
 8003058:	055b      	lsls	r3, r3, #21
 800305a:	0d5b      	lsrs	r3, r3, #21
 800305c:	280a      	cmp	r0, #10
 800305e:	dc14      	bgt.n	800308a <__aeabi_i2d+0x4a>
 8003060:	0002      	movs	r2, r0
 8003062:	002e      	movs	r6, r5
 8003064:	3215      	adds	r2, #21
 8003066:	4096      	lsls	r6, r2
 8003068:	220b      	movs	r2, #11
 800306a:	1a12      	subs	r2, r2, r0
 800306c:	40d5      	lsrs	r5, r2
 800306e:	032d      	lsls	r5, r5, #12
 8003070:	0b2d      	lsrs	r5, r5, #12
 8003072:	e003      	b.n	800307c <__aeabi_i2d+0x3c>
 8003074:	2400      	movs	r4, #0
 8003076:	2300      	movs	r3, #0
 8003078:	2500      	movs	r5, #0
 800307a:	2600      	movs	r6, #0
 800307c:	051b      	lsls	r3, r3, #20
 800307e:	432b      	orrs	r3, r5
 8003080:	07e4      	lsls	r4, r4, #31
 8003082:	4323      	orrs	r3, r4
 8003084:	0030      	movs	r0, r6
 8003086:	0019      	movs	r1, r3
 8003088:	bd70      	pop	{r4, r5, r6, pc}
 800308a:	380b      	subs	r0, #11
 800308c:	4085      	lsls	r5, r0
 800308e:	032d      	lsls	r5, r5, #12
 8003090:	2600      	movs	r6, #0
 8003092:	0b2d      	lsrs	r5, r5, #12
 8003094:	e7f2      	b.n	800307c <__aeabi_i2d+0x3c>
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	0000041e 	.word	0x0000041e

0800309c <__aeabi_ui2d>:
 800309c:	b510      	push	{r4, lr}
 800309e:	1e04      	subs	r4, r0, #0
 80030a0:	d010      	beq.n	80030c4 <__aeabi_ui2d+0x28>
 80030a2:	f000 f8eb 	bl	800327c <__clzsi2>
 80030a6:	4b0e      	ldr	r3, [pc, #56]	@ (80030e0 <__aeabi_ui2d+0x44>)
 80030a8:	1a1b      	subs	r3, r3, r0
 80030aa:	055b      	lsls	r3, r3, #21
 80030ac:	0d5b      	lsrs	r3, r3, #21
 80030ae:	280a      	cmp	r0, #10
 80030b0:	dc0f      	bgt.n	80030d2 <__aeabi_ui2d+0x36>
 80030b2:	220b      	movs	r2, #11
 80030b4:	0021      	movs	r1, r4
 80030b6:	1a12      	subs	r2, r2, r0
 80030b8:	40d1      	lsrs	r1, r2
 80030ba:	3015      	adds	r0, #21
 80030bc:	030a      	lsls	r2, r1, #12
 80030be:	4084      	lsls	r4, r0
 80030c0:	0b12      	lsrs	r2, r2, #12
 80030c2:	e001      	b.n	80030c8 <__aeabi_ui2d+0x2c>
 80030c4:	2300      	movs	r3, #0
 80030c6:	2200      	movs	r2, #0
 80030c8:	051b      	lsls	r3, r3, #20
 80030ca:	4313      	orrs	r3, r2
 80030cc:	0020      	movs	r0, r4
 80030ce:	0019      	movs	r1, r3
 80030d0:	bd10      	pop	{r4, pc}
 80030d2:	0022      	movs	r2, r4
 80030d4:	380b      	subs	r0, #11
 80030d6:	4082      	lsls	r2, r0
 80030d8:	0312      	lsls	r2, r2, #12
 80030da:	2400      	movs	r4, #0
 80030dc:	0b12      	lsrs	r2, r2, #12
 80030de:	e7f3      	b.n	80030c8 <__aeabi_ui2d+0x2c>
 80030e0:	0000041e 	.word	0x0000041e

080030e4 <__aeabi_f2d>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	0242      	lsls	r2, r0, #9
 80030e8:	0043      	lsls	r3, r0, #1
 80030ea:	0fc4      	lsrs	r4, r0, #31
 80030ec:	20fe      	movs	r0, #254	@ 0xfe
 80030ee:	0e1b      	lsrs	r3, r3, #24
 80030f0:	1c59      	adds	r1, r3, #1
 80030f2:	0a55      	lsrs	r5, r2, #9
 80030f4:	4208      	tst	r0, r1
 80030f6:	d00c      	beq.n	8003112 <__aeabi_f2d+0x2e>
 80030f8:	21e0      	movs	r1, #224	@ 0xe0
 80030fa:	0089      	lsls	r1, r1, #2
 80030fc:	468c      	mov	ip, r1
 80030fe:	076d      	lsls	r5, r5, #29
 8003100:	0b12      	lsrs	r2, r2, #12
 8003102:	4463      	add	r3, ip
 8003104:	051b      	lsls	r3, r3, #20
 8003106:	4313      	orrs	r3, r2
 8003108:	07e4      	lsls	r4, r4, #31
 800310a:	4323      	orrs	r3, r4
 800310c:	0028      	movs	r0, r5
 800310e:	0019      	movs	r1, r3
 8003110:	bd70      	pop	{r4, r5, r6, pc}
 8003112:	2b00      	cmp	r3, #0
 8003114:	d114      	bne.n	8003140 <__aeabi_f2d+0x5c>
 8003116:	2d00      	cmp	r5, #0
 8003118:	d01b      	beq.n	8003152 <__aeabi_f2d+0x6e>
 800311a:	0028      	movs	r0, r5
 800311c:	f000 f8ae 	bl	800327c <__clzsi2>
 8003120:	280a      	cmp	r0, #10
 8003122:	dc1c      	bgt.n	800315e <__aeabi_f2d+0x7a>
 8003124:	230b      	movs	r3, #11
 8003126:	002a      	movs	r2, r5
 8003128:	1a1b      	subs	r3, r3, r0
 800312a:	40da      	lsrs	r2, r3
 800312c:	0003      	movs	r3, r0
 800312e:	3315      	adds	r3, #21
 8003130:	409d      	lsls	r5, r3
 8003132:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <__aeabi_f2d+0x88>)
 8003134:	0312      	lsls	r2, r2, #12
 8003136:	1a1b      	subs	r3, r3, r0
 8003138:	055b      	lsls	r3, r3, #21
 800313a:	0b12      	lsrs	r2, r2, #12
 800313c:	0d5b      	lsrs	r3, r3, #21
 800313e:	e7e1      	b.n	8003104 <__aeabi_f2d+0x20>
 8003140:	2d00      	cmp	r5, #0
 8003142:	d009      	beq.n	8003158 <__aeabi_f2d+0x74>
 8003144:	0b13      	lsrs	r3, r2, #12
 8003146:	2280      	movs	r2, #128	@ 0x80
 8003148:	0312      	lsls	r2, r2, #12
 800314a:	431a      	orrs	r2, r3
 800314c:	076d      	lsls	r5, r5, #29
 800314e:	4b08      	ldr	r3, [pc, #32]	@ (8003170 <__aeabi_f2d+0x8c>)
 8003150:	e7d8      	b.n	8003104 <__aeabi_f2d+0x20>
 8003152:	2300      	movs	r3, #0
 8003154:	2200      	movs	r2, #0
 8003156:	e7d5      	b.n	8003104 <__aeabi_f2d+0x20>
 8003158:	2200      	movs	r2, #0
 800315a:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <__aeabi_f2d+0x8c>)
 800315c:	e7d2      	b.n	8003104 <__aeabi_f2d+0x20>
 800315e:	0003      	movs	r3, r0
 8003160:	002a      	movs	r2, r5
 8003162:	3b0b      	subs	r3, #11
 8003164:	409a      	lsls	r2, r3
 8003166:	2500      	movs	r5, #0
 8003168:	e7e3      	b.n	8003132 <__aeabi_f2d+0x4e>
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	00000389 	.word	0x00000389
 8003170:	000007ff 	.word	0x000007ff

08003174 <__aeabi_d2f>:
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003176:	004b      	lsls	r3, r1, #1
 8003178:	030f      	lsls	r7, r1, #12
 800317a:	0d5b      	lsrs	r3, r3, #21
 800317c:	4c3b      	ldr	r4, [pc, #236]	@ (800326c <__aeabi_d2f+0xf8>)
 800317e:	0f45      	lsrs	r5, r0, #29
 8003180:	b083      	sub	sp, #12
 8003182:	0a7f      	lsrs	r7, r7, #9
 8003184:	1c5e      	adds	r6, r3, #1
 8003186:	432f      	orrs	r7, r5
 8003188:	9000      	str	r0, [sp, #0]
 800318a:	9101      	str	r1, [sp, #4]
 800318c:	0fca      	lsrs	r2, r1, #31
 800318e:	00c5      	lsls	r5, r0, #3
 8003190:	4226      	tst	r6, r4
 8003192:	d00b      	beq.n	80031ac <__aeabi_d2f+0x38>
 8003194:	4936      	ldr	r1, [pc, #216]	@ (8003270 <__aeabi_d2f+0xfc>)
 8003196:	185c      	adds	r4, r3, r1
 8003198:	2cfe      	cmp	r4, #254	@ 0xfe
 800319a:	dd13      	ble.n	80031c4 <__aeabi_d2f+0x50>
 800319c:	20ff      	movs	r0, #255	@ 0xff
 800319e:	2300      	movs	r3, #0
 80031a0:	05c0      	lsls	r0, r0, #23
 80031a2:	4318      	orrs	r0, r3
 80031a4:	07d2      	lsls	r2, r2, #31
 80031a6:	4310      	orrs	r0, r2
 80031a8:	b003      	add	sp, #12
 80031aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <__aeabi_d2f+0x42>
 80031b0:	2000      	movs	r0, #0
 80031b2:	2300      	movs	r3, #0
 80031b4:	e7f4      	b.n	80031a0 <__aeabi_d2f+0x2c>
 80031b6:	433d      	orrs	r5, r7
 80031b8:	d0f0      	beq.n	800319c <__aeabi_d2f+0x28>
 80031ba:	2380      	movs	r3, #128	@ 0x80
 80031bc:	03db      	lsls	r3, r3, #15
 80031be:	20ff      	movs	r0, #255	@ 0xff
 80031c0:	433b      	orrs	r3, r7
 80031c2:	e7ed      	b.n	80031a0 <__aeabi_d2f+0x2c>
 80031c4:	2c00      	cmp	r4, #0
 80031c6:	dd14      	ble.n	80031f2 <__aeabi_d2f+0x7e>
 80031c8:	9b00      	ldr	r3, [sp, #0]
 80031ca:	00ff      	lsls	r7, r7, #3
 80031cc:	019b      	lsls	r3, r3, #6
 80031ce:	1e58      	subs	r0, r3, #1
 80031d0:	4183      	sbcs	r3, r0
 80031d2:	0f69      	lsrs	r1, r5, #29
 80031d4:	433b      	orrs	r3, r7
 80031d6:	430b      	orrs	r3, r1
 80031d8:	0759      	lsls	r1, r3, #29
 80031da:	d041      	beq.n	8003260 <__aeabi_d2f+0xec>
 80031dc:	210f      	movs	r1, #15
 80031de:	4019      	ands	r1, r3
 80031e0:	2904      	cmp	r1, #4
 80031e2:	d028      	beq.n	8003236 <__aeabi_d2f+0xc2>
 80031e4:	3304      	adds	r3, #4
 80031e6:	0159      	lsls	r1, r3, #5
 80031e8:	d525      	bpl.n	8003236 <__aeabi_d2f+0xc2>
 80031ea:	3401      	adds	r4, #1
 80031ec:	2300      	movs	r3, #0
 80031ee:	b2e0      	uxtb	r0, r4
 80031f0:	e7d6      	b.n	80031a0 <__aeabi_d2f+0x2c>
 80031f2:	0021      	movs	r1, r4
 80031f4:	3117      	adds	r1, #23
 80031f6:	dbdb      	blt.n	80031b0 <__aeabi_d2f+0x3c>
 80031f8:	2180      	movs	r1, #128	@ 0x80
 80031fa:	201e      	movs	r0, #30
 80031fc:	0409      	lsls	r1, r1, #16
 80031fe:	4339      	orrs	r1, r7
 8003200:	1b00      	subs	r0, r0, r4
 8003202:	281f      	cmp	r0, #31
 8003204:	dd1b      	ble.n	800323e <__aeabi_d2f+0xca>
 8003206:	2602      	movs	r6, #2
 8003208:	4276      	negs	r6, r6
 800320a:	1b34      	subs	r4, r6, r4
 800320c:	000e      	movs	r6, r1
 800320e:	40e6      	lsrs	r6, r4
 8003210:	0034      	movs	r4, r6
 8003212:	2820      	cmp	r0, #32
 8003214:	d004      	beq.n	8003220 <__aeabi_d2f+0xac>
 8003216:	4817      	ldr	r0, [pc, #92]	@ (8003274 <__aeabi_d2f+0x100>)
 8003218:	4684      	mov	ip, r0
 800321a:	4463      	add	r3, ip
 800321c:	4099      	lsls	r1, r3
 800321e:	430d      	orrs	r5, r1
 8003220:	002b      	movs	r3, r5
 8003222:	1e59      	subs	r1, r3, #1
 8003224:	418b      	sbcs	r3, r1
 8003226:	4323      	orrs	r3, r4
 8003228:	0759      	lsls	r1, r3, #29
 800322a:	d015      	beq.n	8003258 <__aeabi_d2f+0xe4>
 800322c:	210f      	movs	r1, #15
 800322e:	2400      	movs	r4, #0
 8003230:	4019      	ands	r1, r3
 8003232:	2904      	cmp	r1, #4
 8003234:	d117      	bne.n	8003266 <__aeabi_d2f+0xf2>
 8003236:	019b      	lsls	r3, r3, #6
 8003238:	0a5b      	lsrs	r3, r3, #9
 800323a:	b2e0      	uxtb	r0, r4
 800323c:	e7b0      	b.n	80031a0 <__aeabi_d2f+0x2c>
 800323e:	4c0e      	ldr	r4, [pc, #56]	@ (8003278 <__aeabi_d2f+0x104>)
 8003240:	191c      	adds	r4, r3, r4
 8003242:	002b      	movs	r3, r5
 8003244:	40a5      	lsls	r5, r4
 8003246:	40c3      	lsrs	r3, r0
 8003248:	40a1      	lsls	r1, r4
 800324a:	1e68      	subs	r0, r5, #1
 800324c:	4185      	sbcs	r5, r0
 800324e:	4329      	orrs	r1, r5
 8003250:	430b      	orrs	r3, r1
 8003252:	2400      	movs	r4, #0
 8003254:	0759      	lsls	r1, r3, #29
 8003256:	d1c1      	bne.n	80031dc <__aeabi_d2f+0x68>
 8003258:	019b      	lsls	r3, r3, #6
 800325a:	2000      	movs	r0, #0
 800325c:	0a5b      	lsrs	r3, r3, #9
 800325e:	e79f      	b.n	80031a0 <__aeabi_d2f+0x2c>
 8003260:	08db      	lsrs	r3, r3, #3
 8003262:	b2e0      	uxtb	r0, r4
 8003264:	e79c      	b.n	80031a0 <__aeabi_d2f+0x2c>
 8003266:	3304      	adds	r3, #4
 8003268:	e7e5      	b.n	8003236 <__aeabi_d2f+0xc2>
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	000007fe 	.word	0x000007fe
 8003270:	fffffc80 	.word	0xfffffc80
 8003274:	fffffca2 	.word	0xfffffca2
 8003278:	fffffc82 	.word	0xfffffc82

0800327c <__clzsi2>:
 800327c:	211c      	movs	r1, #28
 800327e:	2301      	movs	r3, #1
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	4298      	cmp	r0, r3
 8003284:	d301      	bcc.n	800328a <__clzsi2+0xe>
 8003286:	0c00      	lsrs	r0, r0, #16
 8003288:	3910      	subs	r1, #16
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	4298      	cmp	r0, r3
 800328e:	d301      	bcc.n	8003294 <__clzsi2+0x18>
 8003290:	0a00      	lsrs	r0, r0, #8
 8003292:	3908      	subs	r1, #8
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	4298      	cmp	r0, r3
 8003298:	d301      	bcc.n	800329e <__clzsi2+0x22>
 800329a:	0900      	lsrs	r0, r0, #4
 800329c:	3904      	subs	r1, #4
 800329e:	a202      	add	r2, pc, #8	@ (adr r2, 80032a8 <__clzsi2+0x2c>)
 80032a0:	5c10      	ldrb	r0, [r2, r0]
 80032a2:	1840      	adds	r0, r0, r1
 80032a4:	4770      	bx	lr
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	02020304 	.word	0x02020304
 80032ac:	01010101 	.word	0x01010101
	...

080032b8 <__clzdi2>:
 80032b8:	b510      	push	{r4, lr}
 80032ba:	2900      	cmp	r1, #0
 80032bc:	d103      	bne.n	80032c6 <__clzdi2+0xe>
 80032be:	f7ff ffdd 	bl	800327c <__clzsi2>
 80032c2:	3020      	adds	r0, #32
 80032c4:	e002      	b.n	80032cc <__clzdi2+0x14>
 80032c6:	0008      	movs	r0, r1
 80032c8:	f7ff ffd8 	bl	800327c <__clzsi2>
 80032cc:	bd10      	pop	{r4, pc}
 80032ce:	46c0      	nop			@ (mov r8, r8)

080032d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032d4:	f008 fb3c 	bl	800b950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032d8:	f000 f8d6 	bl	8003488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032dc:	f000 faa2 	bl	8003824 <MX_GPIO_Init>
  MX_ADC_Init();
 80032e0:	f000 f966 	bl	80035b0 <MX_ADC_Init>
  MX_DAC_Init();
 80032e4:	f000 f9c8 	bl	8003678 <MX_DAC_Init>
  MX_TIM2_Init();
 80032e8:	f000 f9f4 	bl	80036d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80032ec:	f000 fa46 	bl	800377c <MX_TIM3_Init>
  MX_MEMS_Init();
 80032f0:	f00d fc92 	bl	8010c18 <MX_MEMS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80032f4:	f000 f93e 	bl	8003574 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  /* Turn off 1kB buffer for printf/scanf */
  setvbuf(stdin, NULL, _IONBF, 0);
 80032f8:	4b51      	ldr	r3, [pc, #324]	@ (8003440 <main+0x170>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6858      	ldr	r0, [r3, #4]
 80032fe:	2300      	movs	r3, #0
 8003300:	2202      	movs	r2, #2
 8003302:	2100      	movs	r1, #0
 8003304:	f00e f814 	bl	8011330 <setvbuf>

  /* Timer */
  HAL_TIM_Base_Start_IT(&htim2);
 8003308:	4b4e      	ldr	r3, [pc, #312]	@ (8003444 <main+0x174>)
 800330a:	0018      	movs	r0, r3
 800330c:	f00b fb98 	bl	800ea40 <HAL_TIM_Base_Start_IT>
  TIM2_IRQ_FLAG = 0;
 8003310:	4b4d      	ldr	r3, [pc, #308]	@ (8003448 <main+0x178>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]

  /* Button */
  ButtonPressed = 0;
 8003316:	4b4d      	ldr	r3, [pc, #308]	@ (800344c <main+0x17c>)
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
  SaveData = 0;
 800331c:	4b4c      	ldr	r3, [pc, #304]	@ (8003450 <main+0x180>)
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]

  /* Flash Memory info */
  print_flash_info();
 8003322:	f000 fc7d 	bl	8003c20 <print_flash_info>

  /* Sensor configuration */
  #ifdef LPS22HH_ENABLE
    LPS22HH_Config();
 8003326:	f000 fbbb 	bl	8003aa0 <LPS22HH_Config>
    #ifdef ANALOG_LOOPBACK_ENABLE
      Analog_Loopback();
    #endif

    /* Button handling */
    if (ButtonPressed) {
 800332a:	4b48      	ldr	r3, [pc, #288]	@ (800344c <main+0x17c>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d03c      	beq.n	80033ac <main+0xdc>
      ButtonPressed = 0;
 8003332:	4b46      	ldr	r3, [pc, #280]	@ (800344c <main+0x17c>)
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
      if (SaveData) {
 8003338:	4b45      	ldr	r3, [pc, #276]	@ (8003450 <main+0x180>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d018      	beq.n	8003374 <main+0xa4>
        SaveData = 0;
 8003342:	4b43      	ldr	r3, [pc, #268]	@ (8003450 <main+0x180>)
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
    	printf("Acquisition stopped...\r\n");
 8003348:	4b42      	ldr	r3, [pc, #264]	@ (8003454 <main+0x184>)
 800334a:	0018      	movs	r0, r3
 800334c:	f00d ffd6 	bl	80112fc <puts>
    	printf("Press 'R' to read the data\r\n");
 8003350:	4b41      	ldr	r3, [pc, #260]	@ (8003458 <main+0x188>)
 8003352:	0018      	movs	r0, r3
 8003354:	f00d ffd2 	bl	80112fc <puts>

    	if (data_ind != 0) {
 8003358:	4b40      	ldr	r3, [pc, #256]	@ (800345c <main+0x18c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d025      	beq.n	80033ac <main+0xdc>
    	  write_flash(Flash_addr, &data_buffer[0], data_ind, 0);
 8003360:	4b3f      	ldr	r3, [pc, #252]	@ (8003460 <main+0x190>)
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	4b3d      	ldr	r3, [pc, #244]	@ (800345c <main+0x18c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	001a      	movs	r2, r3
 800336a:	493e      	ldr	r1, [pc, #248]	@ (8003464 <main+0x194>)
 800336c:	2300      	movs	r3, #0
 800336e:	f000 fd4d 	bl	8003e0c <write_flash>
 8003372:	e01b      	b.n	80033ac <main+0xdc>
    	}
      }
      else {
    	SaveData = 1;
 8003374:	4b36      	ldr	r3, [pc, #216]	@ (8003450 <main+0x180>)
 8003376:	2201      	movs	r2, #1
 8003378:	701a      	strb	r2, [r3, #0]
    	erase_flash(0);
 800337a:	2000      	movs	r0, #0
 800337c:	f000 fcd2 	bl	8003d24 <erase_flash>
    	printf("Acquisition started...\r\n");
 8003380:	4b39      	ldr	r3, [pc, #228]	@ (8003468 <main+0x198>)
 8003382:	0018      	movs	r0, r3
 8003384:	f00d ffba 	bl	80112fc <puts>
    	printf("Press blue button to stop data acquisition\r\n");
 8003388:	4b38      	ldr	r3, [pc, #224]	@ (800346c <main+0x19c>)
 800338a:	0018      	movs	r0, r3
 800338c:	f00d ffb6 	bl	80112fc <puts>

    	data_ind = 0;
 8003390:	4b32      	ldr	r3, [pc, #200]	@ (800345c <main+0x18c>)
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
    	Flash_addr = FLASH_BANK2_BASE;
 8003396:	4b36      	ldr	r3, [pc, #216]	@ (8003470 <main+0x1a0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	041b      	lsls	r3, r3, #16
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	029b      	lsls	r3, r3, #10
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	2280      	movs	r2, #128	@ 0x80
 80033a4:	0512      	lsls	r2, r2, #20
 80033a6:	189a      	adds	r2, r3, r2
 80033a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003460 <main+0x190>)
 80033aa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Read task */
    if (SaveData == 0) {
 80033ac:	4b28      	ldr	r3, [pc, #160]	@ (8003450 <main+0x180>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d124      	bne.n	8003400 <main+0x130>
      if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) != 0) {
 80033b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003474 <main+0x1a4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2220      	movs	r2, #32
 80033be:	4013      	ands	r3, r2
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d105      	bne.n	80033d0 <main+0x100>
        scanf("%s", dataIn);
 80033c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003478 <main+0x1a8>)
 80033c6:	4b2d      	ldr	r3, [pc, #180]	@ (800347c <main+0x1ac>)
 80033c8:	0011      	movs	r1, r2
 80033ca:	0018      	movs	r0, r3
 80033cc:	f00d ffa0 	bl	8011310 <iscanf>
      }

      if ((strcmp(dataIn, "r") == 0) || (strcmp(dataIn, "R") == 0)) {
 80033d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003480 <main+0x1b0>)
 80033d2:	4b29      	ldr	r3, [pc, #164]	@ (8003478 <main+0x1a8>)
 80033d4:	0011      	movs	r1, r2
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7fc fe96 	bl	8000108 <strcmp>
 80033dc:	1e03      	subs	r3, r0, #0
 80033de:	d007      	beq.n	80033f0 <main+0x120>
 80033e0:	4a28      	ldr	r2, [pc, #160]	@ (8003484 <main+0x1b4>)
 80033e2:	4b25      	ldr	r3, [pc, #148]	@ (8003478 <main+0x1a8>)
 80033e4:	0011      	movs	r1, r2
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7fc fe8e 	bl	8000108 <strcmp>
 80033ec:	1e03      	subs	r3, r0, #0
 80033ee:	d101      	bne.n	80033f4 <main+0x124>
        read_task();
 80033f0:	f000 fa90 	bl	8003914 <read_task>
      }

      /* Reset user command buffer */
      memset(dataIn, '\0', sizeof(dataIn));
 80033f4:	4b20      	ldr	r3, [pc, #128]	@ (8003478 <main+0x1a8>)
 80033f6:	2204      	movs	r2, #4
 80033f8:	2100      	movs	r1, #0
 80033fa:	0018      	movs	r0, r3
 80033fc:	f00e f98e 	bl	801171c <memset>
    }

    /* Acquisition task */
    if (TIM2_IRQ_FLAG && SaveData && (Flash_addr <= FLASH_BANK2_END-DATA_SIZE+1)) {
 8003400:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <main+0x178>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d090      	beq.n	800332a <main+0x5a>
 8003408:	4b11      	ldr	r3, [pc, #68]	@ (8003450 <main+0x180>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d08b      	beq.n	800332a <main+0x5a>
 8003412:	4b17      	ldr	r3, [pc, #92]	@ (8003470 <main+0x1a0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	041b      	lsls	r3, r3, #16
 8003418:	0c1b      	lsrs	r3, r3, #16
 800341a:	2280      	movs	r2, #128	@ 0x80
 800341c:	0292      	lsls	r2, r2, #10
 800341e:	4694      	mov	ip, r2
 8003420:	4463      	add	r3, ip
 8003422:	029b      	lsls	r3, r3, #10
 8003424:	3b0c      	subs	r3, #12
 8003426:	001a      	movs	r2, r3
 8003428:	4b0d      	ldr	r3, [pc, #52]	@ (8003460 <main+0x190>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d200      	bcs.n	8003432 <main+0x162>
 8003430:	e77b      	b.n	800332a <main+0x5a>
      /* Release timer flag */
      TIM2_IRQ_FLAG = 0;
 8003432:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <main+0x178>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

      /* LPS22HH pressure sensor */
      #ifdef LPS22HH_ENABLE
        LPS22HH_Handler(0);
 8003438:	2000      	movs	r0, #0
 800343a:	f000 fb4d 	bl	8003ad8 <LPS22HH_Handler>
    if (ButtonPressed) {
 800343e:	e774      	b.n	800332a <main+0x5a>
 8003440:	200001a4 	.word	0x200001a4
 8003444:	20000294 	.word	0x20000294
 8003448:	200004a4 	.word	0x200004a4
 800344c:	200004aa 	.word	0x200004aa
 8003450:	20000418 	.word	0x20000418
 8003454:	08013fc8 	.word	0x08013fc8
 8003458:	08013fe0 	.word	0x08013fe0
 800345c:	2000041c 	.word	0x2000041c
 8003460:	200004a0 	.word	0x200004a0
 8003464:	20000420 	.word	0x20000420
 8003468:	08013ffc 	.word	0x08013ffc
 800346c:	08014014 	.word	0x08014014
 8003470:	1ff8007c 	.word	0x1ff8007c
 8003474:	200006b0 	.word	0x200006b0
 8003478:	20000414 	.word	0x20000414
 800347c:	08014040 	.word	0x08014040
 8003480:	08014044 	.word	0x08014044
 8003484:	08014048 	.word	0x08014048

08003488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b09f      	sub	sp, #124	@ 0x7c
 800348c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800348e:	2440      	movs	r4, #64	@ 0x40
 8003490:	193b      	adds	r3, r7, r4
 8003492:	0018      	movs	r0, r3
 8003494:	2338      	movs	r3, #56	@ 0x38
 8003496:	001a      	movs	r2, r3
 8003498:	2100      	movs	r1, #0
 800349a:	f00e f93f 	bl	801171c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800349e:	232c      	movs	r3, #44	@ 0x2c
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	0018      	movs	r0, r3
 80034a4:	2314      	movs	r3, #20
 80034a6:	001a      	movs	r2, r3
 80034a8:	2100      	movs	r1, #0
 80034aa:	f00e f937 	bl	801171c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	0018      	movs	r0, r3
 80034b2:	2328      	movs	r3, #40	@ 0x28
 80034b4:	001a      	movs	r2, r3
 80034b6:	2100      	movs	r1, #0
 80034b8:	f00e f930 	bl	801171c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034bc:	4b2b      	ldr	r3, [pc, #172]	@ (800356c <SystemClock_Config+0xe4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003570 <SystemClock_Config+0xe8>)
 80034c2:	401a      	ands	r2, r3
 80034c4:	4b29      	ldr	r3, [pc, #164]	@ (800356c <SystemClock_Config+0xe4>)
 80034c6:	2180      	movs	r1, #128	@ 0x80
 80034c8:	0109      	lsls	r1, r1, #4
 80034ca:	430a      	orrs	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034ce:	0021      	movs	r1, r4
 80034d0:	187b      	adds	r3, r7, r1
 80034d2:	2202      	movs	r2, #2
 80034d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034d6:	187b      	adds	r3, r7, r1
 80034d8:	2201      	movs	r2, #1
 80034da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034dc:	187b      	adds	r3, r7, r1
 80034de:	2210      	movs	r2, #16
 80034e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034e2:	187b      	adds	r3, r7, r1
 80034e4:	2202      	movs	r2, #2
 80034e6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034e8:	187b      	adds	r3, r7, r1
 80034ea:	2200      	movs	r2, #0
 80034ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80034ee:	187b      	adds	r3, r7, r1
 80034f0:	2280      	movs	r2, #128	@ 0x80
 80034f2:	02d2      	lsls	r2, r2, #11
 80034f4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80034f6:	187b      	adds	r3, r7, r1
 80034f8:	2280      	movs	r2, #128	@ 0x80
 80034fa:	03d2      	lsls	r2, r2, #15
 80034fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034fe:	187b      	adds	r3, r7, r1
 8003500:	0018      	movs	r0, r3
 8003502:	f00a fac7 	bl	800da94 <HAL_RCC_OscConfig>
 8003506:	1e03      	subs	r3, r0, #0
 8003508:	d001      	beq.n	800350e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800350a:	f000 fdf3 	bl	80040f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800350e:	212c      	movs	r1, #44	@ 0x2c
 8003510:	187b      	adds	r3, r7, r1
 8003512:	220f      	movs	r2, #15
 8003514:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003516:	187b      	adds	r3, r7, r1
 8003518:	2203      	movs	r2, #3
 800351a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800351c:	187b      	adds	r3, r7, r1
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003522:	187b      	adds	r3, r7, r1
 8003524:	2200      	movs	r2, #0
 8003526:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003528:	187b      	adds	r3, r7, r1
 800352a:	2200      	movs	r2, #0
 800352c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800352e:	187b      	adds	r3, r7, r1
 8003530:	2101      	movs	r1, #1
 8003532:	0018      	movs	r0, r3
 8003534:	f00a fe82 	bl	800e23c <HAL_RCC_ClockConfig>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d001      	beq.n	8003540 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800353c:	f000 fdda 	bl	80040f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8003540:	1d3b      	adds	r3, r7, #4
 8003542:	220a      	movs	r2, #10
 8003544:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003546:	1d3b      	adds	r3, r7, #4
 8003548:	2200      	movs	r2, #0
 800354a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800354c:	1d3b      	adds	r3, r7, #4
 800354e:	2200      	movs	r2, #0
 8003550:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	0018      	movs	r0, r3
 8003556:	f00b f895 	bl	800e684 <HAL_RCCEx_PeriphCLKConfig>
 800355a:	1e03      	subs	r3, r0, #0
 800355c:	d001      	beq.n	8003562 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800355e:	f000 fdc9 	bl	80040f4 <Error_Handler>
  }
}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b01f      	add	sp, #124	@ 0x7c
 8003568:	bd90      	pop	{r4, r7, pc}
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	40007000 	.word	0x40007000
 8003570:	ffffe7ff 	.word	0xffffe7ff

08003574 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003578:	2200      	movs	r2, #0
 800357a:	2100      	movs	r1, #0
 800357c:	201c      	movs	r0, #28
 800357e:	f008 fd37 	bl	800bff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003582:	201c      	movs	r0, #28
 8003584:	f008 fd49 	bl	800c01a <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003588:	2200      	movs	r2, #0
 800358a:	2100      	movs	r1, #0
 800358c:	200f      	movs	r0, #15
 800358e:	f008 fd2f 	bl	800bff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003592:	200f      	movs	r0, #15
 8003594:	f008 fd41 	bl	800c01a <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003598:	2200      	movs	r2, #0
 800359a:	2100      	movs	r1, #0
 800359c:	2010      	movs	r0, #16
 800359e:	f008 fd27 	bl	800bff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035a2:	2010      	movs	r0, #16
 80035a4:	f008 fd39 	bl	800c01a <HAL_NVIC_EnableIRQ>
}
 80035a8:	46c0      	nop			@ (mov r8, r8)
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035b6:	003b      	movs	r3, r7
 80035b8:	0018      	movs	r0, r3
 80035ba:	2308      	movs	r3, #8
 80035bc:	001a      	movs	r2, r3
 80035be:	2100      	movs	r1, #0
 80035c0:	f00e f8ac 	bl	801171c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80035c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003670 <MX_ADC_Init+0xc0>)
 80035c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003674 <MX_ADC_Init+0xc4>)
 80035c8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80035ca:	4b29      	ldr	r3, [pc, #164]	@ (8003670 <MX_ADC_Init+0xc0>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80035d0:	4b27      	ldr	r3, [pc, #156]	@ (8003670 <MX_ADC_Init+0xc0>)
 80035d2:	2280      	movs	r2, #128	@ 0x80
 80035d4:	05d2      	lsls	r2, r2, #23
 80035d6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80035d8:	4b25      	ldr	r3, [pc, #148]	@ (8003670 <MX_ADC_Init+0xc0>)
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80035de:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <MX_ADC_Init+0xc0>)
 80035e0:	2202      	movs	r2, #2
 80035e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80035e4:	4b22      	ldr	r3, [pc, #136]	@ (8003670 <MX_ADC_Init+0xc0>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80035ea:	4b21      	ldr	r3, [pc, #132]	@ (8003670 <MX_ADC_Init+0xc0>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80035f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003670 <MX_ADC_Init+0xc0>)
 80035f2:	2220      	movs	r2, #32
 80035f4:	2100      	movs	r1, #0
 80035f6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80035f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003670 <MX_ADC_Init+0xc0>)
 80035fa:	2221      	movs	r2, #33	@ 0x21
 80035fc:	2100      	movs	r1, #0
 80035fe:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003600:	4b1b      	ldr	r3, [pc, #108]	@ (8003670 <MX_ADC_Init+0xc0>)
 8003602:	2200      	movs	r2, #0
 8003604:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003606:	4b1a      	ldr	r3, [pc, #104]	@ (8003670 <MX_ADC_Init+0xc0>)
 8003608:	22c2      	movs	r2, #194	@ 0xc2
 800360a:	32ff      	adds	r2, #255	@ 0xff
 800360c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800360e:	4b18      	ldr	r3, [pc, #96]	@ (8003670 <MX_ADC_Init+0xc0>)
 8003610:	222c      	movs	r2, #44	@ 0x2c
 8003612:	2100      	movs	r1, #0
 8003614:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003616:	4b16      	ldr	r3, [pc, #88]	@ (8003670 <MX_ADC_Init+0xc0>)
 8003618:	2204      	movs	r2, #4
 800361a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800361c:	4b14      	ldr	r3, [pc, #80]	@ (8003670 <MX_ADC_Init+0xc0>)
 800361e:	2200      	movs	r2, #0
 8003620:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003622:	4b13      	ldr	r3, [pc, #76]	@ (8003670 <MX_ADC_Init+0xc0>)
 8003624:	2200      	movs	r2, #0
 8003626:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003628:	4b11      	ldr	r3, [pc, #68]	@ (8003670 <MX_ADC_Init+0xc0>)
 800362a:	2200      	movs	r2, #0
 800362c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800362e:	4b10      	ldr	r3, [pc, #64]	@ (8003670 <MX_ADC_Init+0xc0>)
 8003630:	2200      	movs	r2, #0
 8003632:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003634:	4b0e      	ldr	r3, [pc, #56]	@ (8003670 <MX_ADC_Init+0xc0>)
 8003636:	0018      	movs	r0, r3
 8003638:	f008 f9fa 	bl	800ba30 <HAL_ADC_Init>
 800363c:	1e03      	subs	r3, r0, #0
 800363e:	d001      	beq.n	8003644 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003640:	f000 fd58 	bl	80040f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003644:	003b      	movs	r3, r7
 8003646:	2201      	movs	r2, #1
 8003648:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800364a:	003b      	movs	r3, r7
 800364c:	2280      	movs	r2, #128	@ 0x80
 800364e:	0152      	lsls	r2, r2, #5
 8003650:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003652:	003a      	movs	r2, r7
 8003654:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <MX_ADC_Init+0xc0>)
 8003656:	0011      	movs	r1, r2
 8003658:	0018      	movs	r0, r3
 800365a:	f008 fb5d 	bl	800bd18 <HAL_ADC_ConfigChannel>
 800365e:	1e03      	subs	r3, r0, #0
 8003660:	d001      	beq.n	8003666 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003662:	f000 fd47 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b002      	add	sp, #8
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			@ (mov r8, r8)
 8003670:	20000224 	.word	0x20000224
 8003674:	40012400 	.word	0x40012400

08003678 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800367e:	003b      	movs	r3, r7
 8003680:	0018      	movs	r0, r3
 8003682:	2308      	movs	r3, #8
 8003684:	001a      	movs	r2, r3
 8003686:	2100      	movs	r1, #0
 8003688:	f00e f848 	bl	801171c <memset>
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800368c:	4b0f      	ldr	r3, [pc, #60]	@ (80036cc <MX_DAC_Init+0x54>)
 800368e:	4a10      	ldr	r2, [pc, #64]	@ (80036d0 <MX_DAC_Init+0x58>)
 8003690:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003692:	4b0e      	ldr	r3, [pc, #56]	@ (80036cc <MX_DAC_Init+0x54>)
 8003694:	0018      	movs	r0, r3
 8003696:	f008 fcdd 	bl	800c054 <HAL_DAC_Init>
 800369a:	1e03      	subs	r3, r0, #0
 800369c:	d001      	beq.n	80036a2 <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 800369e:	f000 fd29 	bl	80040f4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80036a2:	003b      	movs	r3, r7
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80036a8:	003b      	movs	r3, r7
 80036aa:	2200      	movs	r2, #0
 80036ac:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80036ae:	0039      	movs	r1, r7
 80036b0:	4b06      	ldr	r3, [pc, #24]	@ (80036cc <MX_DAC_Init+0x54>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	0018      	movs	r0, r3
 80036b6:	f008 fcf1 	bl	800c09c <HAL_DAC_ConfigChannel>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d001      	beq.n	80036c2 <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 80036be:	f000 fd19 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b002      	add	sp, #8
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	20000280 	.word	0x20000280
 80036d0:	40007400 	.word	0x40007400

080036d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036da:	2308      	movs	r3, #8
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	0018      	movs	r0, r3
 80036e0:	2310      	movs	r3, #16
 80036e2:	001a      	movs	r2, r3
 80036e4:	2100      	movs	r1, #0
 80036e6:	f00e f819 	bl	801171c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ea:	003b      	movs	r3, r7
 80036ec:	0018      	movs	r0, r3
 80036ee:	2308      	movs	r3, #8
 80036f0:	001a      	movs	r2, r3
 80036f2:	2100      	movs	r1, #0
 80036f4:	f00e f812 	bl	801171c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003778 <MX_TIM2_Init+0xa4>)
 80036fa:	2280      	movs	r2, #128	@ 0x80
 80036fc:	05d2      	lsls	r2, r2, #23
 80036fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200;
 8003700:	4b1d      	ldr	r3, [pc, #116]	@ (8003778 <MX_TIM2_Init+0xa4>)
 8003702:	22c8      	movs	r2, #200	@ 0xc8
 8003704:	0112      	lsls	r2, r2, #4
 8003706:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003708:	4b1b      	ldr	r3, [pc, #108]	@ (8003778 <MX_TIM2_Init+0xa4>)
 800370a:	2200      	movs	r2, #0
 800370c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800370e:	4b1a      	ldr	r3, [pc, #104]	@ (8003778 <MX_TIM2_Init+0xa4>)
 8003710:	22fa      	movs	r2, #250	@ 0xfa
 8003712:	0092      	lsls	r2, r2, #2
 8003714:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003716:	4b18      	ldr	r3, [pc, #96]	@ (8003778 <MX_TIM2_Init+0xa4>)
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800371c:	4b16      	ldr	r3, [pc, #88]	@ (8003778 <MX_TIM2_Init+0xa4>)
 800371e:	2200      	movs	r2, #0
 8003720:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003722:	4b15      	ldr	r3, [pc, #84]	@ (8003778 <MX_TIM2_Init+0xa4>)
 8003724:	0018      	movs	r0, r3
 8003726:	f00b f94b 	bl	800e9c0 <HAL_TIM_Base_Init>
 800372a:	1e03      	subs	r3, r0, #0
 800372c:	d001      	beq.n	8003732 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800372e:	f000 fce1 	bl	80040f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003732:	2108      	movs	r1, #8
 8003734:	187b      	adds	r3, r7, r1
 8003736:	2280      	movs	r2, #128	@ 0x80
 8003738:	0152      	lsls	r2, r2, #5
 800373a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800373c:	187a      	adds	r2, r7, r1
 800373e:	4b0e      	ldr	r3, [pc, #56]	@ (8003778 <MX_TIM2_Init+0xa4>)
 8003740:	0011      	movs	r1, r2
 8003742:	0018      	movs	r0, r3
 8003744:	f00b fadc 	bl	800ed00 <HAL_TIM_ConfigClockSource>
 8003748:	1e03      	subs	r3, r0, #0
 800374a:	d001      	beq.n	8003750 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800374c:	f000 fcd2 	bl	80040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003750:	003b      	movs	r3, r7
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003756:	003b      	movs	r3, r7
 8003758:	2200      	movs	r2, #0
 800375a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800375c:	003a      	movs	r2, r7
 800375e:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <MX_TIM2_Init+0xa4>)
 8003760:	0011      	movs	r1, r2
 8003762:	0018      	movs	r0, r3
 8003764:	f00b fcc0 	bl	800f0e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003768:	1e03      	subs	r3, r0, #0
 800376a:	d001      	beq.n	8003770 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800376c:	f000 fcc2 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003770:	46c0      	nop			@ (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b006      	add	sp, #24
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000294 	.word	0x20000294

0800377c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003782:	2308      	movs	r3, #8
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	0018      	movs	r0, r3
 8003788:	2310      	movs	r3, #16
 800378a:	001a      	movs	r2, r3
 800378c:	2100      	movs	r1, #0
 800378e:	f00d ffc5 	bl	801171c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003792:	003b      	movs	r3, r7
 8003794:	0018      	movs	r0, r3
 8003796:	2308      	movs	r3, #8
 8003798:	001a      	movs	r2, r3
 800379a:	2100      	movs	r1, #0
 800379c:	f00d ffbe 	bl	801171c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037a0:	4b1e      	ldr	r3, [pc, #120]	@ (800381c <MX_TIM3_Init+0xa0>)
 80037a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003820 <MX_TIM3_Init+0xa4>)
 80037a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3200;
 80037a6:	4b1d      	ldr	r3, [pc, #116]	@ (800381c <MX_TIM3_Init+0xa0>)
 80037a8:	22c8      	movs	r2, #200	@ 0xc8
 80037aa:	0112      	lsls	r2, r2, #4
 80037ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ae:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <MX_TIM3_Init+0xa0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 80037b4:	4b19      	ldr	r3, [pc, #100]	@ (800381c <MX_TIM3_Init+0xa0>)
 80037b6:	2232      	movs	r2, #50	@ 0x32
 80037b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ba:	4b18      	ldr	r3, [pc, #96]	@ (800381c <MX_TIM3_Init+0xa0>)
 80037bc:	2200      	movs	r2, #0
 80037be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037c0:	4b16      	ldr	r3, [pc, #88]	@ (800381c <MX_TIM3_Init+0xa0>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037c6:	4b15      	ldr	r3, [pc, #84]	@ (800381c <MX_TIM3_Init+0xa0>)
 80037c8:	0018      	movs	r0, r3
 80037ca:	f00b f8f9 	bl	800e9c0 <HAL_TIM_Base_Init>
 80037ce:	1e03      	subs	r3, r0, #0
 80037d0:	d001      	beq.n	80037d6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80037d2:	f000 fc8f 	bl	80040f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037d6:	2108      	movs	r1, #8
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	2280      	movs	r2, #128	@ 0x80
 80037dc:	0152      	lsls	r2, r2, #5
 80037de:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037e0:	187a      	adds	r2, r7, r1
 80037e2:	4b0e      	ldr	r3, [pc, #56]	@ (800381c <MX_TIM3_Init+0xa0>)
 80037e4:	0011      	movs	r1, r2
 80037e6:	0018      	movs	r0, r3
 80037e8:	f00b fa8a 	bl	800ed00 <HAL_TIM_ConfigClockSource>
 80037ec:	1e03      	subs	r3, r0, #0
 80037ee:	d001      	beq.n	80037f4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80037f0:	f000 fc80 	bl	80040f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037f4:	003b      	movs	r3, r7
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037fa:	003b      	movs	r3, r7
 80037fc:	2200      	movs	r2, #0
 80037fe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003800:	003a      	movs	r2, r7
 8003802:	4b06      	ldr	r3, [pc, #24]	@ (800381c <MX_TIM3_Init+0xa0>)
 8003804:	0011      	movs	r1, r2
 8003806:	0018      	movs	r0, r3
 8003808:	f00b fc6e 	bl	800f0e8 <HAL_TIMEx_MasterConfigSynchronization>
 800380c:	1e03      	subs	r3, r0, #0
 800380e:	d001      	beq.n	8003814 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003810:	f000 fc70 	bl	80040f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003814:	46c0      	nop			@ (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b006      	add	sp, #24
 800381a:	bd80      	pop	{r7, pc}
 800381c:	200002d4 	.word	0x200002d4
 8003820:	40000400 	.word	0x40000400

08003824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003824:	b590      	push	{r4, r7, lr}
 8003826:	b08b      	sub	sp, #44	@ 0x2c
 8003828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382a:	2414      	movs	r4, #20
 800382c:	193b      	adds	r3, r7, r4
 800382e:	0018      	movs	r0, r3
 8003830:	2314      	movs	r3, #20
 8003832:	001a      	movs	r2, r3
 8003834:	2100      	movs	r1, #0
 8003836:	f00d ff71 	bl	801171c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800383a:	4b32      	ldr	r3, [pc, #200]	@ (8003904 <MX_GPIO_Init+0xe0>)
 800383c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800383e:	4b31      	ldr	r3, [pc, #196]	@ (8003904 <MX_GPIO_Init+0xe0>)
 8003840:	2104      	movs	r1, #4
 8003842:	430a      	orrs	r2, r1
 8003844:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003846:	4b2f      	ldr	r3, [pc, #188]	@ (8003904 <MX_GPIO_Init+0xe0>)
 8003848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384a:	2204      	movs	r2, #4
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003852:	4b2c      	ldr	r3, [pc, #176]	@ (8003904 <MX_GPIO_Init+0xe0>)
 8003854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003856:	4b2b      	ldr	r3, [pc, #172]	@ (8003904 <MX_GPIO_Init+0xe0>)
 8003858:	2180      	movs	r1, #128	@ 0x80
 800385a:	430a      	orrs	r2, r1
 800385c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800385e:	4b29      	ldr	r3, [pc, #164]	@ (8003904 <MX_GPIO_Init+0xe0>)
 8003860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003862:	2280      	movs	r2, #128	@ 0x80
 8003864:	4013      	ands	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800386a:	4b26      	ldr	r3, [pc, #152]	@ (8003904 <MX_GPIO_Init+0xe0>)
 800386c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800386e:	4b25      	ldr	r3, [pc, #148]	@ (8003904 <MX_GPIO_Init+0xe0>)
 8003870:	2101      	movs	r1, #1
 8003872:	430a      	orrs	r2, r1
 8003874:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003876:	4b23      	ldr	r3, [pc, #140]	@ (8003904 <MX_GPIO_Init+0xe0>)
 8003878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387a:	2201      	movs	r2, #1
 800387c:	4013      	ands	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003882:	4b20      	ldr	r3, [pc, #128]	@ (8003904 <MX_GPIO_Init+0xe0>)
 8003884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003886:	4b1f      	ldr	r3, [pc, #124]	@ (8003904 <MX_GPIO_Init+0xe0>)
 8003888:	2102      	movs	r1, #2
 800388a:	430a      	orrs	r2, r1
 800388c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800388e:	4b1d      	ldr	r3, [pc, #116]	@ (8003904 <MX_GPIO_Init+0xe0>)
 8003890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003892:	2202      	movs	r2, #2
 8003894:	4013      	ands	r3, r2
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800389a:	193b      	adds	r3, r7, r4
 800389c:	2202      	movs	r2, #2
 800389e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80038a0:	193b      	adds	r3, r7, r4
 80038a2:	2284      	movs	r2, #132	@ 0x84
 80038a4:	0392      	lsls	r2, r2, #14
 80038a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	193b      	adds	r3, r7, r4
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ae:	193b      	adds	r3, r7, r4
 80038b0:	4a15      	ldr	r2, [pc, #84]	@ (8003908 <MX_GPIO_Init+0xe4>)
 80038b2:	0019      	movs	r1, r3
 80038b4:	0010      	movs	r0, r2
 80038b6:	f008 ff55 	bl	800c764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80038ba:	0021      	movs	r1, r4
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	4a13      	ldr	r2, [pc, #76]	@ (800390c <MX_GPIO_Init+0xe8>)
 80038c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	2288      	movs	r2, #136	@ 0x88
 80038c6:	0352      	lsls	r2, r2, #13
 80038c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ca:	187b      	adds	r3, r7, r1
 80038cc:	2200      	movs	r2, #0
 80038ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038d0:	187b      	adds	r3, r7, r1
 80038d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003910 <MX_GPIO_Init+0xec>)
 80038d4:	0019      	movs	r1, r3
 80038d6:	0010      	movs	r0, r2
 80038d8:	f008 ff44 	bl	800c764 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80038dc:	2200      	movs	r2, #0
 80038de:	2100      	movs	r1, #0
 80038e0:	2005      	movs	r0, #5
 80038e2:	f008 fb85 	bl	800bff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80038e6:	2005      	movs	r0, #5
 80038e8:	f008 fb97 	bl	800c01a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80038ec:	2200      	movs	r2, #0
 80038ee:	2100      	movs	r1, #0
 80038f0:	2007      	movs	r0, #7
 80038f2:	f008 fb7d 	bl	800bff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80038f6:	2007      	movs	r0, #7
 80038f8:	f008 fb8f 	bl	800c01a <HAL_NVIC_EnableIRQ>

}
 80038fc:	46c0      	nop			@ (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b00b      	add	sp, #44	@ 0x2c
 8003902:	bd90      	pop	{r4, r7, pc}
 8003904:	40021000 	.word	0x40021000
 8003908:	50000800 	.word	0x50000800
 800390c:	00000431 	.word	0x00000431
 8003910:	50000400 	.word	0x50000400

08003914 <read_task>:
}
#endif

/* Read task */
static void read_task(void)
{
 8003914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003916:	46ce      	mov	lr, r9
 8003918:	4647      	mov	r7, r8
 800391a:	b580      	push	{r7, lr}
 800391c:	b097      	sub	sp, #92	@ 0x5c
 800391e:	af06      	add	r7, sp, #24
  uint32_t Flash_rdata[DATA_SIZE_WORD];
  uint8_t flash_empty;
  displayFloatToInt_t int_data[DATA_SIZE_WORD];
  uint8_t count = 0;
 8003920:	233e      	movs	r3, #62	@ 0x3e
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]

  /* Data labels */
  #ifdef LPS22HH_ENABLE
    printf("press\talt\ttemp\r\n");
 8003928:	4b58      	ldr	r3, [pc, #352]	@ (8003a8c <read_task+0x178>)
 800392a:	0018      	movs	r0, r3
 800392c:	f00d fce6 	bl	80112fc <puts>
  #ifdef MULTI_SENSOR_ENABLE
    printf("vout\taccx\taccy\taccz\r\n");
  #endif

  /* Read 1st Flash data */
  uint32_t Flash_addr_temp = FLASH_BANK2_BASE;
 8003930:	4b57      	ldr	r3, [pc, #348]	@ (8003a90 <read_task+0x17c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	041b      	lsls	r3, r3, #16
 8003936:	0c1b      	lsrs	r3, r3, #16
 8003938:	029b      	lsls	r3, r3, #10
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	2280      	movs	r2, #128	@ 0x80
 800393e:	0512      	lsls	r2, r2, #20
 8003940:	4694      	mov	ip, r2
 8003942:	4463      	add	r3, ip
 8003944:	63bb      	str	r3, [r7, #56]	@ 0x38
  read_flash(Flash_addr_temp, &Flash_rdata[0], DATA_SIZE);
 8003946:	2324      	movs	r3, #36	@ 0x24
 8003948:	18f9      	adds	r1, r7, r3
 800394a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394c:	220c      	movs	r2, #12
 800394e:	0018      	movs	r0, r3
 8003950:	f000 fa9c 	bl	8003e8c <read_flash>

  /* Read Flash data */
  flash_empty = 0;
 8003954:	233f      	movs	r3, #63	@ 0x3f
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
  while ((Flash_addr_temp <= FLASH_BANK2_END-DATA_SIZE+1) && !flash_empty) {
 800395c:	e07b      	b.n	8003a56 <read_task+0x142>
	if (FLOAT_CONVERSION) {
	  for (int i=0; i<DATA_SIZE_WORD; i++) {
 800395e:	2300      	movs	r3, #0
 8003960:	637b      	str	r3, [r7, #52]	@ 0x34
 8003962:	e015      	b.n	8003990 <read_task+0x7c>
        floatToInt(UintToFloat(Flash_rdata[i]), &int_data[i], 6);
 8003964:	2324      	movs	r3, #36	@ 0x24
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800396a:	0092      	lsls	r2, r2, #2
 800396c:	58d3      	ldr	r3, [r2, r3]
 800396e:	0018      	movs	r0, r3
 8003970:	f000 fb3c 	bl	8003fec <UintToFloat>
 8003974:	0039      	movs	r1, r7
 8003976:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003978:	0013      	movs	r3, r2
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	189b      	adds	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	18cb      	adds	r3, r1, r3
 8003982:	2206      	movs	r2, #6
 8003984:	0019      	movs	r1, r3
 8003986:	f000 faad 	bl	8003ee4 <floatToInt>
	  for (int i=0; i<DATA_SIZE_WORD; i++) {
 800398a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398c:	3301      	adds	r3, #1
 800398e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003992:	2b02      	cmp	r3, #2
 8003994:	dde6      	ble.n	8003964 <read_task+0x50>
      }
	}

    /* Print data to console */
	#ifdef LPS22HH_ENABLE
      snprintf(dataOut, MAX_BUF_SIZE, "%d.%06d\t%d.%06d\t%d.%06d\r\n", (int) int_data[0].out_int, (int) int_data[0].out_dec, (int) int_data[1].out_int, (int) int_data[1].out_dec, (int) int_data[2].out_int, (int) int_data[2].out_dec);
 8003996:	003b      	movs	r3, r7
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4699      	mov	r9, r3
 800399c:	003b      	movs	r3, r7
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	001c      	movs	r4, r3
 80039a2:	003b      	movs	r3, r7
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	001d      	movs	r5, r3
 80039a8:	003b      	movs	r3, r7
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	001e      	movs	r6, r3
 80039ae:	003b      	movs	r3, r7
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	469c      	mov	ip, r3
 80039b4:	003b      	movs	r3, r7
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	4698      	mov	r8, r3
 80039ba:	4a36      	ldr	r2, [pc, #216]	@ (8003a94 <read_task+0x180>)
 80039bc:	2380      	movs	r3, #128	@ 0x80
 80039be:	0059      	lsls	r1, r3, #1
 80039c0:	4835      	ldr	r0, [pc, #212]	@ (8003a98 <read_task+0x184>)
 80039c2:	4643      	mov	r3, r8
 80039c4:	9304      	str	r3, [sp, #16]
 80039c6:	4663      	mov	r3, ip
 80039c8:	9303      	str	r3, [sp, #12]
 80039ca:	9602      	str	r6, [sp, #8]
 80039cc:	9501      	str	r5, [sp, #4]
 80039ce:	9400      	str	r4, [sp, #0]
 80039d0:	464b      	mov	r3, r9
 80039d2:	f00d fd63 	bl	801149c <sniprintf>
      /* Convert ADC data to int */
      floatToInt(UintToFloat(Flash_rdata[3]), &int_data[0], 6);
      snprintf(dataOut, MAX_BUF_SIZE, "%d\t%d\t%d\t%d.%06d\r\n", (int) Flash_rdata[0], (int) Flash_rdata[1], (int) Flash_rdata[2], (int) int_data[0].out_int, (int) int_data[0].out_dec);
    #endif

    printf("%s", dataOut);
 80039d6:	4a30      	ldr	r2, [pc, #192]	@ (8003a98 <read_task+0x184>)
 80039d8:	4b30      	ldr	r3, [pc, #192]	@ (8003a9c <read_task+0x188>)
 80039da:	0011      	movs	r1, r2
 80039dc:	0018      	movs	r0, r3
 80039de:	f00d fc27 	bl	8011230 <iprintf>

    /* Increment Flash address */
    Flash_addr_temp += DATA_SIZE;
 80039e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e4:	330c      	adds	r3, #12
 80039e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Check if the next address is not empty (erased Flash only contains 0) */
    if (Flash_addr_temp <= FLASH_BANK2_END-DATA_SIZE+1) {
 80039e8:	4b29      	ldr	r3, [pc, #164]	@ (8003a90 <read_task+0x17c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	041b      	lsls	r3, r3, #16
 80039ee:	0c1b      	lsrs	r3, r3, #16
 80039f0:	2280      	movs	r2, #128	@ 0x80
 80039f2:	0292      	lsls	r2, r2, #10
 80039f4:	4694      	mov	ip, r2
 80039f6:	4463      	add	r3, ip
 80039f8:	029b      	lsls	r3, r3, #10
 80039fa:	3b0c      	subs	r3, #12
 80039fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d829      	bhi.n	8003a56 <read_task+0x142>
      read_flash(Flash_addr_temp, &Flash_rdata[0], DATA_SIZE);
 8003a02:	2324      	movs	r3, #36	@ 0x24
 8003a04:	18f9      	adds	r1, r7, r3
 8003a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a08:	220c      	movs	r2, #12
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f000 fa3e 	bl	8003e8c <read_flash>
      count = 0;
 8003a10:	233e      	movs	r3, #62	@ 0x3e
 8003a12:	18fb      	adds	r3, r7, r3
 8003a14:	2200      	movs	r2, #0
 8003a16:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<DATA_SIZE_WORD; i++) {
 8003a18:	2300      	movs	r3, #0
 8003a1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a1c:	e00f      	b.n	8003a3e <read_task+0x12a>
        if (Flash_rdata[i] == 0) {
 8003a1e:	2324      	movs	r3, #36	@ 0x24
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a24:	0092      	lsls	r2, r2, #2
 8003a26:	58d3      	ldr	r3, [r2, r3]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <read_task+0x124>
          count++;
 8003a2c:	213e      	movs	r1, #62	@ 0x3e
 8003a2e:	187b      	adds	r3, r7, r1
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	187b      	adds	r3, r7, r1
 8003a34:	3201      	adds	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<DATA_SIZE_WORD; i++) {
 8003a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	ddec      	ble.n	8003a1e <read_task+0x10a>
        }
      }
      if (count == DATA_SIZE_WORD) {
 8003a44:	233e      	movs	r3, #62	@ 0x3e
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d103      	bne.n	8003a56 <read_task+0x142>
        flash_empty = 1;
 8003a4e:	233f      	movs	r3, #63	@ 0x3f
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
  while ((Flash_addr_temp <= FLASH_BANK2_END-DATA_SIZE+1) && !flash_empty) {
 8003a56:	4b0e      	ldr	r3, [pc, #56]	@ (8003a90 <read_task+0x17c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	2280      	movs	r2, #128	@ 0x80
 8003a60:	0292      	lsls	r2, r2, #10
 8003a62:	4694      	mov	ip, r2
 8003a64:	4463      	add	r3, ip
 8003a66:	029b      	lsls	r3, r3, #10
 8003a68:	3b0c      	subs	r3, #12
 8003a6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d805      	bhi.n	8003a7c <read_task+0x168>
 8003a70:	233f      	movs	r3, #63	@ 0x3f
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d100      	bne.n	8003a7c <read_task+0x168>
 8003a7a:	e770      	b.n	800395e <read_task+0x4a>
      }
    }
  }
}
 8003a7c:	46c0      	nop			@ (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b011      	add	sp, #68	@ 0x44
 8003a82:	bcc0      	pop	{r6, r7}
 8003a84:	46b9      	mov	r9, r7
 8003a86:	46b0      	mov	r8, r6
 8003a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	0801404c 	.word	0x0801404c
 8003a90:	1ff8007c 	.word	0x1ff8007c
 8003a94:	0801405c 	.word	0x0801405c
 8003a98:	20000314 	.word	0x20000314
 8003a9c:	08014040 	.word	0x08014040

08003aa0 <LPS22HH_Config>:

/* LPS22HH pressure/temperature sensor */
#ifdef LPS22HH_ENABLE
static void LPS22HH_Config(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  LPS22HH_PRESS_SetOutputDataRate(EnvCompObj[IKS01A3_LPS22HH_0], LPS22HH_ODR);
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad0 <LPS22HH_Config+0x30>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad4 <LPS22HH_Config+0x34>)
 8003aaa:	1c11      	adds	r1, r2, #0
 8003aac:	0018      	movs	r0, r3
 8003aae:	f003 fc70 	bl	8007392 <LPS22HH_PRESS_SetOutputDataRate>
  LPS22HH_Set_Power_Mode(EnvCompObj[IKS01A3_LPS22HH_0], LPS22HH_LOW_NOISE_EN);
 8003ab2:	4b07      	ldr	r3, [pc, #28]	@ (8003ad0 <LPS22HH_Config+0x30>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f003 febd 	bl	8007838 <LPS22HH_Set_Power_Mode>
  LPS22HH_Set_Filter_Mode(EnvCompObj[IKS01A3_LPS22HH_0], LPS22HH_LPF_CFG);
 8003abe:	4b04      	ldr	r3, [pc, #16]	@ (8003ad0 <LPS22HH_Config+0x30>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2103      	movs	r1, #3
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f003 fef0 	bl	80078aa <LPS22HH_Set_Filter_Mode>
}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000508 	.word	0x20000508
 8003ad4:	42c80000 	.word	0x42c80000

08003ad8 <LPS22HH_Handler>:

static void LPS22HH_Handler(int verbose)
{
 8003ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ada:	b095      	sub	sp, #84	@ 0x54
 8003adc:	af04      	add	r7, sp, #16
 8003ade:	6078      	str	r0, [r7, #4]
  /* Initialize variables */
  float float_data[DATA_SIZE_WORD];
  displayFloatToInt_t press_value, alt_value, temp_value;

  /* Read sensors */
  if (LPS22HH_PRESS_GetPressure(EnvCompObj[IKS01A3_LPS22HH_0], &float_data[0]) != LPS22HH_ERROR) {
 8003ae0:	4b48      	ldr	r3, [pc, #288]	@ (8003c04 <LPS22HH_Handler+0x12c>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2430      	movs	r4, #48	@ 0x30
 8003ae6:	193a      	adds	r2, r7, r4
 8003ae8:	0011      	movs	r1, r2
 8003aea:	0018      	movs	r0, r3
 8003aec:	f003 fc6e 	bl	80073cc <LPS22HH_PRESS_GetPressure>
 8003af0:	0003      	movs	r3, r0
 8003af2:	3301      	adds	r3, #1
 8003af4:	d017      	beq.n	8003b26 <LPS22HH_Handler+0x4e>
    float_data[1] = pressureToAltitude(float_data[0]);
 8003af6:	193b      	adds	r3, r7, r4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	1c18      	adds	r0, r3, #0
 8003afc:	f000 fa80 	bl	8004000 <pressureToAltitude>
 8003b00:	1c02      	adds	r2, r0, #0
 8003b02:	193b      	adds	r3, r7, r4
 8003b04:	605a      	str	r2, [r3, #4]
    floatToInt(float_data[0], &press_value, 2);
 8003b06:	193b      	adds	r3, r7, r4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2224      	movs	r2, #36	@ 0x24
 8003b0c:	18b9      	adds	r1, r7, r2
 8003b0e:	2202      	movs	r2, #2
 8003b10:	1c18      	adds	r0, r3, #0
 8003b12:	f000 f9e7 	bl	8003ee4 <floatToInt>
    floatToInt(float_data[1], &alt_value, 2);
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2218      	movs	r2, #24
 8003b1c:	18b9      	adds	r1, r7, r2
 8003b1e:	2202      	movs	r2, #2
 8003b20:	1c18      	adds	r0, r3, #0
 8003b22:	f000 f9df 	bl	8003ee4 <floatToInt>
  }
  if (LPS22HH_TEMP_GetTemperature(EnvCompObj[IKS01A3_LPS22HH_0], &float_data[2]) != LPS22HH_ERROR) {
 8003b26:	4b37      	ldr	r3, [pc, #220]	@ (8003c04 <LPS22HH_Handler+0x12c>)
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	2430      	movs	r4, #48	@ 0x30
 8003b2c:	193b      	adds	r3, r7, r4
 8003b2e:	3308      	adds	r3, #8
 8003b30:	0019      	movs	r1, r3
 8003b32:	0010      	movs	r0, r2
 8003b34:	f003 fcf0 	bl	8007518 <LPS22HH_TEMP_GetTemperature>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	d007      	beq.n	8003b4e <LPS22HH_Handler+0x76>
    floatToInt(float_data[2], &temp_value, 2);
 8003b3e:	193b      	adds	r3, r7, r4
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	220c      	movs	r2, #12
 8003b44:	18b9      	adds	r1, r7, r2
 8003b46:	2202      	movs	r2, #2
 8003b48:	1c18      	adds	r0, r3, #0
 8003b4a:	f000 f9cb 	bl	8003ee4 <floatToInt>
  }

  for (int i=0; i<DATA_SIZE_WORD; i++) {
 8003b4e:	2300      	movs	r3, #0
 8003b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b52:	e029      	b.n	8003ba8 <LPS22HH_Handler+0xd0>
    /* Write Flash memory when buffer is full */
    if (data_ind >= BUFFER_SIZE) {
 8003b54:	4b2c      	ldr	r3, [pc, #176]	@ (8003c08 <LPS22HH_Handler+0x130>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b1f      	cmp	r3, #31
 8003b5a:	d90f      	bls.n	8003b7c <LPS22HH_Handler+0xa4>
      write_flash(Flash_addr, &data_buffer[0], BUFFER_SIZE, 0);
 8003b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c0c <LPS22HH_Handler+0x134>)
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	492b      	ldr	r1, [pc, #172]	@ (8003c10 <LPS22HH_Handler+0x138>)
 8003b62:	2300      	movs	r3, #0
 8003b64:	2220      	movs	r2, #32
 8003b66:	f000 f951 	bl	8003e0c <write_flash>
      Flash_addr += FLASH_PAGE_SIZE;
 8003b6a:	4b28      	ldr	r3, [pc, #160]	@ (8003c0c <LPS22HH_Handler+0x134>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3380      	adds	r3, #128	@ 0x80
 8003b70:	001a      	movs	r2, r3
 8003b72:	4b26      	ldr	r3, [pc, #152]	@ (8003c0c <LPS22HH_Handler+0x134>)
 8003b74:	601a      	str	r2, [r3, #0]
      data_ind = 0;
 8003b76:	4b24      	ldr	r3, [pc, #144]	@ (8003c08 <LPS22HH_Handler+0x130>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
    }

    /* Write data buffer */
    data_buffer[data_ind] = FloatToUint(float_data[i]);
 8003b7c:	2330      	movs	r3, #48	@ 0x30
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b82:	0092      	lsls	r2, r2, #2
 8003b84:	58d2      	ldr	r2, [r2, r3]
 8003b86:	4b20      	ldr	r3, [pc, #128]	@ (8003c08 <LPS22HH_Handler+0x130>)
 8003b88:	681c      	ldr	r4, [r3, #0]
 8003b8a:	1c10      	adds	r0, r2, #0
 8003b8c:	f000 fa24 	bl	8003fd8 <FloatToUint>
 8003b90:	0001      	movs	r1, r0
 8003b92:	4b1f      	ldr	r3, [pc, #124]	@ (8003c10 <LPS22HH_Handler+0x138>)
 8003b94:	00a2      	lsls	r2, r4, #2
 8003b96:	50d1      	str	r1, [r2, r3]
    data_ind++;
 8003b98:	4b1b      	ldr	r3, [pc, #108]	@ (8003c08 <LPS22HH_Handler+0x130>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003c08 <LPS22HH_Handler+0x130>)
 8003ba0:	601a      	str	r2, [r3, #0]
  for (int i=0; i<DATA_SIZE_WORD; i++) {
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	ddd2      	ble.n	8003b54 <LPS22HH_Handler+0x7c>
  }

  /* Print data */
  if (verbose) {
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d023      	beq.n	8003bfc <LPS22HH_Handler+0x124>
    sprintf(dataOut, "LPS22HH: Press = %d.%03d [hPa], Alt = %d.%03d [m], Temp = %d.%03d [deg]\r\n", (int) press_value.out_int, (int) press_value.out_dec, (int) alt_value.out_int, (int) alt_value.out_dec, (int) temp_value.out_int, (int) temp_value.out_dec);
 8003bb4:	2224      	movs	r2, #36	@ 0x24
 8003bb6:	18bb      	adds	r3, r7, r2
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	001e      	movs	r6, r3
 8003bbc:	18bb      	adds	r3, r7, r2
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	469c      	mov	ip, r3
 8003bc2:	2118      	movs	r1, #24
 8003bc4:	187b      	adds	r3, r7, r1
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	001a      	movs	r2, r3
 8003bca:	187b      	adds	r3, r7, r1
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	001c      	movs	r4, r3
 8003bd0:	210c      	movs	r1, #12
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	001d      	movs	r5, r3
 8003bd8:	187b      	adds	r3, r7, r1
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	490d      	ldr	r1, [pc, #52]	@ (8003c14 <LPS22HH_Handler+0x13c>)
 8003bde:	480e      	ldr	r0, [pc, #56]	@ (8003c18 <LPS22HH_Handler+0x140>)
 8003be0:	9303      	str	r3, [sp, #12]
 8003be2:	9502      	str	r5, [sp, #8]
 8003be4:	9401      	str	r4, [sp, #4]
 8003be6:	9200      	str	r2, [sp, #0]
 8003be8:	4663      	mov	r3, ip
 8003bea:	0032      	movs	r2, r6
 8003bec:	f00d fc8a 	bl	8011504 <siprintf>
    printf("%s", dataOut);
 8003bf0:	4a09      	ldr	r2, [pc, #36]	@ (8003c18 <LPS22HH_Handler+0x140>)
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8003c1c <LPS22HH_Handler+0x144>)
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f00d fb1a 	bl	8011230 <iprintf>
  }
}
 8003bfc:	46c0      	nop			@ (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b011      	add	sp, #68	@ 0x44
 8003c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c04:	20000508 	.word	0x20000508
 8003c08:	2000041c 	.word	0x2000041c
 8003c0c:	200004a0 	.word	0x200004a0
 8003c10:	20000420 	.word	0x20000420
 8003c14:	08014078 	.word	0x08014078
 8003c18:	20000314 	.word	0x20000314
 8003c1c:	08014040 	.word	0x08014040

08003c20 <print_flash_info>:
}
#endif

/* Print Flash memory info */
void print_flash_info()
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
    printf("**************************************************\n\r");
 8003c24:	4b34      	ldr	r3, [pc, #208]	@ (8003cf8 <print_flash_info+0xd8>)
 8003c26:	0018      	movs	r0, r3
 8003c28:	f00d fb02 	bl	8011230 <iprintf>
    printf("/***** Flash memory info *****/\r\n");
 8003c2c:	4b33      	ldr	r3, [pc, #204]	@ (8003cfc <print_flash_info+0xdc>)
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f00d fb64 	bl	80112fc <puts>
    printf("Flash size: %d [B]\r\n", (int) FLASH_SIZE);
 8003c34:	4b32      	ldr	r3, [pc, #200]	@ (8003d00 <print_flash_info+0xe0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	029b      	lsls	r3, r3, #10
 8003c3e:	001a      	movs	r2, r3
 8003c40:	4b30      	ldr	r3, [pc, #192]	@ (8003d04 <print_flash_info+0xe4>)
 8003c42:	0011      	movs	r1, r2
 8003c44:	0018      	movs	r0, r3
 8003c46:	f00d faf3 	bl	8011230 <iprintf>
    printf("Flash page size: %d [B]\r\n", (int) FLASH_PAGE_SIZE);
 8003c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d08 <print_flash_info+0xe8>)
 8003c4c:	2180      	movs	r1, #128	@ 0x80
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f00d faee 	bl	8011230 <iprintf>
    printf("Flash nb of pages: %d \r\n", (int) round(FLASH_SIZE/FLASH_PAGE_SIZE));
 8003c54:	4b2a      	ldr	r3, [pc, #168]	@ (8003d00 <print_flash_info+0xe0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	041b      	lsls	r3, r3, #16
 8003c5a:	0c1b      	lsrs	r3, r3, #16
 8003c5c:	029b      	lsls	r3, r3, #10
 8003c5e:	09db      	lsrs	r3, r3, #7
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7ff fa1b 	bl	800309c <__aeabi_ui2d>
 8003c66:	0002      	movs	r2, r0
 8003c68:	000b      	movs	r3, r1
 8003c6a:	0010      	movs	r0, r2
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	f7ff f9ab 	bl	8002fc8 <__aeabi_d2iz>
 8003c72:	0002      	movs	r2, r0
 8003c74:	4b25      	ldr	r3, [pc, #148]	@ (8003d0c <print_flash_info+0xec>)
 8003c76:	0011      	movs	r1, r2
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f00d fad9 	bl	8011230 <iprintf>
    printf("Flash bank 1 base address: 0x%X\r\n", (int) FLASH_BASE);
 8003c7e:	2380      	movs	r3, #128	@ 0x80
 8003c80:	051a      	lsls	r2, r3, #20
 8003c82:	4b23      	ldr	r3, [pc, #140]	@ (8003d10 <print_flash_info+0xf0>)
 8003c84:	0011      	movs	r1, r2
 8003c86:	0018      	movs	r0, r3
 8003c88:	f00d fad2 	bl	8011230 <iprintf>
    printf("Flash bank 1 end address: 0x%X\r\n", (int) FLASH_BANK1_END);
 8003c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d00 <print_flash_info+0xe0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	0c1b      	lsrs	r3, r3, #16
 8003c94:	029b      	lsls	r3, r3, #10
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	4a1e      	ldr	r2, [pc, #120]	@ (8003d14 <print_flash_info+0xf4>)
 8003c9a:	4694      	mov	ip, r2
 8003c9c:	4463      	add	r3, ip
 8003c9e:	001a      	movs	r2, r3
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d18 <print_flash_info+0xf8>)
 8003ca2:	0011      	movs	r1, r2
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f00d fac3 	bl	8011230 <iprintf>
    printf("Flash bank 2 base address: 0x%X\r\n", (int) FLASH_BANK2_BASE);
 8003caa:	4b15      	ldr	r3, [pc, #84]	@ (8003d00 <print_flash_info+0xe0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	0c1b      	lsrs	r3, r3, #16
 8003cb2:	029b      	lsls	r3, r3, #10
 8003cb4:	085b      	lsrs	r3, r3, #1
 8003cb6:	2280      	movs	r2, #128	@ 0x80
 8003cb8:	0512      	lsls	r2, r2, #20
 8003cba:	4694      	mov	ip, r2
 8003cbc:	4463      	add	r3, ip
 8003cbe:	001a      	movs	r2, r3
 8003cc0:	4b16      	ldr	r3, [pc, #88]	@ (8003d1c <print_flash_info+0xfc>)
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f00d fab3 	bl	8011230 <iprintf>
    printf("Flash bank 2 end address: 0x%X\r\n", (int) FLASH_BANK2_END);
 8003cca:	4b0d      	ldr	r3, [pc, #52]	@ (8003d00 <print_flash_info+0xe0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	041b      	lsls	r3, r3, #16
 8003cd0:	0c1b      	lsrs	r3, r3, #16
 8003cd2:	2280      	movs	r2, #128	@ 0x80
 8003cd4:	0292      	lsls	r2, r2, #10
 8003cd6:	4694      	mov	ip, r2
 8003cd8:	4463      	add	r3, ip
 8003cda:	029b      	lsls	r3, r3, #10
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	001a      	movs	r2, r3
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8003d20 <print_flash_info+0x100>)
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f00d faa3 	bl	8011230 <iprintf>
    printf("**************************************************\n\r");
 8003cea:	4b03      	ldr	r3, [pc, #12]	@ (8003cf8 <print_flash_info+0xd8>)
 8003cec:	0018      	movs	r0, r3
 8003cee:	f00d fa9f 	bl	8011230 <iprintf>
}
 8003cf2:	46c0      	nop			@ (mov r8, r8)
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	080140c4 	.word	0x080140c4
 8003cfc:	080140fc 	.word	0x080140fc
 8003d00:	1ff8007c 	.word	0x1ff8007c
 8003d04:	08014120 	.word	0x08014120
 8003d08:	08014138 	.word	0x08014138
 8003d0c:	08014154 	.word	0x08014154
 8003d10:	08014170 	.word	0x08014170
 8003d14:	07ffffff 	.word	0x07ffffff
 8003d18:	08014194 	.word	0x08014194
 8003d1c:	080141b8 	.word	0x080141b8
 8003d20:	080141dc 	.word	0x080141dc

08003d24 <erase_flash>:

/* Erase content of Flash memory */
int erase_flash(int verbose)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
    printf("Erasing Flash memory...\r\n");
 8003d2c:	4b31      	ldr	r3, [pc, #196]	@ (8003df4 <erase_flash+0xd0>)
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f00d fae4 	bl	80112fc <puts>

    /* Unlock Flash memory */
    HAL_FLASH_Unlock();
 8003d34:	f008 fb18 	bl	800c368 <HAL_FLASH_Unlock>

    /* Erase Flash memory */
    FLASH_EraseInitTypeDef eraser;
    uint32_t Flash_addr = FLASH_BANK2_BASE;
 8003d38:	4b2f      	ldr	r3, [pc, #188]	@ (8003df8 <erase_flash+0xd4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	0c1b      	lsrs	r3, r3, #16
 8003d40:	029b      	lsls	r3, r3, #10
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	2280      	movs	r2, #128	@ 0x80
 8003d46:	0512      	lsls	r2, r2, #20
 8003d48:	4694      	mov	ip, r2
 8003d4a:	4463      	add	r3, ip
 8003d4c:	61fb      	str	r3, [r7, #28]
    uint32_t page_error = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60bb      	str	r3, [r7, #8]
    int32_t page = 1;
 8003d52:	2301      	movs	r3, #1
 8003d54:	61bb      	str	r3, [r7, #24]

    while (Flash_addr < FLASH_BANK2_END) {
 8003d56:	e033      	b.n	8003dc0 <erase_flash+0x9c>
        eraser.TypeErase = FLASH_TYPEERASE_PAGES;
 8003d58:	210c      	movs	r1, #12
 8003d5a:	187b      	adds	r3, r7, r1
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
        eraser.PageAddress = Flash_addr;
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	605a      	str	r2, [r3, #4]
        eraser.NbPages = 1;
 8003d66:	187b      	adds	r3, r7, r1
 8003d68:	2201      	movs	r2, #1
 8003d6a:	609a      	str	r2, [r3, #8]
        if(HAL_OK != HAL_FLASHEx_Erase(&eraser, &page_error)) {
 8003d6c:	2308      	movs	r3, #8
 8003d6e:	18fa      	adds	r2, r7, r3
 8003d70:	187b      	adds	r3, r7, r1
 8003d72:	0011      	movs	r1, r2
 8003d74:	0018      	movs	r0, r3
 8003d76:	f008 fc6d 	bl	800c654 <HAL_FLASHEx_Erase>
 8003d7a:	1e03      	subs	r3, r0, #0
 8003d7c:	d011      	beq.n	8003da2 <erase_flash+0x7e>
            if (verbose) {printf("Flash erase failed!\r\n");}
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <erase_flash+0x68>
 8003d84:	4b1d      	ldr	r3, [pc, #116]	@ (8003dfc <erase_flash+0xd8>)
 8003d86:	0018      	movs	r0, r3
 8003d88:	f00d fab8 	bl	80112fc <puts>
            printf("Error 0x%X\r\n", (int) page_error);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	001a      	movs	r2, r3
 8003d90:	4b1b      	ldr	r3, [pc, #108]	@ (8003e00 <erase_flash+0xdc>)
 8003d92:	0011      	movs	r1, r2
 8003d94:	0018      	movs	r0, r3
 8003d96:	f00d fa4b 	bl	8011230 <iprintf>
            HAL_FLASH_Lock();
 8003d9a:	f008 fb39 	bl	800c410 <HAL_FLASH_Lock>
            return 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e023      	b.n	8003dea <erase_flash+0xc6>
        }
        if (verbose) {printf("Erased page %d at address: 0x%X\r\n", (int) page, (int) Flash_addr);}
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <erase_flash+0x90>
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	69b9      	ldr	r1, [r7, #24]
 8003dac:	4b15      	ldr	r3, [pc, #84]	@ (8003e04 <erase_flash+0xe0>)
 8003dae:	0018      	movs	r0, r3
 8003db0:	f00d fa3e 	bl	8011230 <iprintf>
        Flash_addr += FLASH_PAGE_SIZE;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	3380      	adds	r3, #128	@ 0x80
 8003db8:	61fb      	str	r3, [r7, #28]
        page++;
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	61bb      	str	r3, [r7, #24]
    while (Flash_addr < FLASH_BANK2_END) {
 8003dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8003df8 <erase_flash+0xd4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	041b      	lsls	r3, r3, #16
 8003dc6:	0c1b      	lsrs	r3, r3, #16
 8003dc8:	2280      	movs	r2, #128	@ 0x80
 8003dca:	0292      	lsls	r2, r2, #10
 8003dcc:	4694      	mov	ip, r2
 8003dce:	4463      	add	r3, ip
 8003dd0:	029b      	lsls	r3, r3, #10
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d3be      	bcc.n	8003d58 <erase_flash+0x34>
    }

    if (verbose) {printf("Flash erase succesful!\r\n");}
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <erase_flash+0xc4>
 8003de0:	4b09      	ldr	r3, [pc, #36]	@ (8003e08 <erase_flash+0xe4>)
 8003de2:	0018      	movs	r0, r3
 8003de4:	f00d fa8a 	bl	80112fc <puts>
    return 1;
 8003de8:	2301      	movs	r3, #1
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b008      	add	sp, #32
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			@ (mov r8, r8)
 8003df4:	08014200 	.word	0x08014200
 8003df8:	1ff8007c 	.word	0x1ff8007c
 8003dfc:	0801421c 	.word	0x0801421c
 8003e00:	08014234 	.word	0x08014234
 8003e04:	08014244 	.word	0x08014244
 8003e08:	08014268 	.word	0x08014268

08003e0c <write_flash>:

/* Write Flash memory */
int write_flash(uint32_t Flash_addr, uint32_t* Flash_wdata, int32_t n_words, int verbose)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
    /* Unlock Flash memory */
    HAL_FLASH_Unlock();
 8003e1a:	f008 faa5 	bl	800c368 <HAL_FLASH_Unlock>

    /* Write Flash memory */
    for (int i=0; i<n_words; i++) {
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	e01c      	b.n	8003e5e <write_flash+0x52>
        if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_addr, Flash_wdata[i])) {
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	18d3      	adds	r3, r2, r3
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	0019      	movs	r1, r3
 8003e32:	2002      	movs	r0, #2
 8003e34:	f008 fa5c 	bl	800c2f0 <HAL_FLASH_Program>
 8003e38:	1e03      	subs	r3, r0, #0
 8003e3a:	d00a      	beq.n	8003e52 <write_flash+0x46>
            if (verbose) {printf("Flash write failed!\r\n");}
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <write_flash+0x3e>
 8003e42:	4b10      	ldr	r3, [pc, #64]	@ (8003e84 <write_flash+0x78>)
 8003e44:	0018      	movs	r0, r3
 8003e46:	f00d fa59 	bl	80112fc <puts>
            HAL_FLASH_Lock();
 8003e4a:	f008 fae1 	bl	800c410 <HAL_FLASH_Lock>
            return 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e013      	b.n	8003e7a <write_flash+0x6e>
        }
        Flash_addr += 4;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3304      	adds	r3, #4
 8003e56:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<n_words; i++) {
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	dbde      	blt.n	8003e24 <write_flash+0x18>
    }
    if (verbose) {printf("Flash write successful!\r\n");}
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <write_flash+0x68>
 8003e6c:	4b06      	ldr	r3, [pc, #24]	@ (8003e88 <write_flash+0x7c>)
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f00d fa44 	bl	80112fc <puts>

    HAL_FLASH_Lock();
 8003e74:	f008 facc 	bl	800c410 <HAL_FLASH_Lock>

    return 1;
 8003e78:	2301      	movs	r3, #1
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b006      	add	sp, #24
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	08014280 	.word	0x08014280
 8003e88:	08014298 	.word	0x08014298

08003e8c <read_flash>:

/* Read Flash memory */
void read_flash(uint32_t Flash_addr, uint32_t* Flash_rdata, uint32_t n_bytes)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
    memcpy(Flash_rdata, (uint32_t*) Flash_addr, n_bytes);
 8003e98:	68f9      	ldr	r1, [r7, #12]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f00d fcbf 	bl	8011822 <memcpy>
}
 8003ea4:	46c0      	nop			@ (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b004      	add	sp, #16
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	1dfb      	adds	r3, r7, #7
 8003eb6:	701a      	strb	r2, [r3, #0]
  PrevButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f007 fc05 	bl	800b6c8 <BSP_PB_GetState>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	425a      	negs	r2, r3
 8003ec2:	4153      	adcs	r3, r2
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <BSP_PB_Callback+0x30>)
 8003eca:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim3);
 8003ecc:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <BSP_PB_Callback+0x34>)
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f00a fdb6 	bl	800ea40 <HAL_TIM_Base_Start_IT>
}
 8003ed4:	46c0      	nop			@ (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b002      	add	sp, #8
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	200004a8 	.word	0x200004a8
 8003ee0:	200002d4 	.word	0x200002d4

08003ee4 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8003ee4:	b5b0      	push	{r4, r5, r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  if(in >= 0.0f)
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7fc fa16 	bl	8000324 <__aeabi_fcmpge>
 8003ef8:	1e03      	subs	r3, r0, #0
 8003efa:	d003      	beq.n	8003f04 <floatToInt+0x20>
  {
    out_value->sign = 0;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2200      	movs	r2, #0
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e007      	b.n	8003f14 <floatToInt+0x30>
  }else
  {
    out_value->sign = 1;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2201      	movs	r2, #1
 8003f08:	701a      	strb	r2, [r3, #0]
    in = -in;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2280      	movs	r2, #128	@ 0x80
 8003f0e:	0612      	lsls	r2, r2, #24
 8003f10:	4053      	eors	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7ff f8e5 	bl	80030e4 <__aeabi_f2d>
 8003f1a:	0004      	movs	r4, r0
 8003f1c:	000d      	movs	r5, r1
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff f88e 	bl	8003040 <__aeabi_i2d>
 8003f24:	0002      	movs	r2, r0
 8003f26:	000b      	movs	r3, r1
 8003f28:	2000      	movs	r0, #0
 8003f2a:	4929      	ldr	r1, [pc, #164]	@ (8003fd0 <floatToInt+0xec>)
 8003f2c:	f00f f8e2 	bl	80130f4 <pow>
 8003f30:	0002      	movs	r2, r0
 8003f32:	000b      	movs	r3, r1
 8003f34:	2000      	movs	r0, #0
 8003f36:	4927      	ldr	r1, [pc, #156]	@ (8003fd4 <floatToInt+0xf0>)
 8003f38:	f7fd fd7c 	bl	8001a34 <__aeabi_ddiv>
 8003f3c:	0002      	movs	r2, r0
 8003f3e:	000b      	movs	r3, r1
 8003f40:	0020      	movs	r0, r4
 8003f42:	0029      	movs	r1, r5
 8003f44:	f7fd fa12 	bl	800136c <__aeabi_dadd>
 8003f48:	0002      	movs	r2, r0
 8003f4a:	000b      	movs	r3, r1
 8003f4c:	0010      	movs	r0, r2
 8003f4e:	0019      	movs	r1, r3
 8003f50:	f7ff f910 	bl	8003174 <__aeabi_d2f>
 8003f54:	1c03      	adds	r3, r0, #0
 8003f56:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7fd f959 	bl	8001210 <__aeabi_f2iz>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	001a      	movs	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f7fd f9bc 	bl	80012e8 <__aeabi_ui2f>
 8003f70:	1c03      	adds	r3, r0, #0
 8003f72:	1c19      	adds	r1, r3, #0
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7fc ffa7 	bl	8000ec8 <__aeabi_fsub>
 8003f7a:	1c03      	adds	r3, r0, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f7ff f8b0 	bl	80030e4 <__aeabi_f2d>
 8003f84:	0004      	movs	r4, r0
 8003f86:	000d      	movs	r5, r1
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff f859 	bl	8003040 <__aeabi_i2d>
 8003f8e:	0002      	movs	r2, r0
 8003f90:	000b      	movs	r3, r1
 8003f92:	2000      	movs	r0, #0
 8003f94:	490e      	ldr	r1, [pc, #56]	@ (8003fd0 <floatToInt+0xec>)
 8003f96:	f00f f8ad 	bl	80130f4 <pow>
 8003f9a:	0002      	movs	r2, r0
 8003f9c:	000b      	movs	r3, r1
 8003f9e:	0020      	movs	r0, r4
 8003fa0:	0029      	movs	r1, r5
 8003fa2:	f7fe f98b 	bl	80022bc <__aeabi_dmul>
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	000b      	movs	r3, r1
 8003faa:	0010      	movs	r0, r2
 8003fac:	0019      	movs	r1, r3
 8003fae:	f00f f917 	bl	80131e0 <trunc>
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	000b      	movs	r3, r1
 8003fb6:	0010      	movs	r0, r2
 8003fb8:	0019      	movs	r1, r3
 8003fba:	f7ff f805 	bl	8002fc8 <__aeabi_d2iz>
 8003fbe:	0003      	movs	r3, r0
 8003fc0:	001a      	movs	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	609a      	str	r2, [r3, #8]
}
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b004      	add	sp, #16
 8003fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	40240000 	.word	0x40240000
 8003fd4:	3fe00000 	.word	0x3fe00000

08003fd8 <FloatToUint>:

uint32_t FloatToUint(float n)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
   return (uint32_t)(*(uint32_t*)&n);
 8003fe0:	1d3b      	adds	r3, r7, #4
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b002      	add	sp, #8
 8003fea:	bd80      	pop	{r7, pc}

08003fec <UintToFloat>:

float UintToFloat(uint32_t n)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
   return (float)(*(float*)&n);
 8003ff4:	1d3b      	adds	r3, r7, #4
 8003ff6:	681b      	ldr	r3, [r3, #0]
}
 8003ff8:	1c18      	adds	r0, r3, #0
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b002      	add	sp, #8
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <pressureToAltitude>:

/* Pressure to altitude conversion */
float pressureToAltitude(float pressure)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
    return 44330.77 * (1-pow(pressure/1013.26, 0.1902632));
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff f86b 	bl	80030e4 <__aeabi_f2d>
 800400e:	4a12      	ldr	r2, [pc, #72]	@ (8004058 <pressureToAltitude+0x58>)
 8004010:	4b12      	ldr	r3, [pc, #72]	@ (800405c <pressureToAltitude+0x5c>)
 8004012:	f7fd fd0f 	bl	8001a34 <__aeabi_ddiv>
 8004016:	0002      	movs	r2, r0
 8004018:	000b      	movs	r3, r1
 800401a:	0010      	movs	r0, r2
 800401c:	0019      	movs	r1, r3
 800401e:	4a10      	ldr	r2, [pc, #64]	@ (8004060 <pressureToAltitude+0x60>)
 8004020:	4b10      	ldr	r3, [pc, #64]	@ (8004064 <pressureToAltitude+0x64>)
 8004022:	f00f f867 	bl	80130f4 <pow>
 8004026:	0002      	movs	r2, r0
 8004028:	000b      	movs	r3, r1
 800402a:	2000      	movs	r0, #0
 800402c:	490e      	ldr	r1, [pc, #56]	@ (8004068 <pressureToAltitude+0x68>)
 800402e:	f7fe fc0d 	bl	800284c <__aeabi_dsub>
 8004032:	0002      	movs	r2, r0
 8004034:	000b      	movs	r3, r1
 8004036:	0010      	movs	r0, r2
 8004038:	0019      	movs	r1, r3
 800403a:	4a0c      	ldr	r2, [pc, #48]	@ (800406c <pressureToAltitude+0x6c>)
 800403c:	4b0c      	ldr	r3, [pc, #48]	@ (8004070 <pressureToAltitude+0x70>)
 800403e:	f7fe f93d 	bl	80022bc <__aeabi_dmul>
 8004042:	0002      	movs	r2, r0
 8004044:	000b      	movs	r3, r1
 8004046:	0010      	movs	r0, r2
 8004048:	0019      	movs	r1, r3
 800404a:	f7ff f893 	bl	8003174 <__aeabi_d2f>
 800404e:	1c03      	adds	r3, r0, #0
}
 8004050:	1c18      	adds	r0, r3, #0
 8004052:	46bd      	mov	sp, r7
 8004054:	b002      	add	sp, #8
 8004056:	bd80      	pop	{r7, pc}
 8004058:	7ae147ae 	.word	0x7ae147ae
 800405c:	408faa14 	.word	0x408faa14
 8004060:	66d0ef71 	.word	0x66d0ef71
 8004064:	3fc85a8b 	.word	0x3fc85a8b
 8004068:	3ff00000 	.word	0x3ff00000
 800406c:	a3d70a3d 	.word	0xa3d70a3d
 8004070:	40e5a558 	.word	0x40e5a558

08004074 <_read>:

/* Read function for scanf */
int _read(int file, char *result, size_t len)
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  int retcode = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]

  /* Read data from USART */
  if (len != 0) {
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01d      	beq.n	80040c6 <_read+0x52>
    status = HAL_UART_Receive_IT(&huart2, (uint8_t *) result, len);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	b29a      	uxth	r2, r3
 800408e:	2313      	movs	r3, #19
 8004090:	18fc      	adds	r4, r7, r3
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	4b16      	ldr	r3, [pc, #88]	@ (80040f0 <_read+0x7c>)
 8004096:	0018      	movs	r0, r3
 8004098:	f00b f9f0 	bl	800f47c <HAL_UART_Receive_IT>
 800409c:	0003      	movs	r3, r0
 800409e:	7023      	strb	r3, [r4, #0]
    while(HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){};
 80040a0:	46c0      	nop			@ (mov r8, r8)
 80040a2:	4b13      	ldr	r3, [pc, #76]	@ (80040f0 <_read+0x7c>)
 80040a4:	0018      	movs	r0, r3
 80040a6:	f00b fd4c 	bl	800fb42 <HAL_UART_GetState>
 80040aa:	0003      	movs	r3, r0
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d1f8      	bne.n	80040a2 <_read+0x2e>
    if (status == HAL_OK) {
 80040b0:	2313      	movs	r3, #19
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <_read+0x4c>
        retcode = len;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e002      	b.n	80040c6 <_read+0x52>
      } else {
        retcode = -1;
 80040c0:	2301      	movs	r3, #1
 80040c2:	425b      	negs	r3, r3
 80040c4:	617b      	str	r3, [r7, #20]
      }
  }

  /* Write back data to USART */
  HAL_UART_Transmit_IT(&huart2, (uint8_t *) result, len);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	4b08      	ldr	r3, [pc, #32]	@ (80040f0 <_read+0x7c>)
 80040ce:	0018      	movs	r0, r3
 80040d0:	f00b f964 	bl	800f39c <HAL_UART_Transmit_IT>
  while(HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY);
 80040d4:	46c0      	nop			@ (mov r8, r8)
 80040d6:	4b06      	ldr	r3, [pc, #24]	@ (80040f0 <_read+0x7c>)
 80040d8:	0018      	movs	r0, r3
 80040da:	f00b fd32 	bl	800fb42 <HAL_UART_GetState>
 80040de:	0003      	movs	r3, r0
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d1f8      	bne.n	80040d6 <_read+0x62>

  return retcode;
 80040e4:	697b      	ldr	r3, [r7, #20]
}
 80040e6:	0018      	movs	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b007      	add	sp, #28
 80040ec:	bd90      	pop	{r4, r7, pc}
 80040ee:	46c0      	nop			@ (mov r8, r8)
 80040f0:	200006b0 	.word	0x200006b0

080040f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80040f8:	46c0      	nop			@ (mov r8, r8)
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004104:	4b07      	ldr	r3, [pc, #28]	@ (8004124 <HAL_MspInit+0x24>)
 8004106:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004108:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <HAL_MspInit+0x24>)
 800410a:	2101      	movs	r1, #1
 800410c:	430a      	orrs	r2, r1
 800410e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004110:	4b04      	ldr	r3, [pc, #16]	@ (8004124 <HAL_MspInit+0x24>)
 8004112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004114:	4b03      	ldr	r3, [pc, #12]	@ (8004124 <HAL_MspInit+0x24>)
 8004116:	2180      	movs	r1, #128	@ 0x80
 8004118:	0549      	lsls	r1, r1, #21
 800411a:	430a      	orrs	r2, r1
 800411c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800411e:	46c0      	nop			@ (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000

08004128 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004128:	b590      	push	{r4, r7, lr}
 800412a:	b08b      	sub	sp, #44	@ 0x2c
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004130:	2414      	movs	r4, #20
 8004132:	193b      	adds	r3, r7, r4
 8004134:	0018      	movs	r0, r3
 8004136:	2314      	movs	r3, #20
 8004138:	001a      	movs	r2, r3
 800413a:	2100      	movs	r1, #0
 800413c:	f00d faee 	bl	801171c <memset>
  if(hadc->Instance==ADC1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a22      	ldr	r2, [pc, #136]	@ (80041d0 <HAL_ADC_MspInit+0xa8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d13e      	bne.n	80041c8 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800414a:	4b22      	ldr	r3, [pc, #136]	@ (80041d4 <HAL_ADC_MspInit+0xac>)
 800414c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800414e:	4b21      	ldr	r3, [pc, #132]	@ (80041d4 <HAL_ADC_MspInit+0xac>)
 8004150:	2180      	movs	r1, #128	@ 0x80
 8004152:	0089      	lsls	r1, r1, #2
 8004154:	430a      	orrs	r2, r1
 8004156:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004158:	4b1e      	ldr	r3, [pc, #120]	@ (80041d4 <HAL_ADC_MspInit+0xac>)
 800415a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800415c:	4b1d      	ldr	r3, [pc, #116]	@ (80041d4 <HAL_ADC_MspInit+0xac>)
 800415e:	2104      	movs	r1, #4
 8004160:	430a      	orrs	r2, r1
 8004162:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004164:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <HAL_ADC_MspInit+0xac>)
 8004166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004168:	2204      	movs	r2, #4
 800416a:	4013      	ands	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004170:	4b18      	ldr	r3, [pc, #96]	@ (80041d4 <HAL_ADC_MspInit+0xac>)
 8004172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004174:	4b17      	ldr	r3, [pc, #92]	@ (80041d4 <HAL_ADC_MspInit+0xac>)
 8004176:	2101      	movs	r1, #1
 8004178:	430a      	orrs	r2, r1
 800417a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800417c:	4b15      	ldr	r3, [pc, #84]	@ (80041d4 <HAL_ADC_MspInit+0xac>)
 800417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004180:	2201      	movs	r2, #1
 8004182:	4013      	ands	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC0     ------> ADC_IN10
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004188:	193b      	adds	r3, r7, r4
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800418e:	193b      	adds	r3, r7, r4
 8004190:	2203      	movs	r2, #3
 8004192:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004194:	193b      	adds	r3, r7, r4
 8004196:	2200      	movs	r2, #0
 8004198:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800419a:	193b      	adds	r3, r7, r4
 800419c:	4a0e      	ldr	r2, [pc, #56]	@ (80041d8 <HAL_ADC_MspInit+0xb0>)
 800419e:	0019      	movs	r1, r3
 80041a0:	0010      	movs	r0, r2
 80041a2:	f008 fadf 	bl	800c764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80041a6:	0021      	movs	r1, r4
 80041a8:	187b      	adds	r3, r7, r1
 80041aa:	2203      	movs	r2, #3
 80041ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041ae:	187b      	adds	r3, r7, r1
 80041b0:	2203      	movs	r2, #3
 80041b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b4:	187b      	adds	r3, r7, r1
 80041b6:	2200      	movs	r2, #0
 80041b8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ba:	187a      	adds	r2, r7, r1
 80041bc:	23a0      	movs	r3, #160	@ 0xa0
 80041be:	05db      	lsls	r3, r3, #23
 80041c0:	0011      	movs	r1, r2
 80041c2:	0018      	movs	r0, r3
 80041c4:	f008 face 	bl	800c764 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80041c8:	46c0      	nop			@ (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b00b      	add	sp, #44	@ 0x2c
 80041ce:	bd90      	pop	{r4, r7, pc}
 80041d0:	40012400 	.word	0x40012400
 80041d4:	40021000 	.word	0x40021000
 80041d8:	50000800 	.word	0x50000800

080041dc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80041dc:	b590      	push	{r4, r7, lr}
 80041de:	b089      	sub	sp, #36	@ 0x24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e4:	240c      	movs	r4, #12
 80041e6:	193b      	adds	r3, r7, r4
 80041e8:	0018      	movs	r0, r3
 80041ea:	2314      	movs	r3, #20
 80041ec:	001a      	movs	r2, r3
 80041ee:	2100      	movs	r1, #0
 80041f0:	f00d fa94 	bl	801171c <memset>
  if(hdac->Instance==DAC)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a14      	ldr	r2, [pc, #80]	@ (800424c <HAL_DAC_MspInit+0x70>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d122      	bne.n	8004244 <HAL_DAC_MspInit+0x68>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80041fe:	4b14      	ldr	r3, [pc, #80]	@ (8004250 <HAL_DAC_MspInit+0x74>)
 8004200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004202:	4b13      	ldr	r3, [pc, #76]	@ (8004250 <HAL_DAC_MspInit+0x74>)
 8004204:	2180      	movs	r1, #128	@ 0x80
 8004206:	0589      	lsls	r1, r1, #22
 8004208:	430a      	orrs	r2, r1
 800420a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800420c:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <HAL_DAC_MspInit+0x74>)
 800420e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004210:	4b0f      	ldr	r3, [pc, #60]	@ (8004250 <HAL_DAC_MspInit+0x74>)
 8004212:	2101      	movs	r1, #1
 8004214:	430a      	orrs	r2, r1
 8004216:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004218:	4b0d      	ldr	r3, [pc, #52]	@ (8004250 <HAL_DAC_MspInit+0x74>)
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	2201      	movs	r2, #1
 800421e:	4013      	ands	r3, r2
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004224:	193b      	adds	r3, r7, r4
 8004226:	2210      	movs	r2, #16
 8004228:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800422a:	193b      	adds	r3, r7, r4
 800422c:	2203      	movs	r2, #3
 800422e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004230:	193b      	adds	r3, r7, r4
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004236:	193a      	adds	r2, r7, r4
 8004238:	23a0      	movs	r3, #160	@ 0xa0
 800423a:	05db      	lsls	r3, r3, #23
 800423c:	0011      	movs	r1, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f008 fa90 	bl	800c764 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8004244:	46c0      	nop			@ (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b009      	add	sp, #36	@ 0x24
 800424a:	bd90      	pop	{r4, r7, pc}
 800424c:	40007400 	.word	0x40007400
 8004250:	40021000 	.word	0x40021000

08004254 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	2380      	movs	r3, #128	@ 0x80
 8004262:	05db      	lsls	r3, r3, #23
 8004264:	429a      	cmp	r2, r3
 8004266:	d106      	bne.n	8004276 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004268:	4b0a      	ldr	r3, [pc, #40]	@ (8004294 <HAL_TIM_Base_MspInit+0x40>)
 800426a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800426c:	4b09      	ldr	r3, [pc, #36]	@ (8004294 <HAL_TIM_Base_MspInit+0x40>)
 800426e:	2101      	movs	r1, #1
 8004270:	430a      	orrs	r2, r1
 8004272:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004274:	e00a      	b.n	800428c <HAL_TIM_Base_MspInit+0x38>
  else if(htim_base->Instance==TIM3)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a07      	ldr	r2, [pc, #28]	@ (8004298 <HAL_TIM_Base_MspInit+0x44>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d105      	bne.n	800428c <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004280:	4b04      	ldr	r3, [pc, #16]	@ (8004294 <HAL_TIM_Base_MspInit+0x40>)
 8004282:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004284:	4b03      	ldr	r3, [pc, #12]	@ (8004294 <HAL_TIM_Base_MspInit+0x40>)
 8004286:	2102      	movs	r1, #2
 8004288:	430a      	orrs	r2, r1
 800428a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800428c:	46c0      	nop			@ (mov r8, r8)
 800428e:	46bd      	mov	sp, r7
 8004290:	b002      	add	sp, #8
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000
 8004298:	40000400 	.word	0x40000400

0800429c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042a0:	46c0      	nop			@ (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	e7fd      	b.n	80042aa <HardFault_Handler+0x4>

080042ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042bc:	46c0      	nop			@ (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042c6:	f007 fb97 	bl	800b9f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042ca:	46c0      	nop			@ (mov r8, r8)
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80042d4:	2001      	movs	r0, #1
 80042d6:	f008 fcdf 	bl	800cc98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80042da:	2002      	movs	r0, #2
 80042dc:	f008 fcdc 	bl	800cc98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80042e0:	46c0      	nop			@ (mov r8, r8)
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80042ec:	2010      	movs	r0, #16
 80042ee:	f008 fcd3 	bl	800cc98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80042f2:	2020      	movs	r0, #32
 80042f4:	f008 fcd0 	bl	800cc98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80042f8:	2380      	movs	r3, #128	@ 0x80
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	0018      	movs	r0, r3
 80042fe:	f008 fccb 	bl	800cc98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8004302:	4b03      	ldr	r3, [pc, #12]	@ (8004310 <EXTI4_15_IRQHandler+0x28>)
 8004304:	0018      	movs	r0, r3
 8004306:	f007 ffcf 	bl	800c2a8 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000184 	.word	0x20000184

08004314 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004318:	4b04      	ldr	r3, [pc, #16]	@ (800432c <TIM2_IRQHandler+0x18>)
 800431a:	0018      	movs	r0, r3
 800431c:	f00a fc08 	bl	800eb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  TIM2_IRQ_FLAG = 1;
 8004320:	4b03      	ldr	r3, [pc, #12]	@ (8004330 <TIM2_IRQHandler+0x1c>)
 8004322:	2201      	movs	r2, #1
 8004324:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20000294 	.word	0x20000294
 8004330:	200004a4 	.word	0x200004a4

08004334 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004338:	4b0e      	ldr	r3, [pc, #56]	@ (8004374 <TIM3_IRQHandler+0x40>)
 800433a:	0018      	movs	r0, r3
 800433c:	f00a fbf8 	bl	800eb30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim3);
 8004340:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <TIM3_IRQHandler+0x40>)
 8004342:	0018      	movs	r0, r3
 8004344:	f00a fbce 	bl	800eae4 <HAL_TIM_Base_Stop_IT>
  CurrButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8004348:	2000      	movs	r0, #0
 800434a:	f007 f9bd 	bl	800b6c8 <BSP_PB_GetState>
 800434e:	0003      	movs	r3, r0
 8004350:	425a      	negs	r2, r3
 8004352:	4153      	adcs	r3, r2
 8004354:	b2db      	uxtb	r3, r3
 8004356:	001a      	movs	r2, r3
 8004358:	4b07      	ldr	r3, [pc, #28]	@ (8004378 <TIM3_IRQHandler+0x44>)
 800435a:	701a      	strb	r2, [r3, #0]
  if (PrevButtonState == CurrButtonState) {
 800435c:	4b07      	ldr	r3, [pc, #28]	@ (800437c <TIM3_IRQHandler+0x48>)
 800435e:	781a      	ldrb	r2, [r3, #0]
 8004360:	4b05      	ldr	r3, [pc, #20]	@ (8004378 <TIM3_IRQHandler+0x44>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d102      	bne.n	800436e <TIM3_IRQHandler+0x3a>
    ButtonPressed = 1;
 8004368:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <TIM3_IRQHandler+0x4c>)
 800436a:	2201      	movs	r2, #1
 800436c:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	200002d4 	.word	0x200002d4
 8004378:	200004a9 	.word	0x200004a9
 800437c:	200004a8 	.word	0x200004a8
 8004380:	200004aa 	.word	0x200004aa

08004384 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004388:	4b03      	ldr	r3, [pc, #12]	@ (8004398 <USART2_IRQHandler+0x14>)
 800438a:	0018      	movs	r0, r3
 800438c:	f00b f8d4 	bl	800f538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004390:	46c0      	nop			@ (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	46c0      	nop			@ (mov r8, r8)
 8004398:	200006b0 	.word	0x200006b0

0800439c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80043a6:	4b19      	ldr	r3, [pc, #100]	@ (800440c <BSP_I2C1_Init+0x70>)
 80043a8:	4a19      	ldr	r2, [pc, #100]	@ (8004410 <BSP_I2C1_Init+0x74>)
 80043aa:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80043ac:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <BSP_I2C1_Init+0x78>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	1c59      	adds	r1, r3, #1
 80043b2:	4a18      	ldr	r2, [pc, #96]	@ (8004414 <BSP_I2C1_Init+0x78>)
 80043b4:	6011      	str	r1, [r2, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d123      	bne.n	8004402 <BSP_I2C1_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80043ba:	4b14      	ldr	r3, [pc, #80]	@ (800440c <BSP_I2C1_Init+0x70>)
 80043bc:	0018      	movs	r0, r3
 80043be:	f008 ffc9 	bl	800d354 <HAL_I2C_GetState>
 80043c2:	1e03      	subs	r3, r0, #0
 80043c4:	d11d      	bne.n	8004402 <BSP_I2C1_Init+0x66>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80043c6:	4b11      	ldr	r3, [pc, #68]	@ (800440c <BSP_I2C1_Init+0x70>)
 80043c8:	0018      	movs	r0, r3
 80043ca:	f000 f91b 	bl	8004604 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d116      	bne.n	8004402 <BSP_I2C1_Init+0x66>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80043d4:	4b0d      	ldr	r3, [pc, #52]	@ (800440c <BSP_I2C1_Init+0x70>)
 80043d6:	0018      	movs	r0, r3
 80043d8:	f000 f8c6 	bl	8004568 <MX_I2C1_Init>
 80043dc:	1e03      	subs	r3, r0, #0
 80043de:	d003      	beq.n	80043e8 <BSP_I2C1_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80043e0:	2308      	movs	r3, #8
 80043e2:	425b      	negs	r3, r3
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	e00c      	b.n	8004402 <BSP_I2C1_Init+0x66>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80043e8:	4b08      	ldr	r3, [pc, #32]	@ (800440c <BSP_I2C1_Init+0x70>)
 80043ea:	2100      	movs	r1, #0
 80043ec:	0018      	movs	r0, r3
 80043ee:	f009 fab9 	bl	800d964 <HAL_I2CEx_ConfigAnalogFilter>
 80043f2:	1e03      	subs	r3, r0, #0
 80043f4:	d003      	beq.n	80043fe <BSP_I2C1_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80043f6:	2308      	movs	r3, #8
 80043f8:	425b      	negs	r3, r3
 80043fa:	607b      	str	r3, [r7, #4]
 80043fc:	e001      	b.n	8004402 <BSP_I2C1_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80043fe:	2300      	movs	r3, #0
 8004400:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8004402:	687b      	ldr	r3, [r7, #4]
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b002      	add	sp, #8
 800440a:	bd80      	pop	{r7, pc}
 800440c:	200004ac 	.word	0x200004ac
 8004410:	40005400 	.word	0x40005400
 8004414:	20000500 	.word	0x20000500

08004418 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8004422:	4b0f      	ldr	r3, [pc, #60]	@ (8004460 <BSP_I2C1_DeInit+0x48>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d015      	beq.n	8004456 <BSP_I2C1_DeInit+0x3e>
  {
    if (--I2C1InitCounter == 0)
 800442a:	4b0d      	ldr	r3, [pc, #52]	@ (8004460 <BSP_I2C1_DeInit+0x48>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	1e5a      	subs	r2, r3, #1
 8004430:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <BSP_I2C1_DeInit+0x48>)
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	4b0a      	ldr	r3, [pc, #40]	@ (8004460 <BSP_I2C1_DeInit+0x48>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10c      	bne.n	8004456 <BSP_I2C1_DeInit+0x3e>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800443c:	4b09      	ldr	r3, [pc, #36]	@ (8004464 <BSP_I2C1_DeInit+0x4c>)
 800443e:	0018      	movs	r0, r3
 8004440:	f000 f92e 	bl	80046a0 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8004444:	4b07      	ldr	r3, [pc, #28]	@ (8004464 <BSP_I2C1_DeInit+0x4c>)
 8004446:	0018      	movs	r0, r3
 8004448:	f008 fce2 	bl	800ce10 <HAL_I2C_DeInit>
 800444c:	1e03      	subs	r3, r0, #0
 800444e:	d002      	beq.n	8004456 <BSP_I2C1_DeInit+0x3e>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8004450:	2308      	movs	r3, #8
 8004452:	425b      	negs	r3, r3
 8004454:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8004456:	687b      	ldr	r3, [r7, #4]
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b002      	add	sp, #8
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000500 	.word	0x20000500
 8004464:	200004ac 	.word	0x200004ac

08004468 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004468:	b5b0      	push	{r4, r5, r7, lr}
 800446a:	b08a      	sub	sp, #40	@ 0x28
 800446c:	af04      	add	r7, sp, #16
 800446e:	0004      	movs	r4, r0
 8004470:	0008      	movs	r0, r1
 8004472:	60ba      	str	r2, [r7, #8]
 8004474:	0019      	movs	r1, r3
 8004476:	250e      	movs	r5, #14
 8004478:	197b      	adds	r3, r7, r5
 800447a:	1c22      	adds	r2, r4, #0
 800447c:	801a      	strh	r2, [r3, #0]
 800447e:	240c      	movs	r4, #12
 8004480:	193b      	adds	r3, r7, r4
 8004482:	1c02      	adds	r2, r0, #0
 8004484:	801a      	strh	r2, [r3, #0]
 8004486:	1dbb      	adds	r3, r7, #6
 8004488:	1c0a      	adds	r2, r1, #0
 800448a:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004490:	193b      	adds	r3, r7, r4
 8004492:	881a      	ldrh	r2, [r3, #0]
 8004494:	197b      	adds	r3, r7, r5
 8004496:	8819      	ldrh	r1, [r3, #0]
 8004498:	4810      	ldr	r0, [pc, #64]	@ (80044dc <BSP_I2C1_WriteReg+0x74>)
 800449a:	2380      	movs	r3, #128	@ 0x80
 800449c:	015b      	lsls	r3, r3, #5
 800449e:	9302      	str	r3, [sp, #8]
 80044a0:	1dbb      	adds	r3, r7, #6
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	2301      	movs	r3, #1
 80044ac:	f008 fcf0 	bl	800ce90 <HAL_I2C_Mem_Write>
 80044b0:	1e03      	subs	r3, r0, #0
 80044b2:	d00d      	beq.n	80044d0 <BSP_I2C1_WriteReg+0x68>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80044b4:	4b09      	ldr	r3, [pc, #36]	@ (80044dc <BSP_I2C1_WriteReg+0x74>)
 80044b6:	0018      	movs	r0, r3
 80044b8:	f008 ff58 	bl	800d36c <HAL_I2C_GetError>
 80044bc:	0003      	movs	r3, r0
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d103      	bne.n	80044ca <BSP_I2C1_WriteReg+0x62>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80044c2:	2366      	movs	r3, #102	@ 0x66
 80044c4:	425b      	negs	r3, r3
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e002      	b.n	80044d0 <BSP_I2C1_WriteReg+0x68>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80044ca:	2304      	movs	r3, #4
 80044cc:	425b      	negs	r3, r3
 80044ce:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80044d0:	697b      	ldr	r3, [r7, #20]
}
 80044d2:	0018      	movs	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b006      	add	sp, #24
 80044d8:	bdb0      	pop	{r4, r5, r7, pc}
 80044da:	46c0      	nop			@ (mov r8, r8)
 80044dc:	200004ac 	.word	0x200004ac

080044e0 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80044e0:	b5b0      	push	{r4, r5, r7, lr}
 80044e2:	b08a      	sub	sp, #40	@ 0x28
 80044e4:	af04      	add	r7, sp, #16
 80044e6:	0004      	movs	r4, r0
 80044e8:	0008      	movs	r0, r1
 80044ea:	60ba      	str	r2, [r7, #8]
 80044ec:	0019      	movs	r1, r3
 80044ee:	250e      	movs	r5, #14
 80044f0:	197b      	adds	r3, r7, r5
 80044f2:	1c22      	adds	r2, r4, #0
 80044f4:	801a      	strh	r2, [r3, #0]
 80044f6:	240c      	movs	r4, #12
 80044f8:	193b      	adds	r3, r7, r4
 80044fa:	1c02      	adds	r2, r0, #0
 80044fc:	801a      	strh	r2, [r3, #0]
 80044fe:	1dbb      	adds	r3, r7, #6
 8004500:	1c0a      	adds	r2, r1, #0
 8004502:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004508:	193b      	adds	r3, r7, r4
 800450a:	881a      	ldrh	r2, [r3, #0]
 800450c:	197b      	adds	r3, r7, r5
 800450e:	8819      	ldrh	r1, [r3, #0]
 8004510:	4810      	ldr	r0, [pc, #64]	@ (8004554 <BSP_I2C1_ReadReg+0x74>)
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	015b      	lsls	r3, r3, #5
 8004516:	9302      	str	r3, [sp, #8]
 8004518:	1dbb      	adds	r3, r7, #6
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	2301      	movs	r3, #1
 8004524:	f008 fde2 	bl	800d0ec <HAL_I2C_Mem_Read>
 8004528:	1e03      	subs	r3, r0, #0
 800452a:	d00d      	beq.n	8004548 <BSP_I2C1_ReadReg+0x68>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800452c:	4b09      	ldr	r3, [pc, #36]	@ (8004554 <BSP_I2C1_ReadReg+0x74>)
 800452e:	0018      	movs	r0, r3
 8004530:	f008 ff1c 	bl	800d36c <HAL_I2C_GetError>
 8004534:	0003      	movs	r3, r0
 8004536:	2b04      	cmp	r3, #4
 8004538:	d103      	bne.n	8004542 <BSP_I2C1_ReadReg+0x62>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800453a:	2366      	movs	r3, #102	@ 0x66
 800453c:	425b      	negs	r3, r3
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	e002      	b.n	8004548 <BSP_I2C1_ReadReg+0x68>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004542:	2304      	movs	r3, #4
 8004544:	425b      	negs	r3, r3
 8004546:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8004548:	697b      	ldr	r3, [r7, #20]
}
 800454a:	0018      	movs	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	b006      	add	sp, #24
 8004550:	bdb0      	pop	{r4, r5, r7, pc}
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	200004ac 	.word	0x200004ac

08004558 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800455c:	f007 fa5e 	bl	800ba1c <HAL_GetTick>
 8004560:	0003      	movs	r3, r0
}
 8004562:	0018      	movs	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8004568:	b590      	push	{r4, r7, lr}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004570:	240f      	movs	r4, #15
 8004572:	193b      	adds	r3, r7, r4
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]

  hi2c->Instance = I2C1;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a20      	ldr	r2, [pc, #128]	@ (80045fc <MX_I2C1_Init+0x94>)
 800457c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00300F38;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a1f      	ldr	r2, [pc, #124]	@ (8004600 <MX_I2C1_Init+0x98>)
 8004582:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f008 fb97 	bl	800cce4 <HAL_I2C_Init>
 80045b6:	1e03      	subs	r3, r0, #0
 80045b8:	d002      	beq.n	80045c0 <MX_I2C1_Init+0x58>
  {
    ret = HAL_ERROR;
 80045ba:	193b      	adds	r3, r7, r4
 80045bc:	2201      	movs	r2, #1
 80045be:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2100      	movs	r1, #0
 80045c4:	0018      	movs	r0, r3
 80045c6:	f009 f9cd 	bl	800d964 <HAL_I2CEx_ConfigAnalogFilter>
 80045ca:	1e03      	subs	r3, r0, #0
 80045cc:	d003      	beq.n	80045d6 <MX_I2C1_Init+0x6e>
  {
    ret = HAL_ERROR;
 80045ce:	230f      	movs	r3, #15
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	2201      	movs	r2, #1
 80045d4:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2100      	movs	r1, #0
 80045da:	0018      	movs	r0, r3
 80045dc:	f009 fa0e 	bl	800d9fc <HAL_I2CEx_ConfigDigitalFilter>
 80045e0:	1e03      	subs	r3, r0, #0
 80045e2:	d003      	beq.n	80045ec <MX_I2C1_Init+0x84>
  {
    ret = HAL_ERROR;
 80045e4:	230f      	movs	r3, #15
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	2201      	movs	r2, #1
 80045ea:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80045ec:	230f      	movs	r3, #15
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	781b      	ldrb	r3, [r3, #0]
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b005      	add	sp, #20
 80045f8:	bd90      	pop	{r4, r7, pc}
 80045fa:	46c0      	nop			@ (mov r8, r8)
 80045fc:	40005400 	.word	0x40005400
 8004600:	00300f38 	.word	0x00300f38

08004604 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004604:	b590      	push	{r4, r7, lr}
 8004606:	b089      	sub	sp, #36	@ 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800460c:	4b22      	ldr	r3, [pc, #136]	@ (8004698 <I2C1_MspInit+0x94>)
 800460e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004610:	4b21      	ldr	r3, [pc, #132]	@ (8004698 <I2C1_MspInit+0x94>)
 8004612:	2102      	movs	r1, #2
 8004614:	430a      	orrs	r2, r1
 8004616:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004618:	4b1f      	ldr	r3, [pc, #124]	@ (8004698 <I2C1_MspInit+0x94>)
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	2202      	movs	r2, #2
 800461e:	4013      	ands	r3, r2
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8004624:	210c      	movs	r1, #12
 8004626:	187b      	adds	r3, r7, r1
 8004628:	2280      	movs	r2, #128	@ 0x80
 800462a:	0052      	lsls	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800462e:	000c      	movs	r4, r1
 8004630:	193b      	adds	r3, r7, r4
 8004632:	2212      	movs	r2, #18
 8004634:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004636:	193b      	adds	r3, r7, r4
 8004638:	2201      	movs	r2, #1
 800463a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800463c:	193b      	adds	r3, r7, r4
 800463e:	2203      	movs	r2, #3
 8004640:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8004642:	193b      	adds	r3, r7, r4
 8004644:	2204      	movs	r2, #4
 8004646:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8004648:	193b      	adds	r3, r7, r4
 800464a:	4a14      	ldr	r2, [pc, #80]	@ (800469c <I2C1_MspInit+0x98>)
 800464c:	0019      	movs	r1, r3
 800464e:	0010      	movs	r0, r2
 8004650:	f008 f888 	bl	800c764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8004654:	0021      	movs	r1, r4
 8004656:	187b      	adds	r3, r7, r1
 8004658:	2280      	movs	r2, #128	@ 0x80
 800465a:	0092      	lsls	r2, r2, #2
 800465c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800465e:	187b      	adds	r3, r7, r1
 8004660:	2212      	movs	r2, #18
 8004662:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004664:	187b      	adds	r3, r7, r1
 8004666:	2201      	movs	r2, #1
 8004668:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800466a:	187b      	adds	r3, r7, r1
 800466c:	2203      	movs	r2, #3
 800466e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8004670:	187b      	adds	r3, r7, r1
 8004672:	2204      	movs	r2, #4
 8004674:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8004676:	187b      	adds	r3, r7, r1
 8004678:	4a08      	ldr	r2, [pc, #32]	@ (800469c <I2C1_MspInit+0x98>)
 800467a:	0019      	movs	r1, r3
 800467c:	0010      	movs	r0, r2
 800467e:	f008 f871 	bl	800c764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004682:	4b05      	ldr	r3, [pc, #20]	@ (8004698 <I2C1_MspInit+0x94>)
 8004684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004686:	4b04      	ldr	r3, [pc, #16]	@ (8004698 <I2C1_MspInit+0x94>)
 8004688:	2180      	movs	r1, #128	@ 0x80
 800468a:	0389      	lsls	r1, r1, #14
 800468c:	430a      	orrs	r2, r1
 800468e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8004690:	46c0      	nop			@ (mov r8, r8)
 8004692:	46bd      	mov	sp, r7
 8004694:	b009      	add	sp, #36	@ 0x24
 8004696:	bd90      	pop	{r4, r7, pc}
 8004698:	40021000 	.word	0x40021000
 800469c:	50000400 	.word	0x50000400

080046a0 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80046a8:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <I2C1_MspDeInit+0x38>)
 80046aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ac:	4b0a      	ldr	r3, [pc, #40]	@ (80046d8 <I2C1_MspDeInit+0x38>)
 80046ae:	490b      	ldr	r1, [pc, #44]	@ (80046dc <I2C1_MspDeInit+0x3c>)
 80046b0:	400a      	ands	r2, r1
 80046b2:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80046b4:	2380      	movs	r3, #128	@ 0x80
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	4a09      	ldr	r2, [pc, #36]	@ (80046e0 <I2C1_MspDeInit+0x40>)
 80046ba:	0019      	movs	r1, r3
 80046bc:	0010      	movs	r0, r2
 80046be:	f008 f9cf 	bl	800ca60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80046c2:	2380      	movs	r3, #128	@ 0x80
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4a06      	ldr	r2, [pc, #24]	@ (80046e0 <I2C1_MspDeInit+0x40>)
 80046c8:	0019      	movs	r1, r3
 80046ca:	0010      	movs	r0, r2
 80046cc:	f008 f9c8 	bl	800ca60 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80046d0:	46c0      	nop			@ (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b002      	add	sp, #8
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40021000 	.word	0x40021000
 80046dc:	ffdfffff 	.word	0xffdfffff
 80046e0:	50000400 	.word	0x50000400

080046e4 <_write>:

  return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	e009      	b.n	800470a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	60ba      	str	r2, [r7, #8]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	0018      	movs	r0, r3
 8004700:	f007 f8be 	bl	800b880 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	3301      	adds	r3, #1
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	429a      	cmp	r2, r3
 8004710:	dbf1      	blt.n	80046f6 <_write+0x12>
  }
  return len;
 8004712:	687b      	ldr	r3, [r7, #4]
}
 8004714:	0018      	movs	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	b006      	add	sp, #24
 800471a:	bd80      	pop	{r7, pc}

0800471c <_close>:

int _close(int file)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004724:	2301      	movs	r3, #1
 8004726:	425b      	negs	r3, r3
}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b002      	add	sp, #8
 800472e:	bd80      	pop	{r7, pc}

08004730 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2280      	movs	r2, #128	@ 0x80
 800473e:	0192      	lsls	r2, r2, #6
 8004740:	605a      	str	r2, [r3, #4]
  return 0;
 8004742:	2300      	movs	r3, #0
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	b002      	add	sp, #8
 800474a:	bd80      	pop	{r7, pc}

0800474c <_isatty>:

int _isatty(int file)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004754:	2301      	movs	r3, #1
}
 8004756:	0018      	movs	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	b002      	add	sp, #8
 800475c:	bd80      	pop	{r7, pc}

0800475e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800476a:	2300      	movs	r3, #0
}
 800476c:	0018      	movs	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	b004      	add	sp, #16
 8004772:	bd80      	pop	{r7, pc}

08004774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800477c:	4a14      	ldr	r2, [pc, #80]	@ (80047d0 <_sbrk+0x5c>)
 800477e:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <_sbrk+0x60>)
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004788:	4b13      	ldr	r3, [pc, #76]	@ (80047d8 <_sbrk+0x64>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d102      	bne.n	8004796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004790:	4b11      	ldr	r3, [pc, #68]	@ (80047d8 <_sbrk+0x64>)
 8004792:	4a12      	ldr	r2, [pc, #72]	@ (80047dc <_sbrk+0x68>)
 8004794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004796:	4b10      	ldr	r3, [pc, #64]	@ (80047d8 <_sbrk+0x64>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	18d3      	adds	r3, r2, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d207      	bcs.n	80047b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047a4:	f00d f810 	bl	80117c8 <__errno>
 80047a8:	0003      	movs	r3, r0
 80047aa:	220c      	movs	r2, #12
 80047ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047ae:	2301      	movs	r3, #1
 80047b0:	425b      	negs	r3, r3
 80047b2:	e009      	b.n	80047c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047b4:	4b08      	ldr	r3, [pc, #32]	@ (80047d8 <_sbrk+0x64>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047ba:	4b07      	ldr	r3, [pc, #28]	@ (80047d8 <_sbrk+0x64>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	18d2      	adds	r2, r2, r3
 80047c2:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <_sbrk+0x64>)
 80047c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80047c6:	68fb      	ldr	r3, [r7, #12]
}
 80047c8:	0018      	movs	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b006      	add	sp, #24
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20005000 	.word	0x20005000
 80047d4:	00000400 	.word	0x00000400
 80047d8:	20000504 	.word	0x20000504
 80047dc:	20000a30 	.word	0x20000a30

080047e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047e4:	46c0      	nop			@ (mov r8, r8)
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80047ec:	480d      	ldr	r0, [pc, #52]	@ (8004824 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80047ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80047f0:	f7ff fff6 	bl	80047e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047f4:	480c      	ldr	r0, [pc, #48]	@ (8004828 <LoopForever+0x6>)
  ldr r1, =_edata
 80047f6:	490d      	ldr	r1, [pc, #52]	@ (800482c <LoopForever+0xa>)
  ldr r2, =_sidata
 80047f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004830 <LoopForever+0xe>)
  movs r3, #0
 80047fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047fc:	e002      	b.n	8004804 <LoopCopyDataInit>

080047fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004802:	3304      	adds	r3, #4

08004804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004808:	d3f9      	bcc.n	80047fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800480a:	4a0a      	ldr	r2, [pc, #40]	@ (8004834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800480c:	4c0a      	ldr	r4, [pc, #40]	@ (8004838 <LoopForever+0x16>)
  movs r3, #0
 800480e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004810:	e001      	b.n	8004816 <LoopFillZerobss>

08004812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004814:	3204      	adds	r2, #4

08004816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004818:	d3fb      	bcc.n	8004812 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800481a:	f00c ffdb 	bl	80117d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800481e:	f7fe fd57 	bl	80032d0 <main>

08004822 <LoopForever>:

LoopForever:
    b LoopForever
 8004822:	e7fe      	b.n	8004822 <LoopForever>
   ldr   r0, =_estack
 8004824:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800482c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8004830:	08014d48 	.word	0x08014d48
  ldr r2, =_sbss
 8004834:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004838:	20000a2c 	.word	0x20000a2c

0800483c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800483c:	e7fe      	b.n	800483c <ADC1_COMP_IRQHandler>
	...

08004840 <HTS221_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	425b      	negs	r3, r3
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e031      	b.n	80048bc <HTS221_RegisterBusIO+0x7c>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	7b1a      	ldrb	r2, [r3, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	699a      	ldr	r2, [r3, #24]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a0d      	ldr	r2, [pc, #52]	@ (80048c8 <HTS221_RegisterBusIO+0x88>)
 8004894:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a0c      	ldr	r2, [pc, #48]	@ (80048cc <HTS221_RegisterBusIO+0x8c>)
 800489a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init != NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d005      	beq.n	80048b6 <HTS221_RegisterBusIO+0x76>
    {
      ret = pObj->IO.Init();
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4798      	blx	r3
 80048b0:	0003      	movs	r3, r0
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	e002      	b.n	80048bc <HTS221_RegisterBusIO+0x7c>
    }
    else
    {
      ret = HTS221_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	425b      	negs	r3, r3
 80048ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80048bc:	68fb      	ldr	r3, [r7, #12]
}
 80048be:	0018      	movs	r0, r3
 80048c0:	46bd      	mov	sp, r7
 80048c2:	b004      	add	sp, #16
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	46c0      	nop			@ (mov r8, r8)
 80048c8:	08004f77 	.word	0x08004f77
 80048cc:	08004ff1 	.word	0x08004ff1

080048d0 <HTS221_Init>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2228      	movs	r2, #40	@ 0x28
 80048dc:	5c9b      	ldrb	r3, [r3, r2]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d108      	bne.n	80048f4 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f000 fad7 	bl	8004e98 <HTS221_Initialize>
 80048ea:	1e03      	subs	r3, r0, #0
 80048ec:	d002      	beq.n	80048f4 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	425b      	negs	r3, r3
 80048f2:	e004      	b.n	80048fe <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2228      	movs	r2, #40	@ 0x28
 80048f8:	2101      	movs	r1, #1
 80048fa:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	0018      	movs	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	b002      	add	sp, #8
 8004904:	bd80      	pop	{r7, pc}

08004906 <HTS221_DeInit>:
 * @brief  Deinitialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2228      	movs	r2, #40	@ 0x28
 8004912:	5c9b      	ldrb	r3, [r3, r2]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d111      	bne.n	800493c <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	0018      	movs	r0, r3
 800491c:	f000 f874 	bl	8004a08 <HTS221_HUM_Disable>
 8004920:	1e03      	subs	r3, r0, #0
 8004922:	d002      	beq.n	800492a <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	425b      	negs	r3, r3
 8004928:	e00d      	b.n	8004946 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	0018      	movs	r0, r3
 800492e:	f000 f975 	bl	8004c1c <HTS221_TEMP_Disable>
 8004932:	1e03      	subs	r3, r0, #0
 8004934:	d002      	beq.n	800493c <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	425b      	negs	r3, r3
 800493a:	e004      	b.n	8004946 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2228      	movs	r2, #40	@ 0x28
 8004940:	2100      	movs	r1, #0
 8004942:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	0018      	movs	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	b002      	add	sp, #8
 800494c:	bd80      	pop	{r7, pc}

0800494e <HTS221_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b082      	sub	sp, #8
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	331c      	adds	r3, #28
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	0011      	movs	r1, r2
 8004960:	0018      	movs	r0, r3
 8004962:	f000 fc7f 	bl	8005264 <hts221_device_id_get>
 8004966:	1e03      	subs	r3, r0, #0
 8004968:	d002      	beq.n	8004970 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	425b      	negs	r3, r3
 800496e:	e000      	b.n	8004972 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	0018      	movs	r0, r3
 8004974:	46bd      	mov	sp, r7
 8004976:	b002      	add	sp, #8
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <HTS221_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to HTS221 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2201      	movs	r2, #1
 800498a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2200      	movs	r2, #0
 8004990:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2201      	movs	r2, #1
 8004996:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2200      	movs	r2, #0
 800499c:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	4a06      	ldr	r2, [pc, #24]	@ (80049bc <HTS221_GetCapabilities+0x40>)
 80049a2:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	4a05      	ldr	r2, [pc, #20]	@ (80049bc <HTS221_GetCapabilities+0x40>)
 80049a8:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2200      	movs	r2, #0
 80049ae:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	0018      	movs	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b002      	add	sp, #8
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			@ (mov r8, r8)
 80049bc:	41480000 	.word	0x41480000

080049c0 <HTS221_HUM_Enable>:
 * @brief  Enable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2229      	movs	r2, #41	@ 0x29
 80049cc:	5c9b      	ldrb	r3, [r3, r2]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e014      	b.n	8004a00 <HTS221_HUM_Enable+0x40>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	222a      	movs	r2, #42	@ 0x2a
 80049da:	5c9b      	ldrb	r3, [r3, r2]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <HTS221_HUM_Enable+0x36>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	331c      	adds	r3, #28
 80049e4:	2101      	movs	r1, #1
 80049e6:	0018      	movs	r0, r3
 80049e8:	f000 fc4e 	bl	8005288 <hts221_power_on_set>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d002      	beq.n	80049f6 <HTS221_HUM_Enable+0x36>
    {
      return HTS221_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	425b      	negs	r3, r3
 80049f4:	e004      	b.n	8004a00 <HTS221_HUM_Enable+0x40>
    }
  }

  pObj->hum_is_enabled = 1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2229      	movs	r2, #41	@ 0x29
 80049fa:	2101      	movs	r1, #1
 80049fc:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	0018      	movs	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HTS221_HUM_Disable>:
 * @brief  Disable the HTS221 humidity sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2229      	movs	r2, #41	@ 0x29
 8004a14:	5c9b      	ldrb	r3, [r3, r2]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e014      	b.n	8004a48 <HTS221_HUM_Disable+0x40>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	222a      	movs	r2, #42	@ 0x2a
 8004a22:	5c9b      	ldrb	r3, [r3, r2]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10a      	bne.n	8004a3e <HTS221_HUM_Disable+0x36>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	331c      	adds	r3, #28
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 fc2a 	bl	8005288 <hts221_power_on_set>
 8004a34:	1e03      	subs	r3, r0, #0
 8004a36:	d002      	beq.n	8004a3e <HTS221_HUM_Disable+0x36>
    {
      return HTS221_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	425b      	negs	r3, r3
 8004a3c:	e004      	b.n	8004a48 <HTS221_HUM_Disable+0x40>
    }
  }

  pObj->hum_is_enabled = 0;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2229      	movs	r2, #41	@ 0x29
 8004a42:	2100      	movs	r1, #0
 8004a44:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	0018      	movs	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b002      	add	sp, #8
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HTS221_HUM_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	0011      	movs	r1, r2
 8004a60:	0018      	movs	r0, r3
 8004a62:	f000 f9a9 	bl	8004db8 <HTS221_GetOutputDataRate>
 8004a66:	0003      	movs	r3, r0
}
 8004a68:	0018      	movs	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b002      	add	sp, #8
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HTS221_HUM_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	1c11      	adds	r1, r2, #0
 8004a80:	0018      	movs	r0, r3
 8004a82:	f000 f9d9 	bl	8004e38 <HTS221_SetOutputDataRate>
 8004a86:	0003      	movs	r3, r0
}
 8004a88:	0018      	movs	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b002      	add	sp, #8
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HTS221_HUM_GetHumidity>:
 * @param  pObj the device pObj
 * @param  Value pointer where the humidity value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b089      	sub	sp, #36	@ 0x24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  hts221_axis1bit16_t coeff;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	331c      	adds	r3, #28
 8004a9e:	2218      	movs	r2, #24
 8004aa0:	18ba      	adds	r2, r7, r2
 8004aa2:	0011      	movs	r1, r2
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f000 fcaf 	bl	8005408 <hts221_hum_adc_point_0_get>
 8004aaa:	1e03      	subs	r3, r0, #0
 8004aac:	d002      	beq.n	8004ab4 <HTS221_HUM_GetHumidity+0x24>
  {
    return HTS221_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	425b      	negs	r3, r3
 8004ab2:	e088      	b.n	8004bc6 <HTS221_HUM_GetHumidity+0x136>
  }

  lin_hum.x0 = (float)coeff.i16bit;
 8004ab4:	2418      	movs	r4, #24
 8004ab6:	193b      	adds	r3, r7, r4
 8004ab8:	2200      	movs	r2, #0
 8004aba:	5e9b      	ldrsh	r3, [r3, r2]
 8004abc:	0018      	movs	r0, r3
 8004abe:	f7fc fbc7 	bl	8001250 <__aeabi_i2f>
 8004ac2:	1c02      	adds	r2, r0, #0
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	18fb      	adds	r3, r7, r3
 8004ac8:	601a      	str	r2, [r3, #0]

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	331c      	adds	r3, #28
 8004ace:	193a      	adds	r2, r7, r4
 8004ad0:	0011      	movs	r1, r2
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f000 fc06 	bl	80052e4 <hts221_hum_rh_point_0_get>
 8004ad8:	1e03      	subs	r3, r0, #0
 8004ada:	d002      	beq.n	8004ae2 <HTS221_HUM_GetHumidity+0x52>
  {
    return HTS221_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	425b      	negs	r3, r3
 8004ae0:	e071      	b.n	8004bc6 <HTS221_HUM_GetHumidity+0x136>
  }

  lin_hum.y0 = (float)coeff.u8bit[0];
 8004ae2:	2418      	movs	r4, #24
 8004ae4:	193b      	adds	r3, r7, r4
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7fc fbfd 	bl	80012e8 <__aeabi_ui2f>
 8004aee:	1c02      	adds	r2, r0, #0
 8004af0:	2308      	movs	r3, #8
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	605a      	str	r2, [r3, #4]

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	331c      	adds	r3, #28
 8004afa:	193a      	adds	r2, r7, r4
 8004afc:	0011      	movs	r1, r2
 8004afe:	0018      	movs	r0, r3
 8004b00:	f000 fc94 	bl	800542c <hts221_hum_adc_point_1_get>
 8004b04:	1e03      	subs	r3, r0, #0
 8004b06:	d002      	beq.n	8004b0e <HTS221_HUM_GetHumidity+0x7e>
  {
    return HTS221_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	425b      	negs	r3, r3
 8004b0c:	e05b      	b.n	8004bc6 <HTS221_HUM_GetHumidity+0x136>
  }

  lin_hum.x1 = (float)coeff.i16bit;
 8004b0e:	2418      	movs	r4, #24
 8004b10:	193b      	adds	r3, r7, r4
 8004b12:	2200      	movs	r2, #0
 8004b14:	5e9b      	ldrsh	r3, [r3, r2]
 8004b16:	0018      	movs	r0, r3
 8004b18:	f7fc fb9a 	bl	8001250 <__aeabi_i2f>
 8004b1c:	1c02      	adds	r2, r0, #0
 8004b1e:	2308      	movs	r3, #8
 8004b20:	18fb      	adds	r3, r7, r3
 8004b22:	609a      	str	r2, [r3, #8]

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	331c      	adds	r3, #28
 8004b28:	193a      	adds	r2, r7, r4
 8004b2a:	0011      	movs	r1, r2
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f000 fbf1 	bl	8005314 <hts221_hum_rh_point_1_get>
 8004b32:	1e03      	subs	r3, r0, #0
 8004b34:	d002      	beq.n	8004b3c <HTS221_HUM_GetHumidity+0xac>
  {
    return HTS221_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	425b      	negs	r3, r3
 8004b3a:	e044      	b.n	8004bc6 <HTS221_HUM_GetHumidity+0x136>
  }

  lin_hum.y1 = (float)coeff.u8bit[0];
 8004b3c:	2318      	movs	r3, #24
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7fc fbd0 	bl	80012e8 <__aeabi_ui2f>
 8004b48:	1c02      	adds	r2, r0, #0
 8004b4a:	2308      	movs	r3, #8
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	60da      	str	r2, [r3, #12]

  (void)memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 8004b50:	241c      	movs	r4, #28
 8004b52:	193b      	adds	r3, r7, r4
 8004b54:	2202      	movs	r2, #2
 8004b56:	2100      	movs	r1, #0
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f00c fddf 	bl	801171c <memset>
  if (hts221_humidity_raw_get(&(pObj->Ctx), data_raw_humidity.u8bit) != HTS221_OK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	331c      	adds	r3, #28
 8004b62:	193a      	adds	r2, r7, r4
 8004b64:	0011      	movs	r1, r2
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 fb58 	bl	800521c <hts221_humidity_raw_get>
 8004b6c:	1e03      	subs	r3, r0, #0
 8004b6e:	d002      	beq.n	8004b76 <HTS221_HUM_GetHumidity+0xe6>
  {
    return HTS221_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	425b      	negs	r3, r3
 8004b74:	e027      	b.n	8004bc6 <HTS221_HUM_GetHumidity+0x136>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8004b76:	231c      	movs	r3, #28
 8004b78:	18fb      	adds	r3, r7, r3
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	5e9b      	ldrsh	r3, [r3, r2]
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f7fc fb66 	bl	8001250 <__aeabi_i2f>
 8004b84:	1c02      	adds	r2, r0, #0
 8004b86:	2308      	movs	r3, #8
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	1c11      	adds	r1, r2, #0
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f000 f9ae 	bl	8004eee <Linear_Interpolation>
 8004b92:	1c02      	adds	r2, r0, #0
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	1c18      	adds	r0, r3, #0
 8004ba0:	f7fb fba2 	bl	80002e8 <__aeabi_fcmplt>
 8004ba4:	1e03      	subs	r3, r0, #0
 8004ba6:	d002      	beq.n	8004bae <HTS221_HUM_GetHumidity+0x11e>
  {
    *Value = 0.0f;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4907      	ldr	r1, [pc, #28]	@ (8004bd0 <HTS221_HUM_GetHumidity+0x140>)
 8004bb4:	1c18      	adds	r0, r3, #0
 8004bb6:	f7fb fbab 	bl	8000310 <__aeabi_fcmpgt>
 8004bba:	1e03      	subs	r3, r0, #0
 8004bbc:	d002      	beq.n	8004bc4 <HTS221_HUM_GetHumidity+0x134>
  {
    *Value = 100.0f;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	4a03      	ldr	r2, [pc, #12]	@ (8004bd0 <HTS221_HUM_GetHumidity+0x140>)
 8004bc2:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b009      	add	sp, #36	@ 0x24
 8004bcc:	bd90      	pop	{r4, r7, pc}
 8004bce:	46c0      	nop			@ (mov r8, r8)
 8004bd0:	42c80000 	.word	0x42c80000

08004bd4 <HTS221_TEMP_Enable>:
 * @brief  Enable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	222a      	movs	r2, #42	@ 0x2a
 8004be0:	5c9b      	ldrb	r3, [r3, r2]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e014      	b.n	8004c14 <HTS221_TEMP_Enable+0x40>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2229      	movs	r2, #41	@ 0x29
 8004bee:	5c9b      	ldrb	r3, [r3, r2]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <HTS221_TEMP_Enable+0x36>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	331c      	adds	r3, #28
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f000 fb44 	bl	8005288 <hts221_power_on_set>
 8004c00:	1e03      	subs	r3, r0, #0
 8004c02:	d002      	beq.n	8004c0a <HTS221_TEMP_Enable+0x36>
    {
      return HTS221_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	425b      	negs	r3, r3
 8004c08:	e004      	b.n	8004c14 <HTS221_TEMP_Enable+0x40>
    }
  }

  pObj->temp_is_enabled = 1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	222a      	movs	r2, #42	@ 0x2a
 8004c0e:	2101      	movs	r1, #1
 8004c10:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	0018      	movs	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b002      	add	sp, #8
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HTS221_TEMP_Disable>:
 * @brief  Disable the HTS221 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	222a      	movs	r2, #42	@ 0x2a
 8004c28:	5c9b      	ldrb	r3, [r3, r2]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	e014      	b.n	8004c5c <HTS221_TEMP_Disable+0x40>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2229      	movs	r2, #41	@ 0x29
 8004c36:	5c9b      	ldrb	r3, [r3, r2]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <HTS221_TEMP_Disable+0x36>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	331c      	adds	r3, #28
 8004c40:	2100      	movs	r1, #0
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 fb20 	bl	8005288 <hts221_power_on_set>
 8004c48:	1e03      	subs	r3, r0, #0
 8004c4a:	d002      	beq.n	8004c52 <HTS221_TEMP_Disable+0x36>
    {
      return HTS221_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	425b      	negs	r3, r3
 8004c50:	e004      	b.n	8004c5c <HTS221_TEMP_Disable+0x40>
    }
  }

  pObj->temp_is_enabled = 0;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	222a      	movs	r2, #42	@ 0x2a
 8004c56:	2100      	movs	r1, #0
 8004c58:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b002      	add	sp, #8
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HTS221_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	0011      	movs	r1, r2
 8004c74:	0018      	movs	r0, r3
 8004c76:	f000 f89f 	bl	8004db8 <HTS221_GetOutputDataRate>
 8004c7a:	0003      	movs	r3, r0
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b002      	add	sp, #8
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HTS221_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	1c11      	adds	r1, r2, #0
 8004c94:	0018      	movs	r0, r3
 8004c96:	f000 f8cf 	bl	8004e38 <HTS221_SetOutputDataRate>
 8004c9a:	0003      	movs	r3, r0
}
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b002      	add	sp, #8
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HTS221_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8004ca4:	b590      	push	{r4, r7, lr}
 8004ca6:	b089      	sub	sp, #36	@ 0x24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  hts221_axis1bit16_t coeff;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	331c      	adds	r3, #28
 8004cb2:	2218      	movs	r2, #24
 8004cb4:	18ba      	adds	r2, r7, r2
 8004cb6:	0011      	movs	r1, r2
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f000 fbc9 	bl	8005450 <hts221_temp_adc_point_0_get>
 8004cbe:	1e03      	subs	r3, r0, #0
 8004cc0:	d002      	beq.n	8004cc8 <HTS221_TEMP_GetTemperature+0x24>
  {
    return HTS221_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	425b      	negs	r3, r3
 8004cc6:	e072      	b.n	8004dae <HTS221_TEMP_GetTemperature+0x10a>
  }

  lin_temp.x0 = (float)coeff.i16bit;
 8004cc8:	2418      	movs	r4, #24
 8004cca:	193b      	adds	r3, r7, r4
 8004ccc:	2200      	movs	r2, #0
 8004cce:	5e9b      	ldrsh	r3, [r3, r2]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f7fc fabd 	bl	8001250 <__aeabi_i2f>
 8004cd6:	1c02      	adds	r2, r0, #0
 8004cd8:	2308      	movs	r3, #8
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	601a      	str	r2, [r3, #0]

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	331c      	adds	r3, #28
 8004ce2:	193a      	adds	r2, r7, r4
 8004ce4:	0011      	movs	r1, r2
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f000 fb2c 	bl	8005344 <hts221_temp_deg_point_0_get>
 8004cec:	1e03      	subs	r3, r0, #0
 8004cee:	d002      	beq.n	8004cf6 <HTS221_TEMP_GetTemperature+0x52>
  {
    return HTS221_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	425b      	negs	r3, r3
 8004cf4:	e05b      	b.n	8004dae <HTS221_TEMP_GetTemperature+0x10a>
  }

  lin_temp.y0 = (float)coeff.u8bit[0];
 8004cf6:	2418      	movs	r4, #24
 8004cf8:	193b      	adds	r3, r7, r4
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f7fc faf3 	bl	80012e8 <__aeabi_ui2f>
 8004d02:	1c02      	adds	r2, r0, #0
 8004d04:	2308      	movs	r3, #8
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	605a      	str	r2, [r3, #4]

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	331c      	adds	r3, #28
 8004d0e:	193a      	adds	r2, r7, r4
 8004d10:	0011      	movs	r1, r2
 8004d12:	0018      	movs	r0, r3
 8004d14:	f000 fbae 	bl	8005474 <hts221_temp_adc_point_1_get>
 8004d18:	1e03      	subs	r3, r0, #0
 8004d1a:	d002      	beq.n	8004d22 <HTS221_TEMP_GetTemperature+0x7e>
  {
    return HTS221_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	425b      	negs	r3, r3
 8004d20:	e045      	b.n	8004dae <HTS221_TEMP_GetTemperature+0x10a>
  }

  lin_temp.x1 = (float)coeff.i16bit;
 8004d22:	2418      	movs	r4, #24
 8004d24:	193b      	adds	r3, r7, r4
 8004d26:	2200      	movs	r2, #0
 8004d28:	5e9b      	ldrsh	r3, [r3, r2]
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f7fc fa90 	bl	8001250 <__aeabi_i2f>
 8004d30:	1c02      	adds	r2, r0, #0
 8004d32:	2308      	movs	r3, #8
 8004d34:	18fb      	adds	r3, r7, r3
 8004d36:	609a      	str	r2, [r3, #8]

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), coeff.u8bit) != HTS221_OK)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	331c      	adds	r3, #28
 8004d3c:	193a      	adds	r2, r7, r4
 8004d3e:	0011      	movs	r1, r2
 8004d40:	0018      	movs	r0, r3
 8004d42:	f000 fb30 	bl	80053a6 <hts221_temp_deg_point_1_get>
 8004d46:	1e03      	subs	r3, r0, #0
 8004d48:	d002      	beq.n	8004d50 <HTS221_TEMP_GetTemperature+0xac>
  {
    return HTS221_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	425b      	negs	r3, r3
 8004d4e:	e02e      	b.n	8004dae <HTS221_TEMP_GetTemperature+0x10a>
  }

  lin_temp.y1 = (float)coeff.u8bit[0];
 8004d50:	2318      	movs	r3, #24
 8004d52:	18fb      	adds	r3, r7, r3
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	0018      	movs	r0, r3
 8004d58:	f7fc fac6 	bl	80012e8 <__aeabi_ui2f>
 8004d5c:	1c02      	adds	r2, r0, #0
 8004d5e:	2308      	movs	r3, #8
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	60da      	str	r2, [r3, #12]

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8004d64:	241c      	movs	r4, #28
 8004d66:	193b      	adds	r3, r7, r4
 8004d68:	2202      	movs	r2, #2
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f00c fcd5 	bl	801171c <memset>
  if (hts221_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != HTS221_OK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	331c      	adds	r3, #28
 8004d76:	193a      	adds	r2, r7, r4
 8004d78:	0011      	movs	r1, r2
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f000 fa60 	bl	8005240 <hts221_temperature_raw_get>
 8004d80:	1e03      	subs	r3, r0, #0
 8004d82:	d002      	beq.n	8004d8a <HTS221_TEMP_GetTemperature+0xe6>
  {
    return HTS221_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	425b      	negs	r3, r3
 8004d88:	e011      	b.n	8004dae <HTS221_TEMP_GetTemperature+0x10a>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8004d8a:	231c      	movs	r3, #28
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	2200      	movs	r2, #0
 8004d90:	5e9b      	ldrsh	r3, [r3, r2]
 8004d92:	0018      	movs	r0, r3
 8004d94:	f7fc fa5c 	bl	8001250 <__aeabi_i2f>
 8004d98:	1c02      	adds	r2, r0, #0
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	18fb      	adds	r3, r7, r3
 8004d9e:	1c11      	adds	r1, r2, #0
 8004da0:	0018      	movs	r0, r3
 8004da2:	f000 f8a4 	bl	8004eee <Linear_Interpolation>
 8004da6:	1c02      	adds	r2, r0, #0
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	0018      	movs	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b009      	add	sp, #36	@ 0x24
 8004db4:	bd90      	pop	{r4, r7, pc}
	...

08004db8 <HTS221_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	331c      	adds	r3, #28
 8004dca:	220b      	movs	r2, #11
 8004dcc:	18ba      	adds	r2, r7, r2
 8004dce:	0011      	movs	r1, r2
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f000 f9bc 	bl	800514e <hts221_data_rate_get>
 8004dd6:	1e03      	subs	r3, r0, #0
 8004dd8:	d002      	beq.n	8004de0 <HTS221_GetOutputDataRate+0x28>
  {
    return HTS221_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	425b      	negs	r3, r3
 8004dde:	e023      	b.n	8004e28 <HTS221_GetOutputDataRate+0x70>
  }

  switch (odr_low_level)
 8004de0:	230b      	movs	r3, #11
 8004de2:	18fb      	adds	r3, r7, r3
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d015      	beq.n	8004e16 <HTS221_GetOutputDataRate+0x5e>
 8004dea:	dc18      	bgt.n	8004e1e <HTS221_GetOutputDataRate+0x66>
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d00e      	beq.n	8004e0e <HTS221_GetOutputDataRate+0x56>
 8004df0:	dc15      	bgt.n	8004e1e <HTS221_GetOutputDataRate+0x66>
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HTS221_GetOutputDataRate+0x44>
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d004      	beq.n	8004e04 <HTS221_GetOutputDataRate+0x4c>
 8004dfa:	e010      	b.n	8004e1e <HTS221_GetOutputDataRate+0x66>
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
      break;
 8004e02:	e010      	b.n	8004e26 <HTS221_GetOutputDataRate+0x6e>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	22fe      	movs	r2, #254	@ 0xfe
 8004e08:	0592      	lsls	r2, r2, #22
 8004e0a:	601a      	str	r2, [r3, #0]
      break;
 8004e0c:	e00b      	b.n	8004e26 <HTS221_GetOutputDataRate+0x6e>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	4a07      	ldr	r2, [pc, #28]	@ (8004e30 <HTS221_GetOutputDataRate+0x78>)
 8004e12:	601a      	str	r2, [r3, #0]
      break;
 8004e14:	e007      	b.n	8004e26 <HTS221_GetOutputDataRate+0x6e>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	4a06      	ldr	r2, [pc, #24]	@ (8004e34 <HTS221_GetOutputDataRate+0x7c>)
 8004e1a:	601a      	str	r2, [r3, #0]
      break;
 8004e1c:	e003      	b.n	8004e26 <HTS221_GetOutputDataRate+0x6e>

    default:
      ret = HTS221_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	425b      	negs	r3, r3
 8004e22:	60fb      	str	r3, [r7, #12]
      break;
 8004e24:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8004e26:	68fb      	ldr	r3, [r7, #12]
}
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b004      	add	sp, #16
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40e00000 	.word	0x40e00000
 8004e34:	41480000 	.word	0x41480000

08004e38 <HTS221_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8004e42:	21fe      	movs	r1, #254	@ 0xfe
 8004e44:	0589      	lsls	r1, r1, #22
 8004e46:	6838      	ldr	r0, [r7, #0]
 8004e48:	f7fb fa58 	bl	80002fc <__aeabi_fcmple>
 8004e4c:	1e03      	subs	r3, r0, #0
 8004e4e:	d001      	beq.n	8004e54 <HTS221_SetOutputDataRate+0x1c>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e008      	b.n	8004e66 <HTS221_SetOutputDataRate+0x2e>
 8004e54:	490f      	ldr	r1, [pc, #60]	@ (8004e94 <HTS221_SetOutputDataRate+0x5c>)
 8004e56:	6838      	ldr	r0, [r7, #0]
 8004e58:	f7fb fa50 	bl	80002fc <__aeabi_fcmple>
 8004e5c:	1e03      	subs	r3, r0, #0
 8004e5e:	d001      	beq.n	8004e64 <HTS221_SetOutputDataRate+0x2c>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e000      	b.n	8004e66 <HTS221_SetOutputDataRate+0x2e>
 8004e64:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8004e66:	210f      	movs	r1, #15
 8004e68:	187a      	adds	r2, r7, r1
 8004e6a:	7013      	strb	r3, [r2, #0]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	331c      	adds	r3, #28
 8004e70:	001a      	movs	r2, r3
 8004e72:	187b      	adds	r3, r7, r1
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	0019      	movs	r1, r3
 8004e78:	0010      	movs	r0, r2
 8004e7a:	f000 f938 	bl	80050ee <hts221_data_rate_set>
 8004e7e:	1e03      	subs	r3, r0, #0
 8004e80:	d002      	beq.n	8004e88 <HTS221_SetOutputDataRate+0x50>
  {
    return HTS221_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	425b      	negs	r3, r3
 8004e86:	e000      	b.n	8004e8a <HTS221_SetOutputDataRate+0x52>
  }

  return HTS221_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b004      	add	sp, #16
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			@ (mov r8, r8)
 8004e94:	40e00000 	.word	0x40e00000

08004e98 <HTS221_Initialize>:
 * @brief  Initialize the HTS221 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	331c      	adds	r3, #28
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f000 f9ee 	bl	8005288 <hts221_power_on_set>
 8004eac:	1e03      	subs	r3, r0, #0
 8004eae:	d002      	beq.n	8004eb6 <HTS221_Initialize+0x1e>
  {
    return HTS221_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	425b      	negs	r3, r3
 8004eb4:	e017      	b.n	8004ee6 <HTS221_Initialize+0x4e>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	331c      	adds	r3, #28
 8004eba:	2101      	movs	r1, #1
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f000 f97d 	bl	80051bc <hts221_block_data_update_set>
 8004ec2:	1e03      	subs	r3, r0, #0
 8004ec4:	d002      	beq.n	8004ecc <HTS221_Initialize+0x34>
  {
    return HTS221_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	425b      	negs	r3, r3
 8004eca:	e00c      	b.n	8004ee6 <HTS221_Initialize+0x4e>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8004ecc:	22fe      	movs	r2, #254	@ 0xfe
 8004ece:	0592      	lsls	r2, r2, #22
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	1c11      	adds	r1, r2, #0
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f7ff ffaf 	bl	8004e38 <HTS221_SetOutputDataRate>
 8004eda:	1e03      	subs	r3, r0, #0
 8004edc:	d002      	beq.n	8004ee4 <HTS221_Initialize+0x4c>
  {
    return HTS221_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	425b      	negs	r3, r3
 8004ee2:	e000      	b.n	8004ee6 <HTS221_Initialize+0x4e>
  }

  return HTS221_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b002      	add	sp, #8
 8004eec:	bd80      	pop	{r7, pc}

08004eee <Linear_Interpolation>:
 * @param  Lin the line
 * @param  Coeff the coefficient
 * @retval Calculation result
 */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8004eee:	b5b0      	push	{r4, r5, r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	1c19      	adds	r1, r3, #0
 8004f02:	1c10      	adds	r0, r2, #0
 8004f04:	f7fb ffe0 	bl	8000ec8 <__aeabi_fsub>
 8004f08:	1c03      	adds	r3, r0, #0
 8004f0a:	6839      	ldr	r1, [r7, #0]
 8004f0c:	1c18      	adds	r0, r3, #0
 8004f0e:	f7fb fe9d 	bl	8000c4c <__aeabi_fmul>
 8004f12:	1c03      	adds	r3, r0, #0
 8004f14:	1c1c      	adds	r4, r3, #0
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	1c19      	adds	r1, r3, #0
 8004f20:	1c10      	adds	r0, r2, #0
 8004f22:	f7fb fe93 	bl	8000c4c <__aeabi_fmul>
 8004f26:	1c03      	adds	r3, r0, #0
 8004f28:	1c1d      	adds	r5, r3, #0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	1c19      	adds	r1, r3, #0
 8004f34:	1c10      	adds	r0, r2, #0
 8004f36:	f7fb fe89 	bl	8000c4c <__aeabi_fmul>
 8004f3a:	1c03      	adds	r3, r0, #0
 8004f3c:	1c19      	adds	r1, r3, #0
 8004f3e:	1c28      	adds	r0, r5, #0
 8004f40:	f7fb ffc2 	bl	8000ec8 <__aeabi_fsub>
 8004f44:	1c03      	adds	r3, r0, #0
 8004f46:	1c19      	adds	r1, r3, #0
 8004f48:	1c20      	adds	r0, r4, #0
 8004f4a:	f7fb fb0f 	bl	800056c <__aeabi_fadd>
 8004f4e:	1c03      	adds	r3, r0, #0
 8004f50:	1c1c      	adds	r4, r3, #0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	1c19      	adds	r1, r3, #0
 8004f5c:	1c10      	adds	r0, r2, #0
 8004f5e:	f7fb ffb3 	bl	8000ec8 <__aeabi_fsub>
 8004f62:	1c03      	adds	r3, r0, #0
 8004f64:	1c19      	adds	r1, r3, #0
 8004f66:	1c20      	adds	r0, r4, #0
 8004f68:	f7fb fc8a 	bl	8000880 <__aeabi_fdiv>
 8004f6c:	1c03      	adds	r3, r0, #0
}
 8004f6e:	1c18      	adds	r0, r3, #0
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b002      	add	sp, #8
 8004f74:	bdb0      	pop	{r4, r5, r7, pc}

08004f76 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004f76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f78:	b087      	sub	sp, #28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	0008      	movs	r0, r1
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	0019      	movs	r1, r3
 8004f84:	250b      	movs	r5, #11
 8004f86:	197b      	adds	r3, r7, r5
 8004f88:	1c02      	adds	r2, r0, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	2608      	movs	r6, #8
 8004f8e:	19bb      	adds	r3, r7, r6
 8004f90:	1c0a      	adds	r2, r1, #0
 8004f92:	801a      	strh	r2, [r3, #0]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d111      	bne.n	8004fc4 <ReadRegWrap+0x4e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	695c      	ldr	r4, [r3, #20]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	7b1b      	ldrb	r3, [r3, #12]
 8004fa8:	0018      	movs	r0, r3
 8004faa:	197b      	adds	r3, r7, r5
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2280      	movs	r2, #128	@ 0x80
 8004fb0:	4252      	negs	r2, r2
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	19bb      	adds	r3, r7, r6
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	47a0      	blx	r4
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	e011      	b.n	8004fe8 <ReadRegWrap+0x72>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	695c      	ldr	r4, [r3, #20]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	7b1b      	ldrb	r3, [r3, #12]
 8004fcc:	0018      	movs	r0, r3
 8004fce:	230b      	movs	r3, #11
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2240      	movs	r2, #64	@ 0x40
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	0019      	movs	r1, r3
 8004fdc:	2308      	movs	r3, #8
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	47a0      	blx	r4
 8004fe6:	0003      	movs	r3, r0
  }
}
 8004fe8:	0018      	movs	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b007      	add	sp, #28
 8004fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ff0 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	0008      	movs	r0, r1
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	0019      	movs	r1, r3
 8004ffe:	250b      	movs	r5, #11
 8005000:	197b      	adds	r3, r7, r5
 8005002:	1c02      	adds	r2, r0, #0
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	2608      	movs	r6, #8
 8005008:	19bb      	adds	r3, r7, r6
 800500a:	1c0a      	adds	r2, r1, #0
 800500c:	801a      	strh	r2, [r3, #0]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d111      	bne.n	800503e <WriteRegWrap+0x4e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	691c      	ldr	r4, [r3, #16]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	7b1b      	ldrb	r3, [r3, #12]
 8005022:	0018      	movs	r0, r3
 8005024:	197b      	adds	r3, r7, r5
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2280      	movs	r2, #128	@ 0x80
 800502a:	4252      	negs	r2, r2
 800502c:	4313      	orrs	r3, r2
 800502e:	b2db      	uxtb	r3, r3
 8005030:	0019      	movs	r1, r3
 8005032:	19bb      	adds	r3, r7, r6
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	47a0      	blx	r4
 800503a:	0003      	movs	r3, r0
 800503c:	e011      	b.n	8005062 <WriteRegWrap+0x72>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	691c      	ldr	r4, [r3, #16]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	7b1b      	ldrb	r3, [r3, #12]
 8005046:	0018      	movs	r0, r3
 8005048:	230b      	movs	r3, #11
 800504a:	18fb      	adds	r3, r7, r3
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2240      	movs	r2, #64	@ 0x40
 8005050:	4313      	orrs	r3, r2
 8005052:	b2db      	uxtb	r3, r3
 8005054:	0019      	movs	r1, r3
 8005056:	2308      	movs	r3, #8
 8005058:	18fb      	adds	r3, r7, r3
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	47a0      	blx	r4
 8005060:	0003      	movs	r3, r0
  }
}
 8005062:	0018      	movs	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	b007      	add	sp, #28
 8005068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800506a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                        uint16_t len)
{
 800506a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800506c:	b087      	sub	sp, #28
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	0008      	movs	r0, r1
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	0019      	movs	r1, r3
 8005078:	260b      	movs	r6, #11
 800507a:	19bb      	adds	r3, r7, r6
 800507c:	1c02      	adds	r2, r0, #0
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	2508      	movs	r5, #8
 8005082:	197b      	adds	r3, r7, r5
 8005084:	1c0a      	adds	r2, r1, #0
 8005086:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685c      	ldr	r4, [r3, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6898      	ldr	r0, [r3, #8]
 8005090:	197b      	adds	r3, r7, r5
 8005092:	881d      	ldrh	r5, [r3, #0]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	19bb      	adds	r3, r7, r6
 8005098:	7819      	ldrb	r1, [r3, #0]
 800509a:	002b      	movs	r3, r5
 800509c:	47a0      	blx	r4
 800509e:	0003      	movs	r3, r0
 80050a0:	617b      	str	r3, [r7, #20]
  return ret;
 80050a2:	697b      	ldr	r3, [r7, #20]
}
 80050a4:	0018      	movs	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b007      	add	sp, #28
 80050aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050ac <hts221_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 80050ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	0008      	movs	r0, r1
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	0019      	movs	r1, r3
 80050ba:	260b      	movs	r6, #11
 80050bc:	19bb      	adds	r3, r7, r6
 80050be:	1c02      	adds	r2, r0, #0
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	2508      	movs	r5, #8
 80050c4:	197b      	adds	r3, r7, r5
 80050c6:	1c0a      	adds	r2, r1, #0
 80050c8:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681c      	ldr	r4, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6898      	ldr	r0, [r3, #8]
 80050d2:	197b      	adds	r3, r7, r5
 80050d4:	881d      	ldrh	r5, [r3, #0]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	19bb      	adds	r3, r7, r6
 80050da:	7819      	ldrb	r1, [r3, #0]
 80050dc:	002b      	movs	r3, r5
 80050de:	47a0      	blx	r4
 80050e0:	0003      	movs	r3, r0
 80050e2:	617b      	str	r3, [r7, #20]
  return ret;
 80050e4:	697b      	ldr	r3, [r7, #20]
}
 80050e6:	0018      	movs	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	b007      	add	sp, #28
 80050ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050ee <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80050ee:	b590      	push	{r4, r7, lr}
 80050f0:	b085      	sub	sp, #20
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	000a      	movs	r2, r1
 80050f8:	1cfb      	adds	r3, r7, #3
 80050fa:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80050fc:	2408      	movs	r4, #8
 80050fe:	193a      	adds	r2, r7, r4
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	2301      	movs	r3, #1
 8005104:	2120      	movs	r1, #32
 8005106:	f7ff ffb0 	bl	800506a <hts221_read_reg>
 800510a:	0003      	movs	r3, r0
 800510c:	60fb      	str	r3, [r7, #12]

  if(ret == 0){
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d117      	bne.n	8005144 <hts221_data_rate_set+0x56>
    reg.odr = (uint8_t)val;
 8005114:	1cfb      	adds	r3, r7, #3
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2203      	movs	r2, #3
 800511a:	4013      	ands	r3, r2
 800511c:	b2da      	uxtb	r2, r3
 800511e:	193b      	adds	r3, r7, r4
 8005120:	2103      	movs	r1, #3
 8005122:	400a      	ands	r2, r1
 8005124:	0010      	movs	r0, r2
 8005126:	781a      	ldrb	r2, [r3, #0]
 8005128:	2103      	movs	r1, #3
 800512a:	438a      	bics	r2, r1
 800512c:	1c11      	adds	r1, r2, #0
 800512e:	1c02      	adds	r2, r0, #0
 8005130:	430a      	orrs	r2, r1
 8005132:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8005134:	193a      	adds	r2, r7, r4
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	2301      	movs	r3, #1
 800513a:	2120      	movs	r1, #32
 800513c:	f7ff ffb6 	bl	80050ac <hts221_write_reg>
 8005140:	0003      	movs	r3, r0
 8005142:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005144:	68fb      	ldr	r3, [r7, #12]
}
 8005146:	0018      	movs	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	b005      	add	sp, #20
 800514c:	bd90      	pop	{r4, r7, pc}

0800514e <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 800514e:	b590      	push	{r4, r7, lr}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8005158:	2408      	movs	r4, #8
 800515a:	193a      	adds	r2, r7, r4
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	2301      	movs	r3, #1
 8005160:	2120      	movs	r1, #32
 8005162:	f7ff ff82 	bl	800506a <hts221_read_reg>
 8005166:	0003      	movs	r3, r0
 8005168:	60fb      	str	r3, [r7, #12]

  switch (reg.odr) {
 800516a:	193b      	adds	r3, r7, r4
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	079b      	lsls	r3, r3, #30
 8005170:	0f9b      	lsrs	r3, r3, #30
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b03      	cmp	r3, #3
 8005176:	d014      	beq.n	80051a2 <hts221_data_rate_get+0x54>
 8005178:	dc17      	bgt.n	80051aa <hts221_data_rate_get+0x5c>
 800517a:	2b02      	cmp	r3, #2
 800517c:	d00d      	beq.n	800519a <hts221_data_rate_get+0x4c>
 800517e:	dc14      	bgt.n	80051aa <hts221_data_rate_get+0x5c>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <hts221_data_rate_get+0x3c>
 8005184:	2b01      	cmp	r3, #1
 8005186:	d004      	beq.n	8005192 <hts221_data_rate_get+0x44>
 8005188:	e00f      	b.n	80051aa <hts221_data_rate_get+0x5c>
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
      break;
 8005190:	e00f      	b.n	80051b2 <hts221_data_rate_get+0x64>
    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2201      	movs	r2, #1
 8005196:	701a      	strb	r2, [r3, #0]
      break;
 8005198:	e00b      	b.n	80051b2 <hts221_data_rate_get+0x64>
    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2202      	movs	r2, #2
 800519e:	701a      	strb	r2, [r3, #0]
      break;
 80051a0:	e007      	b.n	80051b2 <hts221_data_rate_get+0x64>
    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2203      	movs	r2, #3
 80051a6:	701a      	strb	r2, [r3, #0]
      break;
 80051a8:	e003      	b.n	80051b2 <hts221_data_rate_get+0x64>
    default:
      *val = HTS221_ODR_ND;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2204      	movs	r2, #4
 80051ae:	701a      	strb	r2, [r3, #0]
      break;
 80051b0:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80051b2:	68fb      	ldr	r3, [r7, #12]
}
 80051b4:	0018      	movs	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b005      	add	sp, #20
 80051ba:	bd90      	pop	{r4, r7, pc}

080051bc <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	000a      	movs	r2, r1
 80051c6:	1cfb      	adds	r3, r7, #3
 80051c8:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80051ca:	2408      	movs	r4, #8
 80051cc:	193a      	adds	r2, r7, r4
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	2301      	movs	r3, #1
 80051d2:	2120      	movs	r1, #32
 80051d4:	f7ff ff49 	bl	800506a <hts221_read_reg>
 80051d8:	0003      	movs	r3, r0
 80051da:	60fb      	str	r3, [r7, #12]

  if(ret == 0){
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d117      	bne.n	8005212 <hts221_block_data_update_set+0x56>
    reg.bdu = val;
 80051e2:	1cfb      	adds	r3, r7, #3
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2201      	movs	r2, #1
 80051e8:	4013      	ands	r3, r2
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	193b      	adds	r3, r7, r4
 80051ee:	2101      	movs	r1, #1
 80051f0:	400a      	ands	r2, r1
 80051f2:	0090      	lsls	r0, r2, #2
 80051f4:	781a      	ldrb	r2, [r3, #0]
 80051f6:	2104      	movs	r1, #4
 80051f8:	438a      	bics	r2, r1
 80051fa:	1c11      	adds	r1, r2, #0
 80051fc:	1c02      	adds	r2, r0, #0
 80051fe:	430a      	orrs	r2, r1
 8005200:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8005202:	193a      	adds	r2, r7, r4
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	2301      	movs	r3, #1
 8005208:	2120      	movs	r1, #32
 800520a:	f7ff ff4f 	bl	80050ac <hts221_write_reg>
 800520e:	0003      	movs	r3, r0
 8005210:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005212:	68fb      	ldr	r3, [r7, #12]
}
 8005214:	0018      	movs	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	b005      	add	sp, #20
 800521a:	bd90      	pop	{r4, r7, pc}

0800521c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	2302      	movs	r3, #2
 800522c:	2128      	movs	r1, #40	@ 0x28
 800522e:	f7ff ff1c 	bl	800506a <hts221_read_reg>
 8005232:	0003      	movs	r3, r0
 8005234:	60fb      	str	r3, [r7, #12]
  return ret;
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	0018      	movs	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	b004      	add	sp, #16
 800523e:	bd80      	pop	{r7, pc}

08005240 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	2302      	movs	r3, #2
 8005250:	212a      	movs	r1, #42	@ 0x2a
 8005252:	f7ff ff0a 	bl	800506a <hts221_read_reg>
 8005256:	0003      	movs	r3, r0
 8005258:	60fb      	str	r3, [r7, #12]
  return ret;
 800525a:	68fb      	ldr	r3, [r7, #12]
}
 800525c:	0018      	movs	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	b004      	add	sp, #16
 8005262:	bd80      	pop	{r7, pc}

08005264 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	2301      	movs	r3, #1
 8005274:	210f      	movs	r1, #15
 8005276:	f7ff fef8 	bl	800506a <hts221_read_reg>
 800527a:	0003      	movs	r3, r0
 800527c:	60fb      	str	r3, [r7, #12]
  return ret;
 800527e:	68fb      	ldr	r3, [r7, #12]
}
 8005280:	0018      	movs	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	b004      	add	sp, #16
 8005286:	bd80      	pop	{r7, pc}

08005288 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	000a      	movs	r2, r1
 8005292:	1cfb      	adds	r3, r7, #3
 8005294:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 8005296:	2408      	movs	r4, #8
 8005298:	193a      	adds	r2, r7, r4
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	2301      	movs	r3, #1
 800529e:	2120      	movs	r1, #32
 80052a0:	f7ff fee3 	bl	800506a <hts221_read_reg>
 80052a4:	0003      	movs	r3, r0
 80052a6:	60fb      	str	r3, [r7, #12]

  if(ret == 0){
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d115      	bne.n	80052da <hts221_power_on_set+0x52>
    reg.pd = val;
 80052ae:	1cfb      	adds	r3, r7, #3
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2201      	movs	r2, #1
 80052b4:	4013      	ands	r3, r2
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	193b      	adds	r3, r7, r4
 80052ba:	01d0      	lsls	r0, r2, #7
 80052bc:	781a      	ldrb	r2, [r3, #0]
 80052be:	217f      	movs	r1, #127	@ 0x7f
 80052c0:	400a      	ands	r2, r1
 80052c2:	1c11      	adds	r1, r2, #0
 80052c4:	1c02      	adds	r2, r0, #0
 80052c6:	430a      	orrs	r2, r1
 80052c8:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t*) &reg, 1);
 80052ca:	193a      	adds	r2, r7, r4
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	2301      	movs	r3, #1
 80052d0:	2120      	movs	r1, #32
 80052d2:	f7ff feeb 	bl	80050ac <hts221_write_reg>
 80052d6:	0003      	movs	r3, r0
 80052d8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80052da:	68fb      	ldr	r3, [r7, #12]
}
 80052dc:	0018      	movs	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	b005      	add	sp, #20
 80052e2:	bd90      	pop	{r4, r7, pc}

080052e4 <hts221_hum_rh_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, buff, 1);
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	2301      	movs	r3, #1
 80052f4:	2130      	movs	r1, #48	@ 0x30
 80052f6:	f7ff feb8 	bl	800506a <hts221_read_reg>
 80052fa:	0003      	movs	r3, r0
 80052fc:	60fb      	str	r3, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	085b      	lsrs	r3, r3, #1
 8005304:	b2da      	uxtb	r2, r3
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	701a      	strb	r2, [r3, #0]

  return ret;
 800530a:	68fb      	ldr	r3, [r7, #12]
}
 800530c:	0018      	movs	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	b004      	add	sp, #16
 8005312:	bd80      	pop	{r7, pc}

08005314 <hts221_hum_rh_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, buff, 1);
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	2301      	movs	r3, #1
 8005324:	2131      	movs	r1, #49	@ 0x31
 8005326:	f7ff fea0 	bl	800506a <hts221_read_reg>
 800532a:	0003      	movs	r3, r0
 800532c:	60fb      	str	r3, [r7, #12]
  *buff = (uint8_t)(((uint16_t)(*buff) >> 1) & 0x7FFFu);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	085b      	lsrs	r3, r3, #1
 8005334:	b2da      	uxtb	r2, r3
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	701a      	strb	r2, [r3, #0]

  return ret;
 800533a:	68fb      	ldr	r3, [r7, #12]
}
 800533c:	0018      	movs	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	b004      	add	sp, #16
 8005342:	bd80      	pop	{r7, pc}

08005344 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005344:	b5b0      	push	{r4, r5, r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800534e:	240f      	movs	r4, #15
 8005350:	193a      	adds	r2, r7, r4
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	2301      	movs	r3, #1
 8005356:	2132      	movs	r1, #50	@ 0x32
 8005358:	f7ff fe87 	bl	800506a <hts221_read_reg>
 800535c:	0003      	movs	r3, r0
 800535e:	617b      	str	r3, [r7, #20]

  if(ret == 0){
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d11a      	bne.n	800539c <hts221_temp_deg_point_0_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 8005366:	2510      	movs	r5, #16
 8005368:	197a      	adds	r2, r7, r5
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	2301      	movs	r3, #1
 800536e:	2135      	movs	r1, #53	@ 0x35
 8005370:	f7ff fe7b 	bl	800506a <hts221_read_reg>
 8005374:	0003      	movs	r3, r0
 8005376:	617b      	str	r3, [r7, #20]
    coeff_h = reg.t0_msb;
 8005378:	197b      	adds	r3, r7, r5
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	079b      	lsls	r3, r3, #30
 800537e:	0f9b      	lsrs	r3, r3, #30
 8005380:	b2da      	uxtb	r2, r3
 8005382:	2113      	movs	r1, #19
 8005384:	187b      	adds	r3, r7, r1
 8005386:	701a      	strb	r2, [r3, #0]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 8005388:	187b      	adds	r3, r7, r1
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	193a      	adds	r2, r7, r4
 8005390:	7812      	ldrb	r2, [r2, #0]
 8005392:	189b      	adds	r3, r3, r2
 8005394:	10db      	asrs	r3, r3, #3
 8005396:	b2da      	uxtb	r2, r3
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800539c:	697b      	ldr	r3, [r7, #20]
}
 800539e:	0018      	movs	r0, r3
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b006      	add	sp, #24
 80053a4:	bdb0      	pop	{r4, r5, r7, pc}

080053a6 <hts221_temp_deg_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80053a6:	b5b0      	push	{r4, r5, r7, lr}
 80053a8:	b086      	sub	sp, #24
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80053b0:	240f      	movs	r4, #15
 80053b2:	193a      	adds	r2, r7, r4
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	2301      	movs	r3, #1
 80053b8:	2133      	movs	r1, #51	@ 0x33
 80053ba:	f7ff fe56 	bl	800506a <hts221_read_reg>
 80053be:	0003      	movs	r3, r0
 80053c0:	617b      	str	r3, [r7, #20]

  if(ret == 0){
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d11a      	bne.n	80053fe <hts221_temp_deg_point_1_get+0x58>
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t*) &reg, 1);
 80053c8:	2510      	movs	r5, #16
 80053ca:	197a      	adds	r2, r7, r5
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	2301      	movs	r3, #1
 80053d0:	2135      	movs	r1, #53	@ 0x35
 80053d2:	f7ff fe4a 	bl	800506a <hts221_read_reg>
 80053d6:	0003      	movs	r3, r0
 80053d8:	617b      	str	r3, [r7, #20]
    coeff_h = reg.t1_msb;
 80053da:	197b      	adds	r3, r7, r5
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	071b      	lsls	r3, r3, #28
 80053e0:	0f9b      	lsrs	r3, r3, #30
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	2113      	movs	r1, #19
 80053e6:	187b      	adds	r3, r7, r1
 80053e8:	701a      	strb	r2, [r3, #0]
    *(buff) = (uint8_t)(((coeff_h << 8) + coeff_l) >> 3);
 80053ea:	187b      	adds	r3, r7, r1
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	193a      	adds	r2, r7, r4
 80053f2:	7812      	ldrb	r2, [r2, #0]
 80053f4:	189b      	adds	r3, r3, r2
 80053f6:	10db      	asrs	r3, r3, #3
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80053fe:	697b      	ldr	r3, [r7, #20]
}
 8005400:	0018      	movs	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	b006      	add	sp, #24
 8005406:	bdb0      	pop	{r4, r5, r7, pc}

08005408 <hts221_hum_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, buff, 2);
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	2302      	movs	r3, #2
 8005418:	2136      	movs	r1, #54	@ 0x36
 800541a:	f7ff fe26 	bl	800506a <hts221_read_reg>
 800541e:	0003      	movs	r3, r0
 8005420:	60fb      	str	r3, [r7, #12]
  return ret;
 8005422:	68fb      	ldr	r3, [r7, #12]
}
 8005424:	0018      	movs	r0, r3
 8005426:	46bd      	mov	sp, r7
 8005428:	b004      	add	sp, #16
 800542a:	bd80      	pop	{r7, pc}

0800542c <hts221_hum_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, buff, 2);
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	2302      	movs	r3, #2
 800543c:	213a      	movs	r1, #58	@ 0x3a
 800543e:	f7ff fe14 	bl	800506a <hts221_read_reg>
 8005442:	0003      	movs	r3, r0
 8005444:	60fb      	str	r3, [r7, #12]
  return ret;
 8005446:	68fb      	ldr	r3, [r7, #12]
}
 8005448:	0018      	movs	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	b004      	add	sp, #16
 800544e:	bd80      	pop	{r7, pc}

08005450 <hts221_temp_adc_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, buff, 2);
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	2302      	movs	r3, #2
 8005460:	213c      	movs	r1, #60	@ 0x3c
 8005462:	f7ff fe02 	bl	800506a <hts221_read_reg>
 8005466:	0003      	movs	r3, r0
 8005468:	60fb      	str	r3, [r7, #12]
  return ret;
 800546a:	68fb      	ldr	r3, [r7, #12]
}
 800546c:	0018      	movs	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	b004      	add	sp, #16
 8005472:	bd80      	pop	{r7, pc}

08005474 <hts221_temp_adc_point_1_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, buff, 2);
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	2302      	movs	r3, #2
 8005484:	213e      	movs	r1, #62	@ 0x3e
 8005486:	f7ff fdf0 	bl	800506a <hts221_read_reg>
 800548a:	0003      	movs	r3, r0
 800548c:	60fb      	str	r3, [r7, #12]
  return ret;
 800548e:	68fb      	ldr	r3, [r7, #12]
}
 8005490:	0018      	movs	r0, r3
 8005492:	46bd      	mov	sp, r7
 8005494:	b004      	add	sp, #16
 8005496:	bd80      	pop	{r7, pc}

08005498 <LIS2DW12_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d103      	bne.n	80054b4 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	425b      	negs	r3, r3
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	e04e      	b.n	8005552 <LIS2DW12_RegisterBusIO+0xba>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	7b1a      	ldrb	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	695a      	ldr	r2, [r3, #20]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a1b      	ldr	r2, [pc, #108]	@ (800555c <LIS2DW12_RegisterBusIO+0xc4>)
 80054f0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005560 <LIS2DW12_RegisterBusIO+0xc8>)
 80054f6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	425b      	negs	r3, r3
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	e021      	b.n	8005552 <LIS2DW12_RegisterBusIO+0xba>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4798      	blx	r3
 8005514:	1e03      	subs	r3, r0, #0
 8005516:	d003      	beq.n	8005520 <LIS2DW12_RegisterBusIO+0x88>
    {
      ret = LIS2DW12_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	425b      	negs	r3, r3
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	e018      	b.n	8005552 <LIS2DW12_RegisterBusIO+0xba>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b02      	cmp	r3, #2
 8005526:	d114      	bne.n	8005552 <LIS2DW12_RegisterBusIO+0xba>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2228      	movs	r2, #40	@ 0x28
 800552c:	5c9b      	ldrb	r3, [r3, r2]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10f      	bne.n	8005552 <LIS2DW12_RegisterBusIO+0xba>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8005532:	210b      	movs	r1, #11
 8005534:	187b      	adds	r3, r7, r1
 8005536:	2205      	movs	r2, #5
 8005538:	701a      	strb	r2, [r3, #0]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 800553a:	187b      	adds	r3, r7, r1
 800553c:	781a      	ldrb	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2121      	movs	r1, #33	@ 0x21
 8005542:	0018      	movs	r0, r3
 8005544:	f000 fc5e 	bl	8005e04 <LIS2DW12_Write_Reg>
 8005548:	1e03      	subs	r3, r0, #0
 800554a:	d002      	beq.n	8005552 <LIS2DW12_RegisterBusIO+0xba>
          {
            ret = LIS2DW12_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	425b      	negs	r3, r3
 8005550:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005552:	68fb      	ldr	r3, [r7, #12]
}
 8005554:	0018      	movs	r0, r3
 8005556:	46bd      	mov	sp, r7
 8005558:	b004      	add	sp, #16
 800555a:	bd80      	pop	{r7, pc}
 800555c:	0800614d 	.word	0x0800614d
 8005560:	08006191 	.word	0x08006191

08005564 <LIS2DW12_Init>:
 * @brief  Initialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	331c      	adds	r3, #28
 8005570:	2101      	movs	r1, #1
 8005572:	0018      	movs	r0, r3
 8005574:	f001 f8df 	bl	8006736 <lis2dw12_auto_increment_set>
 8005578:	1e03      	subs	r3, r0, #0
 800557a:	d002      	beq.n	8005582 <LIS2DW12_Init+0x1e>
  {
    return LIS2DW12_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	425b      	negs	r3, r3
 8005580:	e046      	b.n	8005610 <LIS2DW12_Init+0xac>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	331c      	adds	r3, #28
 8005586:	2101      	movs	r1, #1
 8005588:	0018      	movs	r0, r3
 800558a:	f001 f819 	bl	80065c0 <lis2dw12_block_data_update_set>
 800558e:	1e03      	subs	r3, r0, #0
 8005590:	d002      	beq.n	8005598 <LIS2DW12_Init+0x34>
  {
    return LIS2DW12_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	425b      	negs	r3, r3
 8005596:	e03b      	b.n	8005610 <LIS2DW12_Init+0xac>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	331c      	adds	r3, #28
 800559c:	2100      	movs	r1, #0
 800559e:	0018      	movs	r0, r3
 80055a0:	f001 f8f9 	bl	8006796 <lis2dw12_fifo_mode_set>
 80055a4:	1e03      	subs	r3, r0, #0
 80055a6:	d002      	beq.n	80055ae <LIS2DW12_Init+0x4a>
  {
    return LIS2DW12_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	425b      	negs	r3, r3
 80055ac:	e030      	b.n	8005610 <LIS2DW12_Init+0xac>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	331c      	adds	r3, #28
 80055b2:	2104      	movs	r1, #4
 80055b4:	0018      	movs	r0, r3
 80055b6:	f000 fe4f 	bl	8006258 <lis2dw12_power_mode_set>
 80055ba:	1e03      	subs	r3, r0, #0
 80055bc:	d002      	beq.n	80055c4 <LIS2DW12_Init+0x60>
  {
    return LIS2DW12_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	425b      	negs	r3, r3
 80055c2:	e025      	b.n	8005610 <LIS2DW12_Init+0xac>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a14      	ldr	r2, [pc, #80]	@ (8005618 <LIS2DW12_Init+0xb4>)
 80055c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2230      	movs	r2, #48	@ 0x30
 80055ce:	2100      	movs	r1, #0
 80055d0:	5499      	strb	r1, [r3, r2]
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2231      	movs	r2, #49	@ 0x31
 80055d6:	2100      	movs	r1, #0
 80055d8:	5499      	strb	r1, [r3, r2]

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	331c      	adds	r3, #28
 80055de:	2100      	movs	r1, #0
 80055e0:	0018      	movs	r0, r3
 80055e2:	f000 ff2d 	bl	8006440 <lis2dw12_data_rate_set>
 80055e6:	1e03      	subs	r3, r0, #0
 80055e8:	d002      	beq.n	80055f0 <LIS2DW12_Init+0x8c>
  {
    return LIS2DW12_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	425b      	negs	r3, r3
 80055ee:	e00f      	b.n	8005610 <LIS2DW12_Init+0xac>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	331c      	adds	r3, #28
 80055f4:	2100      	movs	r1, #0
 80055f6:	0018      	movs	r0, r3
 80055f8:	f001 f812 	bl	8006620 <lis2dw12_full_scale_set>
 80055fc:	1e03      	subs	r3, r0, #0
 80055fe:	d002      	beq.n	8005606 <LIS2DW12_Init+0xa2>
  {
    return LIS2DW12_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	425b      	negs	r3, r3
 8005604:	e004      	b.n	8005610 <LIS2DW12_Init+0xac>
  }

  pObj->is_initialized = 1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2228      	movs	r2, #40	@ 0x28
 800560a:	2101      	movs	r1, #1
 800560c:	5499      	strb	r1, [r3, r2]

  return LIS2DW12_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	0018      	movs	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	b002      	add	sp, #8
 8005616:	bd80      	pop	{r7, pc}
 8005618:	42c80000 	.word	0x42c80000

0800561c <LIS2DW12_DeInit>:
 * @brief  Deinitialize the LIS2DW12 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	0018      	movs	r0, r3
 8005628:	f000 f87e 	bl	8005728 <LIS2DW12_ACC_Disable>
 800562c:	1e03      	subs	r3, r0, #0
 800562e:	d002      	beq.n	8005636 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	425b      	negs	r3, r3
 8005634:	e00f      	b.n	8005656 <LIS2DW12_DeInit+0x3a>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2230      	movs	r2, #48	@ 0x30
 8005640:	2100      	movs	r1, #0
 8005642:	5499      	strb	r1, [r3, r2]
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2231      	movs	r2, #49	@ 0x31
 8005648:	2100      	movs	r1, #0
 800564a:	5499      	strb	r1, [r3, r2]

  pObj->is_initialized = 0;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2228      	movs	r2, #40	@ 0x28
 8005650:	2100      	movs	r1, #0
 8005652:	5499      	strb	r1, [r3, r2]

  return LIS2DW12_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	b002      	add	sp, #8
 800565c:	bd80      	pop	{r7, pc}

0800565e <LIS2DW12_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	331c      	adds	r3, #28
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	0011      	movs	r1, r2
 8005670:	0018      	movs	r0, r3
 8005672:	f001 f84e 	bl	8006712 <lis2dw12_device_id_get>
 8005676:	1e03      	subs	r3, r0, #0
 8005678:	d002      	beq.n	8005680 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	425b      	negs	r3, r3
 800567e:	e000      	b.n	8005682 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	0018      	movs	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	b002      	add	sp, #8
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <LIS2DW12_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2DW12 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2201      	movs	r2, #1
 800569a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2200      	movs	r2, #0
 80056a0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2200      	movs	r2, #0
 80056a6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2200      	movs	r2, #0
 80056ac:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2200      	movs	r2, #0
 80056b2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2210      	movs	r2, #16
 80056b8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2200      	movs	r2, #0
 80056be:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2200      	movs	r2, #0
 80056c4:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	4a04      	ldr	r2, [pc, #16]	@ (80056dc <LIS2DW12_GetCapabilities+0x50>)
 80056ca:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	0018      	movs	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b002      	add	sp, #8
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	44c80000 	.word	0x44c80000

080056e0 <LIS2DW12_ACC_Enable>:
 * @brief  Enable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2229      	movs	r2, #41	@ 0x29
 80056ec:	5c9b      	ldrb	r3, [r3, r2]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e014      	b.n	8005720 <LIS2DW12_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != LIS2DW12_OK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2230      	movs	r2, #48	@ 0x30
 80056fe:	5c9a      	ldrb	r2, [r3, r2]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2031      	movs	r0, #49	@ 0x31
 8005704:	5c1b      	ldrb	r3, [r3, r0]
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fb9c 	bl	8005e44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800570c:	1e03      	subs	r3, r0, #0
 800570e:	d002      	beq.n	8005716 <LIS2DW12_ACC_Enable+0x36>
  {
    return LIS2DW12_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	425b      	negs	r3, r3
 8005714:	e004      	b.n	8005720 <LIS2DW12_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2229      	movs	r2, #41	@ 0x29
 800571a:	2101      	movs	r1, #1
 800571c:	5499      	strb	r1, [r3, r2]

  return LIS2DW12_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	0018      	movs	r0, r3
 8005722:	46bd      	mov	sp, r7
 8005724:	b002      	add	sp, #8
 8005726:	bd80      	pop	{r7, pc}

08005728 <LIS2DW12_ACC_Disable>:
 * @brief  Disable the LIS2DW12 accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2229      	movs	r2, #41	@ 0x29
 8005734:	5c9b      	ldrb	r3, [r3, r2]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	e00f      	b.n	800575e <LIS2DW12_ACC_Disable+0x36>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	331c      	adds	r3, #28
 8005742:	2100      	movs	r1, #0
 8005744:	0018      	movs	r0, r3
 8005746:	f000 fe7b 	bl	8006440 <lis2dw12_data_rate_set>
 800574a:	1e03      	subs	r3, r0, #0
 800574c:	d002      	beq.n	8005754 <LIS2DW12_ACC_Disable+0x2c>
  {
    return LIS2DW12_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	425b      	negs	r3, r3
 8005752:	e004      	b.n	800575e <LIS2DW12_ACC_Disable+0x36>
  }

  pObj->acc_is_enabled = 0;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2229      	movs	r2, #41	@ 0x29
 8005758:	2100      	movs	r1, #0
 800575a:	5499      	strb	r1, [r3, r2]

  return LIS2DW12_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	0018      	movs	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	b002      	add	sp, #8
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <LIS2DW12_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	331c      	adds	r3, #28
 800577a:	220b      	movs	r2, #11
 800577c:	18ba      	adds	r2, r7, r2
 800577e:	0011      	movs	r1, r2
 8005780:	0018      	movs	r0, r3
 8005782:	f000 ff7d 	bl	8006680 <lis2dw12_full_scale_get>
 8005786:	1e03      	subs	r3, r0, #0
 8005788:	d002      	beq.n	8005790 <LIS2DW12_ACC_GetSensitivity+0x28>
  {
    return LIS2DW12_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	425b      	negs	r3, r3
 800578e:	e07c      	b.n	800588a <LIS2DW12_ACC_GetSensitivity+0x122>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	331c      	adds	r3, #28
 8005794:	220a      	movs	r2, #10
 8005796:	18ba      	adds	r2, r7, r2
 8005798:	0011      	movs	r1, r2
 800579a:	0018      	movs	r0, r3
 800579c:	f000 fdc8 	bl	8006330 <lis2dw12_power_mode_get>
 80057a0:	1e03      	subs	r3, r0, #0
 80057a2:	d002      	beq.n	80057aa <LIS2DW12_ACC_GetSensitivity+0x42>
  {
    return LIS2DW12_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	425b      	negs	r3, r3
 80057a8:	e06f      	b.n	800588a <LIS2DW12_ACC_GetSensitivity+0x122>
  }

  switch(mode)
 80057aa:	230a      	movs	r3, #10
 80057ac:	18fb      	adds	r3, r7, r3
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	221b      	movs	r2, #27
 80057b2:	429a      	cmp	r2, r3
 80057b4:	4192      	sbcs	r2, r2
 80057b6:	4252      	negs	r2, r2
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	2a00      	cmp	r2, #0
 80057bc:	d000      	beq.n	80057c0 <LIS2DW12_ACC_GetSensitivity+0x58>
 80057be:	e05c      	b.n	800587a <LIS2DW12_ACC_GetSensitivity+0x112>
 80057c0:	2201      	movs	r2, #1
 80057c2:	409a      	lsls	r2, r3
 80057c4:	0013      	movs	r3, r2
 80057c6:	4a33      	ldr	r2, [pc, #204]	@ (8005894 <LIS2DW12_ACC_GetSensitivity+0x12c>)
 80057c8:	401a      	ands	r2, r3
 80057ca:	1e51      	subs	r1, r2, #1
 80057cc:	418a      	sbcs	r2, r1
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	2a00      	cmp	r2, #0
 80057d2:	d12c      	bne.n	800582e <LIS2DW12_ACC_GetSensitivity+0xc6>
 80057d4:	4a30      	ldr	r2, [pc, #192]	@ (8005898 <LIS2DW12_ACC_GetSensitivity+0x130>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	1e5a      	subs	r2, r3, #1
 80057da:	4193      	sbcs	r3, r2
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d04b      	beq.n	800587a <LIS2DW12_ACC_GetSensitivity+0x112>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 80057e2:	230b      	movs	r3, #11
 80057e4:	18fb      	adds	r3, r7, r3
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d014      	beq.n	8005816 <LIS2DW12_ACC_GetSensitivity+0xae>
 80057ec:	dc17      	bgt.n	800581e <LIS2DW12_ACC_GetSensitivity+0xb6>
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d00d      	beq.n	800580e <LIS2DW12_ACC_GetSensitivity+0xa6>
 80057f2:	dc14      	bgt.n	800581e <LIS2DW12_ACC_GetSensitivity+0xb6>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <LIS2DW12_ACC_GetSensitivity+0x96>
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d004      	beq.n	8005806 <LIS2DW12_ACC_GetSensitivity+0x9e>
 80057fc:	e00f      	b.n	800581e <LIS2DW12_ACC_GetSensitivity+0xb6>
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	4a26      	ldr	r2, [pc, #152]	@ (800589c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8005802:	601a      	str	r2, [r3, #0]
           break;
 8005804:	e012      	b.n	800582c <LIS2DW12_ACC_GetSensitivity+0xc4>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	4a25      	ldr	r2, [pc, #148]	@ (80058a0 <LIS2DW12_ACC_GetSensitivity+0x138>)
 800580a:	601a      	str	r2, [r3, #0]
          break;
 800580c:	e00e      	b.n	800582c <LIS2DW12_ACC_GetSensitivity+0xc4>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	4a24      	ldr	r2, [pc, #144]	@ (80058a4 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8005812:	601a      	str	r2, [r3, #0]
           break;
 8005814:	e00a      	b.n	800582c <LIS2DW12_ACC_GetSensitivity+0xc4>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	4a23      	ldr	r2, [pc, #140]	@ (80058a8 <LIS2DW12_ACC_GetSensitivity+0x140>)
 800581a:	601a      	str	r2, [r3, #0]
          break;
 800581c:	e006      	b.n	800582c <LIS2DW12_ACC_GetSensitivity+0xc4>

        default:
          *Sensitivity = -1.0f;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	4a22      	ldr	r2, [pc, #136]	@ (80058ac <LIS2DW12_ACC_GetSensitivity+0x144>)
 8005822:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	425b      	negs	r3, r3
 8005828:	60fb      	str	r3, [r7, #12]
          break;
 800582a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800582c:	e02c      	b.n	8005888 <LIS2DW12_ACC_GetSensitivity+0x120>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 800582e:	230b      	movs	r3, #11
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b03      	cmp	r3, #3
 8005836:	d014      	beq.n	8005862 <LIS2DW12_ACC_GetSensitivity+0xfa>
 8005838:	dc17      	bgt.n	800586a <LIS2DW12_ACC_GetSensitivity+0x102>
 800583a:	2b02      	cmp	r3, #2
 800583c:	d00d      	beq.n	800585a <LIS2DW12_ACC_GetSensitivity+0xf2>
 800583e:	dc14      	bgt.n	800586a <LIS2DW12_ACC_GetSensitivity+0x102>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <LIS2DW12_ACC_GetSensitivity+0xe2>
 8005844:	2b01      	cmp	r3, #1
 8005846:	d004      	beq.n	8005852 <LIS2DW12_ACC_GetSensitivity+0xea>
 8005848:	e00f      	b.n	800586a <LIS2DW12_ACC_GetSensitivity+0x102>
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	4a18      	ldr	r2, [pc, #96]	@ (80058b0 <LIS2DW12_ACC_GetSensitivity+0x148>)
 800584e:	601a      	str	r2, [r3, #0]
           break;
 8005850:	e012      	b.n	8005878 <LIS2DW12_ACC_GetSensitivity+0x110>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	4a17      	ldr	r2, [pc, #92]	@ (80058b4 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8005856:	601a      	str	r2, [r3, #0]
          break;
 8005858:	e00e      	b.n	8005878 <LIS2DW12_ACC_GetSensitivity+0x110>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	4a0f      	ldr	r2, [pc, #60]	@ (800589c <LIS2DW12_ACC_GetSensitivity+0x134>)
 800585e:	601a      	str	r2, [r3, #0]
           break;
 8005860:	e00a      	b.n	8005878 <LIS2DW12_ACC_GetSensitivity+0x110>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	4a0e      	ldr	r2, [pc, #56]	@ (80058a0 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8005866:	601a      	str	r2, [r3, #0]
          break;
 8005868:	e006      	b.n	8005878 <LIS2DW12_ACC_GetSensitivity+0x110>

        default:
          *Sensitivity = -1.0f;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	4a0f      	ldr	r2, [pc, #60]	@ (80058ac <LIS2DW12_ACC_GetSensitivity+0x144>)
 800586e:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	425b      	negs	r3, r3
 8005874:	60fb      	str	r3, [r7, #12]
          break;
 8005876:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8005878:	e006      	b.n	8005888 <LIS2DW12_ACC_GetSensitivity+0x120>

    default:
      *Sensitivity = -1.0f;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	4a0b      	ldr	r2, [pc, #44]	@ (80058ac <LIS2DW12_ACC_GetSensitivity+0x144>)
 800587e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	425b      	negs	r3, r3
 8005884:	60fb      	str	r3, [r7, #12]
      break;
 8005886:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8005888:	68fb      	ldr	r3, [r7, #12]
}
 800588a:	0018      	movs	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	b004      	add	sp, #16
 8005890:	bd80      	pop	{r7, pc}
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	0e1e0e1e 	.word	0x0e1e0e1e
 8005898:	01010101 	.word	0x01010101
 800589c:	3f79db23 	.word	0x3f79db23
 80058a0:	3ff9db23 	.word	0x3ff9db23
 80058a4:	4079db23 	.word	0x4079db23
 80058a8:	40f9db23 	.word	0x40f9db23
 80058ac:	bf800000 	.word	0xbf800000
 80058b0:	3e79db23 	.word	0x3e79db23
 80058b4:	3ef9db23 	.word	0x3ef9db23

080058b8 <LIS2DW12_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	331c      	adds	r3, #28
 80058ca:	220b      	movs	r2, #11
 80058cc:	18ba      	adds	r2, r7, r2
 80058ce:	0011      	movs	r1, r2
 80058d0:	0018      	movs	r0, r3
 80058d2:	f000 fe0d 	bl	80064f0 <lis2dw12_data_rate_get>
 80058d6:	1e03      	subs	r3, r0, #0
 80058d8:	d002      	beq.n	80058e0 <LIS2DW12_ACC_GetOutputDataRate+0x28>
  {
    return LIS2DW12_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	425b      	negs	r3, r3
 80058de:	e0e3      	b.n	8005aa8 <LIS2DW12_ACC_GetOutputDataRate+0x1f0>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	331c      	adds	r3, #28
 80058e4:	220a      	movs	r2, #10
 80058e6:	18ba      	adds	r2, r7, r2
 80058e8:	0011      	movs	r1, r2
 80058ea:	0018      	movs	r0, r3
 80058ec:	f000 fd20 	bl	8006330 <lis2dw12_power_mode_get>
 80058f0:	1e03      	subs	r3, r0, #0
 80058f2:	d002      	beq.n	80058fa <LIS2DW12_ACC_GetOutputDataRate+0x42>
  {
    return LIS2DW12_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	425b      	negs	r3, r3
 80058f8:	e0d6      	b.n	8005aa8 <LIS2DW12_ACC_GetOutputDataRate+0x1f0>
  }

  switch (odr_low_level)
 80058fa:	230b      	movs	r3, #11
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b32      	cmp	r3, #50	@ 0x32
 8005902:	d900      	bls.n	8005906 <LIS2DW12_ACC_GetOutputDataRate+0x4e>
 8005904:	e0c8      	b.n	8005a98 <LIS2DW12_ACC_GetOutputDataRate+0x1e0>
 8005906:	009a      	lsls	r2, r3, #2
 8005908:	4b69      	ldr	r3, [pc, #420]	@ (8005ab0 <LIS2DW12_ACC_GetOutputDataRate+0x1f8>)
 800590a:	18d3      	adds	r3, r2, r3
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	469f      	mov	pc, r3
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
      break;
 8005916:	e0c6      	b.n	8005aa6 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8005918:	230a      	movs	r3, #10
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	221b      	movs	r2, #27
 8005920:	429a      	cmp	r2, r3
 8005922:	4192      	sbcs	r2, r2
 8005924:	4252      	negs	r2, r2
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	2a00      	cmp	r2, #0
 800592a:	d118      	bne.n	800595e <LIS2DW12_ACC_GetOutputDataRate+0xa6>
 800592c:	2201      	movs	r2, #1
 800592e:	409a      	lsls	r2, r3
 8005930:	0013      	movs	r3, r2
 8005932:	4a60      	ldr	r2, [pc, #384]	@ (8005ab4 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8005934:	401a      	ands	r2, r3
 8005936:	1e51      	subs	r1, r2, #1
 8005938:	418a      	sbcs	r2, r1
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	2a00      	cmp	r2, #0
 800593e:	d10a      	bne.n	8005956 <LIS2DW12_ACC_GetOutputDataRate+0x9e>
 8005940:	4a5d      	ldr	r2, [pc, #372]	@ (8005ab8 <LIS2DW12_ACC_GetOutputDataRate+0x200>)
 8005942:	4013      	ands	r3, r2
 8005944:	1e5a      	subs	r2, r3, #1
 8005946:	4193      	sbcs	r3, r2
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d007      	beq.n	800595e <LIS2DW12_ACC_GetOutputDataRate+0xa6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	4a5a      	ldr	r2, [pc, #360]	@ (8005abc <LIS2DW12_ACC_GetOutputDataRate+0x204>)
 8005952:	601a      	str	r2, [r3, #0]
           break;
 8005954:	e00a      	b.n	800596c <LIS2DW12_ACC_GetOutputDataRate+0xb4>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	4a59      	ldr	r2, [pc, #356]	@ (8005ac0 <LIS2DW12_ACC_GetOutputDataRate+0x208>)
 800595a:	601a      	str	r2, [r3, #0]
          break;
 800595c:	e006      	b.n	800596c <LIS2DW12_ACC_GetOutputDataRate+0xb4>

        default:
          *Odr = -1.0f;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	4a58      	ldr	r2, [pc, #352]	@ (8005ac4 <LIS2DW12_ACC_GetOutputDataRate+0x20c>)
 8005962:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	425b      	negs	r3, r3
 8005968:	60fb      	str	r3, [r7, #12]
          break;
 800596a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800596c:	e09b      	b.n	8005aa6 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	4a52      	ldr	r2, [pc, #328]	@ (8005abc <LIS2DW12_ACC_GetOutputDataRate+0x204>)
 8005972:	601a      	str	r2, [r3, #0]
      break;
 8005974:	e097      	b.n	8005aa6 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	4a53      	ldr	r2, [pc, #332]	@ (8005ac8 <LIS2DW12_ACC_GetOutputDataRate+0x210>)
 800597a:	601a      	str	r2, [r3, #0]
      break;
 800597c:	e093      	b.n	8005aa6 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	4a52      	ldr	r2, [pc, #328]	@ (8005acc <LIS2DW12_ACC_GetOutputDataRate+0x214>)
 8005982:	601a      	str	r2, [r3, #0]
      break;
 8005984:	e08f      	b.n	8005aa6 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	4a51      	ldr	r2, [pc, #324]	@ (8005ad0 <LIS2DW12_ACC_GetOutputDataRate+0x218>)
 800598a:	601a      	str	r2, [r3, #0]
      break;
 800598c:	e08b      	b.n	8005aa6 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	4a50      	ldr	r2, [pc, #320]	@ (8005ad4 <LIS2DW12_ACC_GetOutputDataRate+0x21c>)
 8005992:	601a      	str	r2, [r3, #0]
      break;
 8005994:	e087      	b.n	8005aa6 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8005996:	230a      	movs	r3, #10
 8005998:	18fb      	adds	r3, r7, r3
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	221b      	movs	r2, #27
 800599e:	429a      	cmp	r2, r3
 80059a0:	4192      	sbcs	r2, r2
 80059a2:	4252      	negs	r2, r2
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	2a00      	cmp	r2, #0
 80059a8:	d118      	bne.n	80059dc <LIS2DW12_ACC_GetOutputDataRate+0x124>
 80059aa:	2201      	movs	r2, #1
 80059ac:	409a      	lsls	r2, r3
 80059ae:	0013      	movs	r3, r2
 80059b0:	4a40      	ldr	r2, [pc, #256]	@ (8005ab4 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 80059b2:	401a      	ands	r2, r3
 80059b4:	1e51      	subs	r1, r2, #1
 80059b6:	418a      	sbcs	r2, r1
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	2a00      	cmp	r2, #0
 80059bc:	d10a      	bne.n	80059d4 <LIS2DW12_ACC_GetOutputDataRate+0x11c>
 80059be:	4a3e      	ldr	r2, [pc, #248]	@ (8005ab8 <LIS2DW12_ACC_GetOutputDataRate+0x200>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	1e5a      	subs	r2, r3, #1
 80059c4:	4193      	sbcs	r3, r2
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <LIS2DW12_ACC_GetOutputDataRate+0x124>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	4a42      	ldr	r2, [pc, #264]	@ (8005ad8 <LIS2DW12_ACC_GetOutputDataRate+0x220>)
 80059d0:	601a      	str	r2, [r3, #0]
           break;
 80059d2:	e00a      	b.n	80059ea <LIS2DW12_ACC_GetOutputDataRate+0x132>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	4a3f      	ldr	r2, [pc, #252]	@ (8005ad4 <LIS2DW12_ACC_GetOutputDataRate+0x21c>)
 80059d8:	601a      	str	r2, [r3, #0]
          break;
 80059da:	e006      	b.n	80059ea <LIS2DW12_ACC_GetOutputDataRate+0x132>

        default:
          *Odr = -1.0f;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	4a39      	ldr	r2, [pc, #228]	@ (8005ac4 <LIS2DW12_ACC_GetOutputDataRate+0x20c>)
 80059e0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	425b      	negs	r3, r3
 80059e6:	60fb      	str	r3, [r7, #12]
          break;
 80059e8:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80059ea:	e05c      	b.n	8005aa6 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 80059ec:	230a      	movs	r3, #10
 80059ee:	18fb      	adds	r3, r7, r3
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	221b      	movs	r2, #27
 80059f4:	429a      	cmp	r2, r3
 80059f6:	4192      	sbcs	r2, r2
 80059f8:	4252      	negs	r2, r2
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	2a00      	cmp	r2, #0
 80059fe:	d118      	bne.n	8005a32 <LIS2DW12_ACC_GetOutputDataRate+0x17a>
 8005a00:	2201      	movs	r2, #1
 8005a02:	409a      	lsls	r2, r3
 8005a04:	0013      	movs	r3, r2
 8005a06:	4a2b      	ldr	r2, [pc, #172]	@ (8005ab4 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8005a08:	401a      	ands	r2, r3
 8005a0a:	1e51      	subs	r1, r2, #1
 8005a0c:	418a      	sbcs	r2, r1
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	d10a      	bne.n	8005a2a <LIS2DW12_ACC_GetOutputDataRate+0x172>
 8005a14:	4a28      	ldr	r2, [pc, #160]	@ (8005ab8 <LIS2DW12_ACC_GetOutputDataRate+0x200>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	1e5a      	subs	r2, r3, #1
 8005a1a:	4193      	sbcs	r3, r2
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <LIS2DW12_ACC_GetOutputDataRate+0x17a>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	4a2d      	ldr	r2, [pc, #180]	@ (8005adc <LIS2DW12_ACC_GetOutputDataRate+0x224>)
 8005a26:	601a      	str	r2, [r3, #0]
           break;
 8005a28:	e00a      	b.n	8005a40 <LIS2DW12_ACC_GetOutputDataRate+0x188>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	4a29      	ldr	r2, [pc, #164]	@ (8005ad4 <LIS2DW12_ACC_GetOutputDataRate+0x21c>)
 8005a2e:	601a      	str	r2, [r3, #0]
          break;
 8005a30:	e006      	b.n	8005a40 <LIS2DW12_ACC_GetOutputDataRate+0x188>

        default:
          *Odr = -1.0f;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	4a23      	ldr	r2, [pc, #140]	@ (8005ac4 <LIS2DW12_ACC_GetOutputDataRate+0x20c>)
 8005a36:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	425b      	negs	r3, r3
 8005a3c:	60fb      	str	r3, [r7, #12]
          break;
 8005a3e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8005a40:	e031      	b.n	8005aa6 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8005a42:	230a      	movs	r3, #10
 8005a44:	18fb      	adds	r3, r7, r3
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	221b      	movs	r2, #27
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	4192      	sbcs	r2, r2
 8005a4e:	4252      	negs	r2, r2
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	2a00      	cmp	r2, #0
 8005a54:	d118      	bne.n	8005a88 <LIS2DW12_ACC_GetOutputDataRate+0x1d0>
 8005a56:	2201      	movs	r2, #1
 8005a58:	409a      	lsls	r2, r3
 8005a5a:	0013      	movs	r3, r2
 8005a5c:	4a15      	ldr	r2, [pc, #84]	@ (8005ab4 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 8005a5e:	401a      	ands	r2, r3
 8005a60:	1e51      	subs	r1, r2, #1
 8005a62:	418a      	sbcs	r2, r1
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	2a00      	cmp	r2, #0
 8005a68:	d10a      	bne.n	8005a80 <LIS2DW12_ACC_GetOutputDataRate+0x1c8>
 8005a6a:	4a13      	ldr	r2, [pc, #76]	@ (8005ab8 <LIS2DW12_ACC_GetOutputDataRate+0x200>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	1e5a      	subs	r2, r3, #1
 8005a70:	4193      	sbcs	r3, r2
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <LIS2DW12_ACC_GetOutputDataRate+0x1d0>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	4a19      	ldr	r2, [pc, #100]	@ (8005ae0 <LIS2DW12_ACC_GetOutputDataRate+0x228>)
 8005a7c:	601a      	str	r2, [r3, #0]
           break;
 8005a7e:	e00a      	b.n	8005a96 <LIS2DW12_ACC_GetOutputDataRate+0x1de>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	4a14      	ldr	r2, [pc, #80]	@ (8005ad4 <LIS2DW12_ACC_GetOutputDataRate+0x21c>)
 8005a84:	601a      	str	r2, [r3, #0]
          break;
 8005a86:	e006      	b.n	8005a96 <LIS2DW12_ACC_GetOutputDataRate+0x1de>

        default:
          *Odr = -1.0f;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8005ac4 <LIS2DW12_ACC_GetOutputDataRate+0x20c>)
 8005a8c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	425b      	negs	r3, r3
 8005a92:	60fb      	str	r3, [r7, #12]
          break;
 8005a94:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8005a96:	e006      	b.n	8005aa6 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>

    default:
      *Odr = -1.0f;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ac4 <LIS2DW12_ACC_GetOutputDataRate+0x20c>)
 8005a9c:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	425b      	negs	r3, r3
 8005aa2:	60fb      	str	r3, [r7, #12]
      break;
 8005aa4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
}
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b004      	add	sp, #16
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	0801477c 	.word	0x0801477c
 8005ab4:	0f0f0f0f 	.word	0x0f0f0f0f
 8005ab8:	00100010 	.word	0x00100010
 8005abc:	41480000 	.word	0x41480000
 8005ac0:	3fcccccd 	.word	0x3fcccccd
 8005ac4:	bf800000 	.word	0xbf800000
 8005ac8:	41c80000 	.word	0x41c80000
 8005acc:	42480000 	.word	0x42480000
 8005ad0:	42c80000 	.word	0x42c80000
 8005ad4:	43480000 	.word	0x43480000
 8005ad8:	43c80000 	.word	0x43c80000
 8005adc:	44480000 	.word	0x44480000
 8005ae0:	44c80000 	.word	0x44c80000

08005ae4 <LIS2DW12_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	2300      	movs	r3, #0
 8005af4:	2200      	movs	r2, #0
 8005af6:	f000 f805 	bl	8005b04 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8005afa:	0003      	movs	r3, r0
}
 8005afc:	0018      	movs	r0, r3
 8005afe:	46bd      	mov	sp, r7
 8005b00:	b002      	add	sp, #8
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8005b04:	b590      	push	{r4, r7, lr}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	0019      	movs	r1, r3
 8005b10:	1dfb      	adds	r3, r7, #7
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	1dbb      	adds	r3, r7, #6
 8005b16:	1c0a      	adds	r2, r1, #0
 8005b18:	701a      	strb	r2, [r3, #0]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2229      	movs	r2, #41	@ 0x29
 8005b1e:	5c9b      	ldrb	r3, [r3, r2]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d10a      	bne.n	8005b3a <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x36>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8005b24:	1dbb      	adds	r3, r7, #6
 8005b26:	781c      	ldrb	r4, [r3, #0]
 8005b28:	1dfb      	adds	r3, r7, #7
 8005b2a:	781a      	ldrb	r2, [r3, #0]
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	0023      	movs	r3, r4
 8005b32:	f000 f987 	bl	8005e44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8005b36:	0003      	movs	r3, r0
 8005b38:	e009      	b.n	8005b4e <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x4a>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8005b3a:	1dbb      	adds	r3, r7, #6
 8005b3c:	781c      	ldrb	r4, [r3, #0]
 8005b3e:	1dfb      	adds	r3, r7, #7
 8005b40:	781a      	ldrb	r2, [r3, #0]
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	0023      	movs	r3, r4
 8005b48:	f000 fa90 	bl	800606c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8005b4c:	0003      	movs	r3, r0
  }
}
 8005b4e:	0018      	movs	r0, r3
 8005b50:	46bd      	mov	sp, r7
 8005b52:	b005      	add	sp, #20
 8005b54:	bd90      	pop	{r4, r7, pc}

08005b56 <LIS2DW12_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	331c      	adds	r3, #28
 8005b68:	220b      	movs	r2, #11
 8005b6a:	18ba      	adds	r2, r7, r2
 8005b6c:	0011      	movs	r1, r2
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f000 fd86 	bl	8006680 <lis2dw12_full_scale_get>
 8005b74:	1e03      	subs	r3, r0, #0
 8005b76:	d002      	beq.n	8005b7e <LIS2DW12_ACC_GetFullScale+0x28>
  {
    return LIS2DW12_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	425b      	negs	r3, r3
 8005b7c:	e026      	b.n	8005bcc <LIS2DW12_ACC_GetFullScale+0x76>
  }

  switch (fs_low_level)
 8005b7e:	230b      	movs	r3, #11
 8005b80:	18fb      	adds	r3, r7, r3
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d014      	beq.n	8005bb2 <LIS2DW12_ACC_GetFullScale+0x5c>
 8005b88:	dc17      	bgt.n	8005bba <LIS2DW12_ACC_GetFullScale+0x64>
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d00d      	beq.n	8005baa <LIS2DW12_ACC_GetFullScale+0x54>
 8005b8e:	dc14      	bgt.n	8005bba <LIS2DW12_ACC_GetFullScale+0x64>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <LIS2DW12_ACC_GetFullScale+0x44>
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d004      	beq.n	8005ba2 <LIS2DW12_ACC_GetFullScale+0x4c>
 8005b98:	e00f      	b.n	8005bba <LIS2DW12_ACC_GetFullScale+0x64>
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	601a      	str	r2, [r3, #0]
      break;
 8005ba0:	e013      	b.n	8005bca <LIS2DW12_ACC_GetFullScale+0x74>

    case LIS2DW12_4g:
      *FullScale =  4;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2204      	movs	r2, #4
 8005ba6:	601a      	str	r2, [r3, #0]
      break;
 8005ba8:	e00f      	b.n	8005bca <LIS2DW12_ACC_GetFullScale+0x74>

    case LIS2DW12_8g:
      *FullScale =  8;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2208      	movs	r2, #8
 8005bae:	601a      	str	r2, [r3, #0]
      break;
 8005bb0:	e00b      	b.n	8005bca <LIS2DW12_ACC_GetFullScale+0x74>

    case LIS2DW12_16g:
      *FullScale = 16;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2210      	movs	r2, #16
 8005bb6:	601a      	str	r2, [r3, #0]
      break;
 8005bb8:	e007      	b.n	8005bca <LIS2DW12_ACC_GetFullScale+0x74>

    default:
      *FullScale = -1;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	4252      	negs	r2, r2
 8005bc0:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	425b      	negs	r3, r3
 8005bc6:	60fb      	str	r3, [r7, #12]
      break;
 8005bc8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8005bca:	68fb      	ldr	r3, [r7, #12]
}
 8005bcc:	0018      	movs	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b004      	add	sp, #16
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <LIS2DW12_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
         : (FullScale <= 4) ? LIS2DW12_4g
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	dd0b      	ble.n	8005bfc <LIS2DW12_ACC_SetFullScale+0x28>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	dd06      	ble.n	8005bf8 <LIS2DW12_ACC_SetFullScale+0x24>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	dc01      	bgt.n	8005bf4 <LIS2DW12_ACC_SetFullScale+0x20>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e004      	b.n	8005bfe <LIS2DW12_ACC_SetFullScale+0x2a>
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e002      	b.n	8005bfe <LIS2DW12_ACC_SetFullScale+0x2a>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <LIS2DW12_ACC_SetFullScale+0x2a>
 8005bfc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8005bfe:	210f      	movs	r1, #15
 8005c00:	187a      	adds	r2, r7, r1
 8005c02:	7013      	strb	r3, [r2, #0]
         : (FullScale <= 8) ? LIS2DW12_8g
         :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	331c      	adds	r3, #28
 8005c08:	001a      	movs	r2, r3
 8005c0a:	187b      	adds	r3, r7, r1
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	0019      	movs	r1, r3
 8005c10:	0010      	movs	r0, r2
 8005c12:	f000 fd05 	bl	8006620 <lis2dw12_full_scale_set>
 8005c16:	1e03      	subs	r3, r0, #0
 8005c18:	d002      	beq.n	8005c20 <LIS2DW12_ACC_SetFullScale+0x4c>
  {
    return LIS2DW12_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	425b      	negs	r3, r3
 8005c1e:	e000      	b.n	8005c22 <LIS2DW12_ACC_SetFullScale+0x4e>
  }

  return LIS2DW12_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	0018      	movs	r0, r3
 8005c24:	46bd      	mov	sp, r7
 8005c26:	b004      	add	sp, #16
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <LIS2DW12_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	331c      	adds	r3, #28
 8005c3e:	220b      	movs	r2, #11
 8005c40:	18ba      	adds	r2, r7, r2
 8005c42:	0011      	movs	r1, r2
 8005c44:	0018      	movs	r0, r3
 8005c46:	f000 fb73 	bl	8006330 <lis2dw12_power_mode_get>
 8005c4a:	1e03      	subs	r3, r0, #0
 8005c4c:	d002      	beq.n	8005c54 <LIS2DW12_ACC_GetAxesRaw+0x28>
  {
    return LIS2DW12_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	425b      	negs	r3, r3
 8005c52:	e070      	b.n	8005d36 <LIS2DW12_ACC_GetAxesRaw+0x10a>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LIS2DW12_OK)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	331c      	adds	r3, #28
 8005c58:	220c      	movs	r2, #12
 8005c5a:	18ba      	adds	r2, r7, r2
 8005c5c:	0011      	movs	r1, r2
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f000 fd45 	bl	80066ee <lis2dw12_acceleration_raw_get>
 8005c64:	1e03      	subs	r3, r0, #0
 8005c66:	d002      	beq.n	8005c6e <LIS2DW12_ACC_GetAxesRaw+0x42>
  {
    return LIS2DW12_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	425b      	negs	r3, r3
 8005c6c:	e063      	b.n	8005d36 <LIS2DW12_ACC_GetAxesRaw+0x10a>
  }

  switch(mode)
 8005c6e:	230b      	movs	r3, #11
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	221b      	movs	r2, #27
 8005c76:	429a      	cmp	r2, r3
 8005c78:	4192      	sbcs	r2, r2
 8005c7a:	4252      	negs	r2, r2
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	2a00      	cmp	r2, #0
 8005c80:	d154      	bne.n	8005d2c <LIS2DW12_ACC_GetAxesRaw+0x100>
 8005c82:	2201      	movs	r2, #1
 8005c84:	409a      	lsls	r2, r3
 8005c86:	0013      	movs	r3, r2
 8005c88:	4a2d      	ldr	r2, [pc, #180]	@ (8005d40 <LIS2DW12_ACC_GetAxesRaw+0x114>)
 8005c8a:	401a      	ands	r2, r3
 8005c8c:	1e51      	subs	r1, r2, #1
 8005c8e:	418a      	sbcs	r2, r1
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	2a00      	cmp	r2, #0
 8005c94:	d128      	bne.n	8005ce8 <LIS2DW12_ACC_GetAxesRaw+0xbc>
 8005c96:	4a2b      	ldr	r2, [pc, #172]	@ (8005d44 <LIS2DW12_ACC_GetAxesRaw+0x118>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	1e5a      	subs	r2, r3, #1
 8005c9c:	4193      	sbcs	r3, r2
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d043      	beq.n	8005d2c <LIS2DW12_ACC_GetAxesRaw+0x100>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8005ca4:	230c      	movs	r3, #12
 8005ca6:	18fb      	adds	r3, r7, r3
 8005ca8:	2200      	movs	r2, #0
 8005caa:	5e9b      	ldrsh	r3, [r3, r2]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	da00      	bge.n	8005cb2 <LIS2DW12_ACC_GetAxesRaw+0x86>
 8005cb0:	330f      	adds	r3, #15
 8005cb2:	111b      	asrs	r3, r3, #4
 8005cb4:	b21a      	sxth	r2, r3
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8005cba:	230c      	movs	r3, #12
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	5e9b      	ldrsh	r3, [r3, r2]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	da00      	bge.n	8005cc8 <LIS2DW12_ACC_GetAxesRaw+0x9c>
 8005cc6:	330f      	adds	r3, #15
 8005cc8:	111b      	asrs	r3, r3, #4
 8005cca:	b21a      	sxth	r2, r3
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8005cd0:	230c      	movs	r3, #12
 8005cd2:	18fb      	adds	r3, r7, r3
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	5e9b      	ldrsh	r3, [r3, r2]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	da00      	bge.n	8005cde <LIS2DW12_ACC_GetAxesRaw+0xb2>
 8005cdc:	330f      	adds	r3, #15
 8005cde:	111b      	asrs	r3, r3, #4
 8005ce0:	b21a      	sxth	r2, r3
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	809a      	strh	r2, [r3, #4]
      break;
 8005ce6:	e025      	b.n	8005d34 <LIS2DW12_ACC_GetAxesRaw+0x108>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8005ce8:	230c      	movs	r3, #12
 8005cea:	18fb      	adds	r3, r7, r3
 8005cec:	2200      	movs	r2, #0
 8005cee:	5e9b      	ldrsh	r3, [r3, r2]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	da00      	bge.n	8005cf6 <LIS2DW12_ACC_GetAxesRaw+0xca>
 8005cf4:	3303      	adds	r3, #3
 8005cf6:	109b      	asrs	r3, r3, #2
 8005cf8:	b21a      	sxth	r2, r3
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8005cfe:	230c      	movs	r3, #12
 8005d00:	18fb      	adds	r3, r7, r3
 8005d02:	2202      	movs	r2, #2
 8005d04:	5e9b      	ldrsh	r3, [r3, r2]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	da00      	bge.n	8005d0c <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8005d0a:	3303      	adds	r3, #3
 8005d0c:	109b      	asrs	r3, r3, #2
 8005d0e:	b21a      	sxth	r2, r3
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8005d14:	230c      	movs	r3, #12
 8005d16:	18fb      	adds	r3, r7, r3
 8005d18:	2204      	movs	r2, #4
 8005d1a:	5e9b      	ldrsh	r3, [r3, r2]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	da00      	bge.n	8005d22 <LIS2DW12_ACC_GetAxesRaw+0xf6>
 8005d20:	3303      	adds	r3, #3
 8005d22:	109b      	asrs	r3, r3, #2
 8005d24:	b21a      	sxth	r2, r3
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	809a      	strh	r2, [r3, #4]
      break;
 8005d2a:	e003      	b.n	8005d34 <LIS2DW12_ACC_GetAxesRaw+0x108>

    default:
      ret = LIS2DW12_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	425b      	negs	r3, r3
 8005d30:	617b      	str	r3, [r7, #20]
      break;
 8005d32:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8005d34:	697b      	ldr	r3, [r7, #20]
}
 8005d36:	0018      	movs	r0, r3
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	b006      	add	sp, #24
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	46c0      	nop			@ (mov r8, r8)
 8005d40:	0e1e0e1e 	.word	0x0e1e0e1e
 8005d44:	01010101 	.word	0x01010101

08005d48 <LIS2DW12_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8005d48:	b590      	push	{r4, r7, lr}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8005d56:	2310      	movs	r3, #16
 8005d58:	18fa      	adds	r2, r7, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	0011      	movs	r1, r2
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f7ff ff64 	bl	8005c2c <LIS2DW12_ACC_GetAxesRaw>
 8005d64:	1e03      	subs	r3, r0, #0
 8005d66:	d002      	beq.n	8005d6e <LIS2DW12_ACC_GetAxes+0x26>
  {
    return LIS2DW12_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	425b      	negs	r3, r3
 8005d6c:	e046      	b.n	8005dfc <LIS2DW12_ACC_GetAxes+0xb4>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8005d6e:	230c      	movs	r3, #12
 8005d70:	18fa      	adds	r2, r7, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	0011      	movs	r1, r2
 8005d76:	0018      	movs	r0, r3
 8005d78:	f7ff fcf6 	bl	8005768 <LIS2DW12_ACC_GetSensitivity>
 8005d7c:	1e03      	subs	r3, r0, #0
 8005d7e:	d002      	beq.n	8005d86 <LIS2DW12_ACC_GetAxes+0x3e>
  {
    return LIS2DW12_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	425b      	negs	r3, r3
 8005d84:	e03a      	b.n	8005dfc <LIS2DW12_ACC_GetAxes+0xb4>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8005d86:	2410      	movs	r4, #16
 8005d88:	193b      	adds	r3, r7, r4
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	5e9b      	ldrsh	r3, [r3, r2]
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f7fb fa5e 	bl	8001250 <__aeabi_i2f>
 8005d94:	1c02      	adds	r2, r0, #0
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	1c19      	adds	r1, r3, #0
 8005d9a:	1c10      	adds	r0, r2, #0
 8005d9c:	f7fa ff56 	bl	8000c4c <__aeabi_fmul>
 8005da0:	1c03      	adds	r3, r0, #0
 8005da2:	1c18      	adds	r0, r3, #0
 8005da4:	f7fb fa34 	bl	8001210 <__aeabi_f2iz>
 8005da8:	0002      	movs	r2, r0
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8005dae:	193b      	adds	r3, r7, r4
 8005db0:	2202      	movs	r2, #2
 8005db2:	5e9b      	ldrsh	r3, [r3, r2]
 8005db4:	0018      	movs	r0, r3
 8005db6:	f7fb fa4b 	bl	8001250 <__aeabi_i2f>
 8005dba:	1c02      	adds	r2, r0, #0
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	1c19      	adds	r1, r3, #0
 8005dc0:	1c10      	adds	r0, r2, #0
 8005dc2:	f7fa ff43 	bl	8000c4c <__aeabi_fmul>
 8005dc6:	1c03      	adds	r3, r0, #0
 8005dc8:	1c18      	adds	r0, r3, #0
 8005dca:	f7fb fa21 	bl	8001210 <__aeabi_f2iz>
 8005dce:	0002      	movs	r2, r0
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8005dd4:	193b      	adds	r3, r7, r4
 8005dd6:	2204      	movs	r2, #4
 8005dd8:	5e9b      	ldrsh	r3, [r3, r2]
 8005dda:	0018      	movs	r0, r3
 8005ddc:	f7fb fa38 	bl	8001250 <__aeabi_i2f>
 8005de0:	1c02      	adds	r2, r0, #0
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	1c19      	adds	r1, r3, #0
 8005de6:	1c10      	adds	r0, r2, #0
 8005de8:	f7fa ff30 	bl	8000c4c <__aeabi_fmul>
 8005dec:	1c03      	adds	r3, r0, #0
 8005dee:	1c18      	adds	r0, r3, #0
 8005df0:	f7fb fa0e 	bl	8001210 <__aeabi_f2iz>
 8005df4:	0002      	movs	r2, r0
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b007      	add	sp, #28
 8005e02:	bd90      	pop	{r4, r7, pc}

08005e04 <LIS2DW12_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	0008      	movs	r0, r1
 8005e0e:	0011      	movs	r1, r2
 8005e10:	1cfb      	adds	r3, r7, #3
 8005e12:	1c02      	adds	r2, r0, #0
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	1cbb      	adds	r3, r7, #2
 8005e18:	1c0a      	adds	r2, r1, #0
 8005e1a:	701a      	strb	r2, [r3, #0]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	331c      	adds	r3, #28
 8005e20:	0018      	movs	r0, r3
 8005e22:	1cba      	adds	r2, r7, #2
 8005e24:	1cfb      	adds	r3, r7, #3
 8005e26:	7819      	ldrb	r1, [r3, #0]
 8005e28:	2301      	movs	r3, #1
 8005e2a:	f000 f9f4 	bl	8006216 <lis2dw12_write_reg>
 8005e2e:	1e03      	subs	r3, r0, #0
 8005e30:	d002      	beq.n	8005e38 <LIS2DW12_Write_Reg+0x34>
  {
    return LIS2DW12_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	425b      	negs	r3, r3
 8005e36:	e000      	b.n	8005e3a <LIS2DW12_Write_Reg+0x36>
  }

  return LIS2DW12_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b002      	add	sp, #8
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	0019      	movs	r1, r3
 8005e50:	1dfb      	adds	r3, r7, #7
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	1dbb      	adds	r3, r7, #6
 8005e56:	1c0a      	adds	r2, r1, #0
 8005e58:	701a      	strb	r2, [r3, #0]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8005e5a:	1dfb      	adds	r3, r7, #7
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d100      	bne.n	8005e64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20>
 8005e62:	e067      	b.n	8005f34 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
 8005e64:	dc06      	bgt.n	8005e74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x30>
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d04c      	beq.n	8005f04 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8005e6a:	dc03      	bgt.n	8005e74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x30>
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d019      	beq.n	8005ea4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d02f      	beq.n	8005ed4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x90>
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8005e74:	1dbb      	adds	r3, r7, #6
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d004      	beq.n	8005e86 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x42>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8005e7c:	2317      	movs	r3, #23
 8005e7e:	18fb      	adds	r3, r7, r3
 8005e80:	2204      	movs	r2, #4
 8005e82:	701a      	strb	r2, [r3, #0]
          break;
 8005e84:	e004      	b.n	8005e90 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x4c>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8005e86:	2317      	movs	r3, #23
 8005e88:	18fb      	adds	r3, r7, r3
 8005e8a:	2214      	movs	r2, #20
 8005e8c:	701a      	strb	r2, [r3, #0]
          break;
 8005e8e:	46c0      	nop			@ (mov r8, r8)
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if(Odr < 12.5f)
 8005e90:	496e      	ldr	r1, [pc, #440]	@ (800604c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x208>)
 8005e92:	68b8      	ldr	r0, [r7, #8]
 8005e94:	f7fa fa28 	bl	80002e8 <__aeabi_fcmplt>
 8005e98:	1e03      	subs	r3, r0, #0
 8005e9a:	d100      	bne.n	8005e9e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8005e9c:	e062      	b.n	8005f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
        Odr = 12.5f;
 8005e9e:	4b6b      	ldr	r3, [pc, #428]	@ (800604c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x208>)
 8005ea0:	60bb      	str	r3, [r7, #8]
      break;
 8005ea2:	e05f      	b.n	8005f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8005ea4:	1dbb      	adds	r3, r7, #6
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d004      	beq.n	8005eb6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8005eac:	2317      	movs	r3, #23
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	701a      	strb	r2, [r3, #0]
          break;
 8005eb4:	e004      	b.n	8005ec0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x7c>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8005eb6:	2317      	movs	r3, #23
 8005eb8:	18fb      	adds	r3, r7, r3
 8005eba:	2213      	movs	r2, #19
 8005ebc:	701a      	strb	r2, [r3, #0]
          break;
 8005ebe:	46c0      	nop			@ (mov r8, r8)
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8005ec0:	4963      	ldr	r1, [pc, #396]	@ (8006050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8005ec2:	68b8      	ldr	r0, [r7, #8]
 8005ec4:	f7fa fa24 	bl	8000310 <__aeabi_fcmpgt>
 8005ec8:	1e03      	subs	r3, r0, #0
 8005eca:	d100      	bne.n	8005ece <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x8a>
      {
        Odr = 200.0f;
      }
      break;
 8005ecc:	e04a      	b.n	8005f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
        Odr = 200.0f;
 8005ece:	4b60      	ldr	r3, [pc, #384]	@ (8006050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8005ed0:	60bb      	str	r3, [r7, #8]
      break;
 8005ed2:	e047      	b.n	8005f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8005ed4:	1dbb      	adds	r3, r7, #6
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d004      	beq.n	8005ee6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xa2>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8005edc:	2317      	movs	r3, #23
 8005ede:	18fb      	adds	r3, r7, r3
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	701a      	strb	r2, [r3, #0]
          break;
 8005ee4:	e004      	b.n	8005ef0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xac>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8005ee6:	2317      	movs	r3, #23
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	2212      	movs	r2, #18
 8005eec:	701a      	strb	r2, [r3, #0]
          break;
 8005eee:	46c0      	nop			@ (mov r8, r8)
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8005ef0:	4957      	ldr	r1, [pc, #348]	@ (8006050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8005ef2:	68b8      	ldr	r0, [r7, #8]
 8005ef4:	f7fa fa0c 	bl	8000310 <__aeabi_fcmpgt>
 8005ef8:	1e03      	subs	r3, r0, #0
 8005efa:	d100      	bne.n	8005efe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xba>
      {
        Odr = 200.0f;
      }
      break;
 8005efc:	e032      	b.n	8005f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
        Odr = 200.0f;
 8005efe:	4b54      	ldr	r3, [pc, #336]	@ (8006050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8005f00:	60bb      	str	r3, [r7, #8]
      break;
 8005f02:	e02f      	b.n	8005f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8005f04:	1dbb      	adds	r3, r7, #6
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d004      	beq.n	8005f16 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xd2>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8005f0c:	2317      	movs	r3, #23
 8005f0e:	18fb      	adds	r3, r7, r3
 8005f10:	2201      	movs	r2, #1
 8005f12:	701a      	strb	r2, [r3, #0]
          break;
 8005f14:	e004      	b.n	8005f20 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xdc>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8005f16:	2317      	movs	r3, #23
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	2211      	movs	r2, #17
 8005f1c:	701a      	strb	r2, [r3, #0]
          break;
 8005f1e:	46c0      	nop			@ (mov r8, r8)
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8005f20:	494b      	ldr	r1, [pc, #300]	@ (8006050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8005f22:	68b8      	ldr	r0, [r7, #8]
 8005f24:	f7fa f9f4 	bl	8000310 <__aeabi_fcmpgt>
 8005f28:	1e03      	subs	r3, r0, #0
 8005f2a:	d100      	bne.n	8005f2e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xea>
      {
        Odr = 200.0f;
      }
      break;
 8005f2c:	e01a      	b.n	8005f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
        Odr = 200.0f;
 8005f2e:	4b48      	ldr	r3, [pc, #288]	@ (8006050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8005f30:	60bb      	str	r3, [r7, #8]
      break;
 8005f32:	e017      	b.n	8005f64 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8005f34:	1dbb      	adds	r3, r7, #6
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d004      	beq.n	8005f46 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x102>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8005f3c:	2317      	movs	r3, #23
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]
          break;
 8005f44:	e004      	b.n	8005f50 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10c>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8005f46:	2317      	movs	r3, #23
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	2210      	movs	r2, #16
 8005f4c:	701a      	strb	r2, [r3, #0]
          break;
 8005f4e:	46c0      	nop			@ (mov r8, r8)
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8005f50:	493f      	ldr	r1, [pc, #252]	@ (8006050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8005f52:	68b8      	ldr	r0, [r7, #8]
 8005f54:	f7fa f9dc 	bl	8000310 <__aeabi_fcmpgt>
 8005f58:	1e03      	subs	r3, r0, #0
 8005f5a:	d100      	bne.n	8005f5e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x11a>
      {
        Odr = 200.0f;
      }
      break;
 8005f5c:	e001      	b.n	8005f62 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x11e>
        Odr = 200.0f;
 8005f5e:	4b3c      	ldr	r3, [pc, #240]	@ (8006050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8005f60:	60bb      	str	r3, [r7, #8]
      break;
 8005f62:	46c0      	nop			@ (mov r8, r8)
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
          : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8005f64:	493b      	ldr	r1, [pc, #236]	@ (8006054 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>)
 8005f66:	68b8      	ldr	r0, [r7, #8]
 8005f68:	f7fa f9c8 	bl	80002fc <__aeabi_fcmple>
 8005f6c:	1e03      	subs	r3, r0, #0
 8005f6e:	d001      	beq.n	8005f74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x130>
 8005f70:	2301      	movs	r3, #1
 8005f72:	e038      	b.n	8005fe6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 8005f74:	4935      	ldr	r1, [pc, #212]	@ (800604c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x208>)
 8005f76:	68b8      	ldr	r0, [r7, #8]
 8005f78:	f7fa f9c0 	bl	80002fc <__aeabi_fcmple>
 8005f7c:	1e03      	subs	r3, r0, #0
 8005f7e:	d001      	beq.n	8005f84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x140>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e030      	b.n	8005fe6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 8005f84:	4934      	ldr	r1, [pc, #208]	@ (8006058 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x214>)
 8005f86:	68b8      	ldr	r0, [r7, #8]
 8005f88:	f7fa f9b8 	bl	80002fc <__aeabi_fcmple>
 8005f8c:	1e03      	subs	r3, r0, #0
 8005f8e:	d001      	beq.n	8005f94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x150>
 8005f90:	2303      	movs	r3, #3
 8005f92:	e028      	b.n	8005fe6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 8005f94:	4931      	ldr	r1, [pc, #196]	@ (800605c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8005f96:	68b8      	ldr	r0, [r7, #8]
 8005f98:	f7fa f9b0 	bl	80002fc <__aeabi_fcmple>
 8005f9c:	1e03      	subs	r3, r0, #0
 8005f9e:	d001      	beq.n	8005fa4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x160>
 8005fa0:	2304      	movs	r3, #4
 8005fa2:	e020      	b.n	8005fe6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 8005fa4:	492e      	ldr	r1, [pc, #184]	@ (8006060 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>)
 8005fa6:	68b8      	ldr	r0, [r7, #8]
 8005fa8:	f7fa f9a8 	bl	80002fc <__aeabi_fcmple>
 8005fac:	1e03      	subs	r3, r0, #0
 8005fae:	d001      	beq.n	8005fb4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x170>
 8005fb0:	2305      	movs	r3, #5
 8005fb2:	e018      	b.n	8005fe6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 8005fb4:	4926      	ldr	r1, [pc, #152]	@ (8006050 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8005fb6:	68b8      	ldr	r0, [r7, #8]
 8005fb8:	f7fa f9a0 	bl	80002fc <__aeabi_fcmple>
 8005fbc:	1e03      	subs	r3, r0, #0
 8005fbe:	d001      	beq.n	8005fc4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x180>
 8005fc0:	2306      	movs	r3, #6
 8005fc2:	e010      	b.n	8005fe6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 8005fc4:	4927      	ldr	r1, [pc, #156]	@ (8006064 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8005fc6:	68b8      	ldr	r0, [r7, #8]
 8005fc8:	f7fa f998 	bl	80002fc <__aeabi_fcmple>
 8005fcc:	1e03      	subs	r3, r0, #0
 8005fce:	d001      	beq.n	8005fd4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 8005fd0:	2307      	movs	r3, #7
 8005fd2:	e008      	b.n	8005fe6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 8005fd4:	4924      	ldr	r1, [pc, #144]	@ (8006068 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>)
 8005fd6:	68b8      	ldr	r0, [r7, #8]
 8005fd8:	f7fa f990 	bl	80002fc <__aeabi_fcmple>
 8005fdc:	1e03      	subs	r3, r0, #0
 8005fde:	d001      	beq.n	8005fe4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a0>
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	e000      	b.n	8005fe6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 8005fe4:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8005fe6:	2116      	movs	r1, #22
 8005fe8:	187a      	adds	r2, r7, r1
 8005fea:	7013      	strb	r3, [r2, #0]
          : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
          : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
          :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	331c      	adds	r3, #28
 8005ff0:	001a      	movs	r2, r3
 8005ff2:	187b      	adds	r3, r7, r1
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	0019      	movs	r1, r3
 8005ff8:	0010      	movs	r0, r2
 8005ffa:	f000 fa21 	bl	8006440 <lis2dw12_data_rate_set>
 8005ffe:	1e03      	subs	r3, r0, #0
 8006000:	d002      	beq.n	8006008 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c4>
  {
    return LIS2DW12_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	425b      	negs	r3, r3
 8006006:	e01c      	b.n	8006042 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1fe>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	331c      	adds	r3, #28
 800600c:	001a      	movs	r2, r3
 800600e:	2317      	movs	r3, #23
 8006010:	18fb      	adds	r3, r7, r3
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	0019      	movs	r1, r3
 8006016:	0010      	movs	r0, r2
 8006018:	f000 f91e 	bl	8006258 <lis2dw12_power_mode_set>
 800601c:	1e03      	subs	r3, r0, #0
 800601e:	d002      	beq.n	8006026 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e2>
  {
    return LIS2DW12_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	425b      	negs	r3, r3
 8006024:	e00d      	b.n	8006042 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1fe>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	62da      	str	r2, [r3, #44]	@ 0x2c
  pObj->acc_operating_mode = Mode;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	1dfa      	adds	r2, r7, #7
 8006030:	2130      	movs	r1, #48	@ 0x30
 8006032:	7812      	ldrb	r2, [r2, #0]
 8006034:	545a      	strb	r2, [r3, r1]
  pObj->acc_low_noise = Noise;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	1dba      	adds	r2, r7, #6
 800603a:	2131      	movs	r1, #49	@ 0x31
 800603c:	7812      	ldrb	r2, [r2, #0]
 800603e:	545a      	strb	r2, [r3, r1]

  return LIS2DW12_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	0018      	movs	r0, r3
 8006044:	46bd      	mov	sp, r7
 8006046:	b006      	add	sp, #24
 8006048:	bd80      	pop	{r7, pc}
 800604a:	46c0      	nop			@ (mov r8, r8)
 800604c:	41480000 	.word	0x41480000
 8006050:	43480000 	.word	0x43480000
 8006054:	3fcccccd 	.word	0x3fcccccd
 8006058:	41c80000 	.word	0x41c80000
 800605c:	42480000 	.word	0x42480000
 8006060:	42c80000 	.word	0x42c80000
 8006064:	43c80000 	.word	0x43c80000
 8006068:	44480000 	.word	0x44480000

0800606c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	0019      	movs	r1, r3
 8006078:	1dfb      	adds	r3, r7, #7
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	1dbb      	adds	r3, r7, #6
 800607e:	1c0a      	adds	r2, r1, #0
 8006080:	701a      	strb	r2, [r3, #0]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	1dfa      	adds	r2, r7, #7
 8006086:	2130      	movs	r1, #48	@ 0x30
 8006088:	7812      	ldrb	r2, [r2, #0]
 800608a:	545a      	strb	r2, [r3, r1]
  pObj->acc_low_noise = Noise;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1dba      	adds	r2, r7, #6
 8006090:	2131      	movs	r1, #49	@ 0x31
 8006092:	7812      	ldrb	r2, [r2, #0]
 8006094:	545a      	strb	r2, [r3, r1]

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                : (Odr <=   12.5f) ?   12.5f
 8006096:	4924      	ldr	r1, [pc, #144]	@ (8006128 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbc>)
 8006098:	68b8      	ldr	r0, [r7, #8]
 800609a:	f7fa f92f 	bl	80002fc <__aeabi_fcmple>
 800609e:	1e03      	subs	r3, r0, #0
 80060a0:	d001      	beq.n	80060a6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80060a2:	4b21      	ldr	r3, [pc, #132]	@ (8006128 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbc>)
 80060a4:	e038      	b.n	8006118 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                : (Odr <=   25.0f) ?   25.0f
 80060a6:	4921      	ldr	r1, [pc, #132]	@ (800612c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc0>)
 80060a8:	68b8      	ldr	r0, [r7, #8]
 80060aa:	f7fa f927 	bl	80002fc <__aeabi_fcmple>
 80060ae:	1e03      	subs	r3, r0, #0
 80060b0:	d001      	beq.n	80060b6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x4a>
 80060b2:	4b1e      	ldr	r3, [pc, #120]	@ (800612c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc0>)
 80060b4:	e030      	b.n	8006118 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                : (Odr <=   50.0f) ?   50.0f
 80060b6:	491e      	ldr	r1, [pc, #120]	@ (8006130 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc4>)
 80060b8:	68b8      	ldr	r0, [r7, #8]
 80060ba:	f7fa f91f 	bl	80002fc <__aeabi_fcmple>
 80060be:	1e03      	subs	r3, r0, #0
 80060c0:	d001      	beq.n	80060c6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x5a>
 80060c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006130 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc4>)
 80060c4:	e028      	b.n	8006118 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                : (Odr <=  100.0f) ?  100.0f
 80060c6:	491b      	ldr	r1, [pc, #108]	@ (8006134 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 80060c8:	68b8      	ldr	r0, [r7, #8]
 80060ca:	f7fa f917 	bl	80002fc <__aeabi_fcmple>
 80060ce:	1e03      	subs	r3, r0, #0
 80060d0:	d001      	beq.n	80060d6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x6a>
 80060d2:	4b18      	ldr	r3, [pc, #96]	@ (8006134 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 80060d4:	e020      	b.n	8006118 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                : (Odr <=  200.0f) ?  200.0f
 80060d6:	4918      	ldr	r1, [pc, #96]	@ (8006138 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 80060d8:	68b8      	ldr	r0, [r7, #8]
 80060da:	f7fa f90f 	bl	80002fc <__aeabi_fcmple>
 80060de:	1e03      	subs	r3, r0, #0
 80060e0:	d001      	beq.n	80060e6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80060e2:	4b15      	ldr	r3, [pc, #84]	@ (8006138 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 80060e4:	e018      	b.n	8006118 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                : (Odr <=  400.0f) ?  400.0f
 80060e6:	4915      	ldr	r1, [pc, #84]	@ (800613c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 80060e8:	68b8      	ldr	r0, [r7, #8]
 80060ea:	f7fa f907 	bl	80002fc <__aeabi_fcmple>
 80060ee:	1e03      	subs	r3, r0, #0
 80060f0:	d001      	beq.n	80060f6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x8a>
 80060f2:	4b12      	ldr	r3, [pc, #72]	@ (800613c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 80060f4:	e010      	b.n	8006118 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                : (Odr <=  800.0f) ?  800.0f
 80060f6:	4912      	ldr	r1, [pc, #72]	@ (8006140 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 80060f8:	68b8      	ldr	r0, [r7, #8]
 80060fa:	f7fa f8ff 	bl	80002fc <__aeabi_fcmple>
 80060fe:	1e03      	subs	r3, r0, #0
 8006100:	d001      	beq.n	8006106 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8006102:	4b0f      	ldr	r3, [pc, #60]	@ (8006140 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8006104:	e008      	b.n	8006118 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                :                    1600.0f;
 8006106:	490f      	ldr	r1, [pc, #60]	@ (8006144 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8006108:	68b8      	ldr	r0, [r7, #8]
 800610a:	f7fa f8f7 	bl	80002fc <__aeabi_fcmple>
 800610e:	1e03      	subs	r3, r0, #0
 8006110:	d001      	beq.n	8006116 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xaa>
 8006112:	4b0c      	ldr	r3, [pc, #48]	@ (8006144 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8006114:	e000      	b.n	8006118 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006116:	4b0c      	ldr	r3, [pc, #48]	@ (8006148 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  return LIS2DW12_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	0018      	movs	r0, r3
 8006120:	46bd      	mov	sp, r7
 8006122:	b004      	add	sp, #16
 8006124:	bd80      	pop	{r7, pc}
 8006126:	46c0      	nop			@ (mov r8, r8)
 8006128:	3fcccccd 	.word	0x3fcccccd
 800612c:	41480000 	.word	0x41480000
 8006130:	41c80000 	.word	0x41c80000
 8006134:	42480000 	.word	0x42480000
 8006138:	42c80000 	.word	0x42c80000
 800613c:	43480000 	.word	0x43480000
 8006140:	43c80000 	.word	0x43c80000
 8006144:	44480000 	.word	0x44480000
 8006148:	44c80000 	.word	0x44c80000

0800614c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800614c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	0008      	movs	r0, r1
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	0019      	movs	r1, r3
 800615a:	250b      	movs	r5, #11
 800615c:	197b      	adds	r3, r7, r5
 800615e:	1c02      	adds	r2, r0, #0
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	2608      	movs	r6, #8
 8006164:	19bb      	adds	r3, r7, r6
 8006166:	1c0a      	adds	r2, r1, #0
 8006168:	801a      	strh	r2, [r3, #0]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	695c      	ldr	r4, [r3, #20]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	7b1b      	ldrb	r3, [r3, #12]
 8006176:	0018      	movs	r0, r3
 8006178:	197b      	adds	r3, r7, r5
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	b299      	uxth	r1, r3
 800617e:	19bb      	adds	r3, r7, r6
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	47a0      	blx	r4
 8006186:	0003      	movs	r3, r0
}
 8006188:	0018      	movs	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	b007      	add	sp, #28
 800618e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006190 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	0008      	movs	r0, r1
 800619a:	607a      	str	r2, [r7, #4]
 800619c:	0019      	movs	r1, r3
 800619e:	250b      	movs	r5, #11
 80061a0:	197b      	adds	r3, r7, r5
 80061a2:	1c02      	adds	r2, r0, #0
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	2608      	movs	r6, #8
 80061a8:	19bb      	adds	r3, r7, r6
 80061aa:	1c0a      	adds	r2, r1, #0
 80061ac:	801a      	strh	r2, [r3, #0]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	691c      	ldr	r4, [r3, #16]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	7b1b      	ldrb	r3, [r3, #12]
 80061ba:	0018      	movs	r0, r3
 80061bc:	197b      	adds	r3, r7, r5
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	b299      	uxth	r1, r3
 80061c2:	19bb      	adds	r3, r7, r6
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	47a0      	blx	r4
 80061ca:	0003      	movs	r3, r0
}
 80061cc:	0018      	movs	r0, r3
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b007      	add	sp, #28
 80061d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061d4 <lis2dw12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80061d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	0008      	movs	r0, r1
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	0019      	movs	r1, r3
 80061e2:	260b      	movs	r6, #11
 80061e4:	19bb      	adds	r3, r7, r6
 80061e6:	1c02      	adds	r2, r0, #0
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	2508      	movs	r5, #8
 80061ec:	197b      	adds	r3, r7, r5
 80061ee:	1c0a      	adds	r2, r1, #0
 80061f0:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	685c      	ldr	r4, [r3, #4]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6898      	ldr	r0, [r3, #8]
 80061fa:	197b      	adds	r3, r7, r5
 80061fc:	881d      	ldrh	r5, [r3, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	19bb      	adds	r3, r7, r6
 8006202:	7819      	ldrb	r1, [r3, #0]
 8006204:	002b      	movs	r3, r5
 8006206:	47a0      	blx	r4
 8006208:	0003      	movs	r3, r0
 800620a:	617b      	str	r3, [r7, #20]
  return ret;
 800620c:	697b      	ldr	r3, [r7, #20]
}
 800620e:	0018      	movs	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	b007      	add	sp, #28
 8006214:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006216 <lis2dw12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8006216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006218:	b087      	sub	sp, #28
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	0008      	movs	r0, r1
 8006220:	607a      	str	r2, [r7, #4]
 8006222:	0019      	movs	r1, r3
 8006224:	260b      	movs	r6, #11
 8006226:	19bb      	adds	r3, r7, r6
 8006228:	1c02      	adds	r2, r0, #0
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	2508      	movs	r5, #8
 800622e:	197b      	adds	r3, r7, r5
 8006230:	1c0a      	adds	r2, r1, #0
 8006232:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681c      	ldr	r4, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6898      	ldr	r0, [r3, #8]
 800623c:	197b      	adds	r3, r7, r5
 800623e:	881d      	ldrh	r5, [r3, #0]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	19bb      	adds	r3, r7, r6
 8006244:	7819      	ldrb	r1, [r3, #0]
 8006246:	002b      	movs	r3, r5
 8006248:	47a0      	blx	r4
 800624a:	0003      	movs	r3, r0
 800624c:	617b      	str	r3, [r7, #20]
  return ret;
 800624e:	697b      	ldr	r3, [r7, #20]
}
 8006250:	0018      	movs	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	b007      	add	sp, #28
 8006256:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006258 <lis2dw12_power_mode_set>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx, lis2dw12_mode_t val)
{
 8006258:	b590      	push	{r4, r7, lr}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	000a      	movs	r2, r1
 8006262:	1cfb      	adds	r3, r7, #3
 8006264:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8006266:	2410      	movs	r4, #16
 8006268:	193a      	adds	r2, r7, r4
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	2301      	movs	r3, #1
 800626e:	2120      	movs	r1, #32
 8006270:	f7ff ffb0 	bl	80061d4 <lis2dw12_read_reg>
 8006274:	0003      	movs	r3, r0
 8006276:	617b      	str	r3, [r7, #20]
  if (ret == 0) {
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d129      	bne.n	80062d2 <lis2dw12_power_mode_set+0x7a>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 800627e:	1cfb      	adds	r3, r7, #3
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	1c1a      	adds	r2, r3, #0
 8006286:	2303      	movs	r3, #3
 8006288:	4013      	ands	r3, r2
 800628a:	b2da      	uxtb	r2, r3
 800628c:	193b      	adds	r3, r7, r4
 800628e:	2103      	movs	r1, #3
 8006290:	400a      	ands	r2, r1
 8006292:	0090      	lsls	r0, r2, #2
 8006294:	781a      	ldrb	r2, [r3, #0]
 8006296:	210c      	movs	r1, #12
 8006298:	438a      	bics	r2, r1
 800629a:	1c11      	adds	r1, r2, #0
 800629c:	1c02      	adds	r2, r0, #0
 800629e:	430a      	orrs	r2, r1
 80062a0:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80062a2:	1cfb      	adds	r3, r7, #3
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2203      	movs	r2, #3
 80062a8:	4013      	ands	r3, r2
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	193b      	adds	r3, r7, r4
 80062ae:	2103      	movs	r1, #3
 80062b0:	400a      	ands	r2, r1
 80062b2:	0010      	movs	r0, r2
 80062b4:	781a      	ldrb	r2, [r3, #0]
 80062b6:	2103      	movs	r1, #3
 80062b8:	438a      	bics	r2, r1
 80062ba:	1c11      	adds	r1, r2, #0
 80062bc:	1c02      	adds	r2, r0, #0
 80062be:	430a      	orrs	r2, r1
 80062c0:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80062c2:	193a      	adds	r2, r7, r4
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	2301      	movs	r3, #1
 80062c8:	2120      	movs	r1, #32
 80062ca:	f7ff ffa4 	bl	8006216 <lis2dw12_write_reg>
 80062ce:	0003      	movs	r3, r0
 80062d0:	617b      	str	r3, [r7, #20]
  }
  if (ret == 0) {
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d108      	bne.n	80062ea <lis2dw12_power_mode_set+0x92>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 80062d8:	230c      	movs	r3, #12
 80062da:	18fa      	adds	r2, r7, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	2301      	movs	r3, #1
 80062e0:	2125      	movs	r1, #37	@ 0x25
 80062e2:	f7ff ff77 	bl	80061d4 <lis2dw12_read_reg>
 80062e6:	0003      	movs	r3, r0
 80062e8:	617b      	str	r3, [r7, #20]
  }
  if (ret == 0) {
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11a      	bne.n	8006326 <lis2dw12_power_mode_set+0xce>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 80062f0:	1cfb      	adds	r3, r7, #3
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	091b      	lsrs	r3, r3, #4
 80062f6:	1c1a      	adds	r2, r3, #0
 80062f8:	2301      	movs	r3, #1
 80062fa:	4013      	ands	r3, r2
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	240c      	movs	r4, #12
 8006300:	193b      	adds	r3, r7, r4
 8006302:	2101      	movs	r1, #1
 8006304:	400a      	ands	r2, r1
 8006306:	0090      	lsls	r0, r2, #2
 8006308:	781a      	ldrb	r2, [r3, #0]
 800630a:	2104      	movs	r1, #4
 800630c:	438a      	bics	r2, r1
 800630e:	1c11      	adds	r1, r2, #0
 8006310:	1c02      	adds	r2, r0, #0
 8006312:	430a      	orrs	r2, r1
 8006314:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8006316:	193a      	adds	r2, r7, r4
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	2301      	movs	r3, #1
 800631c:	2125      	movs	r1, #37	@ 0x25
 800631e:	f7ff ff7a 	bl	8006216 <lis2dw12_write_reg>
 8006322:	0003      	movs	r3, r0
 8006324:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8006326:	697b      	ldr	r3, [r7, #20]
}
 8006328:	0018      	movs	r0, r3
 800632a:	46bd      	mov	sp, r7
 800632c:	b007      	add	sp, #28
 800632e:	bd90      	pop	{r4, r7, pc}

08006330 <lis2dw12_power_mode_get>:
  *                  and low_noise in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx, lis2dw12_mode_t *val)
{
 8006330:	b5b0      	push	{r4, r5, r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 800633a:	2410      	movs	r4, #16
 800633c:	193a      	adds	r2, r7, r4
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	2301      	movs	r3, #1
 8006342:	2120      	movs	r1, #32
 8006344:	f7ff ff46 	bl	80061d4 <lis2dw12_read_reg>
 8006348:	0003      	movs	r3, r0
 800634a:	617b      	str	r3, [r7, #20]
  if (ret == 0) {
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d000      	beq.n	8006354 <lis2dw12_power_mode_get+0x24>
 8006352:	e06e      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &ctrl6, 1);
 8006354:	250c      	movs	r5, #12
 8006356:	197a      	adds	r2, r7, r5
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	2301      	movs	r3, #1
 800635c:	2125      	movs	r1, #37	@ 0x25
 800635e:	f7ff ff39 	bl	80061d4 <lis2dw12_read_reg>
 8006362:	0003      	movs	r3, r0
 8006364:	617b      	str	r3, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8006366:	197b      	adds	r3, r7, r5
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	075b      	lsls	r3, r3, #29
 800636c:	0fdb      	lsrs	r3, r3, #31
 800636e:	b2db      	uxtb	r3, r3
 8006370:	011a      	lsls	r2, r3, #4
 8006372:	193b      	adds	r3, r7, r4
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	071b      	lsls	r3, r3, #28
 8006378:	0f9b      	lsrs	r3, r3, #30
 800637a:	b2db      	uxtb	r3, r3
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	18d3      	adds	r3, r2, r3
            ctrl1.lp_mode)) {
 8006380:	193a      	adds	r2, r7, r4
 8006382:	7812      	ldrb	r2, [r2, #0]
 8006384:	0792      	lsls	r2, r2, #30
 8006386:	0f92      	lsrs	r2, r2, #30
 8006388:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800638a:	189b      	adds	r3, r3, r2
 800638c:	2b1b      	cmp	r3, #27
 800638e:	d84c      	bhi.n	800642a <lis2dw12_power_mode_get+0xfa>
 8006390:	009a      	lsls	r2, r3, #2
 8006392:	4b2a      	ldr	r3, [pc, #168]	@ (800643c <lis2dw12_power_mode_get+0x10c>)
 8006394:	18d3      	adds	r3, r2, r3
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	469f      	mov	pc, r3
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2204      	movs	r2, #4
 800639e:	701a      	strb	r2, [r3, #0]
        break;
 80063a0:	e047      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2203      	movs	r2, #3
 80063a6:	701a      	strb	r2, [r3, #0]
        break;
 80063a8:	e043      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2202      	movs	r2, #2
 80063ae:	701a      	strb	r2, [r3, #0]
        break;
 80063b0:	e03f      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2201      	movs	r2, #1
 80063b6:	701a      	strb	r2, [r3, #0]
        break;
 80063b8:	e03b      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2200      	movs	r2, #0
 80063be:	701a      	strb	r2, [r3, #0]
        break;
 80063c0:	e037      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	220b      	movs	r2, #11
 80063c6:	701a      	strb	r2, [r3, #0]
        break;
 80063c8:	e033      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	220a      	movs	r2, #10
 80063ce:	701a      	strb	r2, [r3, #0]
        break;
 80063d0:	e02f      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2209      	movs	r2, #9
 80063d6:	701a      	strb	r2, [r3, #0]
        break;
 80063d8:	e02b      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2208      	movs	r2, #8
 80063de:	701a      	strb	r2, [r3, #0]
        break;
 80063e0:	e027      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2214      	movs	r2, #20
 80063e6:	701a      	strb	r2, [r3, #0]
        break;
 80063e8:	e023      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2213      	movs	r2, #19
 80063ee:	701a      	strb	r2, [r3, #0]
        break;
 80063f0:	e01f      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2212      	movs	r2, #18
 80063f6:	701a      	strb	r2, [r3, #0]
        break;
 80063f8:	e01b      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2211      	movs	r2, #17
 80063fe:	701a      	strb	r2, [r3, #0]
        break;
 8006400:	e017      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2210      	movs	r2, #16
 8006406:	701a      	strb	r2, [r3, #0]
        break;
 8006408:	e013      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	221b      	movs	r2, #27
 800640e:	701a      	strb	r2, [r3, #0]
        break;
 8006410:	e00f      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	221a      	movs	r2, #26
 8006416:	701a      	strb	r2, [r3, #0]
        break;
 8006418:	e00b      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2219      	movs	r2, #25
 800641e:	701a      	strb	r2, [r3, #0]
        break;
 8006420:	e007      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2218      	movs	r2, #24
 8006426:	701a      	strb	r2, [r3, #0]
        break;
 8006428:	e003      	b.n	8006432 <lis2dw12_power_mode_get+0x102>
      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2204      	movs	r2, #4
 800642e:	701a      	strb	r2, [r3, #0]
        break;
 8006430:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return ret;
 8006432:	697b      	ldr	r3, [r7, #20]
}
 8006434:	0018      	movs	r0, r3
 8006436:	46bd      	mov	sp, r7
 8006438:	b006      	add	sp, #24
 800643a:	bdb0      	pop	{r4, r5, r7, pc}
 800643c:	08014848 	.word	0x08014848

08006440 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8006440:	b590      	push	{r4, r7, lr}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	000a      	movs	r2, r1
 800644a:	1cfb      	adds	r3, r7, #3
 800644c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 800644e:	2410      	movs	r4, #16
 8006450:	193a      	adds	r2, r7, r4
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	2301      	movs	r3, #1
 8006456:	2120      	movs	r1, #32
 8006458:	f7ff febc 	bl	80061d4 <lis2dw12_read_reg>
 800645c:	0003      	movs	r3, r0
 800645e:	617b      	str	r3, [r7, #20]
  if (ret == 0) {
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d115      	bne.n	8006492 <lis2dw12_data_rate_set+0x52>
    ctrl1.odr = (uint8_t) val;
 8006466:	1cfb      	adds	r3, r7, #3
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	220f      	movs	r2, #15
 800646c:	4013      	ands	r3, r2
 800646e:	b2da      	uxtb	r2, r3
 8006470:	193b      	adds	r3, r7, r4
 8006472:	0110      	lsls	r0, r2, #4
 8006474:	781a      	ldrb	r2, [r3, #0]
 8006476:	210f      	movs	r1, #15
 8006478:	400a      	ands	r2, r1
 800647a:	1c11      	adds	r1, r2, #0
 800647c:	1c02      	adds	r2, r0, #0
 800647e:	430a      	orrs	r2, r1
 8006480:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 8006482:	193a      	adds	r2, r7, r4
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	2301      	movs	r3, #1
 8006488:	2120      	movs	r1, #32
 800648a:	f7ff fec4 	bl	8006216 <lis2dw12_write_reg>
 800648e:	0003      	movs	r3, r0
 8006490:	617b      	str	r3, [r7, #20]
  }
  if (ret == 0) {
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d108      	bne.n	80064aa <lis2dw12_data_rate_set+0x6a>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8006498:	230c      	movs	r3, #12
 800649a:	18fa      	adds	r2, r7, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	2301      	movs	r3, #1
 80064a0:	2122      	movs	r1, #34	@ 0x22
 80064a2:	f7ff fe97 	bl	80061d4 <lis2dw12_read_reg>
 80064a6:	0003      	movs	r3, r0
 80064a8:	617b      	str	r3, [r7, #20]
  }
  if (ret == 0) {
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d11a      	bne.n	80064e6 <lis2dw12_data_rate_set+0xa6>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 80064b0:	1cfb      	adds	r3, r7, #3
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	091b      	lsrs	r3, r3, #4
 80064b6:	1c1a      	adds	r2, r3, #0
 80064b8:	2303      	movs	r3, #3
 80064ba:	4013      	ands	r3, r2
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	240c      	movs	r4, #12
 80064c0:	193b      	adds	r3, r7, r4
 80064c2:	2103      	movs	r1, #3
 80064c4:	400a      	ands	r2, r1
 80064c6:	0010      	movs	r0, r2
 80064c8:	781a      	ldrb	r2, [r3, #0]
 80064ca:	2103      	movs	r1, #3
 80064cc:	438a      	bics	r2, r1
 80064ce:	1c11      	adds	r1, r2, #0
 80064d0:	1c02      	adds	r2, r0, #0
 80064d2:	430a      	orrs	r2, r1
 80064d4:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 80064d6:	193a      	adds	r2, r7, r4
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	2301      	movs	r3, #1
 80064dc:	2122      	movs	r1, #34	@ 0x22
 80064de:	f7ff fe9a 	bl	8006216 <lis2dw12_write_reg>
 80064e2:	0003      	movs	r3, r0
 80064e4:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80064e6:	697b      	ldr	r3, [r7, #20]
}
 80064e8:	0018      	movs	r0, r3
 80064ea:	46bd      	mov	sp, r7
 80064ec:	b007      	add	sp, #28
 80064ee:	bd90      	pop	{r4, r7, pc}

080064f0 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 80064f0:	b5b0      	push	{r4, r5, r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1,(uint8_t*) &ctrl1, 1);
 80064fa:	2410      	movs	r4, #16
 80064fc:	193a      	adds	r2, r7, r4
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	2301      	movs	r3, #1
 8006502:	2120      	movs	r1, #32
 8006504:	f7ff fe66 	bl	80061d4 <lis2dw12_read_reg>
 8006508:	0003      	movs	r3, r0
 800650a:	617b      	str	r3, [r7, #20]
  if (ret == 0) {
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d14f      	bne.n	80065b2 <lis2dw12_data_rate_get+0xc2>
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3,(uint8_t*) &ctrl3, 1);
 8006512:	250c      	movs	r5, #12
 8006514:	197a      	adds	r2, r7, r5
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	2301      	movs	r3, #1
 800651a:	2122      	movs	r1, #34	@ 0x22
 800651c:	f7ff fe5a 	bl	80061d4 <lis2dw12_read_reg>
 8006520:	0003      	movs	r3, r0
 8006522:	617b      	str	r3, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 8006524:	197b      	adds	r3, r7, r5
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	079b      	lsls	r3, r3, #30
 800652a:	0f9b      	lsrs	r3, r3, #30
 800652c:	b2db      	uxtb	r3, r3
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	193a      	adds	r2, r7, r4
 8006532:	7812      	ldrb	r2, [r2, #0]
 8006534:	0612      	lsls	r2, r2, #24
 8006536:	0f12      	lsrs	r2, r2, #28
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	189b      	adds	r3, r3, r2
 800653c:	2b32      	cmp	r3, #50	@ 0x32
 800653e:	d834      	bhi.n	80065aa <lis2dw12_data_rate_get+0xba>
 8006540:	009a      	lsls	r2, r3, #2
 8006542:	4b1e      	ldr	r3, [pc, #120]	@ (80065bc <lis2dw12_data_rate_get+0xcc>)
 8006544:	18d3      	adds	r3, r2, r3
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	469f      	mov	pc, r3
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]
        break;
 8006550:	e02f      	b.n	80065b2 <lis2dw12_data_rate_get+0xc2>
      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2201      	movs	r2, #1
 8006556:	701a      	strb	r2, [r3, #0]
        break;
 8006558:	e02b      	b.n	80065b2 <lis2dw12_data_rate_get+0xc2>
      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2202      	movs	r2, #2
 800655e:	701a      	strb	r2, [r3, #0]
        break;
 8006560:	e027      	b.n	80065b2 <lis2dw12_data_rate_get+0xc2>
      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2203      	movs	r2, #3
 8006566:	701a      	strb	r2, [r3, #0]
        break;
 8006568:	e023      	b.n	80065b2 <lis2dw12_data_rate_get+0xc2>
       case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2204      	movs	r2, #4
 800656e:	701a      	strb	r2, [r3, #0]
        break;
 8006570:	e01f      	b.n	80065b2 <lis2dw12_data_rate_get+0xc2>
      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2205      	movs	r2, #5
 8006576:	701a      	strb	r2, [r3, #0]
        break;
 8006578:	e01b      	b.n	80065b2 <lis2dw12_data_rate_get+0xc2>
      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2206      	movs	r2, #6
 800657e:	701a      	strb	r2, [r3, #0]
        break;
 8006580:	e017      	b.n	80065b2 <lis2dw12_data_rate_get+0xc2>
      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2207      	movs	r2, #7
 8006586:	701a      	strb	r2, [r3, #0]
        break;
 8006588:	e013      	b.n	80065b2 <lis2dw12_data_rate_get+0xc2>
       case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2208      	movs	r2, #8
 800658e:	701a      	strb	r2, [r3, #0]
        break;
 8006590:	e00f      	b.n	80065b2 <lis2dw12_data_rate_get+0xc2>
      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2209      	movs	r2, #9
 8006596:	701a      	strb	r2, [r3, #0]
        break;
 8006598:	e00b      	b.n	80065b2 <lis2dw12_data_rate_get+0xc2>
      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2232      	movs	r2, #50	@ 0x32
 800659e:	701a      	strb	r2, [r3, #0]
        break;
 80065a0:	e007      	b.n	80065b2 <lis2dw12_data_rate_get+0xc2>
      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2222      	movs	r2, #34	@ 0x22
 80065a6:	701a      	strb	r2, [r3, #0]
        break;
 80065a8:	e003      	b.n	80065b2 <lis2dw12_data_rate_get+0xc2>
      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]
        break;
 80065b0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return ret;
 80065b2:	697b      	ldr	r3, [r7, #20]
}
 80065b4:	0018      	movs	r0, r3
 80065b6:	46bd      	mov	sp, r7
 80065b8:	b006      	add	sp, #24
 80065ba:	bdb0      	pop	{r4, r5, r7, pc}
 80065bc:	080148b8 	.word	0x080148b8

080065c0 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80065c0:	b590      	push	{r4, r7, lr}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	000a      	movs	r2, r1
 80065ca:	1cfb      	adds	r3, r7, #3
 80065cc:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 80065ce:	2408      	movs	r4, #8
 80065d0:	193a      	adds	r2, r7, r4
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	2301      	movs	r3, #1
 80065d6:	2121      	movs	r1, #33	@ 0x21
 80065d8:	f7ff fdfc 	bl	80061d4 <lis2dw12_read_reg>
 80065dc:	0003      	movs	r3, r0
 80065de:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d117      	bne.n	8006616 <lis2dw12_block_data_update_set+0x56>
    reg.bdu = val;
 80065e6:	1cfb      	adds	r3, r7, #3
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2201      	movs	r2, #1
 80065ec:	4013      	ands	r3, r2
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	193b      	adds	r3, r7, r4
 80065f2:	2101      	movs	r1, #1
 80065f4:	400a      	ands	r2, r1
 80065f6:	00d0      	lsls	r0, r2, #3
 80065f8:	781a      	ldrb	r2, [r3, #0]
 80065fa:	2108      	movs	r1, #8
 80065fc:	438a      	bics	r2, r1
 80065fe:	1c11      	adds	r1, r2, #0
 8006600:	1c02      	adds	r2, r0, #0
 8006602:	430a      	orrs	r2, r1
 8006604:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8006606:	193a      	adds	r2, r7, r4
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	2301      	movs	r3, #1
 800660c:	2121      	movs	r1, #33	@ 0x21
 800660e:	f7ff fe02 	bl	8006216 <lis2dw12_write_reg>
 8006612:	0003      	movs	r3, r0
 8006614:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8006616:	68fb      	ldr	r3, [r7, #12]
}
 8006618:	0018      	movs	r0, r3
 800661a:	46bd      	mov	sp, r7
 800661c:	b005      	add	sp, #20
 800661e:	bd90      	pop	{r4, r7, pc}

08006620 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8006620:	b590      	push	{r4, r7, lr}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	000a      	movs	r2, r1
 800662a:	1cfb      	adds	r3, r7, #3
 800662c:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 800662e:	2408      	movs	r4, #8
 8006630:	193a      	adds	r2, r7, r4
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	2301      	movs	r3, #1
 8006636:	2125      	movs	r1, #37	@ 0x25
 8006638:	f7ff fdcc 	bl	80061d4 <lis2dw12_read_reg>
 800663c:	0003      	movs	r3, r0
 800663e:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d117      	bne.n	8006676 <lis2dw12_full_scale_set+0x56>
    reg.fs = (uint8_t) val;
 8006646:	1cfb      	adds	r3, r7, #3
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2203      	movs	r2, #3
 800664c:	4013      	ands	r3, r2
 800664e:	b2da      	uxtb	r2, r3
 8006650:	193b      	adds	r3, r7, r4
 8006652:	2103      	movs	r1, #3
 8006654:	400a      	ands	r2, r1
 8006656:	0110      	lsls	r0, r2, #4
 8006658:	781a      	ldrb	r2, [r3, #0]
 800665a:	2130      	movs	r1, #48	@ 0x30
 800665c:	438a      	bics	r2, r1
 800665e:	1c11      	adds	r1, r2, #0
 8006660:	1c02      	adds	r2, r0, #0
 8006662:	430a      	orrs	r2, r1
 8006664:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 8006666:	193a      	adds	r2, r7, r4
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	2301      	movs	r3, #1
 800666c:	2125      	movs	r1, #37	@ 0x25
 800666e:	f7ff fdd2 	bl	8006216 <lis2dw12_write_reg>
 8006672:	0003      	movs	r3, r0
 8006674:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8006676:	68fb      	ldr	r3, [r7, #12]
}
 8006678:	0018      	movs	r0, r3
 800667a:	46bd      	mov	sp, r7
 800667c:	b005      	add	sp, #20
 800667e:	bd90      	pop	{r4, r7, pc}

08006680 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8006680:	b590      	push	{r4, r7, lr}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6,(uint8_t*) &reg, 1);
 800668a:	2408      	movs	r4, #8
 800668c:	193a      	adds	r2, r7, r4
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	2301      	movs	r3, #1
 8006692:	2125      	movs	r1, #37	@ 0x25
 8006694:	f7ff fd9e 	bl	80061d4 <lis2dw12_read_reg>
 8006698:	0003      	movs	r3, r0
 800669a:	60fb      	str	r3, [r7, #12]

  switch (reg.fs) {
 800669c:	193b      	adds	r3, r7, r4
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	069b      	lsls	r3, r3, #26
 80066a2:	0f9b      	lsrs	r3, r3, #30
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d014      	beq.n	80066d4 <lis2dw12_full_scale_get+0x54>
 80066aa:	dc17      	bgt.n	80066dc <lis2dw12_full_scale_get+0x5c>
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d00d      	beq.n	80066cc <lis2dw12_full_scale_get+0x4c>
 80066b0:	dc14      	bgt.n	80066dc <lis2dw12_full_scale_get+0x5c>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <lis2dw12_full_scale_get+0x3c>
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d004      	beq.n	80066c4 <lis2dw12_full_scale_get+0x44>
 80066ba:	e00f      	b.n	80066dc <lis2dw12_full_scale_get+0x5c>
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2200      	movs	r2, #0
 80066c0:	701a      	strb	r2, [r3, #0]
      break;
 80066c2:	e00f      	b.n	80066e4 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2201      	movs	r2, #1
 80066c8:	701a      	strb	r2, [r3, #0]
      break;
 80066ca:	e00b      	b.n	80066e4 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2202      	movs	r2, #2
 80066d0:	701a      	strb	r2, [r3, #0]
      break;
 80066d2:	e007      	b.n	80066e4 <lis2dw12_full_scale_get+0x64>
    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2203      	movs	r2, #3
 80066d8:	701a      	strb	r2, [r3, #0]
      break;
 80066da:	e003      	b.n	80066e4 <lis2dw12_full_scale_get+0x64>
    default:
      *val = LIS2DW12_2g;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2200      	movs	r2, #0
 80066e0:	701a      	strb	r2, [r3, #0]
      break;
 80066e2:	46c0      	nop			@ (mov r8, r8)
  }
  return ret;
 80066e4:	68fb      	ldr	r3, [r7, #12]
}
 80066e6:	0018      	movs	r0, r3
 80066e8:	46bd      	mov	sp, r7
 80066ea:	b005      	add	sp, #20
 80066ec:	bd90      	pop	{r4, r7, pc}

080066ee <lis2dw12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b084      	sub	sp, #16
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	2306      	movs	r3, #6
 80066fe:	2128      	movs	r1, #40	@ 0x28
 8006700:	f7ff fd68 	bl	80061d4 <lis2dw12_read_reg>
 8006704:	0003      	movs	r3, r0
 8006706:	60fb      	str	r3, [r7, #12]
  return ret;
 8006708:	68fb      	ldr	r3, [r7, #12]
}
 800670a:	0018      	movs	r0, r3
 800670c:	46bd      	mov	sp, r7
 800670e:	b004      	add	sp, #16
 8006710:	bd80      	pop	{r7, pc}

08006712 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	2301      	movs	r3, #1
 8006722:	210f      	movs	r1, #15
 8006724:	f7ff fd56 	bl	80061d4 <lis2dw12_read_reg>
 8006728:	0003      	movs	r3, r0
 800672a:	60fb      	str	r3, [r7, #12]
  return ret;
 800672c:	68fb      	ldr	r3, [r7, #12]
}
 800672e:	0018      	movs	r0, r3
 8006730:	46bd      	mov	sp, r7
 8006732:	b004      	add	sp, #16
 8006734:	bd80      	pop	{r7, pc}

08006736 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006736:	b590      	push	{r4, r7, lr}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	000a      	movs	r2, r1
 8006740:	1cfb      	adds	r3, r7, #3
 8006742:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 8006744:	2408      	movs	r4, #8
 8006746:	193a      	adds	r2, r7, r4
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	2301      	movs	r3, #1
 800674c:	2121      	movs	r1, #33	@ 0x21
 800674e:	f7ff fd41 	bl	80061d4 <lis2dw12_read_reg>
 8006752:	0003      	movs	r3, r0
 8006754:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d117      	bne.n	800678c <lis2dw12_auto_increment_set+0x56>
    reg.if_add_inc = val;
 800675c:	1cfb      	adds	r3, r7, #3
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2201      	movs	r2, #1
 8006762:	4013      	ands	r3, r2
 8006764:	b2da      	uxtb	r2, r3
 8006766:	193b      	adds	r3, r7, r4
 8006768:	2101      	movs	r1, #1
 800676a:	400a      	ands	r2, r1
 800676c:	0090      	lsls	r0, r2, #2
 800676e:	781a      	ldrb	r2, [r3, #0]
 8006770:	2104      	movs	r1, #4
 8006772:	438a      	bics	r2, r1
 8006774:	1c11      	adds	r1, r2, #0
 8006776:	1c02      	adds	r2, r0, #0
 8006778:	430a      	orrs	r2, r1
 800677a:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2,(uint8_t*) &reg, 1);
 800677c:	193a      	adds	r2, r7, r4
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	2301      	movs	r3, #1
 8006782:	2121      	movs	r1, #33	@ 0x21
 8006784:	f7ff fd47 	bl	8006216 <lis2dw12_write_reg>
 8006788:	0003      	movs	r3, r0
 800678a:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800678c:	68fb      	ldr	r3, [r7, #12]
}
 800678e:	0018      	movs	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	b005      	add	sp, #20
 8006794:	bd90      	pop	{r4, r7, pc}

08006796 <lis2dw12_fifo_mode_set>:
  * @param  val      change the values of fmode in reg FIFO_CTRL
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx, lis2dw12_fmode_t val)
{
 8006796:	b590      	push	{r4, r7, lr}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	000a      	movs	r2, r1
 80067a0:	1cfb      	adds	r3, r7, #3
 80067a2:	701a      	strb	r2, [r3, #0]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 80067a4:	2408      	movs	r4, #8
 80067a6:	193a      	adds	r2, r7, r4
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	2301      	movs	r3, #1
 80067ac:	212e      	movs	r1, #46	@ 0x2e
 80067ae:	f7ff fd11 	bl	80061d4 <lis2dw12_read_reg>
 80067b2:	0003      	movs	r3, r0
 80067b4:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d115      	bne.n	80067e8 <lis2dw12_fifo_mode_set+0x52>
    reg.fmode = (uint8_t) val;
 80067bc:	1cfb      	adds	r3, r7, #3
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2207      	movs	r2, #7
 80067c2:	4013      	ands	r3, r2
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	193b      	adds	r3, r7, r4
 80067c8:	0150      	lsls	r0, r2, #5
 80067ca:	781a      	ldrb	r2, [r3, #0]
 80067cc:	211f      	movs	r1, #31
 80067ce:	400a      	ands	r2, r1
 80067d0:	1c11      	adds	r1, r2, #0
 80067d2:	1c02      	adds	r2, r0, #0
 80067d4:	430a      	orrs	r2, r1
 80067d6:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL,(uint8_t*) &reg, 1);
 80067d8:	193a      	adds	r2, r7, r4
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	2301      	movs	r3, #1
 80067de:	212e      	movs	r1, #46	@ 0x2e
 80067e0:	f7ff fd19 	bl	8006216 <lis2dw12_write_reg>
 80067e4:	0003      	movs	r3, r0
 80067e6:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80067e8:	68fb      	ldr	r3, [r7, #12]
}
 80067ea:	0018      	movs	r0, r3
 80067ec:	46bd      	mov	sp, r7
 80067ee:	b005      	add	sp, #20
 80067f0:	bd90      	pop	{r4, r7, pc}
	...

080067f4 <LIS2MDL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d103      	bne.n	8006810 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	425b      	negs	r3, r3
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e05d      	b.n	80068cc <LIS2MDL_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	7b1a      	ldrb	r2, [r3, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	691a      	ldr	r2, [r3, #16]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	695a      	ldr	r2, [r3, #20]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	699a      	ldr	r2, [r3, #24]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a23      	ldr	r2, [pc, #140]	@ (80068d8 <LIS2MDL_RegisterBusIO+0xe4>)
 800684c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a22      	ldr	r2, [pc, #136]	@ (80068dc <LIS2MDL_RegisterBusIO+0xe8>)
 8006852:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d103      	bne.n	800686a <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	425b      	negs	r3, r3
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e030      	b.n	80068cc <LIS2MDL_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4798      	blx	r3
 8006870:	1e03      	subs	r3, r0, #0
 8006872:	d003      	beq.n	800687c <LIS2MDL_RegisterBusIO+0x88>
    {
      ret = LIS2MDL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	425b      	negs	r3, r3
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	e027      	b.n	80068cc <LIS2MDL_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d023      	beq.n	80068cc <LIS2MDL_RegisterBusIO+0xd8>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2228      	movs	r2, #40	@ 0x28
 8006888:	5c9b      	ldrb	r3, [r3, r2]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d11e      	bne.n	80068cc <LIS2MDL_RegisterBusIO+0xd8>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d10f      	bne.n	80068b6 <LIS2MDL_RegisterBusIO+0xc2>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8006896:	210b      	movs	r1, #11
 8006898:	187b      	adds	r3, r7, r1
 800689a:	2234      	movs	r2, #52	@ 0x34
 800689c:	701a      	strb	r2, [r3, #0]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 800689e:	187b      	adds	r3, r7, r1
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2162      	movs	r1, #98	@ 0x62
 80068a6:	0018      	movs	r0, r3
 80068a8:	f000 fa0a 	bl	8006cc0 <LIS2MDL_Write_Reg>
 80068ac:	1e03      	subs	r3, r0, #0
 80068ae:	d00d      	beq.n	80068cc <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	425b      	negs	r3, r3
 80068b4:	e00b      	b.n	80068ce <LIS2MDL_RegisterBusIO+0xda>
            }
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	331c      	adds	r3, #28
 80068ba:	2101      	movs	r1, #1
 80068bc:	0018      	movs	r0, r3
 80068be:	f000 fbf5 	bl	80070ac <lis2mdl_i2c_interface_set>
 80068c2:	1e03      	subs	r3, r0, #0
 80068c4:	d002      	beq.n	80068cc <LIS2MDL_RegisterBusIO+0xd8>
            {
              return LIS2MDL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	425b      	negs	r3, r3
 80068ca:	e000      	b.n	80068ce <LIS2MDL_RegisterBusIO+0xda>
        }
      }
    }
  }

  return ret;
 80068cc:	68fb      	ldr	r3, [r7, #12]
}
 80068ce:	0018      	movs	r0, r3
 80068d0:	46bd      	mov	sp, r7
 80068d2:	b004      	add	sp, #16
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	46c0      	nop			@ (mov r8, r8)
 80068d8:	08006cff 	.word	0x08006cff
 80068dc:	08006d79 	.word	0x08006d79

080068e0 <LIS2MDL_Init>:
 * @brief  Initialize the LIS2MDL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	331c      	adds	r3, #28
 80068ec:	2101      	movs	r1, #1
 80068ee:	0018      	movs	r0, r3
 80068f0:	f000 fb58 	bl	8006fa4 <lis2mdl_block_data_update_set>
 80068f4:	1e03      	subs	r3, r0, #0
 80068f6:	d002      	beq.n	80068fe <LIS2MDL_Init+0x1e>
  {
    return LIS2MDL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	425b      	negs	r3, r3
 80068fc:	e025      	b.n	800694a <LIS2MDL_Init+0x6a>
  }

  /* Operating mode selection - power down */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	331c      	adds	r3, #28
 8006902:	2102      	movs	r1, #2
 8006904:	0018      	movs	r0, r3
 8006906:	f000 fab6 	bl	8006e76 <lis2mdl_operating_mode_set>
 800690a:	1e03      	subs	r3, r0, #0
 800690c:	d002      	beq.n	8006914 <LIS2MDL_Init+0x34>
  {
    return LIS2MDL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	425b      	negs	r3, r3
 8006912:	e01a      	b.n	800694a <LIS2MDL_Init+0x6a>
  }

  /* Output data rate selection */
  if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	331c      	adds	r3, #28
 8006918:	2103      	movs	r1, #3
 800691a:	0018      	movs	r0, r3
 800691c:	f000 fadb 	bl	8006ed6 <lis2mdl_data_rate_set>
 8006920:	1e03      	subs	r3, r0, #0
 8006922:	d002      	beq.n	800692a <LIS2MDL_Init+0x4a>
  {
    return LIS2MDL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	425b      	negs	r3, r3
 8006928:	e00f      	b.n	800694a <LIS2MDL_Init+0x6a>
  }

  /* Self Test disabled. */
  if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	331c      	adds	r3, #28
 800692e:	2100      	movs	r1, #0
 8006930:	0018      	movs	r0, r3
 8006932:	f000 fb8b 	bl	800704c <lis2mdl_self_test_set>
 8006936:	1e03      	subs	r3, r0, #0
 8006938:	d002      	beq.n	8006940 <LIS2MDL_Init+0x60>
  {
    return LIS2MDL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	425b      	negs	r3, r3
 800693e:	e004      	b.n	800694a <LIS2MDL_Init+0x6a>
  }

  pObj->is_initialized = 1;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2228      	movs	r2, #40	@ 0x28
 8006944:	2101      	movs	r1, #1
 8006946:	5499      	strb	r1, [r3, r2]

  return LIS2MDL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	0018      	movs	r0, r3
 800694c:	46bd      	mov	sp, r7
 800694e:	b002      	add	sp, #8
 8006950:	bd80      	pop	{r7, pc}

08006952 <LIS2MDL_DeInit>:
 * @brief  Deinitialize the LIS2MDL magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b082      	sub	sp, #8
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	0018      	movs	r0, r3
 800695e:	f000 f86e 	bl	8006a3e <LIS2MDL_MAG_Disable>
 8006962:	1e03      	subs	r3, r0, #0
 8006964:	d002      	beq.n	800696c <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	425b      	negs	r3, r3
 800696a:	e004      	b.n	8006976 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2228      	movs	r2, #40	@ 0x28
 8006970:	2100      	movs	r1, #0
 8006972:	5499      	strb	r1, [r3, r2]

  return LIS2MDL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	0018      	movs	r0, r3
 8006978:	46bd      	mov	sp, r7
 800697a:	b002      	add	sp, #8
 800697c:	bd80      	pop	{r7, pc}

0800697e <LIS2MDL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b082      	sub	sp, #8
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
  if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	331c      	adds	r3, #28
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	0011      	movs	r1, r2
 8006990:	0018      	movs	r0, r3
 8006992:	f000 fb49 	bl	8007028 <lis2mdl_device_id_get>
 8006996:	1e03      	subs	r3, r0, #0
 8006998:	d002      	beq.n	80069a0 <LIS2MDL_ReadID+0x22>
  {
    return LIS2MDL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	425b      	negs	r3, r3
 800699e:	e000      	b.n	80069a2 <LIS2MDL_ReadID+0x24>
  }

  return LIS2MDL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	0018      	movs	r0, r3
 80069a4:	46bd      	mov	sp, r7
 80069a6:	b002      	add	sp, #8
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <LIS2MDL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2200      	movs	r2, #0
 80069ba:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2200      	movs	r2, #0
 80069c0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2201      	movs	r2, #1
 80069c6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2200      	movs	r2, #0
 80069cc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2200      	movs	r2, #0
 80069d2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2200      	movs	r2, #0
 80069d8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2232      	movs	r2, #50	@ 0x32
 80069de:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2200      	movs	r2, #0
 80069e4:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2200      	movs	r2, #0
 80069ea:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	4a03      	ldr	r2, [pc, #12]	@ (80069fc <LIS2MDL_GetCapabilities+0x50>)
 80069f0:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	0018      	movs	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	b002      	add	sp, #8
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	42c80000 	.word	0x42c80000

08006a00 <LIS2MDL_MAG_Enable>:
 * @brief Enable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2229      	movs	r2, #41	@ 0x29
 8006a0c:	5c9b      	ldrb	r3, [r3, r2]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	e00f      	b.n	8006a36 <LIS2MDL_MAG_Enable+0x36>
  }

  /* Output data rate selection. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	331c      	adds	r3, #28
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f000 fa2a 	bl	8006e76 <lis2mdl_operating_mode_set>
 8006a22:	1e03      	subs	r3, r0, #0
 8006a24:	d002      	beq.n	8006a2c <LIS2MDL_MAG_Enable+0x2c>
  {
    return LIS2MDL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	425b      	negs	r3, r3
 8006a2a:	e004      	b.n	8006a36 <LIS2MDL_MAG_Enable+0x36>
  }

  pObj->mag_is_enabled = 1;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2229      	movs	r2, #41	@ 0x29
 8006a30:	2101      	movs	r1, #1
 8006a32:	5499      	strb	r1, [r3, r2]

  return LIS2MDL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	0018      	movs	r0, r3
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	b002      	add	sp, #8
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <LIS2MDL_MAG_Disable>:
 * @brief Disable the LIS2MDL magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b082      	sub	sp, #8
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2229      	movs	r2, #41	@ 0x29
 8006a4a:	5c9b      	ldrb	r3, [r3, r2]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	e00f      	b.n	8006a74 <LIS2MDL_MAG_Disable+0x36>
  }

  /* Output data rate selection - power down. */
  if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	331c      	adds	r3, #28
 8006a58:	2102      	movs	r1, #2
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f000 fa0b 	bl	8006e76 <lis2mdl_operating_mode_set>
 8006a60:	1e03      	subs	r3, r0, #0
 8006a62:	d002      	beq.n	8006a6a <LIS2MDL_MAG_Disable+0x2c>
  {
    return LIS2MDL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	425b      	negs	r3, r3
 8006a68:	e004      	b.n	8006a74 <LIS2MDL_MAG_Disable+0x36>
  }

  pObj->mag_is_enabled = 0;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2229      	movs	r2, #41	@ 0x29
 8006a6e:	2100      	movs	r1, #0
 8006a70:	5499      	strb	r1, [r3, r2]

  return LIS2MDL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	0018      	movs	r0, r3
 8006a76:	46bd      	mov	sp, r7
 8006a78:	b002      	add	sp, #8
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <LIS2MDL_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	22ff      	movs	r2, #255	@ 0xff
 8006a8a:	0592      	lsls	r2, r2, #22
 8006a8c:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	0018      	movs	r0, r3
 8006a92:	46bd      	mov	sp, r7
 8006a94:	b002      	add	sp, #8
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <LIS2MDL_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	331c      	adds	r3, #28
 8006aaa:	220b      	movs	r2, #11
 8006aac:	18ba      	adds	r2, r7, r2
 8006aae:	0011      	movs	r1, r2
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f000 fa40 	bl	8006f36 <lis2mdl_data_rate_get>
 8006ab6:	1e03      	subs	r3, r0, #0
 8006ab8:	d002      	beq.n	8006ac0 <LIS2MDL_MAG_GetOutputDataRate+0x28>
  {
    return LIS2MDL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	425b      	negs	r3, r3
 8006abe:	e022      	b.n	8006b06 <LIS2MDL_MAG_GetOutputDataRate+0x6e>
  }

  switch (odr_low_level)
 8006ac0:	230b      	movs	r3, #11
 8006ac2:	18fb      	adds	r3, r7, r3
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d014      	beq.n	8006af4 <LIS2MDL_MAG_GetOutputDataRate+0x5c>
 8006aca:	dc17      	bgt.n	8006afc <LIS2MDL_MAG_GetOutputDataRate+0x64>
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d00d      	beq.n	8006aec <LIS2MDL_MAG_GetOutputDataRate+0x54>
 8006ad0:	dc14      	bgt.n	8006afc <LIS2MDL_MAG_GetOutputDataRate+0x64>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <LIS2MDL_MAG_GetOutputDataRate+0x44>
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d004      	beq.n	8006ae4 <LIS2MDL_MAG_GetOutputDataRate+0x4c>
 8006ada:	e00f      	b.n	8006afc <LIS2MDL_MAG_GetOutputDataRate+0x64>
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	4a0c      	ldr	r2, [pc, #48]	@ (8006b10 <LIS2MDL_MAG_GetOutputDataRate+0x78>)
 8006ae0:	601a      	str	r2, [r3, #0]
      break;
 8006ae2:	e00f      	b.n	8006b04 <LIS2MDL_MAG_GetOutputDataRate+0x6c>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	4a0b      	ldr	r2, [pc, #44]	@ (8006b14 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8006ae8:	601a      	str	r2, [r3, #0]
      break;
 8006aea:	e00b      	b.n	8006b04 <LIS2MDL_MAG_GetOutputDataRate+0x6c>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	4a0a      	ldr	r2, [pc, #40]	@ (8006b18 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8006af0:	601a      	str	r2, [r3, #0]
      break;
 8006af2:	e007      	b.n	8006b04 <LIS2MDL_MAG_GetOutputDataRate+0x6c>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	4a09      	ldr	r2, [pc, #36]	@ (8006b1c <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8006af8:	601a      	str	r2, [r3, #0]
      break;
 8006afa:	e003      	b.n	8006b04 <LIS2MDL_MAG_GetOutputDataRate+0x6c>

    default:
      ret = LIS2MDL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	425b      	negs	r3, r3
 8006b00:	60fb      	str	r3, [r7, #12]
      break;
 8006b02:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8006b04:	68fb      	ldr	r3, [r7, #12]
}
 8006b06:	0018      	movs	r0, r3
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	b004      	add	sp, #16
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	46c0      	nop			@ (mov r8, r8)
 8006b10:	41200000 	.word	0x41200000
 8006b14:	41a00000 	.word	0x41a00000
 8006b18:	42480000 	.word	0x42480000
 8006b1c:	42c80000 	.word	0x42c80000

08006b20 <LIS2MDL_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  lis2mdl_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8006b2a:	4917      	ldr	r1, [pc, #92]	@ (8006b88 <LIS2MDL_MAG_SetOutputDataRate+0x68>)
 8006b2c:	6838      	ldr	r0, [r7, #0]
 8006b2e:	f7f9 fbe5 	bl	80002fc <__aeabi_fcmple>
 8006b32:	1e03      	subs	r3, r0, #0
 8006b34:	d001      	beq.n	8006b3a <LIS2MDL_MAG_SetOutputDataRate+0x1a>
 8006b36:	2300      	movs	r3, #0
 8006b38:	e010      	b.n	8006b5c <LIS2MDL_MAG_SetOutputDataRate+0x3c>
 8006b3a:	4914      	ldr	r1, [pc, #80]	@ (8006b8c <LIS2MDL_MAG_SetOutputDataRate+0x6c>)
 8006b3c:	6838      	ldr	r0, [r7, #0]
 8006b3e:	f7f9 fbdd 	bl	80002fc <__aeabi_fcmple>
 8006b42:	1e03      	subs	r3, r0, #0
 8006b44:	d001      	beq.n	8006b4a <LIS2MDL_MAG_SetOutputDataRate+0x2a>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e008      	b.n	8006b5c <LIS2MDL_MAG_SetOutputDataRate+0x3c>
 8006b4a:	4911      	ldr	r1, [pc, #68]	@ (8006b90 <LIS2MDL_MAG_SetOutputDataRate+0x70>)
 8006b4c:	6838      	ldr	r0, [r7, #0]
 8006b4e:	f7f9 fbd5 	bl	80002fc <__aeabi_fcmple>
 8006b52:	1e03      	subs	r3, r0, #0
 8006b54:	d001      	beq.n	8006b5a <LIS2MDL_MAG_SetOutputDataRate+0x3a>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e000      	b.n	8006b5c <LIS2MDL_MAG_SetOutputDataRate+0x3c>
 8006b5a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8006b5c:	210f      	movs	r1, #15
 8006b5e:	187a      	adds	r2, r7, r1
 8006b60:	7013      	strb	r3, [r2, #0]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	331c      	adds	r3, #28
 8006b66:	001a      	movs	r2, r3
 8006b68:	187b      	adds	r3, r7, r1
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	0019      	movs	r1, r3
 8006b6e:	0010      	movs	r0, r2
 8006b70:	f000 f9b1 	bl	8006ed6 <lis2mdl_data_rate_set>
 8006b74:	1e03      	subs	r3, r0, #0
 8006b76:	d002      	beq.n	8006b7e <LIS2MDL_MAG_SetOutputDataRate+0x5e>
  {
    return LIS2MDL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	425b      	negs	r3, r3
 8006b7c:	e000      	b.n	8006b80 <LIS2MDL_MAG_SetOutputDataRate+0x60>
  }

  return LIS2MDL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	0018      	movs	r0, r3
 8006b82:	46bd      	mov	sp, r7
 8006b84:	b004      	add	sp, #16
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	41200000 	.word	0x41200000
 8006b8c:	41a00000 	.word	0x41a00000
 8006b90:	42480000 	.word	0x42480000

08006b94 <LIS2MDL_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2232      	movs	r2, #50	@ 0x32
 8006ba2:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	b002      	add	sp, #8
 8006bac:	bd80      	pop	{r7, pc}

08006bae <LIS2MDL_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	0018      	movs	r0, r3
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	b002      	add	sp, #8
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <LIS2MDL_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LIS2MDL_OK)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	331c      	adds	r3, #28
 8006bd0:	2208      	movs	r2, #8
 8006bd2:	18ba      	adds	r2, r7, r2
 8006bd4:	0011      	movs	r1, r2
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f000 fa14 	bl	8007004 <lis2mdl_magnetic_raw_get>
 8006bdc:	1e03      	subs	r3, r0, #0
 8006bde:	d002      	beq.n	8006be6 <LIS2MDL_MAG_GetAxesRaw+0x24>
  {
    return LIS2MDL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	425b      	negs	r3, r3
 8006be4:	e010      	b.n	8006c08 <LIS2MDL_MAG_GetAxesRaw+0x46>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006be6:	2108      	movs	r1, #8
 8006be8:	187b      	adds	r3, r7, r1
 8006bea:	2200      	movs	r2, #0
 8006bec:	5e9a      	ldrsh	r2, [r3, r2]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006bf2:	187b      	adds	r3, r7, r1
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	5e9a      	ldrsh	r2, [r3, r2]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006bfc:	187b      	adds	r3, r7, r1
 8006bfe:	2204      	movs	r2, #4
 8006c00:	5e9a      	ldrsh	r2, [r3, r2]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	0018      	movs	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b004      	add	sp, #16
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <LIS2MDL_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8006c10:	b590      	push	{r4, r7, lr}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LIS2MDL_OK)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	331c      	adds	r3, #28
 8006c1e:	2210      	movs	r2, #16
 8006c20:	18ba      	adds	r2, r7, r2
 8006c22:	0011      	movs	r1, r2
 8006c24:	0018      	movs	r0, r3
 8006c26:	f000 f9ed 	bl	8007004 <lis2mdl_magnetic_raw_get>
 8006c2a:	1e03      	subs	r3, r0, #0
 8006c2c:	d002      	beq.n	8006c34 <LIS2MDL_MAG_GetAxes+0x24>
  {
    return LIS2MDL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	425b      	negs	r3, r3
 8006c32:	e041      	b.n	8006cb8 <LIS2MDL_MAG_GetAxes+0xa8>
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8006c34:	230c      	movs	r3, #12
 8006c36:	18fa      	adds	r2, r7, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	0011      	movs	r1, r2
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	f7ff ff1d 	bl	8006a7c <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8006c42:	2410      	movs	r4, #16
 8006c44:	193b      	adds	r3, r7, r4
 8006c46:	2200      	movs	r2, #0
 8006c48:	5e9b      	ldrsh	r3, [r3, r2]
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f7fa fb00 	bl	8001250 <__aeabi_i2f>
 8006c50:	1c02      	adds	r2, r0, #0
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	1c19      	adds	r1, r3, #0
 8006c56:	1c10      	adds	r0, r2, #0
 8006c58:	f7f9 fff8 	bl	8000c4c <__aeabi_fmul>
 8006c5c:	1c03      	adds	r3, r0, #0
 8006c5e:	1c18      	adds	r0, r3, #0
 8006c60:	f7fa fad6 	bl	8001210 <__aeabi_f2iz>
 8006c64:	0002      	movs	r2, r0
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8006c6a:	193b      	adds	r3, r7, r4
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	5e9b      	ldrsh	r3, [r3, r2]
 8006c70:	0018      	movs	r0, r3
 8006c72:	f7fa faed 	bl	8001250 <__aeabi_i2f>
 8006c76:	1c02      	adds	r2, r0, #0
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	1c19      	adds	r1, r3, #0
 8006c7c:	1c10      	adds	r0, r2, #0
 8006c7e:	f7f9 ffe5 	bl	8000c4c <__aeabi_fmul>
 8006c82:	1c03      	adds	r3, r0, #0
 8006c84:	1c18      	adds	r0, r3, #0
 8006c86:	f7fa fac3 	bl	8001210 <__aeabi_f2iz>
 8006c8a:	0002      	movs	r2, r0
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8006c90:	193b      	adds	r3, r7, r4
 8006c92:	2204      	movs	r2, #4
 8006c94:	5e9b      	ldrsh	r3, [r3, r2]
 8006c96:	0018      	movs	r0, r3
 8006c98:	f7fa fada 	bl	8001250 <__aeabi_i2f>
 8006c9c:	1c02      	adds	r2, r0, #0
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	1c19      	adds	r1, r3, #0
 8006ca2:	1c10      	adds	r0, r2, #0
 8006ca4:	f7f9 ffd2 	bl	8000c4c <__aeabi_fmul>
 8006ca8:	1c03      	adds	r3, r0, #0
 8006caa:	1c18      	adds	r0, r3, #0
 8006cac:	f7fa fab0 	bl	8001210 <__aeabi_f2iz>
 8006cb0:	0002      	movs	r2, r0
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	0018      	movs	r0, r3
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	b007      	add	sp, #28
 8006cbe:	bd90      	pop	{r4, r7, pc}

08006cc0 <LIS2MDL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	0008      	movs	r0, r1
 8006cca:	0011      	movs	r1, r2
 8006ccc:	1cfb      	adds	r3, r7, #3
 8006cce:	1c02      	adds	r2, r0, #0
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	1cbb      	adds	r3, r7, #2
 8006cd4:	1c0a      	adds	r2, r1, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
  if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	331c      	adds	r3, #28
 8006cdc:	0018      	movs	r0, r3
 8006cde:	1cba      	adds	r2, r7, #2
 8006ce0:	1cfb      	adds	r3, r7, #3
 8006ce2:	7819      	ldrb	r1, [r3, #0]
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f000 f8a5 	bl	8006e34 <lis2mdl_write_reg>
 8006cea:	1e03      	subs	r3, r0, #0
 8006cec:	d002      	beq.n	8006cf4 <LIS2MDL_Write_Reg+0x34>
  {
    return LIS2MDL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	425b      	negs	r3, r3
 8006cf2:	e000      	b.n	8006cf6 <LIS2MDL_Write_Reg+0x36>
  }

  return LIS2MDL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	b002      	add	sp, #8
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d00:	b087      	sub	sp, #28
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	0008      	movs	r0, r1
 8006d08:	607a      	str	r2, [r7, #4]
 8006d0a:	0019      	movs	r1, r3
 8006d0c:	250b      	movs	r5, #11
 8006d0e:	197b      	adds	r3, r7, r5
 8006d10:	1c02      	adds	r2, r0, #0
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	2608      	movs	r6, #8
 8006d16:	19bb      	adds	r3, r7, r6
 8006d18:	1c0a      	adds	r2, r1, #0
 8006d1a:	801a      	strh	r2, [r3, #0]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d111      	bne.n	8006d4c <ReadMagRegWrap+0x4e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	695c      	ldr	r4, [r3, #20]
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	7b1b      	ldrb	r3, [r3, #12]
 8006d30:	0018      	movs	r0, r3
 8006d32:	197b      	adds	r3, r7, r5
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2280      	movs	r2, #128	@ 0x80
 8006d38:	4252      	negs	r2, r2
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	0019      	movs	r1, r3
 8006d40:	19bb      	adds	r3, r7, r6
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	47a0      	blx	r4
 8006d48:	0003      	movs	r3, r0
 8006d4a:	e011      	b.n	8006d70 <ReadMagRegWrap+0x72>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	695c      	ldr	r4, [r3, #20]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	7b1b      	ldrb	r3, [r3, #12]
 8006d54:	0018      	movs	r0, r3
 8006d56:	230b      	movs	r3, #11
 8006d58:	18fb      	adds	r3, r7, r3
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2240      	movs	r2, #64	@ 0x40
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	0019      	movs	r1, r3
 8006d64:	2308      	movs	r3, #8
 8006d66:	18fb      	adds	r3, r7, r3
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	47a0      	blx	r4
 8006d6e:	0003      	movs	r3, r0
  }
}
 8006d70:	0018      	movs	r0, r3
 8006d72:	46bd      	mov	sp, r7
 8006d74:	b007      	add	sp, #28
 8006d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d78 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	0008      	movs	r0, r1
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	0019      	movs	r1, r3
 8006d86:	250b      	movs	r5, #11
 8006d88:	197b      	adds	r3, r7, r5
 8006d8a:	1c02      	adds	r2, r0, #0
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	2608      	movs	r6, #8
 8006d90:	19bb      	adds	r3, r7, r6
 8006d92:	1c0a      	adds	r2, r1, #0
 8006d94:	801a      	strh	r2, [r3, #0]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d111      	bne.n	8006dc6 <WriteMagRegWrap+0x4e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	691c      	ldr	r4, [r3, #16]
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	7b1b      	ldrb	r3, [r3, #12]
 8006daa:	0018      	movs	r0, r3
 8006dac:	197b      	adds	r3, r7, r5
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2280      	movs	r2, #128	@ 0x80
 8006db2:	4252      	negs	r2, r2
 8006db4:	4313      	orrs	r3, r2
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	0019      	movs	r1, r3
 8006dba:	19bb      	adds	r3, r7, r6
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	47a0      	blx	r4
 8006dc2:	0003      	movs	r3, r0
 8006dc4:	e011      	b.n	8006dea <WriteMagRegWrap+0x72>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	691c      	ldr	r4, [r3, #16]
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	7b1b      	ldrb	r3, [r3, #12]
 8006dce:	0018      	movs	r0, r3
 8006dd0:	230b      	movs	r3, #11
 8006dd2:	18fb      	adds	r3, r7, r3
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	2240      	movs	r2, #64	@ 0x40
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	0019      	movs	r1, r3
 8006dde:	2308      	movs	r3, #8
 8006de0:	18fb      	adds	r3, r7, r3
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	47a0      	blx	r4
 8006de8:	0003      	movs	r3, r0
  }
}
 8006dea:	0018      	movs	r0, r3
 8006dec:	46bd      	mov	sp, r7
 8006dee:	b007      	add	sp, #28
 8006df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006df2 <lis2mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8006df2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df4:	b087      	sub	sp, #28
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	0008      	movs	r0, r1
 8006dfc:	607a      	str	r2, [r7, #4]
 8006dfe:	0019      	movs	r1, r3
 8006e00:	260b      	movs	r6, #11
 8006e02:	19bb      	adds	r3, r7, r6
 8006e04:	1c02      	adds	r2, r0, #0
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	2508      	movs	r5, #8
 8006e0a:	197b      	adds	r3, r7, r5
 8006e0c:	1c0a      	adds	r2, r1, #0
 8006e0e:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685c      	ldr	r4, [r3, #4]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6898      	ldr	r0, [r3, #8]
 8006e18:	197b      	adds	r3, r7, r5
 8006e1a:	881d      	ldrh	r5, [r3, #0]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	19bb      	adds	r3, r7, r6
 8006e20:	7819      	ldrb	r1, [r3, #0]
 8006e22:	002b      	movs	r3, r5
 8006e24:	47a0      	blx	r4
 8006e26:	0003      	movs	r3, r0
 8006e28:	617b      	str	r3, [r7, #20]
  return ret;
 8006e2a:	697b      	ldr	r3, [r7, #20]
}
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	b007      	add	sp, #28
 8006e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e34 <lis2mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8006e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	0008      	movs	r0, r1
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	0019      	movs	r1, r3
 8006e42:	260b      	movs	r6, #11
 8006e44:	19bb      	adds	r3, r7, r6
 8006e46:	1c02      	adds	r2, r0, #0
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	2508      	movs	r5, #8
 8006e4c:	197b      	adds	r3, r7, r5
 8006e4e:	1c0a      	adds	r2, r1, #0
 8006e50:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681c      	ldr	r4, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6898      	ldr	r0, [r3, #8]
 8006e5a:	197b      	adds	r3, r7, r5
 8006e5c:	881d      	ldrh	r5, [r3, #0]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	19bb      	adds	r3, r7, r6
 8006e62:	7819      	ldrb	r1, [r3, #0]
 8006e64:	002b      	movs	r3, r5
 8006e66:	47a0      	blx	r4
 8006e68:	0003      	movs	r3, r0
 8006e6a:	617b      	str	r3, [r7, #20]
  return ret;
 8006e6c:	697b      	ldr	r3, [r7, #20]
}
 8006e6e:	0018      	movs	r0, r3
 8006e70:	46bd      	mov	sp, r7
 8006e72:	b007      	add	sp, #28
 8006e74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e76 <lis2mdl_operating_mode_set>:
  * @param  val    change the values of md in reg CFG_REG_A
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx, lis2mdl_md_t val)
{
 8006e76:	b590      	push	{r4, r7, lr}
 8006e78:	b085      	sub	sp, #20
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	000a      	movs	r2, r1
 8006e80:	1cfb      	adds	r3, r7, #3
 8006e82:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8006e84:	2408      	movs	r4, #8
 8006e86:	193a      	adds	r2, r7, r4
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	2160      	movs	r1, #96	@ 0x60
 8006e8e:	f7ff ffb0 	bl	8006df2 <lis2mdl_read_reg>
 8006e92:	0003      	movs	r3, r0
 8006e94:	60fb      	str	r3, [r7, #12]

  if(ret == 0){
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d117      	bne.n	8006ecc <lis2mdl_operating_mode_set+0x56>
    reg.md = (uint8_t)val;
 8006e9c:	1cfb      	adds	r3, r7, #3
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2203      	movs	r2, #3
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	193b      	adds	r3, r7, r4
 8006ea8:	2103      	movs	r1, #3
 8006eaa:	400a      	ands	r2, r1
 8006eac:	0010      	movs	r0, r2
 8006eae:	781a      	ldrb	r2, [r3, #0]
 8006eb0:	2103      	movs	r1, #3
 8006eb2:	438a      	bics	r2, r1
 8006eb4:	1c11      	adds	r1, r2, #0
 8006eb6:	1c02      	adds	r2, r0, #0
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8006ebc:	193a      	adds	r2, r7, r4
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	2160      	movs	r1, #96	@ 0x60
 8006ec4:	f7ff ffb6 	bl	8006e34 <lis2mdl_write_reg>
 8006ec8:	0003      	movs	r3, r0
 8006eca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
}
 8006ece:	0018      	movs	r0, r3
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	b005      	add	sp, #20
 8006ed4:	bd90      	pop	{r4, r7, pc}

08006ed6 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8006ed6:	b590      	push	{r4, r7, lr}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	000a      	movs	r2, r1
 8006ee0:	1cfb      	adds	r3, r7, #3
 8006ee2:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8006ee4:	2408      	movs	r4, #8
 8006ee6:	193a      	adds	r2, r7, r4
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	2301      	movs	r3, #1
 8006eec:	2160      	movs	r1, #96	@ 0x60
 8006eee:	f7ff ff80 	bl	8006df2 <lis2mdl_read_reg>
 8006ef2:	0003      	movs	r3, r0
 8006ef4:	60fb      	str	r3, [r7, #12]

  if(ret == 0){
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d117      	bne.n	8006f2c <lis2mdl_data_rate_set+0x56>
    reg.odr = (uint8_t)val;
 8006efc:	1cfb      	adds	r3, r7, #3
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2203      	movs	r2, #3
 8006f02:	4013      	ands	r3, r2
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	193b      	adds	r3, r7, r4
 8006f08:	2103      	movs	r1, #3
 8006f0a:	400a      	ands	r2, r1
 8006f0c:	0090      	lsls	r0, r2, #2
 8006f0e:	781a      	ldrb	r2, [r3, #0]
 8006f10:	210c      	movs	r1, #12
 8006f12:	438a      	bics	r2, r1
 8006f14:	1c11      	adds	r1, r2, #0
 8006f16:	1c02      	adds	r2, r0, #0
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8006f1c:	193a      	adds	r2, r7, r4
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	2301      	movs	r3, #1
 8006f22:	2160      	movs	r1, #96	@ 0x60
 8006f24:	f7ff ff86 	bl	8006e34 <lis2mdl_write_reg>
 8006f28:	0003      	movs	r3, r0
 8006f2a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
}
 8006f2e:	0018      	movs	r0, r3
 8006f30:	46bd      	mov	sp, r7
 8006f32:	b005      	add	sp, #20
 8006f34:	bd90      	pop	{r4, r7, pc}

08006f36 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8006f36:	b590      	push	{r4, r7, lr}
 8006f38:	b085      	sub	sp, #20
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
 8006f40:	2408      	movs	r4, #8
 8006f42:	193a      	adds	r2, r7, r4
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	2301      	movs	r3, #1
 8006f48:	2160      	movs	r1, #96	@ 0x60
 8006f4a:	f7ff ff52 	bl	8006df2 <lis2mdl_read_reg>
 8006f4e:	0003      	movs	r3, r0
 8006f50:	60fb      	str	r3, [r7, #12]
  switch (reg.odr){
 8006f52:	193b      	adds	r3, r7, r4
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	071b      	lsls	r3, r3, #28
 8006f58:	0f9b      	lsrs	r3, r3, #30
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d014      	beq.n	8006f8a <lis2mdl_data_rate_get+0x54>
 8006f60:	dc17      	bgt.n	8006f92 <lis2mdl_data_rate_get+0x5c>
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d00d      	beq.n	8006f82 <lis2mdl_data_rate_get+0x4c>
 8006f66:	dc14      	bgt.n	8006f92 <lis2mdl_data_rate_get+0x5c>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <lis2mdl_data_rate_get+0x3c>
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d004      	beq.n	8006f7a <lis2mdl_data_rate_get+0x44>
 8006f70:	e00f      	b.n	8006f92 <lis2mdl_data_rate_get+0x5c>
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2200      	movs	r2, #0
 8006f76:	701a      	strb	r2, [r3, #0]
      break;
 8006f78:	e00f      	b.n	8006f9a <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	701a      	strb	r2, [r3, #0]
      break;
 8006f80:	e00b      	b.n	8006f9a <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2202      	movs	r2, #2
 8006f86:	701a      	strb	r2, [r3, #0]
      break;
 8006f88:	e007      	b.n	8006f9a <lis2mdl_data_rate_get+0x64>
    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	701a      	strb	r2, [r3, #0]
      break;
 8006f90:	e003      	b.n	8006f9a <lis2mdl_data_rate_get+0x64>
    default:
      *val = LIS2MDL_ODR_10Hz;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2200      	movs	r2, #0
 8006f96:	701a      	strb	r2, [r3, #0]
      break;
 8006f98:	46c0      	nop			@ (mov r8, r8)
  }
  return ret;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
}
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	b005      	add	sp, #20
 8006fa2:	bd90      	pop	{r4, r7, pc}

08006fa4 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006fa4:	b590      	push	{r4, r7, lr}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	000a      	movs	r2, r1
 8006fae:	1cfb      	adds	r3, r7, #3
 8006fb0:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8006fb2:	2408      	movs	r4, #8
 8006fb4:	193a      	adds	r2, r7, r4
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	2301      	movs	r3, #1
 8006fba:	2162      	movs	r1, #98	@ 0x62
 8006fbc:	f7ff ff19 	bl	8006df2 <lis2mdl_read_reg>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	60fb      	str	r3, [r7, #12]

  if(ret == 0){
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d117      	bne.n	8006ffa <lis2mdl_block_data_update_set+0x56>
    reg.bdu = val;
 8006fca:	1cfb      	adds	r3, r7, #3
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	193b      	adds	r3, r7, r4
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	400a      	ands	r2, r1
 8006fda:	0110      	lsls	r0, r2, #4
 8006fdc:	781a      	ldrb	r2, [r3, #0]
 8006fde:	2110      	movs	r1, #16
 8006fe0:	438a      	bics	r2, r1
 8006fe2:	1c11      	adds	r1, r2, #0
 8006fe4:	1c02      	adds	r2, r0, #0
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8006fea:	193a      	adds	r2, r7, r4
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	2301      	movs	r3, #1
 8006ff0:	2162      	movs	r1, #98	@ 0x62
 8006ff2:	f7ff ff1f 	bl	8006e34 <lis2mdl_write_reg>
 8006ff6:	0003      	movs	r3, r0
 8006ff8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
}
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	46bd      	mov	sp, r7
 8007000:	b005      	add	sp, #20
 8007002:	bd90      	pop	{r4, r7, pc}

08007004 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	2306      	movs	r3, #6
 8007014:	2168      	movs	r1, #104	@ 0x68
 8007016:	f7ff feec 	bl	8006df2 <lis2mdl_read_reg>
 800701a:	0003      	movs	r3, r0
 800701c:	60fb      	str	r3, [r7, #12]
  return ret;
 800701e:	68fb      	ldr	r3, [r7, #12]
}
 8007020:	0018      	movs	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	b004      	add	sp, #16
 8007026:	bd80      	pop	{r7, pc}

08007028 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	2301      	movs	r3, #1
 8007038:	214f      	movs	r1, #79	@ 0x4f
 800703a:	f7ff feda 	bl	8006df2 <lis2mdl_read_reg>
 800703e:	0003      	movs	r3, r0
 8007040:	60fb      	str	r3, [r7, #12]
  return ret;
 8007042:	68fb      	ldr	r3, [r7, #12]
}
 8007044:	0018      	movs	r0, r3
 8007046:	46bd      	mov	sp, r7
 8007048:	b004      	add	sp, #16
 800704a:	bd80      	pop	{r7, pc}

0800704c <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800704c:	b590      	push	{r4, r7, lr}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	000a      	movs	r2, r1
 8007056:	1cfb      	adds	r3, r7, #3
 8007058:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 800705a:	2408      	movs	r4, #8
 800705c:	193a      	adds	r2, r7, r4
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	2301      	movs	r3, #1
 8007062:	2162      	movs	r1, #98	@ 0x62
 8007064:	f7ff fec5 	bl	8006df2 <lis2mdl_read_reg>
 8007068:	0003      	movs	r3, r0
 800706a:	60fb      	str	r3, [r7, #12]

  if(ret == 0){
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d117      	bne.n	80070a2 <lis2mdl_self_test_set+0x56>
    reg.self_test = val;
 8007072:	1cfb      	adds	r3, r7, #3
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2201      	movs	r2, #1
 8007078:	4013      	ands	r3, r2
 800707a:	b2da      	uxtb	r2, r3
 800707c:	193b      	adds	r3, r7, r4
 800707e:	2101      	movs	r1, #1
 8007080:	400a      	ands	r2, r1
 8007082:	1890      	adds	r0, r2, r2
 8007084:	781a      	ldrb	r2, [r3, #0]
 8007086:	2102      	movs	r1, #2
 8007088:	438a      	bics	r2, r1
 800708a:	1c11      	adds	r1, r2, #0
 800708c:	1c02      	adds	r2, r0, #0
 800708e:	430a      	orrs	r2, r1
 8007090:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 8007092:	193a      	adds	r2, r7, r4
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	2301      	movs	r3, #1
 8007098:	2162      	movs	r1, #98	@ 0x62
 800709a:	f7ff fecb 	bl	8006e34 <lis2mdl_write_reg>
 800709e:	0003      	movs	r3, r0
 80070a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80070a2:	68fb      	ldr	r3, [r7, #12]
}
 80070a4:	0018      	movs	r0, r3
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b005      	add	sp, #20
 80070aa:	bd90      	pop	{r4, r7, pc}

080070ac <lis2mdl_i2c_interface_set>:
  * @param  val   change the values of i2c_dis in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx, lis2mdl_i2c_dis_t val)
{
 80070ac:	b590      	push	{r4, r7, lr}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	000a      	movs	r2, r1
 80070b6:	1cfb      	adds	r3, r7, #3
 80070b8:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 80070ba:	2408      	movs	r4, #8
 80070bc:	193a      	adds	r2, r7, r4
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	2301      	movs	r3, #1
 80070c2:	2162      	movs	r1, #98	@ 0x62
 80070c4:	f7ff fe95 	bl	8006df2 <lis2mdl_read_reg>
 80070c8:	0003      	movs	r3, r0
 80070ca:	60fb      	str	r3, [r7, #12]

  if(ret == 0){
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d117      	bne.n	8007102 <lis2mdl_i2c_interface_set+0x56>
    reg.i2c_dis = (uint8_t)val;
 80070d2:	1cfb      	adds	r3, r7, #3
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2201      	movs	r2, #1
 80070d8:	4013      	ands	r3, r2
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	193b      	adds	r3, r7, r4
 80070de:	2101      	movs	r1, #1
 80070e0:	400a      	ands	r2, r1
 80070e2:	0150      	lsls	r0, r2, #5
 80070e4:	781a      	ldrb	r2, [r3, #0]
 80070e6:	2120      	movs	r1, #32
 80070e8:	438a      	bics	r2, r1
 80070ea:	1c11      	adds	r1, r2, #0
 80070ec:	1c02      	adds	r2, r0, #0
 80070ee:	430a      	orrs	r2, r1
 80070f0:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
 80070f2:	193a      	adds	r2, r7, r4
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	2301      	movs	r3, #1
 80070f8:	2162      	movs	r1, #98	@ 0x62
 80070fa:	f7ff fe9b 	bl	8006e34 <lis2mdl_write_reg>
 80070fe:	0003      	movs	r3, r0
 8007100:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007102:	68fb      	ldr	r3, [r7, #12]
}
 8007104:	0018      	movs	r0, r3
 8007106:	46bd      	mov	sp, r7
 8007108:	b005      	add	sp, #20
 800710a:	bd90      	pop	{r4, r7, pc}

0800710c <LPS22HH_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d103      	bne.n	8007128 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	425b      	negs	r3, r3
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	e04e      	b.n	80071c6 <LPS22HH_RegisterBusIO+0xba>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	7b1a      	ldrb	r2, [r3, #12]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	691a      	ldr	r2, [r3, #16]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	695a      	ldr	r2, [r3, #20]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	699a      	ldr	r2, [r3, #24]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a1b      	ldr	r2, [pc, #108]	@ (80071d0 <LPS22HH_RegisterBusIO+0xc4>)
 8007164:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a1a      	ldr	r2, [pc, #104]	@ (80071d4 <LPS22HH_RegisterBusIO+0xc8>)
 800716a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d103      	bne.n	8007182 <LPS22HH_RegisterBusIO+0x76>
    {
      ret = LPS22HH_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	425b      	negs	r3, r3
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e021      	b.n	80071c6 <LPS22HH_RegisterBusIO+0xba>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4798      	blx	r3
 8007188:	1e03      	subs	r3, r0, #0
 800718a:	d003      	beq.n	8007194 <LPS22HH_RegisterBusIO+0x88>
    {
      ret = LPS22HH_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	425b      	negs	r3, r3
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	e018      	b.n	80071c6 <LPS22HH_RegisterBusIO+0xba>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	2b02      	cmp	r3, #2
 800719a:	d114      	bne.n	80071c6 <LPS22HH_RegisterBusIO+0xba>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2228      	movs	r2, #40	@ 0x28
 80071a0:	5c9b      	ldrb	r3, [r3, r2]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10f      	bne.n	80071c6 <LPS22HH_RegisterBusIO+0xba>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80071a6:	210b      	movs	r1, #11
 80071a8:	187b      	adds	r3, r7, r1
 80071aa:	2201      	movs	r2, #1
 80071ac:	701a      	strb	r2, [r3, #0]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 80071ae:	187b      	adds	r3, r7, r1
 80071b0:	781a      	ldrb	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2110      	movs	r1, #16
 80071b6:	0018      	movs	r0, r3
 80071b8:	f000 f9d5 	bl	8007566 <LPS22HH_Write_Reg>
 80071bc:	1e03      	subs	r3, r0, #0
 80071be:	d002      	beq.n	80071c6 <LPS22HH_RegisterBusIO+0xba>
          {
            ret = LPS22HH_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	425b      	negs	r3, r3
 80071c4:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80071c6:	68fb      	ldr	r3, [r7, #12]
}
 80071c8:	0018      	movs	r0, r3
 80071ca:	46bd      	mov	sp, r7
 80071cc:	b004      	add	sp, #16
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	080078df 	.word	0x080078df
 80071d4:	08007923 	.word	0x08007923

080071d8 <LPS22HH_Init>:
 * @brief  Initialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2228      	movs	r2, #40	@ 0x28
 80071e4:	5c9b      	ldrb	r3, [r3, r2]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d108      	bne.n	80071fc <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	0018      	movs	r0, r3
 80071ee:	f000 fadf 	bl	80077b0 <LPS22HH_Initialize>
 80071f2:	1e03      	subs	r3, r0, #0
 80071f4:	d002      	beq.n	80071fc <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	425b      	negs	r3, r3
 80071fa:	e004      	b.n	8007206 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2228      	movs	r2, #40	@ 0x28
 8007200:	2101      	movs	r1, #1
 8007202:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	0018      	movs	r0, r3
 8007208:	46bd      	mov	sp, r7
 800720a:	b002      	add	sp, #8
 800720c:	bd80      	pop	{r7, pc}

0800720e <LPS22HH_DeInit>:
 * @brief  Deinitialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2228      	movs	r2, #40	@ 0x28
 800721a:	5c9b      	ldrb	r3, [r3, r2]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d111      	bne.n	8007244 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	0018      	movs	r0, r3
 8007224:	f000 f873 	bl	800730e <LPS22HH_PRESS_Disable>
 8007228:	1e03      	subs	r3, r0, #0
 800722a:	d002      	beq.n	8007232 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	425b      	negs	r3, r3
 8007230:	e00d      	b.n	800724e <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	0018      	movs	r0, r3
 8007236:	f000 f910 	bl	800745a <LPS22HH_TEMP_Disable>
 800723a:	1e03      	subs	r3, r0, #0
 800723c:	d002      	beq.n	8007244 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	425b      	negs	r3, r3
 8007242:	e004      	b.n	800724e <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2228      	movs	r2, #40	@ 0x28
 8007248:	2100      	movs	r1, #0
 800724a:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	0018      	movs	r0, r3
 8007250:	46bd      	mov	sp, r7
 8007252:	b002      	add	sp, #8
 8007254:	bd80      	pop	{r7, pc}

08007256 <LPS22HH_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	331c      	adds	r3, #28
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	0011      	movs	r1, r2
 8007268:	0018      	movs	r0, r3
 800726a:	f000 fd31 	bl	8007cd0 <lps22hh_device_id_get>
 800726e:	1e03      	subs	r3, r0, #0
 8007270:	d002      	beq.n	8007278 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	425b      	negs	r3, r3
 8007276:	e000      	b.n	800727a <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	0018      	movs	r0, r3
 800727c:	46bd      	mov	sp, r7
 800727e:	b002      	add	sp, #8
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <LPS22HH_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LPS22HH sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2200      	movs	r2, #0
 8007292:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2201      	movs	r2, #1
 8007298:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2201      	movs	r2, #1
 800729e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2200      	movs	r2, #0
 80072a4:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2200      	movs	r2, #0
 80072aa:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	4a05      	ldr	r2, [pc, #20]	@ (80072c4 <LPS22HH_GetCapabilities+0x40>)
 80072b0:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	4a03      	ldr	r2, [pc, #12]	@ (80072c4 <LPS22HH_GetCapabilities+0x40>)
 80072b6:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	0018      	movs	r0, r3
 80072bc:	46bd      	mov	sp, r7
 80072be:	b002      	add	sp, #8
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	46c0      	nop			@ (mov r8, r8)
 80072c4:	43480000 	.word	0x43480000

080072c8 <LPS22HH_PRESS_Enable>:
 * @brief  Enable the LPS22HH pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2229      	movs	r2, #41	@ 0x29
 80072d4:	5c9b      	ldrb	r3, [r3, r2]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	e013      	b.n	8007306 <LPS22HH_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	331c      	adds	r3, #28
 80072e2:	001a      	movs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	212b      	movs	r1, #43	@ 0x2b
 80072e8:	5c5b      	ldrb	r3, [r3, r1]
 80072ea:	0019      	movs	r1, r3
 80072ec:	0010      	movs	r0, r2
 80072ee:	f000 fbd7 	bl	8007aa0 <lps22hh_data_rate_set>
 80072f2:	1e03      	subs	r3, r0, #0
 80072f4:	d002      	beq.n	80072fc <LPS22HH_PRESS_Enable+0x34>
  {
    return LPS22HH_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	425b      	negs	r3, r3
 80072fa:	e004      	b.n	8007306 <LPS22HH_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2229      	movs	r2, #41	@ 0x29
 8007300:	2101      	movs	r1, #1
 8007302:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	0018      	movs	r0, r3
 8007308:	46bd      	mov	sp, r7
 800730a:	b002      	add	sp, #8
 800730c:	bd80      	pop	{r7, pc}

0800730e <LPS22HH_PRESS_Disable>:
 * @brief  Disable the LPS22HH pressure sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2229      	movs	r2, #41	@ 0x29
 800731a:	5c9b      	ldrb	r3, [r3, r2]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	e022      	b.n	800736a <LPS22HH_PRESS_Disable+0x5c>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	222a      	movs	r2, #42	@ 0x2a
 8007328:	5c9b      	ldrb	r3, [r3, r2]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d118      	bne.n	8007360 <LPS22HH_PRESS_Disable+0x52>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	331c      	adds	r3, #28
 8007332:	001a      	movs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	332b      	adds	r3, #43	@ 0x2b
 8007338:	0019      	movs	r1, r3
 800733a:	0010      	movs	r0, r2
 800733c:	f000 fc1e 	bl	8007b7c <lps22hh_data_rate_get>
 8007340:	1e03      	subs	r3, r0, #0
 8007342:	d002      	beq.n	800734a <LPS22HH_PRESS_Disable+0x3c>
    {
      return LPS22HH_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	425b      	negs	r3, r3
 8007348:	e00f      	b.n	800736a <LPS22HH_PRESS_Disable+0x5c>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	331c      	adds	r3, #28
 800734e:	2100      	movs	r1, #0
 8007350:	0018      	movs	r0, r3
 8007352:	f000 fba5 	bl	8007aa0 <lps22hh_data_rate_set>
 8007356:	1e03      	subs	r3, r0, #0
 8007358:	d002      	beq.n	8007360 <LPS22HH_PRESS_Disable+0x52>
    {
      return LPS22HH_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	425b      	negs	r3, r3
 800735e:	e004      	b.n	800736a <LPS22HH_PRESS_Disable+0x5c>
    }
  }

  pObj->press_is_enabled = 0;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2229      	movs	r2, #41	@ 0x29
 8007364:	2100      	movs	r1, #0
 8007366:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	0018      	movs	r0, r3
 800736c:	46bd      	mov	sp, r7
 800736e:	b002      	add	sp, #8
 8007370:	bd80      	pop	{r7, pc}

08007372 <LPS22HH_PRESS_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b082      	sub	sp, #8
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	0011      	movs	r1, r2
 8007382:	0018      	movs	r0, r3
 8007384:	f000 f90e 	bl	80075a4 <LPS22HH_GetOutputDataRate>
 8007388:	0003      	movs	r3, r0
}
 800738a:	0018      	movs	r0, r3
 800738c:	46bd      	mov	sp, r7
 800738e:	b002      	add	sp, #8
 8007390:	bd80      	pop	{r7, pc}

08007392 <LPS22HH_PRESS_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b082      	sub	sp, #8
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2229      	movs	r2, #41	@ 0x29
 80073a0:	5c9b      	ldrb	r3, [r3, r2]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d107      	bne.n	80073b6 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	1c11      	adds	r1, r2, #0
 80073ac:	0018      	movs	r0, r3
 80073ae:	f000 f94f 	bl	8007650 <LPS22HH_SetOutputDataRate_When_Enabled>
 80073b2:	0003      	movs	r3, r0
 80073b4:	e006      	b.n	80073c4 <LPS22HH_PRESS_SetOutputDataRate+0x32>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	1c11      	adds	r1, r2, #0
 80073bc:	0018      	movs	r0, r3
 80073be:	f000 f9ad 	bl	800771c <LPS22HH_SetOutputDataRate_When_Disabled>
 80073c2:	0003      	movs	r3, r0
  }
}
 80073c4:	0018      	movs	r0, r3
 80073c6:	46bd      	mov	sp, r7
 80073c8:	b002      	add	sp, #8
 80073ca:	bd80      	pop	{r7, pc}

080073cc <LPS22HH_PRESS_GetPressure>:
 * @param  pObj the device pObj
 * @param  Value pointer where the pressure value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 80073cc:	b590      	push	{r4, r7, lr}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80073d6:	240c      	movs	r4, #12
 80073d8:	193b      	adds	r3, r7, r4
 80073da:	2204      	movs	r2, #4
 80073dc:	2100      	movs	r1, #0
 80073de:	0018      	movs	r0, r3
 80073e0:	f00a f99c 	bl	801171c <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HH_OK)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	331c      	adds	r3, #28
 80073e8:	193a      	adds	r2, r7, r4
 80073ea:	0011      	movs	r1, r2
 80073ec:	0018      	movs	r0, r3
 80073ee:	f000 fc4b 	bl	8007c88 <lps22hh_pressure_raw_get>
 80073f2:	1e03      	subs	r3, r0, #0
 80073f4:	d002      	beq.n	80073fc <LPS22HH_PRESS_GetPressure+0x30>
  {
    return LPS22HH_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	425b      	negs	r3, r3
 80073fa:	e007      	b.n	800740c <LPS22HH_PRESS_GetPressure+0x40>
  }

  *Value = lps22hh_from_lsb_to_hpa(data_raw_pressure.i32bit);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	0018      	movs	r0, r3
 8007400:	f000 faf3 	bl	80079ea <lps22hh_from_lsb_to_hpa>
 8007404:	1c02      	adds	r2, r0, #0
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	0018      	movs	r0, r3
 800740e:	46bd      	mov	sp, r7
 8007410:	b005      	add	sp, #20
 8007412:	bd90      	pop	{r4, r7, pc}

08007414 <LPS22HH_TEMP_Enable>:
 * @brief  Enable the LPS22HH temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	222a      	movs	r2, #42	@ 0x2a
 8007420:	5c9b      	ldrb	r3, [r3, r2]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	e013      	b.n	8007452 <LPS22HH_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	331c      	adds	r3, #28
 800742e:	001a      	movs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	212b      	movs	r1, #43	@ 0x2b
 8007434:	5c5b      	ldrb	r3, [r3, r1]
 8007436:	0019      	movs	r1, r3
 8007438:	0010      	movs	r0, r2
 800743a:	f000 fb31 	bl	8007aa0 <lps22hh_data_rate_set>
 800743e:	1e03      	subs	r3, r0, #0
 8007440:	d002      	beq.n	8007448 <LPS22HH_TEMP_Enable+0x34>
  {
    return LPS22HH_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	425b      	negs	r3, r3
 8007446:	e004      	b.n	8007452 <LPS22HH_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	222a      	movs	r2, #42	@ 0x2a
 800744c:	2101      	movs	r1, #1
 800744e:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	0018      	movs	r0, r3
 8007454:	46bd      	mov	sp, r7
 8007456:	b002      	add	sp, #8
 8007458:	bd80      	pop	{r7, pc}

0800745a <LPS22HH_TEMP_Disable>:
 * @brief  Disable the LPS22HH temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	222a      	movs	r2, #42	@ 0x2a
 8007466:	5c9b      	ldrb	r3, [r3, r2]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	e022      	b.n	80074b6 <LPS22HH_TEMP_Disable+0x5c>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2229      	movs	r2, #41	@ 0x29
 8007474:	5c9b      	ldrb	r3, [r3, r2]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d118      	bne.n	80074ac <LPS22HH_TEMP_Disable+0x52>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	331c      	adds	r3, #28
 800747e:	001a      	movs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	332b      	adds	r3, #43	@ 0x2b
 8007484:	0019      	movs	r1, r3
 8007486:	0010      	movs	r0, r2
 8007488:	f000 fb78 	bl	8007b7c <lps22hh_data_rate_get>
 800748c:	1e03      	subs	r3, r0, #0
 800748e:	d002      	beq.n	8007496 <LPS22HH_TEMP_Disable+0x3c>
    {
      return LPS22HH_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	425b      	negs	r3, r3
 8007494:	e00f      	b.n	80074b6 <LPS22HH_TEMP_Disable+0x5c>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	331c      	adds	r3, #28
 800749a:	2100      	movs	r1, #0
 800749c:	0018      	movs	r0, r3
 800749e:	f000 faff 	bl	8007aa0 <lps22hh_data_rate_set>
 80074a2:	1e03      	subs	r3, r0, #0
 80074a4:	d002      	beq.n	80074ac <LPS22HH_TEMP_Disable+0x52>
    {
      return LPS22HH_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	425b      	negs	r3, r3
 80074aa:	e004      	b.n	80074b6 <LPS22HH_TEMP_Disable+0x5c>
    }
  }

  pObj->temp_is_enabled = 0;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	222a      	movs	r2, #42	@ 0x2a
 80074b0:	2100      	movs	r1, #0
 80074b2:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	0018      	movs	r0, r3
 80074b8:	46bd      	mov	sp, r7
 80074ba:	b002      	add	sp, #8
 80074bc:	bd80      	pop	{r7, pc}

080074be <LPS22HH_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	0011      	movs	r1, r2
 80074ce:	0018      	movs	r0, r3
 80074d0:	f000 f868 	bl	80075a4 <LPS22HH_GetOutputDataRate>
 80074d4:	0003      	movs	r3, r0
}
 80074d6:	0018      	movs	r0, r3
 80074d8:	46bd      	mov	sp, r7
 80074da:	b002      	add	sp, #8
 80074dc:	bd80      	pop	{r7, pc}

080074de <LPS22HH_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	222a      	movs	r2, #42	@ 0x2a
 80074ec:	5c9b      	ldrb	r3, [r3, r2]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d107      	bne.n	8007502 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	1c11      	adds	r1, r2, #0
 80074f8:	0018      	movs	r0, r3
 80074fa:	f000 f8a9 	bl	8007650 <LPS22HH_SetOutputDataRate_When_Enabled>
 80074fe:	0003      	movs	r3, r0
 8007500:	e006      	b.n	8007510 <LPS22HH_TEMP_SetOutputDataRate+0x32>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	1c11      	adds	r1, r2, #0
 8007508:	0018      	movs	r0, r3
 800750a:	f000 f907 	bl	800771c <LPS22HH_SetOutputDataRate_When_Disabled>
 800750e:	0003      	movs	r3, r0
  }
}
 8007510:	0018      	movs	r0, r3
 8007512:	46bd      	mov	sp, r7
 8007514:	b002      	add	sp, #8
 8007516:	bd80      	pop	{r7, pc}

08007518 <LPS22HH_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8007518:	b590      	push	{r4, r7, lr}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8007522:	240c      	movs	r4, #12
 8007524:	193b      	adds	r3, r7, r4
 8007526:	2202      	movs	r2, #2
 8007528:	2100      	movs	r1, #0
 800752a:	0018      	movs	r0, r3
 800752c:	f00a f8f6 	bl	801171c <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HH_OK)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	331c      	adds	r3, #28
 8007534:	193a      	adds	r2, r7, r4
 8007536:	0011      	movs	r1, r2
 8007538:	0018      	movs	r0, r3
 800753a:	f000 fbb7 	bl	8007cac <lps22hh_temperature_raw_get>
 800753e:	1e03      	subs	r3, r0, #0
 8007540:	d002      	beq.n	8007548 <LPS22HH_TEMP_GetTemperature+0x30>
  {
    return LPS22HH_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	425b      	negs	r3, r3
 8007546:	e00a      	b.n	800755e <LPS22HH_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8007548:	230c      	movs	r3, #12
 800754a:	18fb      	adds	r3, r7, r3
 800754c:	2200      	movs	r2, #0
 800754e:	5e9b      	ldrsh	r3, [r3, r2]
 8007550:	0018      	movs	r0, r3
 8007552:	f000 fa5d 	bl	8007a10 <lps22hh_from_lsb_to_celsius>
 8007556:	1c02      	adds	r2, r0, #0
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	0018      	movs	r0, r3
 8007560:	46bd      	mov	sp, r7
 8007562:	b005      	add	sp, #20
 8007564:	bd90      	pop	{r4, r7, pc}

08007566 <LPS22HH_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b082      	sub	sp, #8
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	0008      	movs	r0, r1
 8007570:	0011      	movs	r1, r2
 8007572:	1cfb      	adds	r3, r7, #3
 8007574:	1c02      	adds	r2, r0, #0
 8007576:	701a      	strb	r2, [r3, #0]
 8007578:	1cbb      	adds	r3, r7, #2
 800757a:	1c0a      	adds	r2, r1, #0
 800757c:	701a      	strb	r2, [r3, #0]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	331c      	adds	r3, #28
 8007582:	0018      	movs	r0, r3
 8007584:	1cba      	adds	r2, r7, #2
 8007586:	1cfb      	adds	r3, r7, #3
 8007588:	7819      	ldrb	r1, [r3, #0]
 800758a:	2301      	movs	r3, #1
 800758c:	f000 fa0c 	bl	80079a8 <lps22hh_write_reg>
 8007590:	1e03      	subs	r3, r0, #0
 8007592:	d002      	beq.n	800759a <LPS22HH_Write_Reg+0x34>
  {
    return LPS22HH_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	425b      	negs	r3, r3
 8007598:	e000      	b.n	800759c <LPS22HH_Write_Reg+0x36>
  }

  return LPS22HH_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	0018      	movs	r0, r3
 800759e:	46bd      	mov	sp, r7
 80075a0:	b002      	add	sp, #8
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <LPS22HH_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	331c      	adds	r3, #28
 80075b6:	220b      	movs	r2, #11
 80075b8:	18ba      	adds	r2, r7, r2
 80075ba:	0011      	movs	r1, r2
 80075bc:	0018      	movs	r0, r3
 80075be:	f000 fadd 	bl	8007b7c <lps22hh_data_rate_get>
 80075c2:	1e03      	subs	r3, r0, #0
 80075c4:	d002      	beq.n	80075cc <LPS22HH_GetOutputDataRate+0x28>
  {
    return LPS22HH_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	425b      	negs	r3, r3
 80075ca:	e02f      	b.n	800762c <LPS22HH_GetOutputDataRate+0x88>
  }

  switch (odr_low_level)
 80075cc:	230b      	movs	r3, #11
 80075ce:	18fb      	adds	r3, r7, r3
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b07      	cmp	r3, #7
 80075d4:	d825      	bhi.n	8007622 <LPS22HH_GetOutputDataRate+0x7e>
 80075d6:	009a      	lsls	r2, r3, #2
 80075d8:	4b16      	ldr	r3, [pc, #88]	@ (8007634 <LPS22HH_GetOutputDataRate+0x90>)
 80075da:	18d3      	adds	r3, r2, r3
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	469f      	mov	pc, r3
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
      break;
 80075e6:	e020      	b.n	800762a <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	22fe      	movs	r2, #254	@ 0xfe
 80075ec:	0592      	lsls	r2, r2, #22
 80075ee:	601a      	str	r2, [r3, #0]
      break;
 80075f0:	e01b      	b.n	800762a <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	4a10      	ldr	r2, [pc, #64]	@ (8007638 <LPS22HH_GetOutputDataRate+0x94>)
 80075f6:	601a      	str	r2, [r3, #0]
      break;
 80075f8:	e017      	b.n	800762a <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	4a0f      	ldr	r2, [pc, #60]	@ (800763c <LPS22HH_GetOutputDataRate+0x98>)
 80075fe:	601a      	str	r2, [r3, #0]
      break;
 8007600:	e013      	b.n	800762a <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	4a0e      	ldr	r2, [pc, #56]	@ (8007640 <LPS22HH_GetOutputDataRate+0x9c>)
 8007606:	601a      	str	r2, [r3, #0]
      break;
 8007608:	e00f      	b.n	800762a <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	4a0d      	ldr	r2, [pc, #52]	@ (8007644 <LPS22HH_GetOutputDataRate+0xa0>)
 800760e:	601a      	str	r2, [r3, #0]
      break;
 8007610:	e00b      	b.n	800762a <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	4a0c      	ldr	r2, [pc, #48]	@ (8007648 <LPS22HH_GetOutputDataRate+0xa4>)
 8007616:	601a      	str	r2, [r3, #0]
      break;
 8007618:	e007      	b.n	800762a <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	4a0b      	ldr	r2, [pc, #44]	@ (800764c <LPS22HH_GetOutputDataRate+0xa8>)
 800761e:	601a      	str	r2, [r3, #0]
      break;
 8007620:	e003      	b.n	800762a <LPS22HH_GetOutputDataRate+0x86>

    default:
      ret = LPS22HH_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	425b      	negs	r3, r3
 8007626:	60fb      	str	r3, [r7, #12]
      break;
 8007628:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800762a:	68fb      	ldr	r3, [r7, #12]
}
 800762c:	0018      	movs	r0, r3
 800762e:	46bd      	mov	sp, r7
 8007630:	b004      	add	sp, #16
 8007632:	bd80      	pop	{r7, pc}
 8007634:	08014984 	.word	0x08014984
 8007638:	41200000 	.word	0x41200000
 800763c:	41c80000 	.word	0x41c80000
 8007640:	42480000 	.word	0x42480000
 8007644:	42960000 	.word	0x42960000
 8007648:	42c80000 	.word	0x42c80000
 800764c:	43480000 	.word	0x43480000

08007650 <LPS22HH_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
          : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800765a:	21fe      	movs	r1, #254	@ 0xfe
 800765c:	0589      	lsls	r1, r1, #22
 800765e:	6838      	ldr	r0, [r7, #0]
 8007660:	f7f8 fe4c 	bl	80002fc <__aeabi_fcmple>
 8007664:	1e03      	subs	r3, r0, #0
 8007666:	d001      	beq.n	800766c <LPS22HH_SetOutputDataRate_When_Enabled+0x1c>
 8007668:	2301      	movs	r3, #1
 800766a:	e028      	b.n	80076be <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 800766c:	4926      	ldr	r1, [pc, #152]	@ (8007708 <LPS22HH_SetOutputDataRate_When_Enabled+0xb8>)
 800766e:	6838      	ldr	r0, [r7, #0]
 8007670:	f7f8 fe44 	bl	80002fc <__aeabi_fcmple>
 8007674:	1e03      	subs	r3, r0, #0
 8007676:	d001      	beq.n	800767c <LPS22HH_SetOutputDataRate_When_Enabled+0x2c>
 8007678:	2302      	movs	r3, #2
 800767a:	e020      	b.n	80076be <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 800767c:	4923      	ldr	r1, [pc, #140]	@ (800770c <LPS22HH_SetOutputDataRate_When_Enabled+0xbc>)
 800767e:	6838      	ldr	r0, [r7, #0]
 8007680:	f7f8 fe3c 	bl	80002fc <__aeabi_fcmple>
 8007684:	1e03      	subs	r3, r0, #0
 8007686:	d001      	beq.n	800768c <LPS22HH_SetOutputDataRate_When_Enabled+0x3c>
 8007688:	2303      	movs	r3, #3
 800768a:	e018      	b.n	80076be <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 800768c:	4920      	ldr	r1, [pc, #128]	@ (8007710 <LPS22HH_SetOutputDataRate_When_Enabled+0xc0>)
 800768e:	6838      	ldr	r0, [r7, #0]
 8007690:	f7f8 fe34 	bl	80002fc <__aeabi_fcmple>
 8007694:	1e03      	subs	r3, r0, #0
 8007696:	d001      	beq.n	800769c <LPS22HH_SetOutputDataRate_When_Enabled+0x4c>
 8007698:	2304      	movs	r3, #4
 800769a:	e010      	b.n	80076be <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 800769c:	491d      	ldr	r1, [pc, #116]	@ (8007714 <LPS22HH_SetOutputDataRate_When_Enabled+0xc4>)
 800769e:	6838      	ldr	r0, [r7, #0]
 80076a0:	f7f8 fe2c 	bl	80002fc <__aeabi_fcmple>
 80076a4:	1e03      	subs	r3, r0, #0
 80076a6:	d001      	beq.n	80076ac <LPS22HH_SetOutputDataRate_When_Enabled+0x5c>
 80076a8:	2305      	movs	r3, #5
 80076aa:	e008      	b.n	80076be <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 80076ac:	491a      	ldr	r1, [pc, #104]	@ (8007718 <LPS22HH_SetOutputDataRate_When_Enabled+0xc8>)
 80076ae:	6838      	ldr	r0, [r7, #0]
 80076b0:	f7f8 fe24 	bl	80002fc <__aeabi_fcmple>
 80076b4:	1e03      	subs	r3, r0, #0
 80076b6:	d001      	beq.n	80076bc <LPS22HH_SetOutputDataRate_When_Enabled+0x6c>
 80076b8:	2306      	movs	r3, #6
 80076ba:	e000      	b.n	80076be <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 80076bc:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80076be:	210f      	movs	r1, #15
 80076c0:	187a      	adds	r2, r7, r1
 80076c2:	7013      	strb	r3, [r2, #0]
          : (Odr <=  50.0f) ? LPS22HH_50_Hz
          : (Odr <=  75.0f) ? LPS22HH_75_Hz
          : (Odr <= 100.0f) ? LPS22HH_100_Hz
          :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	331c      	adds	r3, #28
 80076c8:	001a      	movs	r2, r3
 80076ca:	187b      	adds	r3, r7, r1
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	0019      	movs	r1, r3
 80076d0:	0010      	movs	r0, r2
 80076d2:	f000 f9e5 	bl	8007aa0 <lps22hh_data_rate_set>
 80076d6:	1e03      	subs	r3, r0, #0
 80076d8:	d002      	beq.n	80076e0 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
  {
    return LPS22HH_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	425b      	negs	r3, r3
 80076de:	e00e      	b.n	80076fe <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	331c      	adds	r3, #28
 80076e4:	001a      	movs	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	332b      	adds	r3, #43	@ 0x2b
 80076ea:	0019      	movs	r1, r3
 80076ec:	0010      	movs	r0, r2
 80076ee:	f000 fa45 	bl	8007b7c <lps22hh_data_rate_get>
 80076f2:	1e03      	subs	r3, r0, #0
 80076f4:	d002      	beq.n	80076fc <LPS22HH_SetOutputDataRate_When_Enabled+0xac>
  {
    return LPS22HH_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	425b      	negs	r3, r3
 80076fa:	e000      	b.n	80076fe <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  }

  return LPS22HH_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	0018      	movs	r0, r3
 8007700:	46bd      	mov	sp, r7
 8007702:	b004      	add	sp, #16
 8007704:	bd80      	pop	{r7, pc}
 8007706:	46c0      	nop			@ (mov r8, r8)
 8007708:	41200000 	.word	0x41200000
 800770c:	41c80000 	.word	0x41c80000
 8007710:	42480000 	.word	0x42480000
 8007714:	42960000 	.word	0x42960000
 8007718:	42c80000 	.word	0x42c80000

0800771c <LPS22HH_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                 : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8007726:	21fe      	movs	r1, #254	@ 0xfe
 8007728:	0589      	lsls	r1, r1, #22
 800772a:	6838      	ldr	r0, [r7, #0]
 800772c:	f7f8 fde6 	bl	80002fc <__aeabi_fcmple>
 8007730:	1e03      	subs	r3, r0, #0
 8007732:	d001      	beq.n	8007738 <LPS22HH_SetOutputDataRate_When_Disabled+0x1c>
 8007734:	2301      	movs	r3, #1
 8007736:	e028      	b.n	800778a <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 8007738:	4918      	ldr	r1, [pc, #96]	@ (800779c <LPS22HH_SetOutputDataRate_When_Disabled+0x80>)
 800773a:	6838      	ldr	r0, [r7, #0]
 800773c:	f7f8 fdde 	bl	80002fc <__aeabi_fcmple>
 8007740:	1e03      	subs	r3, r0, #0
 8007742:	d001      	beq.n	8007748 <LPS22HH_SetOutputDataRate_When_Disabled+0x2c>
 8007744:	2302      	movs	r3, #2
 8007746:	e020      	b.n	800778a <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 8007748:	4915      	ldr	r1, [pc, #84]	@ (80077a0 <LPS22HH_SetOutputDataRate_When_Disabled+0x84>)
 800774a:	6838      	ldr	r0, [r7, #0]
 800774c:	f7f8 fdd6 	bl	80002fc <__aeabi_fcmple>
 8007750:	1e03      	subs	r3, r0, #0
 8007752:	d001      	beq.n	8007758 <LPS22HH_SetOutputDataRate_When_Disabled+0x3c>
 8007754:	2303      	movs	r3, #3
 8007756:	e018      	b.n	800778a <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 8007758:	4912      	ldr	r1, [pc, #72]	@ (80077a4 <LPS22HH_SetOutputDataRate_When_Disabled+0x88>)
 800775a:	6838      	ldr	r0, [r7, #0]
 800775c:	f7f8 fdce 	bl	80002fc <__aeabi_fcmple>
 8007760:	1e03      	subs	r3, r0, #0
 8007762:	d001      	beq.n	8007768 <LPS22HH_SetOutputDataRate_When_Disabled+0x4c>
 8007764:	2304      	movs	r3, #4
 8007766:	e010      	b.n	800778a <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 8007768:	490f      	ldr	r1, [pc, #60]	@ (80077a8 <LPS22HH_SetOutputDataRate_When_Disabled+0x8c>)
 800776a:	6838      	ldr	r0, [r7, #0]
 800776c:	f7f8 fdc6 	bl	80002fc <__aeabi_fcmple>
 8007770:	1e03      	subs	r3, r0, #0
 8007772:	d001      	beq.n	8007778 <LPS22HH_SetOutputDataRate_When_Disabled+0x5c>
 8007774:	2305      	movs	r3, #5
 8007776:	e008      	b.n	800778a <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 8007778:	490c      	ldr	r1, [pc, #48]	@ (80077ac <LPS22HH_SetOutputDataRate_When_Disabled+0x90>)
 800777a:	6838      	ldr	r0, [r7, #0]
 800777c:	f7f8 fdbe 	bl	80002fc <__aeabi_fcmple>
 8007780:	1e03      	subs	r3, r0, #0
 8007782:	d001      	beq.n	8007788 <LPS22HH_SetOutputDataRate_When_Disabled+0x6c>
 8007784:	2306      	movs	r3, #6
 8007786:	e000      	b.n	800778a <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 8007788:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	212b      	movs	r1, #43	@ 0x2b
 800778e:	5453      	strb	r3, [r2, r1]
                 : (Odr <=  50.0f) ? LPS22HH_50_Hz
                 : (Odr <=  75.0f) ? LPS22HH_75_Hz
                 : (Odr <= 100.0f) ? LPS22HH_100_Hz
                 :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	0018      	movs	r0, r3
 8007794:	46bd      	mov	sp, r7
 8007796:	b002      	add	sp, #8
 8007798:	bd80      	pop	{r7, pc}
 800779a:	46c0      	nop			@ (mov r8, r8)
 800779c:	41200000 	.word	0x41200000
 80077a0:	41c80000 	.word	0x41c80000
 80077a4:	42480000 	.word	0x42480000
 80077a8:	42960000 	.word	0x42960000
 80077ac:	42c80000 	.word	0x42c80000

080077b0 <LPS22HH_Initialize>:
 * @brief  Initialize the LPS22HH sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	331c      	adds	r3, #28
 80077bc:	2111      	movs	r1, #17
 80077be:	0018      	movs	r0, r3
 80077c0:	f000 faf8 	bl	8007db4 <lps22hh_i3c_interface_set>
 80077c4:	1e03      	subs	r3, r0, #0
 80077c6:	d002      	beq.n	80077ce <LPS22HH_Initialize+0x1e>
  {
    return LPS22HH_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	425b      	negs	r3, r3
 80077cc:	e030      	b.n	8007830 <LPS22HH_Initialize+0x80>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	331c      	adds	r3, #28
 80077d2:	2110      	movs	r1, #16
 80077d4:	0018      	movs	r0, r3
 80077d6:	f000 f963 	bl	8007aa0 <lps22hh_data_rate_set>
 80077da:	1e03      	subs	r3, r0, #0
 80077dc:	d002      	beq.n	80077e4 <LPS22HH_Initialize+0x34>
  {
    return LPS22HH_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	425b      	negs	r3, r3
 80077e2:	e025      	b.n	8007830 <LPS22HH_Initialize+0x80>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	331c      	adds	r3, #28
 80077e8:	2100      	movs	r1, #0
 80077ea:	0018      	movs	r0, r3
 80077ec:	f000 fab2 	bl	8007d54 <lps22hh_lp_bandwidth_set>
 80077f0:	1e03      	subs	r3, r0, #0
 80077f2:	d002      	beq.n	80077fa <LPS22HH_Initialize+0x4a>
  {
    return LPS22HH_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	425b      	negs	r3, r3
 80077f8:	e01a      	b.n	8007830 <LPS22HH_Initialize+0x80>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	331c      	adds	r3, #28
 80077fe:	2101      	movs	r1, #1
 8007800:	0018      	movs	r0, r3
 8007802:	f000 f91d 	bl	8007a40 <lps22hh_block_data_update_set>
 8007806:	1e03      	subs	r3, r0, #0
 8007808:	d002      	beq.n	8007810 <LPS22HH_Initialize+0x60>
  {
    return LPS22HH_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	425b      	negs	r3, r3
 800780e:	e00f      	b.n	8007830 <LPS22HH_Initialize+0x80>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	331c      	adds	r3, #28
 8007814:	2101      	movs	r1, #1
 8007816:	0018      	movs	r0, r3
 8007818:	f000 fa6c 	bl	8007cf4 <lps22hh_auto_increment_set>
 800781c:	1e03      	subs	r3, r0, #0
 800781e:	d002      	beq.n	8007826 <LPS22HH_Initialize+0x76>
  {
    return LPS22HH_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	425b      	negs	r3, r3
 8007824:	e004      	b.n	8007830 <LPS22HH_Initialize+0x80>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	222b      	movs	r2, #43	@ 0x2b
 800782a:	2103      	movs	r1, #3
 800782c:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	0018      	movs	r0, r3
 8007832:	46bd      	mov	sp, r7
 8007834:	b002      	add	sp, #8
 8007836:	bd80      	pop	{r7, pc}

08007838 <LPS22HH_Set_Power_Mode>:
 * @param  pObj the device pObj
 * @param  powerMode mode to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Set_Power_Mode(LPS22HH_Object_t *pObj, uint8_t powerMode)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	000a      	movs	r2, r1
 8007842:	1cfb      	adds	r3, r7, #3
 8007844:	701a      	strb	r2, [r3, #0]
  lps22hh_ctrl_reg2_t ctrl_reg2;

  if(lps22hh_read_reg(&(pObj->Ctx), LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1) != LPS22HH_OK)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	331c      	adds	r3, #28
 800784a:	0018      	movs	r0, r3
 800784c:	230c      	movs	r3, #12
 800784e:	18fa      	adds	r2, r7, r3
 8007850:	2301      	movs	r3, #1
 8007852:	2111      	movs	r1, #17
 8007854:	f000 f887 	bl	8007966 <lps22hh_read_reg>
 8007858:	1e03      	subs	r3, r0, #0
 800785a:	d002      	beq.n	8007862 <LPS22HH_Set_Power_Mode+0x2a>
  {
    return LPS22HH_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	425b      	negs	r3, r3
 8007860:	e01f      	b.n	80078a2 <LPS22HH_Set_Power_Mode+0x6a>
  }

  if(powerMode == 1)
 8007862:	1cfb      	adds	r3, r7, #3
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d106      	bne.n	8007878 <LPS22HH_Set_Power_Mode+0x40>
  {
    ctrl_reg2.low_noise_en = LPS22HH_LOW_NOISE_EN;
 800786a:	230c      	movs	r3, #12
 800786c:	18fb      	adds	r3, r7, r3
 800786e:	781a      	ldrb	r2, [r3, #0]
 8007870:	2102      	movs	r1, #2
 8007872:	430a      	orrs	r2, r1
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	e005      	b.n	8007884 <LPS22HH_Set_Power_Mode+0x4c>
  }
  else
  {
    ctrl_reg2.low_noise_en = LPS22HH_LOW_NOISE_DIS;
 8007878:	230c      	movs	r3, #12
 800787a:	18fb      	adds	r3, r7, r3
 800787c:	781a      	ldrb	r2, [r3, #0]
 800787e:	2102      	movs	r1, #2
 8007880:	438a      	bics	r2, r1
 8007882:	701a      	strb	r2, [r3, #0]
  }

  if(lps22hh_write_reg(&(pObj->Ctx), LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1) != LPS22HH_OK)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	331c      	adds	r3, #28
 8007888:	0018      	movs	r0, r3
 800788a:	230c      	movs	r3, #12
 800788c:	18fa      	adds	r2, r7, r3
 800788e:	2301      	movs	r3, #1
 8007890:	2111      	movs	r1, #17
 8007892:	f000 f889 	bl	80079a8 <lps22hh_write_reg>
 8007896:	1e03      	subs	r3, r0, #0
 8007898:	d002      	beq.n	80078a0 <LPS22HH_Set_Power_Mode+0x68>
  {
    return LPS22HH_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	425b      	negs	r3, r3
 800789e:	e000      	b.n	80078a2 <LPS22HH_Set_Power_Mode+0x6a>
  }

  return LPS22HH_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	0018      	movs	r0, r3
 80078a4:	46bd      	mov	sp, r7
 80078a6:	b004      	add	sp, #16
 80078a8:	bd80      	pop	{r7, pc}

080078aa <LPS22HH_Set_Filter_Mode>:
 * @param  pObj the device pObj
 * @param  filterMode to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LPS22HH_Set_Filter_Mode(LPS22HH_Object_t *pObj, uint8_t filterMode)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	000a      	movs	r2, r1
 80078b4:	1cfb      	adds	r3, r7, #3
 80078b6:	701a      	strb	r2, [r3, #0]
  if(lps22hh_lp_bandwidth_set(&(pObj->Ctx), (lps22hh_lpfp_cfg_t)filterMode) != LPS22HH_OK)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	331c      	adds	r3, #28
 80078bc:	001a      	movs	r2, r3
 80078be:	1cfb      	adds	r3, r7, #3
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	0019      	movs	r1, r3
 80078c4:	0010      	movs	r0, r2
 80078c6:	f000 fa45 	bl	8007d54 <lps22hh_lp_bandwidth_set>
 80078ca:	1e03      	subs	r3, r0, #0
 80078cc:	d002      	beq.n	80078d4 <LPS22HH_Set_Filter_Mode+0x2a>
  {
    return LPS22HH_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	425b      	negs	r3, r3
 80078d2:	e000      	b.n	80078d6 <LPS22HH_Set_Filter_Mode+0x2c>
  }
  return LPS22HH_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	0018      	movs	r0, r3
 80078d8:	46bd      	mov	sp, r7
 80078da:	b002      	add	sp, #8
 80078dc:	bd80      	pop	{r7, pc}

080078de <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80078de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078e0:	b087      	sub	sp, #28
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	0008      	movs	r0, r1
 80078e8:	607a      	str	r2, [r7, #4]
 80078ea:	0019      	movs	r1, r3
 80078ec:	250b      	movs	r5, #11
 80078ee:	197b      	adds	r3, r7, r5
 80078f0:	1c02      	adds	r2, r0, #0
 80078f2:	701a      	strb	r2, [r3, #0]
 80078f4:	2608      	movs	r6, #8
 80078f6:	19bb      	adds	r3, r7, r6
 80078f8:	1c0a      	adds	r2, r1, #0
 80078fa:	801a      	strh	r2, [r3, #0]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	695c      	ldr	r4, [r3, #20]
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	7b1b      	ldrb	r3, [r3, #12]
 8007908:	0018      	movs	r0, r3
 800790a:	197b      	adds	r3, r7, r5
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	b299      	uxth	r1, r3
 8007910:	19bb      	adds	r3, r7, r6
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	47a0      	blx	r4
 8007918:	0003      	movs	r3, r0
}
 800791a:	0018      	movs	r0, r3
 800791c:	46bd      	mov	sp, r7
 800791e:	b007      	add	sp, #28
 8007920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007922 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007924:	b087      	sub	sp, #28
 8007926:	af00      	add	r7, sp, #0
 8007928:	60f8      	str	r0, [r7, #12]
 800792a:	0008      	movs	r0, r1
 800792c:	607a      	str	r2, [r7, #4]
 800792e:	0019      	movs	r1, r3
 8007930:	250b      	movs	r5, #11
 8007932:	197b      	adds	r3, r7, r5
 8007934:	1c02      	adds	r2, r0, #0
 8007936:	701a      	strb	r2, [r3, #0]
 8007938:	2608      	movs	r6, #8
 800793a:	19bb      	adds	r3, r7, r6
 800793c:	1c0a      	adds	r2, r1, #0
 800793e:	801a      	strh	r2, [r3, #0]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	691c      	ldr	r4, [r3, #16]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	7b1b      	ldrb	r3, [r3, #12]
 800794c:	0018      	movs	r0, r3
 800794e:	197b      	adds	r3, r7, r5
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	b299      	uxth	r1, r3
 8007954:	19bb      	adds	r3, r7, r6
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	47a0      	blx	r4
 800795c:	0003      	movs	r3, r0
}
 800795e:	0018      	movs	r0, r3
 8007960:	46bd      	mov	sp, r7
 8007962:	b007      	add	sp, #28
 8007964:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007966 <lps22hh_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8007966:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007968:	b087      	sub	sp, #28
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	0008      	movs	r0, r1
 8007970:	607a      	str	r2, [r7, #4]
 8007972:	0019      	movs	r1, r3
 8007974:	260b      	movs	r6, #11
 8007976:	19bb      	adds	r3, r7, r6
 8007978:	1c02      	adds	r2, r0, #0
 800797a:	701a      	strb	r2, [r3, #0]
 800797c:	2508      	movs	r5, #8
 800797e:	197b      	adds	r3, r7, r5
 8007980:	1c0a      	adds	r2, r1, #0
 8007982:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	685c      	ldr	r4, [r3, #4]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6898      	ldr	r0, [r3, #8]
 800798c:	197b      	adds	r3, r7, r5
 800798e:	881d      	ldrh	r5, [r3, #0]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	19bb      	adds	r3, r7, r6
 8007994:	7819      	ldrb	r1, [r3, #0]
 8007996:	002b      	movs	r3, r5
 8007998:	47a0      	blx	r4
 800799a:	0003      	movs	r3, r0
 800799c:	617b      	str	r3, [r7, #20]
  return ret;
 800799e:	697b      	ldr	r3, [r7, #20]
}
 80079a0:	0018      	movs	r0, r3
 80079a2:	46bd      	mov	sp, r7
 80079a4:	b007      	add	sp, #28
 80079a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079a8 <lps22hh_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 80079a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	0008      	movs	r0, r1
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	0019      	movs	r1, r3
 80079b6:	260b      	movs	r6, #11
 80079b8:	19bb      	adds	r3, r7, r6
 80079ba:	1c02      	adds	r2, r0, #0
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	2508      	movs	r5, #8
 80079c0:	197b      	adds	r3, r7, r5
 80079c2:	1c0a      	adds	r2, r1, #0
 80079c4:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681c      	ldr	r4, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6898      	ldr	r0, [r3, #8]
 80079ce:	197b      	adds	r3, r7, r5
 80079d0:	881d      	ldrh	r5, [r3, #0]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	19bb      	adds	r3, r7, r6
 80079d6:	7819      	ldrb	r1, [r3, #0]
 80079d8:	002b      	movs	r3, r5
 80079da:	47a0      	blx	r4
 80079dc:	0003      	movs	r3, r0
 80079de:	617b      	str	r3, [r7, #20]
  return ret;
 80079e0:	697b      	ldr	r3, [r7, #20]
}
 80079e2:	0018      	movs	r0, r3
 80079e4:	46bd      	mov	sp, r7
 80079e6:	b007      	add	sp, #28
 80079e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079ea <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(int32_t lsb)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b082      	sub	sp, #8
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  return ( (float_t) lsb / 4096.0f );
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7f9 fc2c 	bl	8001250 <__aeabi_i2f>
 80079f8:	1c03      	adds	r3, r0, #0
 80079fa:	218b      	movs	r1, #139	@ 0x8b
 80079fc:	05c9      	lsls	r1, r1, #23
 80079fe:	1c18      	adds	r0, r3, #0
 8007a00:	f7f8 ff3e 	bl	8000880 <__aeabi_fdiv>
 8007a04:	1c03      	adds	r3, r0, #0
}
 8007a06:	1c18      	adds	r0, r3, #0
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	b002      	add	sp, #8
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	0002      	movs	r2, r0
 8007a18:	1dbb      	adds	r3, r7, #6
 8007a1a:	801a      	strh	r2, [r3, #0]
  return ( (float_t) lsb / 100.0f );
 8007a1c:	1dbb      	adds	r3, r7, #6
 8007a1e:	2200      	movs	r2, #0
 8007a20:	5e9b      	ldrsh	r3, [r3, r2]
 8007a22:	0018      	movs	r0, r3
 8007a24:	f7f9 fc14 	bl	8001250 <__aeabi_i2f>
 8007a28:	1c03      	adds	r3, r0, #0
 8007a2a:	4904      	ldr	r1, [pc, #16]	@ (8007a3c <lps22hh_from_lsb_to_celsius+0x2c>)
 8007a2c:	1c18      	adds	r0, r3, #0
 8007a2e:	f7f8 ff27 	bl	8000880 <__aeabi_fdiv>
 8007a32:	1c03      	adds	r3, r0, #0
}
 8007a34:	1c18      	adds	r0, r3, #0
 8007a36:	46bd      	mov	sp, r7
 8007a38:	b002      	add	sp, #8
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	42c80000 	.word	0x42c80000

08007a40 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007a40:	b590      	push	{r4, r7, lr}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	000a      	movs	r2, r1
 8007a4a:	1cfb      	adds	r3, r7, #3
 8007a4c:	701a      	strb	r2, [r3, #0]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 8007a4e:	2408      	movs	r4, #8
 8007a50:	193a      	adds	r2, r7, r4
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	2301      	movs	r3, #1
 8007a56:	2110      	movs	r1, #16
 8007a58:	f7ff ff85 	bl	8007966 <lps22hh_read_reg>
 8007a5c:	0003      	movs	r3, r0
 8007a5e:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d117      	bne.n	8007a96 <lps22hh_block_data_update_set+0x56>
    reg.bdu = val;
 8007a66:	1cfb      	adds	r3, r7, #3
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	193b      	adds	r3, r7, r4
 8007a72:	2101      	movs	r1, #1
 8007a74:	400a      	ands	r2, r1
 8007a76:	1890      	adds	r0, r2, r2
 8007a78:	781a      	ldrb	r2, [r3, #0]
 8007a7a:	2102      	movs	r1, #2
 8007a7c:	438a      	bics	r2, r1
 8007a7e:	1c11      	adds	r1, r2, #0
 8007a80:	1c02      	adds	r2, r0, #0
 8007a82:	430a      	orrs	r2, r1
 8007a84:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 8007a86:	193a      	adds	r2, r7, r4
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	2110      	movs	r1, #16
 8007a8e:	f7ff ff8b 	bl	80079a8 <lps22hh_write_reg>
 8007a92:	0003      	movs	r3, r0
 8007a94:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8007a96:	68fb      	ldr	r3, [r7, #12]
}
 8007a98:	0018      	movs	r0, r3
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	b005      	add	sp, #20
 8007a9e:	bd90      	pop	{r4, r7, pc}

08007aa0 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8007aa0:	b590      	push	{r4, r7, lr}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	000a      	movs	r2, r1
 8007aaa:	1cfb      	adds	r3, r7, #3
 8007aac:	701a      	strb	r2, [r3, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8007aae:	2310      	movs	r3, #16
 8007ab0:	18fa      	adds	r2, r7, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	2110      	movs	r1, #16
 8007ab8:	f7ff ff55 	bl	8007966 <lps22hh_read_reg>
 8007abc:	0003      	movs	r3, r0
 8007abe:	617b      	str	r3, [r7, #20]
  if (ret == 0) {
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d108      	bne.n	8007ad8 <lps22hh_data_rate_set+0x38>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8007ac6:	230c      	movs	r3, #12
 8007ac8:	18fa      	adds	r2, r7, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	2301      	movs	r3, #1
 8007ace:	2111      	movs	r1, #17
 8007ad0:	f7ff ff49 	bl	8007966 <lps22hh_read_reg>
 8007ad4:	0003      	movs	r3, r0
 8007ad6:	617b      	str	r3, [r7, #20]
  }
  if (ret == 0) {
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d118      	bne.n	8007b10 <lps22hh_data_rate_set+0x70>
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8007ade:	1cfb      	adds	r3, r7, #3
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2207      	movs	r2, #7
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	2410      	movs	r4, #16
 8007aea:	193b      	adds	r3, r7, r4
 8007aec:	2107      	movs	r1, #7
 8007aee:	400a      	ands	r2, r1
 8007af0:	0110      	lsls	r0, r2, #4
 8007af2:	781a      	ldrb	r2, [r3, #0]
 8007af4:	2170      	movs	r1, #112	@ 0x70
 8007af6:	438a      	bics	r2, r1
 8007af8:	1c11      	adds	r1, r2, #0
 8007afa:	1c02      	adds	r2, r0, #0
 8007afc:	430a      	orrs	r2, r1
 8007afe:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8007b00:	193a      	adds	r2, r7, r4
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	2301      	movs	r3, #1
 8007b06:	2110      	movs	r1, #16
 8007b08:	f7ff ff4e 	bl	80079a8 <lps22hh_write_reg>
 8007b0c:	0003      	movs	r3, r0
 8007b0e:	617b      	str	r3, [r7, #20]
  }
  if (ret == 0) {
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d12c      	bne.n	8007b70 <lps22hh_data_rate_set+0xd0>
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8007b16:	1cfb      	adds	r3, r7, #3
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	091b      	lsrs	r3, r3, #4
 8007b1c:	1c1a      	adds	r2, r3, #0
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4013      	ands	r3, r2
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	240c      	movs	r4, #12
 8007b26:	193b      	adds	r3, r7, r4
 8007b28:	2101      	movs	r1, #1
 8007b2a:	400a      	ands	r2, r1
 8007b2c:	1890      	adds	r0, r2, r2
 8007b2e:	781a      	ldrb	r2, [r3, #0]
 8007b30:	2102      	movs	r1, #2
 8007b32:	438a      	bics	r2, r1
 8007b34:	1c11      	adds	r1, r2, #0
 8007b36:	1c02      	adds	r2, r0, #0
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	701a      	strb	r2, [r3, #0]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8007b3c:	1cfb      	adds	r3, r7, #3
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	08db      	lsrs	r3, r3, #3
 8007b42:	1c1a      	adds	r2, r3, #0
 8007b44:	2301      	movs	r3, #1
 8007b46:	4013      	ands	r3, r2
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	193b      	adds	r3, r7, r4
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	400a      	ands	r2, r1
 8007b50:	0010      	movs	r0, r2
 8007b52:	781a      	ldrb	r2, [r3, #0]
 8007b54:	2101      	movs	r1, #1
 8007b56:	438a      	bics	r2, r1
 8007b58:	1c11      	adds	r1, r2, #0
 8007b5a:	1c02      	adds	r2, r0, #0
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8007b60:	193a      	adds	r2, r7, r4
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	2301      	movs	r3, #1
 8007b66:	2111      	movs	r1, #17
 8007b68:	f7ff ff1e 	bl	80079a8 <lps22hh_write_reg>
 8007b6c:	0003      	movs	r3, r0
 8007b6e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8007b70:	697b      	ldr	r3, [r7, #20]
}
 8007b72:	0018      	movs	r0, r3
 8007b74:	46bd      	mov	sp, r7
 8007b76:	b007      	add	sp, #28
 8007b78:	bd90      	pop	{r4, r7, pc}
	...

08007b7c <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8007b7c:	b590      	push	{r4, r7, lr}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8007b86:	2310      	movs	r3, #16
 8007b88:	18fa      	adds	r2, r7, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	2110      	movs	r1, #16
 8007b90:	f7ff fee9 	bl	8007966 <lps22hh_read_reg>
 8007b94:	0003      	movs	r3, r0
 8007b96:	617b      	str	r3, [r7, #20]
  if (ret == 0) {
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d108      	bne.n	8007bb0 <lps22hh_data_rate_get+0x34>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8007b9e:	230c      	movs	r3, #12
 8007ba0:	18fa      	adds	r2, r7, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	2111      	movs	r1, #17
 8007ba8:	f7ff fedd 	bl	8007966 <lps22hh_read_reg>
 8007bac:	0003      	movs	r3, r0
 8007bae:	617b      	str	r3, [r7, #20]
  }
  if (ret == 0) {
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d160      	bne.n	8007c78 <lps22hh_data_rate_get+0xfc>
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
 8007bb6:	240c      	movs	r4, #12
 8007bb8:	193a      	adds	r2, r7, r4
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	2111      	movs	r1, #17
 8007bc0:	f7ff fed1 	bl	8007966 <lps22hh_read_reg>
 8007bc4:	0003      	movs	r3, r0
 8007bc6:	617b      	str	r3, [r7, #20]
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8007bc8:	0021      	movs	r1, r4
 8007bca:	187b      	adds	r3, r7, r1
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	079b      	lsls	r3, r3, #30
 8007bd0:	0fdb      	lsrs	r3, r3, #31
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	011a      	lsls	r2, r3, #4
 8007bd6:	187b      	adds	r3, r7, r1
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	07db      	lsls	r3, r3, #31
 8007bdc:	0fdb      	lsrs	r3, r3, #31
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	18d3      	adds	r3, r2, r3
            ctrl_reg1.odr )) {
 8007be4:	2210      	movs	r2, #16
 8007be6:	18ba      	adds	r2, r7, r2
 8007be8:	7812      	ldrb	r2, [r2, #0]
 8007bea:	0652      	lsls	r2, r2, #25
 8007bec:	0f52      	lsrs	r2, r2, #29
 8007bee:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8007bf0:	189b      	adds	r3, r3, r2
 8007bf2:	2b15      	cmp	r3, #21
 8007bf4:	d83c      	bhi.n	8007c70 <lps22hh_data_rate_get+0xf4>
 8007bf6:	009a      	lsls	r2, r3, #2
 8007bf8:	4b22      	ldr	r3, [pc, #136]	@ (8007c84 <lps22hh_data_rate_get+0x108>)
 8007bfa:	18d3      	adds	r3, r2, r3
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	469f      	mov	pc, r3
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2200      	movs	r2, #0
 8007c04:	701a      	strb	r2, [r3, #0]
        break;
 8007c06:	e037      	b.n	8007c78 <lps22hh_data_rate_get+0xfc>
      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2208      	movs	r2, #8
 8007c0c:	701a      	strb	r2, [r3, #0]
        break;
 8007c0e:	e033      	b.n	8007c78 <lps22hh_data_rate_get+0xfc>
      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2201      	movs	r2, #1
 8007c14:	701a      	strb	r2, [r3, #0]
        break;
 8007c16:	e02f      	b.n	8007c78 <lps22hh_data_rate_get+0xfc>
      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	701a      	strb	r2, [r3, #0]
        break;
 8007c1e:	e02b      	b.n	8007c78 <lps22hh_data_rate_get+0xfc>
      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2203      	movs	r2, #3
 8007c24:	701a      	strb	r2, [r3, #0]
        break;
 8007c26:	e027      	b.n	8007c78 <lps22hh_data_rate_get+0xfc>
      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	2204      	movs	r2, #4
 8007c2c:	701a      	strb	r2, [r3, #0]
        break;
 8007c2e:	e023      	b.n	8007c78 <lps22hh_data_rate_get+0xfc>
      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2205      	movs	r2, #5
 8007c34:	701a      	strb	r2, [r3, #0]
        break;
 8007c36:	e01f      	b.n	8007c78 <lps22hh_data_rate_get+0xfc>
      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	2211      	movs	r2, #17
 8007c3c:	701a      	strb	r2, [r3, #0]
        break;
 8007c3e:	e01b      	b.n	8007c78 <lps22hh_data_rate_get+0xfc>
      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2212      	movs	r2, #18
 8007c44:	701a      	strb	r2, [r3, #0]
        break;
 8007c46:	e017      	b.n	8007c78 <lps22hh_data_rate_get+0xfc>
      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2213      	movs	r2, #19
 8007c4c:	701a      	strb	r2, [r3, #0]
        break;
 8007c4e:	e013      	b.n	8007c78 <lps22hh_data_rate_get+0xfc>
      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2214      	movs	r2, #20
 8007c54:	701a      	strb	r2, [r3, #0]
        break;
 8007c56:	e00f      	b.n	8007c78 <lps22hh_data_rate_get+0xfc>
      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2215      	movs	r2, #21
 8007c5c:	701a      	strb	r2, [r3, #0]
        break;
 8007c5e:	e00b      	b.n	8007c78 <lps22hh_data_rate_get+0xfc>
      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2206      	movs	r2, #6
 8007c64:	701a      	strb	r2, [r3, #0]
        break;
 8007c66:	e007      	b.n	8007c78 <lps22hh_data_rate_get+0xfc>
      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2207      	movs	r2, #7
 8007c6c:	701a      	strb	r2, [r3, #0]
        break;
 8007c6e:	e003      	b.n	8007c78 <lps22hh_data_rate_get+0xfc>
      default:
        *val = LPS22HH_POWER_DOWN;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2200      	movs	r2, #0
 8007c74:	701a      	strb	r2, [r3, #0]
        break;
 8007c76:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return ret;
 8007c78:	697b      	ldr	r3, [r7, #20]
}
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	b007      	add	sp, #28
 8007c80:	bd90      	pop	{r4, r7, pc}
 8007c82:	46c0      	nop			@ (mov r8, r8)
 8007c84:	080149a4 	.word	0x080149a4

08007c88 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, buff, 3);
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	2303      	movs	r3, #3
 8007c98:	2128      	movs	r1, #40	@ 0x28
 8007c9a:	f7ff fe64 	bl	8007966 <lps22hh_read_reg>
 8007c9e:	0003      	movs	r3, r0
 8007ca0:	60fb      	str	r3, [r7, #12]
  return ret;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
}
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	b004      	add	sp, #16
 8007caa:	bd80      	pop	{r7, pc}

08007cac <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, buff, 2);
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	2302      	movs	r3, #2
 8007cbc:	212b      	movs	r1, #43	@ 0x2b
 8007cbe:	f7ff fe52 	bl	8007966 <lps22hh_read_reg>
 8007cc2:	0003      	movs	r3, r0
 8007cc4:	60fb      	str	r3, [r7, #12]
  return ret;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
}
 8007cc8:	0018      	movs	r0, r3
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	b004      	add	sp, #16
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	2301      	movs	r3, #1
 8007ce0:	210f      	movs	r1, #15
 8007ce2:	f7ff fe40 	bl	8007966 <lps22hh_read_reg>
 8007ce6:	0003      	movs	r3, r0
 8007ce8:	60fb      	str	r3, [r7, #12]
  return ret;
 8007cea:	68fb      	ldr	r3, [r7, #12]
}
 8007cec:	0018      	movs	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	b004      	add	sp, #16
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007cf4:	b590      	push	{r4, r7, lr}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	000a      	movs	r2, r1
 8007cfe:	1cfb      	adds	r3, r7, #3
 8007d00:	701a      	strb	r2, [r3, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*) &reg, 1);
 8007d02:	2408      	movs	r4, #8
 8007d04:	193a      	adds	r2, r7, r4
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	2301      	movs	r3, #1
 8007d0a:	2111      	movs	r1, #17
 8007d0c:	f7ff fe2b 	bl	8007966 <lps22hh_read_reg>
 8007d10:	0003      	movs	r3, r0
 8007d12:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d117      	bne.n	8007d4a <lps22hh_auto_increment_set+0x56>
    reg.if_add_inc = val;
 8007d1a:	1cfb      	adds	r3, r7, #3
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	4013      	ands	r3, r2
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	193b      	adds	r3, r7, r4
 8007d26:	2101      	movs	r1, #1
 8007d28:	400a      	ands	r2, r1
 8007d2a:	0110      	lsls	r0, r2, #4
 8007d2c:	781a      	ldrb	r2, [r3, #0]
 8007d2e:	2110      	movs	r1, #16
 8007d30:	438a      	bics	r2, r1
 8007d32:	1c11      	adds	r1, r2, #0
 8007d34:	1c02      	adds	r2, r0, #0
 8007d36:	430a      	orrs	r2, r1
 8007d38:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t*) &reg, 1);
 8007d3a:	193a      	adds	r2, r7, r4
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	2301      	movs	r3, #1
 8007d40:	2111      	movs	r1, #17
 8007d42:	f7ff fe31 	bl	80079a8 <lps22hh_write_reg>
 8007d46:	0003      	movs	r3, r0
 8007d48:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
}
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	b005      	add	sp, #20
 8007d52:	bd90      	pop	{r4, r7, pc}

08007d54 <lps22hh_lp_bandwidth_set>:
  * @param  val      change the values of lpfp_cfg in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx, lps22hh_lpfp_cfg_t val)
{
 8007d54:	b590      	push	{r4, r7, lr}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	000a      	movs	r2, r1
 8007d5e:	1cfb      	adds	r3, r7, #3
 8007d60:	701a      	strb	r2, [r3, #0]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 8007d62:	2408      	movs	r4, #8
 8007d64:	193a      	adds	r2, r7, r4
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	2301      	movs	r3, #1
 8007d6a:	2110      	movs	r1, #16
 8007d6c:	f7ff fdfb 	bl	8007966 <lps22hh_read_reg>
 8007d70:	0003      	movs	r3, r0
 8007d72:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d117      	bne.n	8007daa <lps22hh_lp_bandwidth_set+0x56>
    reg.lpfp_cfg = (uint8_t)val;
 8007d7a:	1cfb      	adds	r3, r7, #3
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2203      	movs	r2, #3
 8007d80:	4013      	ands	r3, r2
 8007d82:	b2da      	uxtb	r2, r3
 8007d84:	193b      	adds	r3, r7, r4
 8007d86:	2103      	movs	r1, #3
 8007d88:	400a      	ands	r2, r1
 8007d8a:	0090      	lsls	r0, r2, #2
 8007d8c:	781a      	ldrb	r2, [r3, #0]
 8007d8e:	210c      	movs	r1, #12
 8007d90:	438a      	bics	r2, r1
 8007d92:	1c11      	adds	r1, r2, #0
 8007d94:	1c02      	adds	r2, r0, #0
 8007d96:	430a      	orrs	r2, r1
 8007d98:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t*) &reg, 1);
 8007d9a:	193a      	adds	r2, r7, r4
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	2301      	movs	r3, #1
 8007da0:	2110      	movs	r1, #16
 8007da2:	f7ff fe01 	bl	80079a8 <lps22hh_write_reg>
 8007da6:	0003      	movs	r3, r0
 8007da8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8007daa:	68fb      	ldr	r3, [r7, #12]
}
 8007dac:	0018      	movs	r0, r3
 8007dae:	46bd      	mov	sp, r7
 8007db0:	b005      	add	sp, #20
 8007db2:	bd90      	pop	{r4, r7, pc}

08007db4 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8007db4:	b590      	push	{r4, r7, lr}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	000a      	movs	r2, r1
 8007dbe:	1cfb      	adds	r3, r7, #3
 8007dc0:	701a      	strb	r2, [r3, #0]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t*) &reg, 1);
 8007dc2:	2408      	movs	r4, #8
 8007dc4:	193a      	adds	r2, r7, r4
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	2301      	movs	r3, #1
 8007dca:	210e      	movs	r1, #14
 8007dcc:	f7ff fdcb 	bl	8007966 <lps22hh_read_reg>
 8007dd0:	0003      	movs	r3, r0
 8007dd2:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d127      	bne.n	8007e2a <lps22hh_i3c_interface_set+0x76>
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8007dda:	1cfb      	adds	r3, r7, #3
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	2201      	movs	r2, #1
 8007de0:	4013      	ands	r3, r2
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	193b      	adds	r3, r7, r4
 8007de6:	2101      	movs	r1, #1
 8007de8:	400a      	ands	r2, r1
 8007dea:	1890      	adds	r0, r2, r2
 8007dec:	781a      	ldrb	r2, [r3, #0]
 8007dee:	2102      	movs	r1, #2
 8007df0:	438a      	bics	r2, r1
 8007df2:	1c11      	adds	r1, r2, #0
 8007df4:	1c02      	adds	r2, r0, #0
 8007df6:	430a      	orrs	r2, r1
 8007df8:	701a      	strb	r2, [r3, #0]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8007dfa:	1cfb      	adds	r3, r7, #3
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	091b      	lsrs	r3, r3, #4
 8007e00:	1c1a      	adds	r2, r3, #0
 8007e02:	2301      	movs	r3, #1
 8007e04:	4013      	ands	r3, r2
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	193b      	adds	r3, r7, r4
 8007e0a:	01d0      	lsls	r0, r2, #7
 8007e0c:	781a      	ldrb	r2, [r3, #0]
 8007e0e:	217f      	movs	r1, #127	@ 0x7f
 8007e10:	400a      	ands	r2, r1
 8007e12:	1c11      	adds	r1, r2, #0
 8007e14:	1c02      	adds	r2, r0, #0
 8007e16:	430a      	orrs	r2, r1
 8007e18:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t*) &reg, 1);
 8007e1a:	193a      	adds	r2, r7, r4
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	2301      	movs	r3, #1
 8007e20:	210e      	movs	r1, #14
 8007e22:	f7ff fdc1 	bl	80079a8 <lps22hh_write_reg>
 8007e26:	0003      	movs	r3, r0
 8007e28:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
}
 8007e2c:	0018      	movs	r0, r3
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	b005      	add	sp, #20
 8007e32:	bd90      	pop	{r4, r7, pc}

08007e34 <LSM6DSO_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d103      	bne.n	8007e50 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	425b      	negs	r3, r3
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	e04e      	b.n	8007eee <LSM6DSO_RegisterBusIO+0xba>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	7b1a      	ldrb	r2, [r3, #12]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	691a      	ldr	r2, [r3, #16]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	695a      	ldr	r2, [r3, #20]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	699a      	ldr	r2, [r3, #24]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ef8 <LSM6DSO_RegisterBusIO+0xc4>)
 8007e8c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a1a      	ldr	r2, [pc, #104]	@ (8007efc <LSM6DSO_RegisterBusIO+0xc8>)
 8007e92:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init == NULL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d103      	bne.n	8007eaa <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	425b      	negs	r3, r3
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	e021      	b.n	8007eee <LSM6DSO_RegisterBusIO+0xba>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4798      	blx	r3
 8007eb0:	1e03      	subs	r3, r0, #0
 8007eb2:	d003      	beq.n	8007ebc <LSM6DSO_RegisterBusIO+0x88>
    {
      ret = LSM6DSO_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	425b      	negs	r3, r3
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	e018      	b.n	8007eee <LSM6DSO_RegisterBusIO+0xba>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d114      	bne.n	8007eee <LSM6DSO_RegisterBusIO+0xba>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2228      	movs	r2, #40	@ 0x28
 8007ec8:	5c9b      	ldrb	r3, [r3, r2]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10f      	bne.n	8007eee <LSM6DSO_RegisterBusIO+0xba>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8007ece:	210b      	movs	r1, #11
 8007ed0:	187b      	adds	r3, r7, r1
 8007ed2:	220c      	movs	r2, #12
 8007ed4:	701a      	strb	r2, [r3, #0]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8007ed6:	187b      	adds	r3, r7, r1
 8007ed8:	781a      	ldrb	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2112      	movs	r1, #18
 8007ede:	0018      	movs	r0, r3
 8007ee0:	f000 ff16 	bl	8008d10 <LSM6DSO_Write_Reg>
 8007ee4:	1e03      	subs	r3, r0, #0
 8007ee6:	d002      	beq.n	8007eee <LSM6DSO_RegisterBusIO+0xba>
          {
            ret = LSM6DSO_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	425b      	negs	r3, r3
 8007eec:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8007eee:	68fb      	ldr	r3, [r7, #12]
}
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	b004      	add	sp, #16
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	080090f1 	.word	0x080090f1
 8007efc:	08009135 	.word	0x08009135

08007f00 <LSM6DSO_Init>:
 * @brief  Initialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	331c      	adds	r3, #28
 8007f0c:	2180      	movs	r1, #128	@ 0x80
 8007f0e:	0018      	movs	r0, r3
 8007f10:	f001 fe48 	bl	8009ba4 <lsm6dso_i3c_disable_set>
 8007f14:	1e03      	subs	r3, r0, #0
 8007f16:	d002      	beq.n	8007f1e <LSM6DSO_Init+0x1e>
  {
    return LSM6DSO_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	425b      	negs	r3, r3
 8007f1c:	e059      	b.n	8007fd2 <LSM6DSO_Init+0xd2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	331c      	adds	r3, #28
 8007f22:	2101      	movs	r1, #1
 8007f24:	0018      	movs	r0, r3
 8007f26:	f001 fe0d 	bl	8009b44 <lsm6dso_auto_increment_set>
 8007f2a:	1e03      	subs	r3, r0, #0
 8007f2c:	d002      	beq.n	8007f34 <LSM6DSO_Init+0x34>
  {
    return LSM6DSO_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	425b      	negs	r3, r3
 8007f32:	e04e      	b.n	8007fd2 <LSM6DSO_Init+0xd2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	331c      	adds	r3, #28
 8007f38:	2101      	movs	r1, #1
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f001 fd6e 	bl	8009a1c <lsm6dso_block_data_update_set>
 8007f40:	1e03      	subs	r3, r0, #0
 8007f42:	d002      	beq.n	8007f4a <LSM6DSO_Init+0x4a>
  {
    return LSM6DSO_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	425b      	negs	r3, r3
 8007f48:	e043      	b.n	8007fd2 <LSM6DSO_Init+0xd2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	331c      	adds	r3, #28
 8007f4e:	2100      	movs	r1, #0
 8007f50:	0018      	movs	r0, r3
 8007f52:	f001 fe82 	bl	8009c5a <lsm6dso_fifo_mode_set>
 8007f56:	1e03      	subs	r3, r0, #0
 8007f58:	d002      	beq.n	8007f60 <LSM6DSO_Init+0x60>
  {
    return LSM6DSO_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	425b      	negs	r3, r3
 8007f5e:	e038      	b.n	8007fd2 <LSM6DSO_Init+0xd2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	222b      	movs	r2, #43	@ 0x2b
 8007f64:	2104      	movs	r1, #4
 8007f66:	5499      	strb	r1, [r3, r2]

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	331c      	adds	r3, #28
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	0018      	movs	r0, r3
 8007f70:	f001 f9ab 	bl	80092ca <lsm6dso_xl_data_rate_set>
 8007f74:	1e03      	subs	r3, r0, #0
 8007f76:	d002      	beq.n	8007f7e <LSM6DSO_Init+0x7e>
  {
    return LSM6DSO_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	425b      	negs	r3, r3
 8007f7c:	e029      	b.n	8007fd2 <LSM6DSO_Init+0xd2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	331c      	adds	r3, #28
 8007f82:	2100      	movs	r1, #0
 8007f84:	0018      	movs	r0, r3
 8007f86:	f001 f939 	bl	80091fc <lsm6dso_xl_full_scale_set>
 8007f8a:	1e03      	subs	r3, r0, #0
 8007f8c:	d002      	beq.n	8007f94 <LSM6DSO_Init+0x94>
  {
    return LSM6DSO_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	425b      	negs	r3, r3
 8007f92:	e01e      	b.n	8007fd2 <LSM6DSO_Init+0xd2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	222c      	movs	r2, #44	@ 0x2c
 8007f98:	2104      	movs	r1, #4
 8007f9a:	5499      	strb	r1, [r3, r2]

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	331c      	adds	r3, #28
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	0018      	movs	r0, r3
 8007fa4:	f001 fb9c 	bl	80096e0 <lsm6dso_gy_data_rate_set>
 8007fa8:	1e03      	subs	r3, r0, #0
 8007faa:	d002      	beq.n	8007fb2 <LSM6DSO_Init+0xb2>
  {
    return LSM6DSO_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	425b      	negs	r3, r3
 8007fb0:	e00f      	b.n	8007fd2 <LSM6DSO_Init+0xd2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	331c      	adds	r3, #28
 8007fb6:	2106      	movs	r1, #6
 8007fb8:	0018      	movs	r0, r3
 8007fba:	f001 fb27 	bl	800960c <lsm6dso_gy_full_scale_set>
 8007fbe:	1e03      	subs	r3, r0, #0
 8007fc0:	d002      	beq.n	8007fc8 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	425b      	negs	r3, r3
 8007fc6:	e004      	b.n	8007fd2 <LSM6DSO_Init+0xd2>
  }

  pObj->is_initialized = 1;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2228      	movs	r2, #40	@ 0x28
 8007fcc:	2101      	movs	r1, #1
 8007fce:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	0018      	movs	r0, r3
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	b002      	add	sp, #8
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <LSM6DSO_DeInit>:
 * @brief  Deinitialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b082      	sub	sp, #8
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	f000 f884 	bl	80080f2 <LSM6DSO_ACC_Disable>
 8007fea:	1e03      	subs	r3, r0, #0
 8007fec:	d002      	beq.n	8007ff4 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	425b      	negs	r3, r3
 8007ff2:	e015      	b.n	8008020 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	f000 fc0d 	bl	8008816 <LSM6DSO_GYRO_Disable>
 8007ffc:	1e03      	subs	r3, r0, #0
 8007ffe:	d002      	beq.n	8008006 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	425b      	negs	r3, r3
 8008004:	e00c      	b.n	8008020 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	222b      	movs	r2, #43	@ 0x2b
 800800a:	2100      	movs	r1, #0
 800800c:	5499      	strb	r1, [r3, r2]
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	222c      	movs	r2, #44	@ 0x2c
 8008012:	2100      	movs	r1, #0
 8008014:	5499      	strb	r1, [r3, r2]

  pObj->is_initialized = 0;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2228      	movs	r2, #40	@ 0x28
 800801a:	2100      	movs	r1, #0
 800801c:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	0018      	movs	r0, r3
 8008022:	46bd      	mov	sp, r7
 8008024:	b002      	add	sp, #8
 8008026:	bd80      	pop	{r7, pc}

08008028 <LSM6DSO_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	331c      	adds	r3, #28
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	0011      	movs	r1, r2
 800803a:	0018      	movs	r0, r3
 800803c:	f001 fd70 	bl	8009b20 <lsm6dso_device_id_get>
 8008040:	1e03      	subs	r3, r0, #0
 8008042:	d002      	beq.n	800804a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	425b      	negs	r3, r3
 8008048:	e000      	b.n	800804c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	0018      	movs	r0, r3
 800804e:	46bd      	mov	sp, r7
 8008050:	b002      	add	sp, #8
 8008052:	bd80      	pop	{r7, pc}

08008054 <LSM6DSO_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSO sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2201      	movs	r2, #1
 8008062:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2201      	movs	r2, #1
 8008068:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2200      	movs	r2, #0
 800806e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2200      	movs	r2, #0
 8008074:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	22fa      	movs	r2, #250	@ 0xfa
 800807a:	00d2      	lsls	r2, r2, #3
 800807c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2210      	movs	r2, #16
 8008082:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2200      	movs	r2, #0
 8008088:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	4a06      	ldr	r2, [pc, #24]	@ (80080a8 <LSM6DSO_GetCapabilities+0x54>)
 800808e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	4a05      	ldr	r2, [pc, #20]	@ (80080a8 <LSM6DSO_GetCapabilities+0x54>)
 8008094:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2200      	movs	r2, #0
 800809a:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	0018      	movs	r0, r3
 80080a0:	46bd      	mov	sp, r7
 80080a2:	b002      	add	sp, #8
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	46c0      	nop			@ (mov r8, r8)
 80080a8:	45d02000 	.word	0x45d02000

080080ac <LSM6DSO_ACC_Enable>:
 * @brief  Enable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2229      	movs	r2, #41	@ 0x29
 80080b8:	5c9b      	ldrb	r3, [r3, r2]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d101      	bne.n	80080c2 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	e013      	b.n	80080ea <LSM6DSO_ACC_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	331c      	adds	r3, #28
 80080c6:	001a      	movs	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	212b      	movs	r1, #43	@ 0x2b
 80080cc:	5c5b      	ldrb	r3, [r3, r1]
 80080ce:	0019      	movs	r1, r3
 80080d0:	0010      	movs	r0, r2
 80080d2:	f001 f8fa 	bl	80092ca <lsm6dso_xl_data_rate_set>
 80080d6:	1e03      	subs	r3, r0, #0
 80080d8:	d002      	beq.n	80080e0 <LSM6DSO_ACC_Enable+0x34>
  {
    return LSM6DSO_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	425b      	negs	r3, r3
 80080de:	e004      	b.n	80080ea <LSM6DSO_ACC_Enable+0x3e>
  }

  pObj->acc_is_enabled = 1;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2229      	movs	r2, #41	@ 0x29
 80080e4:	2101      	movs	r1, #1
 80080e6:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	0018      	movs	r0, r3
 80080ec:	46bd      	mov	sp, r7
 80080ee:	b002      	add	sp, #8
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <LSM6DSO_ACC_Disable>:
 * @brief  Disable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2229      	movs	r2, #41	@ 0x29
 80080fe:	5c9b      	ldrb	r3, [r3, r2]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	e01d      	b.n	8008144 <LSM6DSO_ACC_Disable+0x52>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	331c      	adds	r3, #28
 800810c:	001a      	movs	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	332b      	adds	r3, #43	@ 0x2b
 8008112:	0019      	movs	r1, r3
 8008114:	0010      	movs	r0, r2
 8008116:	f001 fa23 	bl	8009560 <lsm6dso_xl_data_rate_get>
 800811a:	1e03      	subs	r3, r0, #0
 800811c:	d002      	beq.n	8008124 <LSM6DSO_ACC_Disable+0x32>
  {
    return LSM6DSO_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	425b      	negs	r3, r3
 8008122:	e00f      	b.n	8008144 <LSM6DSO_ACC_Disable+0x52>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	331c      	adds	r3, #28
 8008128:	2100      	movs	r1, #0
 800812a:	0018      	movs	r0, r3
 800812c:	f001 f8cd 	bl	80092ca <lsm6dso_xl_data_rate_set>
 8008130:	1e03      	subs	r3, r0, #0
 8008132:	d002      	beq.n	800813a <LSM6DSO_ACC_Disable+0x48>
  {
    return LSM6DSO_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	425b      	negs	r3, r3
 8008138:	e004      	b.n	8008144 <LSM6DSO_ACC_Disable+0x52>
  }

  pObj->acc_is_enabled = 0;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2229      	movs	r2, #41	@ 0x29
 800813e:	2100      	movs	r1, #0
 8008140:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	0018      	movs	r0, r3
 8008146:	46bd      	mov	sp, r7
 8008148:	b002      	add	sp, #8
 800814a:	bd80      	pop	{r7, pc}

0800814c <LSM6DSO_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	331c      	adds	r3, #28
 800815e:	220b      	movs	r2, #11
 8008160:	18ba      	adds	r2, r7, r2
 8008162:	0011      	movs	r1, r2
 8008164:	0018      	movs	r0, r3
 8008166:	f001 f879 	bl	800925c <lsm6dso_xl_full_scale_get>
 800816a:	1e03      	subs	r3, r0, #0
 800816c:	d002      	beq.n	8008174 <LSM6DSO_ACC_GetSensitivity+0x28>
  {
    return LSM6DSO_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	425b      	negs	r3, r3
 8008172:	e022      	b.n	80081ba <LSM6DSO_ACC_GetSensitivity+0x6e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8008174:	230b      	movs	r3, #11
 8008176:	18fb      	adds	r3, r7, r3
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b03      	cmp	r3, #3
 800817c:	d010      	beq.n	80081a0 <LSM6DSO_ACC_GetSensitivity+0x54>
 800817e:	dc17      	bgt.n	80081b0 <LSM6DSO_ACC_GetSensitivity+0x64>
 8008180:	2b02      	cmp	r3, #2
 8008182:	d009      	beq.n	8008198 <LSM6DSO_ACC_GetSensitivity+0x4c>
 8008184:	dc14      	bgt.n	80081b0 <LSM6DSO_ACC_GetSensitivity+0x64>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <LSM6DSO_ACC_GetSensitivity+0x44>
 800818a:	2b01      	cmp	r3, #1
 800818c:	d00c      	beq.n	80081a8 <LSM6DSO_ACC_GetSensitivity+0x5c>
 800818e:	e00f      	b.n	80081b0 <LSM6DSO_ACC_GetSensitivity+0x64>
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	4a0c      	ldr	r2, [pc, #48]	@ (80081c4 <LSM6DSO_ACC_GetSensitivity+0x78>)
 8008194:	601a      	str	r2, [r3, #0]
      break;
 8008196:	e00f      	b.n	80081b8 <LSM6DSO_ACC_GetSensitivity+0x6c>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	4a0b      	ldr	r2, [pc, #44]	@ (80081c8 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 800819c:	601a      	str	r2, [r3, #0]
      break;
 800819e:	e00b      	b.n	80081b8 <LSM6DSO_ACC_GetSensitivity+0x6c>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	4a0a      	ldr	r2, [pc, #40]	@ (80081cc <LSM6DSO_ACC_GetSensitivity+0x80>)
 80081a4:	601a      	str	r2, [r3, #0]
      break;
 80081a6:	e007      	b.n	80081b8 <LSM6DSO_ACC_GetSensitivity+0x6c>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	4a09      	ldr	r2, [pc, #36]	@ (80081d0 <LSM6DSO_ACC_GetSensitivity+0x84>)
 80081ac:	601a      	str	r2, [r3, #0]
      break;
 80081ae:	e003      	b.n	80081b8 <LSM6DSO_ACC_GetSensitivity+0x6c>

    default:
      ret = LSM6DSO_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	425b      	negs	r3, r3
 80081b4:	60fb      	str	r3, [r7, #12]
      break;
 80081b6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80081b8:	68fb      	ldr	r3, [r7, #12]
}
 80081ba:	0018      	movs	r0, r3
 80081bc:	46bd      	mov	sp, r7
 80081be:	b004      	add	sp, #16
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	46c0      	nop			@ (mov r8, r8)
 80081c4:	3d79db23 	.word	0x3d79db23
 80081c8:	3df9db23 	.word	0x3df9db23
 80081cc:	3e79db23 	.word	0x3e79db23
 80081d0:	3ef9db23 	.word	0x3ef9db23

080081d4 <LSM6DSO_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	331c      	adds	r3, #28
 80081e6:	220b      	movs	r2, #11
 80081e8:	18ba      	adds	r2, r7, r2
 80081ea:	0011      	movs	r1, r2
 80081ec:	0018      	movs	r0, r3
 80081ee:	f001 f9b7 	bl	8009560 <lsm6dso_xl_data_rate_get>
 80081f2:	1e03      	subs	r3, r0, #0
 80081f4:	d002      	beq.n	80081fc <LSM6DSO_ACC_GetOutputDataRate+0x28>
  {
    return LSM6DSO_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	425b      	negs	r3, r3
 80081fa:	e03e      	b.n	800827a <LSM6DSO_ACC_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 80081fc:	230b      	movs	r3, #11
 80081fe:	18fb      	adds	r3, r7, r3
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	2b0b      	cmp	r3, #11
 8008204:	d834      	bhi.n	8008270 <LSM6DSO_ACC_GetOutputDataRate+0x9c>
 8008206:	009a      	lsls	r2, r3, #2
 8008208:	4b1e      	ldr	r3, [pc, #120]	@ (8008284 <LSM6DSO_ACC_GetOutputDataRate+0xb0>)
 800820a:	18d3      	adds	r3, r2, r3
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	469f      	mov	pc, r3
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
      break;
 8008216:	e02f      	b.n	8008278 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	4a1b      	ldr	r2, [pc, #108]	@ (8008288 <LSM6DSO_ACC_GetOutputDataRate+0xb4>)
 800821c:	601a      	str	r2, [r3, #0]
      break;
 800821e:	e02b      	b.n	8008278 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	4a1a      	ldr	r2, [pc, #104]	@ (800828c <LSM6DSO_ACC_GetOutputDataRate+0xb8>)
 8008224:	601a      	str	r2, [r3, #0]
      break;
 8008226:	e027      	b.n	8008278 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	4a19      	ldr	r2, [pc, #100]	@ (8008290 <LSM6DSO_ACC_GetOutputDataRate+0xbc>)
 800822c:	601a      	str	r2, [r3, #0]
      break;
 800822e:	e023      	b.n	8008278 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	4a18      	ldr	r2, [pc, #96]	@ (8008294 <LSM6DSO_ACC_GetOutputDataRate+0xc0>)
 8008234:	601a      	str	r2, [r3, #0]
      break;
 8008236:	e01f      	b.n	8008278 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	4a17      	ldr	r2, [pc, #92]	@ (8008298 <LSM6DSO_ACC_GetOutputDataRate+0xc4>)
 800823c:	601a      	str	r2, [r3, #0]
      break;
 800823e:	e01b      	b.n	8008278 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	4a16      	ldr	r2, [pc, #88]	@ (800829c <LSM6DSO_ACC_GetOutputDataRate+0xc8>)
 8008244:	601a      	str	r2, [r3, #0]
      break;
 8008246:	e017      	b.n	8008278 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	4a15      	ldr	r2, [pc, #84]	@ (80082a0 <LSM6DSO_ACC_GetOutputDataRate+0xcc>)
 800824c:	601a      	str	r2, [r3, #0]
      break;
 800824e:	e013      	b.n	8008278 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	4a14      	ldr	r2, [pc, #80]	@ (80082a4 <LSM6DSO_ACC_GetOutputDataRate+0xd0>)
 8008254:	601a      	str	r2, [r3, #0]
      break;
 8008256:	e00f      	b.n	8008278 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	4a13      	ldr	r2, [pc, #76]	@ (80082a8 <LSM6DSO_ACC_GetOutputDataRate+0xd4>)
 800825c:	601a      	str	r2, [r3, #0]
      break;
 800825e:	e00b      	b.n	8008278 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	4a12      	ldr	r2, [pc, #72]	@ (80082ac <LSM6DSO_ACC_GetOutputDataRate+0xd8>)
 8008264:	601a      	str	r2, [r3, #0]
      break;
 8008266:	e007      	b.n	8008278 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	4a11      	ldr	r2, [pc, #68]	@ (80082b0 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800826c:	601a      	str	r2, [r3, #0]
      break;
 800826e:	e003      	b.n	8008278 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    default:
      ret = LSM6DSO_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	425b      	negs	r3, r3
 8008274:	60fb      	str	r3, [r7, #12]
      break;
 8008276:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8008278:	68fb      	ldr	r3, [r7, #12]
}
 800827a:	0018      	movs	r0, r3
 800827c:	46bd      	mov	sp, r7
 800827e:	b004      	add	sp, #16
 8008280:	bd80      	pop	{r7, pc}
 8008282:	46c0      	nop			@ (mov r8, r8)
 8008284:	080149fc 	.word	0x080149fc
 8008288:	3fcccccd 	.word	0x3fcccccd
 800828c:	41480000 	.word	0x41480000
 8008290:	41d00000 	.word	0x41d00000
 8008294:	42500000 	.word	0x42500000
 8008298:	42d00000 	.word	0x42d00000
 800829c:	43500000 	.word	0x43500000
 80082a0:	43d08000 	.word	0x43d08000
 80082a4:	44504000 	.word	0x44504000
 80082a8:	44d06000 	.word	0x44d06000
 80082ac:	45505000 	.word	0x45505000
 80082b0:	45d05800 	.word	0x45d05800

080082b4 <LSM6DSO_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	0018      	movs	r0, r3
 80082c6:	f000 f805 	bl	80082d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80082ca:	0003      	movs	r3, r0
}
 80082cc:	0018      	movs	r0, r3
 80082ce:	46bd      	mov	sp, r7
 80082d0:	b002      	add	sp, #8
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the accelerometer operating mode
 * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80082d4:	b590      	push	{r4, r7, lr}
 80082d6:	b08d      	sub	sp, #52	@ 0x34
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	1dfb      	adds	r3, r7, #7
 80082e0:	701a      	strb	r2, [r3, #0]
  int32_t ret = LSM6DSO_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  switch (Mode)
 80082ea:	1dfb      	adds	r3, r7, #7
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d100      	bne.n	80082f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20>
 80082f2:	e0dd      	b.n	80084b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1dc>
 80082f4:	dd00      	ble.n	80082f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x24>
 80082f6:	e155      	b.n	80085a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d0>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d100      	bne.n	8008302 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e>
 8008300:	e06b      	b.n	80083da <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x106>
 8008302:	e14f      	b.n	80085a4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d0>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	331c      	adds	r3, #28
 8008308:	0018      	movs	r0, r3
 800830a:	2324      	movs	r3, #36	@ 0x24
 800830c:	18fa      	adds	r2, r7, r3
 800830e:	2301      	movs	r3, #1
 8008310:	2114      	movs	r1, #20
 8008312:	f000 ff31 	bl	8009178 <lsm6dso_read_reg>
 8008316:	1e03      	subs	r3, r0, #0
 8008318:	d002      	beq.n	8008320 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4c>
      {
        return LSM6DSO_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	425b      	negs	r3, r3
 800831e:	e162      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val1.xl_ulp_en != 0U)
 8008320:	2324      	movs	r3, #36	@ 0x24
 8008322:	18fb      	adds	r3, r7, r3
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	227f      	movs	r2, #127	@ 0x7f
 8008328:	4393      	bics	r3, r2
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	d022      	beq.n	8008376 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2229      	movs	r2, #41	@ 0x29
 8008334:	5c9b      	ldrb	r3, [r3, r2]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d10a      	bne.n	8008350 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	331c      	adds	r3, #28
 800833e:	2100      	movs	r1, #0
 8008340:	0018      	movs	r0, r3
 8008342:	f000 ffc2 	bl	80092ca <lsm6dso_xl_data_rate_set>
 8008346:	1e03      	subs	r3, r0, #0
 8008348:	d002      	beq.n	8008350 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
          {
            return LSM6DSO_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	425b      	negs	r3, r3
 800834e:	e14a      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
          }
        }

        val1.xl_ulp_en = 0;
 8008350:	2424      	movs	r4, #36	@ 0x24
 8008352:	193b      	adds	r3, r7, r4
 8008354:	781a      	ldrb	r2, [r3, #0]
 8008356:	217f      	movs	r1, #127	@ 0x7f
 8008358:	400a      	ands	r2, r1
 800835a:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	331c      	adds	r3, #28
 8008360:	0018      	movs	r0, r3
 8008362:	193a      	adds	r2, r7, r4
 8008364:	2301      	movs	r3, #1
 8008366:	2114      	movs	r1, #20
 8008368:	f000 ff27 	bl	80091ba <lsm6dso_write_reg>
 800836c:	1e03      	subs	r3, r0, #0
 800836e:	d002      	beq.n	8008376 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
        {
          return LSM6DSO_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	425b      	negs	r3, r3
 8008374:	e137      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	331c      	adds	r3, #28
 800837a:	0018      	movs	r0, r3
 800837c:	2320      	movs	r3, #32
 800837e:	18fa      	adds	r2, r7, r3
 8008380:	2301      	movs	r3, #1
 8008382:	2115      	movs	r1, #21
 8008384:	f000 fef8 	bl	8009178 <lsm6dso_read_reg>
 8008388:	1e03      	subs	r3, r0, #0
 800838a:	d002      	beq.n	8008392 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xbe>
      {
        return LSM6DSO_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	425b      	negs	r3, r3
 8008390:	e129      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val2.xl_hm_mode != 0U)
 8008392:	2420      	movs	r4, #32
 8008394:	193b      	adds	r3, r7, r4
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2210      	movs	r2, #16
 800839a:	4013      	ands	r3, r2
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d011      	beq.n	80083c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf2>
      {
        val2.xl_hm_mode = 0U;
 80083a2:	193b      	adds	r3, r7, r4
 80083a4:	781a      	ldrb	r2, [r3, #0]
 80083a6:	2110      	movs	r1, #16
 80083a8:	438a      	bics	r2, r1
 80083aa:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	331c      	adds	r3, #28
 80083b0:	0018      	movs	r0, r3
 80083b2:	193a      	adds	r2, r7, r4
 80083b4:	2301      	movs	r3, #1
 80083b6:	2115      	movs	r1, #21
 80083b8:	f000 feff 	bl	80091ba <lsm6dso_write_reg>
 80083bc:	1e03      	subs	r3, r0, #0
 80083be:	d002      	beq.n	80083c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf2>
        {
          return LSM6DSO_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	425b      	negs	r3, r3
 80083c4:	e10f      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80083c6:	498a      	ldr	r1, [pc, #552]	@ (80085f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31c>)
 80083c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083ca:	f7f7 ff8d 	bl	80002e8 <__aeabi_fcmplt>
 80083ce:	1e03      	subs	r3, r0, #0
 80083d0:	d100      	bne.n	80083d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x100>
      {
        newOdr = 12.5f;
      }
      break;
 80083d2:	e0eb      	b.n	80085ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
        newOdr = 12.5f;
 80083d4:	4b86      	ldr	r3, [pc, #536]	@ (80085f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31c>)
 80083d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083d8:	e0e8      	b.n	80085ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	331c      	adds	r3, #28
 80083de:	0018      	movs	r0, r3
 80083e0:	231c      	movs	r3, #28
 80083e2:	18fa      	adds	r2, r7, r3
 80083e4:	2301      	movs	r3, #1
 80083e6:	2114      	movs	r1, #20
 80083e8:	f000 fec6 	bl	8009178 <lsm6dso_read_reg>
 80083ec:	1e03      	subs	r3, r0, #0
 80083ee:	d002      	beq.n	80083f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x122>
      {
        return LSM6DSO_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	425b      	negs	r3, r3
 80083f4:	e0f7      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val1.xl_ulp_en != 0U)
 80083f6:	231c      	movs	r3, #28
 80083f8:	18fb      	adds	r3, r7, r3
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	227f      	movs	r2, #127	@ 0x7f
 80083fe:	4393      	bics	r3, r2
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d022      	beq.n	800844c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x178>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2229      	movs	r2, #41	@ 0x29
 800840a:	5c9b      	ldrb	r3, [r3, r2]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d10a      	bne.n	8008426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x152>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	331c      	adds	r3, #28
 8008414:	2100      	movs	r1, #0
 8008416:	0018      	movs	r0, r3
 8008418:	f000 ff57 	bl	80092ca <lsm6dso_xl_data_rate_set>
 800841c:	1e03      	subs	r3, r0, #0
 800841e:	d002      	beq.n	8008426 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x152>
          {
            return LSM6DSO_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	425b      	negs	r3, r3
 8008424:	e0df      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
          }
        }

        val1.xl_ulp_en = 0;
 8008426:	241c      	movs	r4, #28
 8008428:	193b      	adds	r3, r7, r4
 800842a:	781a      	ldrb	r2, [r3, #0]
 800842c:	217f      	movs	r1, #127	@ 0x7f
 800842e:	400a      	ands	r2, r1
 8008430:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	331c      	adds	r3, #28
 8008436:	0018      	movs	r0, r3
 8008438:	193a      	adds	r2, r7, r4
 800843a:	2301      	movs	r3, #1
 800843c:	2114      	movs	r1, #20
 800843e:	f000 febc 	bl	80091ba <lsm6dso_write_reg>
 8008442:	1e03      	subs	r3, r0, #0
 8008444:	d002      	beq.n	800844c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x178>
        {
          return LSM6DSO_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	425b      	negs	r3, r3
 800844a:	e0cc      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	331c      	adds	r3, #28
 8008450:	0018      	movs	r0, r3
 8008452:	2318      	movs	r3, #24
 8008454:	18fa      	adds	r2, r7, r3
 8008456:	2301      	movs	r3, #1
 8008458:	2115      	movs	r1, #21
 800845a:	f000 fe8d 	bl	8009178 <lsm6dso_read_reg>
 800845e:	1e03      	subs	r3, r0, #0
 8008460:	d002      	beq.n	8008468 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x194>
      {
        return LSM6DSO_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	425b      	negs	r3, r3
 8008466:	e0be      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val2.xl_hm_mode == 0U)
 8008468:	2418      	movs	r4, #24
 800846a:	193b      	adds	r3, r7, r4
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	2210      	movs	r2, #16
 8008470:	4013      	ands	r3, r2
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b00      	cmp	r3, #0
 8008476:	d111      	bne.n	800849c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1c8>
      {
        val2.xl_hm_mode = 1U;
 8008478:	193b      	adds	r3, r7, r4
 800847a:	781a      	ldrb	r2, [r3, #0]
 800847c:	2110      	movs	r1, #16
 800847e:	430a      	orrs	r2, r1
 8008480:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	331c      	adds	r3, #28
 8008486:	0018      	movs	r0, r3
 8008488:	193a      	adds	r2, r7, r4
 800848a:	2301      	movs	r3, #1
 800848c:	2115      	movs	r1, #21
 800848e:	f000 fe94 	bl	80091ba <lsm6dso_write_reg>
 8008492:	1e03      	subs	r3, r0, #0
 8008494:	d002      	beq.n	800849c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1c8>
        {
          return LSM6DSO_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	425b      	negs	r3, r3
 800849a:	e0a4      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800849c:	4955      	ldr	r1, [pc, #340]	@ (80085f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 800849e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084a0:	f7f7 ff36 	bl	8000310 <__aeabi_fcmpgt>
 80084a4:	1e03      	subs	r3, r0, #0
 80084a6:	d100      	bne.n	80084aa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d6>
      {
        newOdr = 208.0f;
      }
      break;
 80084a8:	e080      	b.n	80085ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
        newOdr = 208.0f;
 80084aa:	4b52      	ldr	r3, [pc, #328]	@ (80085f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 80084ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084ae:	e07d      	b.n	80085ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	331c      	adds	r3, #28
 80084b4:	0018      	movs	r0, r3
 80084b6:	2310      	movs	r3, #16
 80084b8:	18fa      	adds	r2, r7, r3
 80084ba:	2301      	movs	r3, #1
 80084bc:	2115      	movs	r1, #21
 80084be:	f000 fe5b 	bl	8009178 <lsm6dso_read_reg>
 80084c2:	1e03      	subs	r3, r0, #0
 80084c4:	d002      	beq.n	80084cc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f8>
      {
        return LSM6DSO_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	425b      	negs	r3, r3
 80084ca:	e08c      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val2.xl_hm_mode != 0U)
 80084cc:	2410      	movs	r4, #16
 80084ce:	193b      	adds	r3, r7, r4
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	2210      	movs	r2, #16
 80084d4:	4013      	ands	r3, r2
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d011      	beq.n	8008500 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x22c>
      {
        val2.xl_hm_mode = 0U;
 80084dc:	193b      	adds	r3, r7, r4
 80084de:	781a      	ldrb	r2, [r3, #0]
 80084e0:	2110      	movs	r1, #16
 80084e2:	438a      	bics	r2, r1
 80084e4:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	331c      	adds	r3, #28
 80084ea:	0018      	movs	r0, r3
 80084ec:	193a      	adds	r2, r7, r4
 80084ee:	2301      	movs	r3, #1
 80084f0:	2115      	movs	r1, #21
 80084f2:	f000 fe62 	bl	80091ba <lsm6dso_write_reg>
 80084f6:	1e03      	subs	r3, r0, #0
 80084f8:	d002      	beq.n	8008500 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x22c>
        {
          return LSM6DSO_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	425b      	negs	r3, r3
 80084fe:	e072      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	222a      	movs	r2, #42	@ 0x2a
 8008504:	5c9b      	ldrb	r3, [r3, r2]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d108      	bne.n	800851c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x248>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	0018      	movs	r0, r3
 800850e:	f000 f982 	bl	8008816 <LSM6DSO_GYRO_Disable>
 8008512:	1e03      	subs	r3, r0, #0
 8008514:	d002      	beq.n	800851c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x248>
        {
          return LSM6DSO_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	425b      	negs	r3, r3
 800851a:	e064      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	331c      	adds	r3, #28
 8008520:	0018      	movs	r0, r3
 8008522:	2314      	movs	r3, #20
 8008524:	18fa      	adds	r2, r7, r3
 8008526:	2301      	movs	r3, #1
 8008528:	2114      	movs	r1, #20
 800852a:	f000 fe25 	bl	8009178 <lsm6dso_read_reg>
 800852e:	1e03      	subs	r3, r0, #0
 8008530:	d002      	beq.n	8008538 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x264>
      {
        return LSM6DSO_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	425b      	negs	r3, r3
 8008536:	e056      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val1.xl_ulp_en == 0U)
 8008538:	2314      	movs	r3, #20
 800853a:	18fb      	adds	r3, r7, r3
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	227f      	movs	r2, #127	@ 0x7f
 8008540:	4393      	bics	r3, r2
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	d123      	bne.n	8008590 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2bc>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2229      	movs	r2, #41	@ 0x29
 800854c:	5c9b      	ldrb	r3, [r3, r2]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d10a      	bne.n	8008568 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x294>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	331c      	adds	r3, #28
 8008556:	2100      	movs	r1, #0
 8008558:	0018      	movs	r0, r3
 800855a:	f000 feb6 	bl	80092ca <lsm6dso_xl_data_rate_set>
 800855e:	1e03      	subs	r3, r0, #0
 8008560:	d002      	beq.n	8008568 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x294>
          {
            return LSM6DSO_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	425b      	negs	r3, r3
 8008566:	e03e      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
          }
        }

        val1.xl_ulp_en = 1U;
 8008568:	2414      	movs	r4, #20
 800856a:	193b      	adds	r3, r7, r4
 800856c:	781a      	ldrb	r2, [r3, #0]
 800856e:	2180      	movs	r1, #128	@ 0x80
 8008570:	4249      	negs	r1, r1
 8008572:	430a      	orrs	r2, r1
 8008574:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	331c      	adds	r3, #28
 800857a:	0018      	movs	r0, r3
 800857c:	193a      	adds	r2, r7, r4
 800857e:	2301      	movs	r3, #1
 8008580:	2114      	movs	r1, #20
 8008582:	f000 fe1a 	bl	80091ba <lsm6dso_write_reg>
 8008586:	1e03      	subs	r3, r0, #0
 8008588:	d002      	beq.n	8008590 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2bc>
        {
          return LSM6DSO_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	425b      	negs	r3, r3
 800858e:	e02a      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8008590:	4918      	ldr	r1, [pc, #96]	@ (80085f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 8008592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008594:	f7f7 febc 	bl	8000310 <__aeabi_fcmpgt>
 8008598:	1e03      	subs	r3, r0, #0
 800859a:	d100      	bne.n	800859e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ca>
      {
        newOdr = 208.0f;
      }
      break;
 800859c:	e006      	b.n	80085ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
        newOdr = 208.0f;
 800859e:	4b15      	ldr	r3, [pc, #84]	@ (80085f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 80085a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085a2:	e003      	b.n	80085ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
    }
    default:
      ret = LSM6DSO_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	425b      	negs	r3, r3
 80085a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80085aa:	46c0      	nop			@ (mov r8, r8)
  }

  if(ret == LSM6DSO_ERROR)
 80085ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ae:	3301      	adds	r3, #1
 80085b0:	d102      	bne.n	80085b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e4>
  {
    return LSM6DSO_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	425b      	negs	r3, r3
 80085b6:	e016      	b.n	80085e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
  }

  if (pObj->acc_is_enabled == 1U)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2229      	movs	r2, #41	@ 0x29
 80085bc:	5c9b      	ldrb	r3, [r3, r2]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d108      	bne.n	80085d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x300>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80085c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	1c11      	adds	r1, r2, #0
 80085c8:	0018      	movs	r0, r3
 80085ca:	f000 fbc1 	bl	8008d50 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 80085ce:	0003      	movs	r3, r0
 80085d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085d2:	e007      	b.n	80085e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x310>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80085d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	1c11      	adds	r1, r2, #0
 80085da:	0018      	movs	r0, r3
 80085dc:	f000 fc38 	bl	8008e50 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 80085e0:	0003      	movs	r3, r0
 80085e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  return ret;
 80085e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80085e6:	0018      	movs	r0, r3
 80085e8:	46bd      	mov	sp, r7
 80085ea:	b00d      	add	sp, #52	@ 0x34
 80085ec:	bd90      	pop	{r4, r7, pc}
 80085ee:	46c0      	nop			@ (mov r8, r8)
 80085f0:	41480000 	.word	0x41480000
 80085f4:	43500000 	.word	0x43500000

080085f8 <LSM6DSO_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	331c      	adds	r3, #28
 800860a:	220b      	movs	r2, #11
 800860c:	18ba      	adds	r2, r7, r2
 800860e:	0011      	movs	r1, r2
 8008610:	0018      	movs	r0, r3
 8008612:	f000 fe23 	bl	800925c <lsm6dso_xl_full_scale_get>
 8008616:	1e03      	subs	r3, r0, #0
 8008618:	d002      	beq.n	8008620 <LSM6DSO_ACC_GetFullScale+0x28>
  {
    return LSM6DSO_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	425b      	negs	r3, r3
 800861e:	e022      	b.n	8008666 <LSM6DSO_ACC_GetFullScale+0x6e>
  }

  switch (fs_low_level)
 8008620:	230b      	movs	r3, #11
 8008622:	18fb      	adds	r3, r7, r3
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	2b03      	cmp	r3, #3
 8008628:	d010      	beq.n	800864c <LSM6DSO_ACC_GetFullScale+0x54>
 800862a:	dc17      	bgt.n	800865c <LSM6DSO_ACC_GetFullScale+0x64>
 800862c:	2b02      	cmp	r3, #2
 800862e:	d009      	beq.n	8008644 <LSM6DSO_ACC_GetFullScale+0x4c>
 8008630:	dc14      	bgt.n	800865c <LSM6DSO_ACC_GetFullScale+0x64>
 8008632:	2b00      	cmp	r3, #0
 8008634:	d002      	beq.n	800863c <LSM6DSO_ACC_GetFullScale+0x44>
 8008636:	2b01      	cmp	r3, #1
 8008638:	d00c      	beq.n	8008654 <LSM6DSO_ACC_GetFullScale+0x5c>
 800863a:	e00f      	b.n	800865c <LSM6DSO_ACC_GetFullScale+0x64>
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2202      	movs	r2, #2
 8008640:	601a      	str	r2, [r3, #0]
      break;
 8008642:	e00f      	b.n	8008664 <LSM6DSO_ACC_GetFullScale+0x6c>

    case LSM6DSO_4g:
      *FullScale =  4;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	2204      	movs	r2, #4
 8008648:	601a      	str	r2, [r3, #0]
      break;
 800864a:	e00b      	b.n	8008664 <LSM6DSO_ACC_GetFullScale+0x6c>

    case LSM6DSO_8g:
      *FullScale =  8;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2208      	movs	r2, #8
 8008650:	601a      	str	r2, [r3, #0]
      break;
 8008652:	e007      	b.n	8008664 <LSM6DSO_ACC_GetFullScale+0x6c>

    case LSM6DSO_16g:
      *FullScale = 16;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	2210      	movs	r2, #16
 8008658:	601a      	str	r2, [r3, #0]
      break;
 800865a:	e003      	b.n	8008664 <LSM6DSO_ACC_GetFullScale+0x6c>

    default:
      ret = LSM6DSO_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	425b      	negs	r3, r3
 8008660:	60fb      	str	r3, [r7, #12]
      break;
 8008662:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8008664:	68fb      	ldr	r3, [r7, #12]
}
 8008666:	0018      	movs	r0, r3
 8008668:	46bd      	mov	sp, r7
 800866a:	b004      	add	sp, #16
 800866c:	bd80      	pop	{r7, pc}

0800866e <LSM6DSO_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2b02      	cmp	r3, #2
 800867c:	dd0b      	ble.n	8008696 <LSM6DSO_ACC_SetFullScale+0x28>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b04      	cmp	r3, #4
 8008682:	dd06      	ble.n	8008692 <LSM6DSO_ACC_SetFullScale+0x24>
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	2b08      	cmp	r3, #8
 8008688:	dc01      	bgt.n	800868e <LSM6DSO_ACC_SetFullScale+0x20>
 800868a:	2303      	movs	r3, #3
 800868c:	e004      	b.n	8008698 <LSM6DSO_ACC_SetFullScale+0x2a>
 800868e:	2301      	movs	r3, #1
 8008690:	e002      	b.n	8008698 <LSM6DSO_ACC_SetFullScale+0x2a>
 8008692:	2302      	movs	r3, #2
 8008694:	e000      	b.n	8008698 <LSM6DSO_ACC_SetFullScale+0x2a>
 8008696:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8008698:	210f      	movs	r1, #15
 800869a:	187a      	adds	r2, r7, r1
 800869c:	7013      	strb	r3, [r2, #0]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	331c      	adds	r3, #28
 80086a2:	001a      	movs	r2, r3
 80086a4:	187b      	adds	r3, r7, r1
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	0019      	movs	r1, r3
 80086aa:	0010      	movs	r0, r2
 80086ac:	f000 fda6 	bl	80091fc <lsm6dso_xl_full_scale_set>
 80086b0:	1e03      	subs	r3, r0, #0
 80086b2:	d002      	beq.n	80086ba <LSM6DSO_ACC_SetFullScale+0x4c>
  {
    return LSM6DSO_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	425b      	negs	r3, r3
 80086b8:	e000      	b.n	80086bc <LSM6DSO_ACC_SetFullScale+0x4e>
  }

  return LSM6DSO_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	0018      	movs	r0, r3
 80086be:	46bd      	mov	sp, r7
 80086c0:	b004      	add	sp, #16
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <LSM6DSO_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	331c      	adds	r3, #28
 80086d2:	2208      	movs	r2, #8
 80086d4:	18ba      	adds	r2, r7, r2
 80086d6:	0011      	movs	r1, r2
 80086d8:	0018      	movs	r0, r3
 80086da:	f001 f9e1 	bl	8009aa0 <lsm6dso_acceleration_raw_get>
 80086de:	1e03      	subs	r3, r0, #0
 80086e0:	d002      	beq.n	80086e8 <LSM6DSO_ACC_GetAxesRaw+0x24>
  {
    return LSM6DSO_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	425b      	negs	r3, r3
 80086e6:	e010      	b.n	800870a <LSM6DSO_ACC_GetAxesRaw+0x46>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80086e8:	2108      	movs	r1, #8
 80086ea:	187b      	adds	r3, r7, r1
 80086ec:	2200      	movs	r2, #0
 80086ee:	5e9a      	ldrsh	r2, [r3, r2]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80086f4:	187b      	adds	r3, r7, r1
 80086f6:	2202      	movs	r2, #2
 80086f8:	5e9a      	ldrsh	r2, [r3, r2]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80086fe:	187b      	adds	r3, r7, r1
 8008700:	2204      	movs	r2, #4
 8008702:	5e9a      	ldrsh	r2, [r3, r2]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	0018      	movs	r0, r3
 800870c:	46bd      	mov	sp, r7
 800870e:	b004      	add	sp, #16
 8008710:	bd80      	pop	{r7, pc}

08008712 <LSM6DSO_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8008712:	b590      	push	{r4, r7, lr}
 8008714:	b087      	sub	sp, #28
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800871c:	2300      	movs	r3, #0
 800871e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	331c      	adds	r3, #28
 8008724:	2210      	movs	r2, #16
 8008726:	18ba      	adds	r2, r7, r2
 8008728:	0011      	movs	r1, r2
 800872a:	0018      	movs	r0, r3
 800872c:	f001 f9b8 	bl	8009aa0 <lsm6dso_acceleration_raw_get>
 8008730:	1e03      	subs	r3, r0, #0
 8008732:	d002      	beq.n	800873a <LSM6DSO_ACC_GetAxes+0x28>
  {
    return LSM6DSO_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	425b      	negs	r3, r3
 8008738:	e046      	b.n	80087c8 <LSM6DSO_ACC_GetAxes+0xb6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 800873a:	230c      	movs	r3, #12
 800873c:	18fa      	adds	r2, r7, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	0011      	movs	r1, r2
 8008742:	0018      	movs	r0, r3
 8008744:	f7ff fd02 	bl	800814c <LSM6DSO_ACC_GetSensitivity>
 8008748:	1e03      	subs	r3, r0, #0
 800874a:	d002      	beq.n	8008752 <LSM6DSO_ACC_GetAxes+0x40>
  {
    return LSM6DSO_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	425b      	negs	r3, r3
 8008750:	e03a      	b.n	80087c8 <LSM6DSO_ACC_GetAxes+0xb6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8008752:	2410      	movs	r4, #16
 8008754:	193b      	adds	r3, r7, r4
 8008756:	2200      	movs	r2, #0
 8008758:	5e9b      	ldrsh	r3, [r3, r2]
 800875a:	0018      	movs	r0, r3
 800875c:	f7f8 fd78 	bl	8001250 <__aeabi_i2f>
 8008760:	1c02      	adds	r2, r0, #0
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	1c19      	adds	r1, r3, #0
 8008766:	1c10      	adds	r0, r2, #0
 8008768:	f7f8 fa70 	bl	8000c4c <__aeabi_fmul>
 800876c:	1c03      	adds	r3, r0, #0
 800876e:	1c18      	adds	r0, r3, #0
 8008770:	f7f8 fd4e 	bl	8001210 <__aeabi_f2iz>
 8008774:	0002      	movs	r2, r0
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800877a:	193b      	adds	r3, r7, r4
 800877c:	2202      	movs	r2, #2
 800877e:	5e9b      	ldrsh	r3, [r3, r2]
 8008780:	0018      	movs	r0, r3
 8008782:	f7f8 fd65 	bl	8001250 <__aeabi_i2f>
 8008786:	1c02      	adds	r2, r0, #0
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	1c19      	adds	r1, r3, #0
 800878c:	1c10      	adds	r0, r2, #0
 800878e:	f7f8 fa5d 	bl	8000c4c <__aeabi_fmul>
 8008792:	1c03      	adds	r3, r0, #0
 8008794:	1c18      	adds	r0, r3, #0
 8008796:	f7f8 fd3b 	bl	8001210 <__aeabi_f2iz>
 800879a:	0002      	movs	r2, r0
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80087a0:	193b      	adds	r3, r7, r4
 80087a2:	2204      	movs	r2, #4
 80087a4:	5e9b      	ldrsh	r3, [r3, r2]
 80087a6:	0018      	movs	r0, r3
 80087a8:	f7f8 fd52 	bl	8001250 <__aeabi_i2f>
 80087ac:	1c02      	adds	r2, r0, #0
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	1c19      	adds	r1, r3, #0
 80087b2:	1c10      	adds	r0, r2, #0
 80087b4:	f7f8 fa4a 	bl	8000c4c <__aeabi_fmul>
 80087b8:	1c03      	adds	r3, r0, #0
 80087ba:	1c18      	adds	r0, r3, #0
 80087bc:	f7f8 fd28 	bl	8001210 <__aeabi_f2iz>
 80087c0:	0002      	movs	r2, r0
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	0018      	movs	r0, r3
 80087ca:	46bd      	mov	sp, r7
 80087cc:	b007      	add	sp, #28
 80087ce:	bd90      	pop	{r4, r7, pc}

080087d0 <LSM6DSO_GYRO_Enable>:
 * @brief  Enable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	222a      	movs	r2, #42	@ 0x2a
 80087dc:	5c9b      	ldrb	r3, [r3, r2]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	e013      	b.n	800880e <LSM6DSO_GYRO_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	331c      	adds	r3, #28
 80087ea:	001a      	movs	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	212c      	movs	r1, #44	@ 0x2c
 80087f0:	5c5b      	ldrb	r3, [r3, r1]
 80087f2:	0019      	movs	r1, r3
 80087f4:	0010      	movs	r0, r2
 80087f6:	f000 ff73 	bl	80096e0 <lsm6dso_gy_data_rate_set>
 80087fa:	1e03      	subs	r3, r0, #0
 80087fc:	d002      	beq.n	8008804 <LSM6DSO_GYRO_Enable+0x34>
  {
    return LSM6DSO_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	425b      	negs	r3, r3
 8008802:	e004      	b.n	800880e <LSM6DSO_GYRO_Enable+0x3e>
  }

  pObj->gyro_is_enabled = 1;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	222a      	movs	r2, #42	@ 0x2a
 8008808:	2101      	movs	r1, #1
 800880a:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	0018      	movs	r0, r3
 8008810:	46bd      	mov	sp, r7
 8008812:	b002      	add	sp, #8
 8008814:	bd80      	pop	{r7, pc}

08008816 <LSM6DSO_GYRO_Disable>:
 * @brief  Disable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	222a      	movs	r2, #42	@ 0x2a
 8008822:	5c9b      	ldrb	r3, [r3, r2]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	e01d      	b.n	8008868 <LSM6DSO_GYRO_Disable+0x52>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	331c      	adds	r3, #28
 8008830:	001a      	movs	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	332c      	adds	r3, #44	@ 0x2c
 8008836:	0019      	movs	r1, r3
 8008838:	0010      	movs	r0, r2
 800883a:	f001 f89d 	bl	8009978 <lsm6dso_gy_data_rate_get>
 800883e:	1e03      	subs	r3, r0, #0
 8008840:	d002      	beq.n	8008848 <LSM6DSO_GYRO_Disable+0x32>
  {
    return LSM6DSO_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	425b      	negs	r3, r3
 8008846:	e00f      	b.n	8008868 <LSM6DSO_GYRO_Disable+0x52>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	331c      	adds	r3, #28
 800884c:	2100      	movs	r1, #0
 800884e:	0018      	movs	r0, r3
 8008850:	f000 ff46 	bl	80096e0 <lsm6dso_gy_data_rate_set>
 8008854:	1e03      	subs	r3, r0, #0
 8008856:	d002      	beq.n	800885e <LSM6DSO_GYRO_Disable+0x48>
  {
    return LSM6DSO_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	425b      	negs	r3, r3
 800885c:	e004      	b.n	8008868 <LSM6DSO_GYRO_Disable+0x52>
  }

  pObj->gyro_is_enabled = 0;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	222a      	movs	r2, #42	@ 0x2a
 8008862:	2100      	movs	r1, #0
 8008864:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	0018      	movs	r0, r3
 800886a:	46bd      	mov	sp, r7
 800886c:	b002      	add	sp, #8
 800886e:	bd80      	pop	{r7, pc}

08008870 <LSM6DSO_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	331c      	adds	r3, #28
 8008882:	220b      	movs	r2, #11
 8008884:	18ba      	adds	r2, r7, r2
 8008886:	0011      	movs	r1, r2
 8008888:	0018      	movs	r0, r3
 800888a:	f000 feef 	bl	800966c <lsm6dso_gy_full_scale_get>
 800888e:	1e03      	subs	r3, r0, #0
 8008890:	d002      	beq.n	8008898 <LSM6DSO_GYRO_GetSensitivity+0x28>
  {
    return LSM6DSO_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	425b      	negs	r3, r3
 8008896:	e022      	b.n	80088de <LSM6DSO_GYRO_GetSensitivity+0x6e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8008898:	230b      	movs	r3, #11
 800889a:	18fb      	adds	r3, r7, r3
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2b06      	cmp	r3, #6
 80088a0:	d818      	bhi.n	80088d4 <LSM6DSO_GYRO_GetSensitivity+0x64>
 80088a2:	009a      	lsls	r2, r3, #2
 80088a4:	4b10      	ldr	r3, [pc, #64]	@ (80088e8 <LSM6DSO_GYRO_GetSensitivity+0x78>)
 80088a6:	18d3      	adds	r3, r2, r3
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	469f      	mov	pc, r3
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	4a0f      	ldr	r2, [pc, #60]	@ (80088ec <LSM6DSO_GYRO_GetSensitivity+0x7c>)
 80088b0:	601a      	str	r2, [r3, #0]
      break;
 80088b2:	e013      	b.n	80088dc <LSM6DSO_GYRO_GetSensitivity+0x6c>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	4a0e      	ldr	r2, [pc, #56]	@ (80088f0 <LSM6DSO_GYRO_GetSensitivity+0x80>)
 80088b8:	601a      	str	r2, [r3, #0]
      break;
 80088ba:	e00f      	b.n	80088dc <LSM6DSO_GYRO_GetSensitivity+0x6c>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	4a0d      	ldr	r2, [pc, #52]	@ (80088f4 <LSM6DSO_GYRO_GetSensitivity+0x84>)
 80088c0:	601a      	str	r2, [r3, #0]
      break;
 80088c2:	e00b      	b.n	80088dc <LSM6DSO_GYRO_GetSensitivity+0x6c>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	4a0c      	ldr	r2, [pc, #48]	@ (80088f8 <LSM6DSO_GYRO_GetSensitivity+0x88>)
 80088c8:	601a      	str	r2, [r3, #0]
      break;
 80088ca:	e007      	b.n	80088dc <LSM6DSO_GYRO_GetSensitivity+0x6c>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	4a0b      	ldr	r2, [pc, #44]	@ (80088fc <LSM6DSO_GYRO_GetSensitivity+0x8c>)
 80088d0:	601a      	str	r2, [r3, #0]
      break;
 80088d2:	e003      	b.n	80088dc <LSM6DSO_GYRO_GetSensitivity+0x6c>

    default:
      ret = LSM6DSO_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	425b      	negs	r3, r3
 80088d8:	60fb      	str	r3, [r7, #12]
      break;
 80088da:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80088dc:	68fb      	ldr	r3, [r7, #12]
}
 80088de:	0018      	movs	r0, r3
 80088e0:	46bd      	mov	sp, r7
 80088e2:	b004      	add	sp, #16
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	46c0      	nop			@ (mov r8, r8)
 80088e8:	08014a2c 	.word	0x08014a2c
 80088ec:	408c0000 	.word	0x408c0000
 80088f0:	410c0000 	.word	0x410c0000
 80088f4:	418c0000 	.word	0x418c0000
 80088f8:	420c0000 	.word	0x420c0000
 80088fc:	428c0000 	.word	0x428c0000

08008900 <LSM6DSO_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	331c      	adds	r3, #28
 8008912:	220b      	movs	r2, #11
 8008914:	18ba      	adds	r2, r7, r2
 8008916:	0011      	movs	r1, r2
 8008918:	0018      	movs	r0, r3
 800891a:	f001 f82d 	bl	8009978 <lsm6dso_gy_data_rate_get>
 800891e:	1e03      	subs	r3, r0, #0
 8008920:	d002      	beq.n	8008928 <LSM6DSO_GYRO_GetOutputDataRate+0x28>
  {
    return LSM6DSO_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	425b      	negs	r3, r3
 8008926:	e03a      	b.n	800899e <LSM6DSO_GYRO_GetOutputDataRate+0x9e>
  }

  switch (odr_low_level)
 8008928:	230b      	movs	r3, #11
 800892a:	18fb      	adds	r3, r7, r3
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b0a      	cmp	r3, #10
 8008930:	d830      	bhi.n	8008994 <LSM6DSO_GYRO_GetOutputDataRate+0x94>
 8008932:	009a      	lsls	r2, r3, #2
 8008934:	4b1c      	ldr	r3, [pc, #112]	@ (80089a8 <LSM6DSO_GYRO_GetOutputDataRate+0xa8>)
 8008936:	18d3      	adds	r3, r2, r3
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	469f      	mov	pc, r3
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]
      break;
 8008942:	e02b      	b.n	800899c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	4a19      	ldr	r2, [pc, #100]	@ (80089ac <LSM6DSO_GYRO_GetOutputDataRate+0xac>)
 8008948:	601a      	str	r2, [r3, #0]
      break;
 800894a:	e027      	b.n	800899c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	4a18      	ldr	r2, [pc, #96]	@ (80089b0 <LSM6DSO_GYRO_GetOutputDataRate+0xb0>)
 8008950:	601a      	str	r2, [r3, #0]
      break;
 8008952:	e023      	b.n	800899c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	4a17      	ldr	r2, [pc, #92]	@ (80089b4 <LSM6DSO_GYRO_GetOutputDataRate+0xb4>)
 8008958:	601a      	str	r2, [r3, #0]
      break;
 800895a:	e01f      	b.n	800899c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	4a16      	ldr	r2, [pc, #88]	@ (80089b8 <LSM6DSO_GYRO_GetOutputDataRate+0xb8>)
 8008960:	601a      	str	r2, [r3, #0]
      break;
 8008962:	e01b      	b.n	800899c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	4a15      	ldr	r2, [pc, #84]	@ (80089bc <LSM6DSO_GYRO_GetOutputDataRate+0xbc>)
 8008968:	601a      	str	r2, [r3, #0]
      break;
 800896a:	e017      	b.n	800899c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	4a14      	ldr	r2, [pc, #80]	@ (80089c0 <LSM6DSO_GYRO_GetOutputDataRate+0xc0>)
 8008970:	601a      	str	r2, [r3, #0]
      break;
 8008972:	e013      	b.n	800899c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	4a13      	ldr	r2, [pc, #76]	@ (80089c4 <LSM6DSO_GYRO_GetOutputDataRate+0xc4>)
 8008978:	601a      	str	r2, [r3, #0]
      break;
 800897a:	e00f      	b.n	800899c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	4a12      	ldr	r2, [pc, #72]	@ (80089c8 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>)
 8008980:	601a      	str	r2, [r3, #0]
      break;
 8008982:	e00b      	b.n	800899c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	4a11      	ldr	r2, [pc, #68]	@ (80089cc <LSM6DSO_GYRO_GetOutputDataRate+0xcc>)
 8008988:	601a      	str	r2, [r3, #0]
      break;
 800898a:	e007      	b.n	800899c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	4a10      	ldr	r2, [pc, #64]	@ (80089d0 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8008990:	601a      	str	r2, [r3, #0]
      break;
 8008992:	e003      	b.n	800899c <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    default:
      ret = LSM6DSO_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	425b      	negs	r3, r3
 8008998:	60fb      	str	r3, [r7, #12]
      break;
 800899a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800899c:	68fb      	ldr	r3, [r7, #12]
}
 800899e:	0018      	movs	r0, r3
 80089a0:	46bd      	mov	sp, r7
 80089a2:	b004      	add	sp, #16
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	46c0      	nop			@ (mov r8, r8)
 80089a8:	08014a48 	.word	0x08014a48
 80089ac:	41480000 	.word	0x41480000
 80089b0:	41d00000 	.word	0x41d00000
 80089b4:	42500000 	.word	0x42500000
 80089b8:	42d00000 	.word	0x42d00000
 80089bc:	43500000 	.word	0x43500000
 80089c0:	43d08000 	.word	0x43d08000
 80089c4:	44504000 	.word	0x44504000
 80089c8:	44d06000 	.word	0x44d06000
 80089cc:	45505000 	.word	0x45505000
 80089d0:	45d05800 	.word	0x45d05800

080089d4 <LSM6DSO_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	0018      	movs	r0, r3
 80089e6:	f000 f805 	bl	80089f4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80089ea:	0003      	movs	r3, r0
}
 80089ec:	0018      	movs	r0, r3
 80089ee:	46bd      	mov	sp, r7
 80089f0:	b002      	add	sp, #8
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
 * @param  Odr the output data rate value to be set
 * @param  Mode the gyroscope operating mode
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80089f4:	b590      	push	{r4, r7, lr}
 80089f6:	b089      	sub	sp, #36	@ 0x24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	1dfb      	adds	r3, r7, #7
 8008a00:	701a      	strb	r2, [r3, #0]
  int32_t ret = LSM6DSO_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8008a0a:	1dfb      	adds	r3, r7, #7
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d028      	beq.n	8008a68 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8008a16:	e05a      	b.n	8008ace <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xda>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	331c      	adds	r3, #28
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	2314      	movs	r3, #20
 8008a20:	18fa      	adds	r2, r7, r3
 8008a22:	2301      	movs	r3, #1
 8008a24:	2116      	movs	r1, #22
 8008a26:	f000 fba7 	bl	8009178 <lsm6dso_read_reg>
 8008a2a:	1e03      	subs	r3, r0, #0
 8008a2c:	d002      	beq.n	8008a34 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x40>
      {
        return LSM6DSO_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	425b      	negs	r3, r3
 8008a32:	e06e      	b.n	8008b12 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
      }

      if (val1.g_hm_mode != 0U)
 8008a34:	2414      	movs	r4, #20
 8008a36:	193b      	adds	r3, r7, r4
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	227f      	movs	r2, #127	@ 0x7f
 8008a3c:	4393      	bics	r3, r2
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d048      	beq.n	8008ad6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
      {
        val1.g_hm_mode = 0U;
 8008a44:	193b      	adds	r3, r7, r4
 8008a46:	781a      	ldrb	r2, [r3, #0]
 8008a48:	217f      	movs	r1, #127	@ 0x7f
 8008a4a:	400a      	ands	r2, r1
 8008a4c:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	331c      	adds	r3, #28
 8008a52:	0018      	movs	r0, r3
 8008a54:	193a      	adds	r2, r7, r4
 8008a56:	2301      	movs	r3, #1
 8008a58:	2116      	movs	r1, #22
 8008a5a:	f000 fbae 	bl	80091ba <lsm6dso_write_reg>
 8008a5e:	1e03      	subs	r3, r0, #0
 8008a60:	d039      	beq.n	8008ad6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
        {
          return LSM6DSO_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	425b      	negs	r3, r3
 8008a66:	e054      	b.n	8008b12 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	331c      	adds	r3, #28
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	2310      	movs	r3, #16
 8008a70:	18fa      	adds	r2, r7, r3
 8008a72:	2301      	movs	r3, #1
 8008a74:	2116      	movs	r1, #22
 8008a76:	f000 fb7f 	bl	8009178 <lsm6dso_read_reg>
 8008a7a:	1e03      	subs	r3, r0, #0
 8008a7c:	d002      	beq.n	8008a84 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x90>
      {
        return LSM6DSO_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	425b      	negs	r3, r3
 8008a82:	e046      	b.n	8008b12 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
      }

      if (val1.g_hm_mode == 0U)
 8008a84:	2410      	movs	r4, #16
 8008a86:	193b      	adds	r3, r7, r4
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	227f      	movs	r2, #127	@ 0x7f
 8008a8c:	4393      	bics	r3, r2
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d112      	bne.n	8008aba <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc6>
      {
        val1.g_hm_mode = 1U;
 8008a94:	193b      	adds	r3, r7, r4
 8008a96:	781a      	ldrb	r2, [r3, #0]
 8008a98:	2180      	movs	r1, #128	@ 0x80
 8008a9a:	4249      	negs	r1, r1
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	331c      	adds	r3, #28
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	193a      	adds	r2, r7, r4
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	2116      	movs	r1, #22
 8008aac:	f000 fb85 	bl	80091ba <lsm6dso_write_reg>
 8008ab0:	1e03      	subs	r3, r0, #0
 8008ab2:	d002      	beq.n	8008aba <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc6>
        {
          return LSM6DSO_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	425b      	negs	r3, r3
 8008ab8:	e02b      	b.n	8008b12 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8008aba:	4918      	ldr	r1, [pc, #96]	@ (8008b1c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8008abc:	69b8      	ldr	r0, [r7, #24]
 8008abe:	f7f7 fc27 	bl	8000310 <__aeabi_fcmpgt>
 8008ac2:	1e03      	subs	r3, r0, #0
 8008ac4:	d100      	bne.n	8008ac8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd4>
      {
        newOdr = 208.0f;
      }
      break;
 8008ac6:	e007      	b.n	8008ad8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe4>
        newOdr = 208.0f;
 8008ac8:	4b14      	ldr	r3, [pc, #80]	@ (8008b1c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8008aca:	61bb      	str	r3, [r7, #24]
 8008acc:	e004      	b.n	8008ad8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	425b      	negs	r3, r3
 8008ad2:	61fb      	str	r3, [r7, #28]
      break;
 8008ad4:	e000      	b.n	8008ad8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe4>
      break;
 8008ad6:	46c0      	nop			@ (mov r8, r8)
  }

  if (ret == LSM6DSO_ERROR)
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	3301      	adds	r3, #1
 8008adc:	d102      	bne.n	8008ae4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf0>
  {
    return LSM6DSO_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	425b      	negs	r3, r3
 8008ae2:	e016      	b.n	8008b12 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
  }

  if (pObj->gyro_is_enabled == 1U)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	222a      	movs	r2, #42	@ 0x2a
 8008ae8:	5c9b      	ldrb	r3, [r3, r2]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d108      	bne.n	8008b00 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10c>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	1c11      	adds	r1, r2, #0
 8008af4:	0018      	movs	r0, r3
 8008af6:	f000 fa1d 	bl	8008f34 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8008afa:	0003      	movs	r3, r0
 8008afc:	61fb      	str	r3, [r7, #28]
 8008afe:	e007      	b.n	8008b10 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	1c11      	adds	r1, r2, #0
 8008b06:	0018      	movs	r0, r3
 8008b08:	f000 fa8a 	bl	8009020 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8008b0c:	0003      	movs	r3, r0
 8008b0e:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8008b10:	69fb      	ldr	r3, [r7, #28]
}
 8008b12:	0018      	movs	r0, r3
 8008b14:	46bd      	mov	sp, r7
 8008b16:	b009      	add	sp, #36	@ 0x24
 8008b18:	bd90      	pop	{r4, r7, pc}
 8008b1a:	46c0      	nop			@ (mov r8, r8)
 8008b1c:	43500000 	.word	0x43500000

08008b20 <LSM6DSO_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	331c      	adds	r3, #28
 8008b32:	220b      	movs	r2, #11
 8008b34:	18ba      	adds	r2, r7, r2
 8008b36:	0011      	movs	r1, r2
 8008b38:	0018      	movs	r0, r3
 8008b3a:	f000 fd97 	bl	800966c <lsm6dso_gy_full_scale_get>
 8008b3e:	1e03      	subs	r3, r0, #0
 8008b40:	d002      	beq.n	8008b48 <LSM6DSO_GYRO_GetFullScale+0x28>
  {
    return LSM6DSO_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	425b      	negs	r3, r3
 8008b46:	e025      	b.n	8008b94 <LSM6DSO_GYRO_GetFullScale+0x74>
  }

  switch (fs_low_level)
 8008b48:	230b      	movs	r3, #11
 8008b4a:	18fb      	adds	r3, r7, r3
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	2b06      	cmp	r3, #6
 8008b50:	d81b      	bhi.n	8008b8a <LSM6DSO_GYRO_GetFullScale+0x6a>
 8008b52:	009a      	lsls	r2, r3, #2
 8008b54:	4b11      	ldr	r3, [pc, #68]	@ (8008b9c <LSM6DSO_GYRO_GetFullScale+0x7c>)
 8008b56:	18d3      	adds	r3, r2, r3
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	469f      	mov	pc, r3
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	227d      	movs	r2, #125	@ 0x7d
 8008b60:	601a      	str	r2, [r3, #0]
      break;
 8008b62:	e016      	b.n	8008b92 <LSM6DSO_GYRO_GetFullScale+0x72>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	22fa      	movs	r2, #250	@ 0xfa
 8008b68:	601a      	str	r2, [r3, #0]
      break;
 8008b6a:	e012      	b.n	8008b92 <LSM6DSO_GYRO_GetFullScale+0x72>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	22fa      	movs	r2, #250	@ 0xfa
 8008b70:	0052      	lsls	r2, r2, #1
 8008b72:	601a      	str	r2, [r3, #0]
      break;
 8008b74:	e00d      	b.n	8008b92 <LSM6DSO_GYRO_GetFullScale+0x72>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	22fa      	movs	r2, #250	@ 0xfa
 8008b7a:	0092      	lsls	r2, r2, #2
 8008b7c:	601a      	str	r2, [r3, #0]
      break;
 8008b7e:	e008      	b.n	8008b92 <LSM6DSO_GYRO_GetFullScale+0x72>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	22fa      	movs	r2, #250	@ 0xfa
 8008b84:	00d2      	lsls	r2, r2, #3
 8008b86:	601a      	str	r2, [r3, #0]
      break;
 8008b88:	e003      	b.n	8008b92 <LSM6DSO_GYRO_GetFullScale+0x72>

    default:
      ret = LSM6DSO_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	425b      	negs	r3, r3
 8008b8e:	60fb      	str	r3, [r7, #12]
      break;
 8008b90:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8008b92:	68fb      	ldr	r3, [r7, #12]
}
 8008b94:	0018      	movs	r0, r3
 8008b96:	46bd      	mov	sp, r7
 8008b98:	b004      	add	sp, #16
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	08014a74 	.word	0x08014a74

08008ba0 <LSM6DSO_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b7d      	cmp	r3, #125	@ 0x7d
 8008bae:	dd14      	ble.n	8008bda <LSM6DSO_GYRO_SetFullScale+0x3a>
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2bfa      	cmp	r3, #250	@ 0xfa
 8008bb4:	dd0f      	ble.n	8008bd6 <LSM6DSO_GYRO_SetFullScale+0x36>
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	23fa      	movs	r3, #250	@ 0xfa
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	dd08      	ble.n	8008bd2 <LSM6DSO_GYRO_SetFullScale+0x32>
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	23fa      	movs	r3, #250	@ 0xfa
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	dc01      	bgt.n	8008bce <LSM6DSO_GYRO_SetFullScale+0x2e>
 8008bca:	2304      	movs	r3, #4
 8008bcc:	e006      	b.n	8008bdc <LSM6DSO_GYRO_SetFullScale+0x3c>
 8008bce:	2306      	movs	r3, #6
 8008bd0:	e004      	b.n	8008bdc <LSM6DSO_GYRO_SetFullScale+0x3c>
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	e002      	b.n	8008bdc <LSM6DSO_GYRO_SetFullScale+0x3c>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	e000      	b.n	8008bdc <LSM6DSO_GYRO_SetFullScale+0x3c>
 8008bda:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8008bdc:	210f      	movs	r1, #15
 8008bde:	187a      	adds	r2, r7, r1
 8008be0:	7013      	strb	r3, [r2, #0]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	331c      	adds	r3, #28
 8008be6:	001a      	movs	r2, r3
 8008be8:	187b      	adds	r3, r7, r1
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	0019      	movs	r1, r3
 8008bee:	0010      	movs	r0, r2
 8008bf0:	f000 fd0c 	bl	800960c <lsm6dso_gy_full_scale_set>
 8008bf4:	1e03      	subs	r3, r0, #0
 8008bf6:	d002      	beq.n	8008bfe <LSM6DSO_GYRO_SetFullScale+0x5e>
  {
    return LSM6DSO_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	425b      	negs	r3, r3
 8008bfc:	e000      	b.n	8008c00 <LSM6DSO_GYRO_SetFullScale+0x60>
  }

  return LSM6DSO_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	0018      	movs	r0, r3
 8008c02:	46bd      	mov	sp, r7
 8008c04:	b004      	add	sp, #16
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <LSM6DSO_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	331c      	adds	r3, #28
 8008c16:	2208      	movs	r2, #8
 8008c18:	18ba      	adds	r2, r7, r2
 8008c1a:	0011      	movs	r1, r2
 8008c1c:	0018      	movs	r0, r3
 8008c1e:	f000 ff2d 	bl	8009a7c <lsm6dso_angular_rate_raw_get>
 8008c22:	1e03      	subs	r3, r0, #0
 8008c24:	d002      	beq.n	8008c2c <LSM6DSO_GYRO_GetAxesRaw+0x24>
  {
    return LSM6DSO_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	425b      	negs	r3, r3
 8008c2a:	e010      	b.n	8008c4e <LSM6DSO_GYRO_GetAxesRaw+0x46>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8008c2c:	2108      	movs	r1, #8
 8008c2e:	187b      	adds	r3, r7, r1
 8008c30:	2200      	movs	r2, #0
 8008c32:	5e9a      	ldrsh	r2, [r3, r2]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008c38:	187b      	adds	r3, r7, r1
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	5e9a      	ldrsh	r2, [r3, r2]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008c42:	187b      	adds	r3, r7, r1
 8008c44:	2204      	movs	r2, #4
 8008c46:	5e9a      	ldrsh	r2, [r3, r2]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	0018      	movs	r0, r3
 8008c50:	46bd      	mov	sp, r7
 8008c52:	b004      	add	sp, #16
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <LSM6DSO_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8008c56:	b590      	push	{r4, r7, lr}
 8008c58:	b087      	sub	sp, #28
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	331c      	adds	r3, #28
 8008c64:	2210      	movs	r2, #16
 8008c66:	18ba      	adds	r2, r7, r2
 8008c68:	0011      	movs	r1, r2
 8008c6a:	0018      	movs	r0, r3
 8008c6c:	f000 ff06 	bl	8009a7c <lsm6dso_angular_rate_raw_get>
 8008c70:	1e03      	subs	r3, r0, #0
 8008c72:	d002      	beq.n	8008c7a <LSM6DSO_GYRO_GetAxes+0x24>
  {
    return LSM6DSO_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	425b      	negs	r3, r3
 8008c78:	e046      	b.n	8008d08 <LSM6DSO_GYRO_GetAxes+0xb2>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8008c7a:	230c      	movs	r3, #12
 8008c7c:	18fa      	adds	r2, r7, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	0011      	movs	r1, r2
 8008c82:	0018      	movs	r0, r3
 8008c84:	f7ff fdf4 	bl	8008870 <LSM6DSO_GYRO_GetSensitivity>
 8008c88:	1e03      	subs	r3, r0, #0
 8008c8a:	d002      	beq.n	8008c92 <LSM6DSO_GYRO_GetAxes+0x3c>
  {
    return LSM6DSO_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	425b      	negs	r3, r3
 8008c90:	e03a      	b.n	8008d08 <LSM6DSO_GYRO_GetAxes+0xb2>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8008c92:	2410      	movs	r4, #16
 8008c94:	193b      	adds	r3, r7, r4
 8008c96:	2200      	movs	r2, #0
 8008c98:	5e9b      	ldrsh	r3, [r3, r2]
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	f7f8 fad8 	bl	8001250 <__aeabi_i2f>
 8008ca0:	1c02      	adds	r2, r0, #0
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	1c19      	adds	r1, r3, #0
 8008ca6:	1c10      	adds	r0, r2, #0
 8008ca8:	f7f7 ffd0 	bl	8000c4c <__aeabi_fmul>
 8008cac:	1c03      	adds	r3, r0, #0
 8008cae:	1c18      	adds	r0, r3, #0
 8008cb0:	f7f8 faae 	bl	8001210 <__aeabi_f2iz>
 8008cb4:	0002      	movs	r2, r0
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8008cba:	193b      	adds	r3, r7, r4
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	5e9b      	ldrsh	r3, [r3, r2]
 8008cc0:	0018      	movs	r0, r3
 8008cc2:	f7f8 fac5 	bl	8001250 <__aeabi_i2f>
 8008cc6:	1c02      	adds	r2, r0, #0
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	1c19      	adds	r1, r3, #0
 8008ccc:	1c10      	adds	r0, r2, #0
 8008cce:	f7f7 ffbd 	bl	8000c4c <__aeabi_fmul>
 8008cd2:	1c03      	adds	r3, r0, #0
 8008cd4:	1c18      	adds	r0, r3, #0
 8008cd6:	f7f8 fa9b 	bl	8001210 <__aeabi_f2iz>
 8008cda:	0002      	movs	r2, r0
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8008ce0:	193b      	adds	r3, r7, r4
 8008ce2:	2204      	movs	r2, #4
 8008ce4:	5e9b      	ldrsh	r3, [r3, r2]
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	f7f8 fab2 	bl	8001250 <__aeabi_i2f>
 8008cec:	1c02      	adds	r2, r0, #0
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	1c19      	adds	r1, r3, #0
 8008cf2:	1c10      	adds	r0, r2, #0
 8008cf4:	f7f7 ffaa 	bl	8000c4c <__aeabi_fmul>
 8008cf8:	1c03      	adds	r3, r0, #0
 8008cfa:	1c18      	adds	r0, r3, #0
 8008cfc:	f7f8 fa88 	bl	8001210 <__aeabi_f2iz>
 8008d00:	0002      	movs	r2, r0
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	0018      	movs	r0, r3
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	b007      	add	sp, #28
 8008d0e:	bd90      	pop	{r4, r7, pc}

08008d10 <LSM6DSO_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	0008      	movs	r0, r1
 8008d1a:	0011      	movs	r1, r2
 8008d1c:	1cfb      	adds	r3, r7, #3
 8008d1e:	1c02      	adds	r2, r0, #0
 8008d20:	701a      	strb	r2, [r3, #0]
 8008d22:	1cbb      	adds	r3, r7, #2
 8008d24:	1c0a      	adds	r2, r1, #0
 8008d26:	701a      	strb	r2, [r3, #0]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	331c      	adds	r3, #28
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	1cba      	adds	r2, r7, #2
 8008d30:	1cfb      	adds	r3, r7, #3
 8008d32:	7819      	ldrb	r1, [r3, #0]
 8008d34:	2301      	movs	r3, #1
 8008d36:	f000 fa40 	bl	80091ba <lsm6dso_write_reg>
 8008d3a:	1e03      	subs	r3, r0, #0
 8008d3c:	d002      	beq.n	8008d44 <LSM6DSO_Write_Reg+0x34>
  {
    return LSM6DSO_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	425b      	negs	r3, r3
 8008d42:	e000      	b.n	8008d46 <LSM6DSO_Write_Reg+0x36>
  }

  return LSM6DSO_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	0018      	movs	r0, r3
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	b002      	add	sp, #8
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8008d5a:	4933      	ldr	r1, [pc, #204]	@ (8008e28 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd8>)
 8008d5c:	6838      	ldr	r0, [r7, #0]
 8008d5e:	f7f7 facd 	bl	80002fc <__aeabi_fcmple>
 8008d62:	1e03      	subs	r3, r0, #0
 8008d64:	d001      	beq.n	8008d6a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x1a>
 8008d66:	230b      	movs	r3, #11
 8008d68:	e048      	b.n	8008dfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8008d6a:	4930      	ldr	r1, [pc, #192]	@ (8008e2c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xdc>)
 8008d6c:	6838      	ldr	r0, [r7, #0]
 8008d6e:	f7f7 fac5 	bl	80002fc <__aeabi_fcmple>
 8008d72:	1e03      	subs	r3, r0, #0
 8008d74:	d001      	beq.n	8008d7a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x2a>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e040      	b.n	8008dfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8008d7a:	492d      	ldr	r1, [pc, #180]	@ (8008e30 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe0>)
 8008d7c:	6838      	ldr	r0, [r7, #0]
 8008d7e:	f7f7 fabd 	bl	80002fc <__aeabi_fcmple>
 8008d82:	1e03      	subs	r3, r0, #0
 8008d84:	d001      	beq.n	8008d8a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x3a>
 8008d86:	2302      	movs	r3, #2
 8008d88:	e038      	b.n	8008dfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8008d8a:	492a      	ldr	r1, [pc, #168]	@ (8008e34 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe4>)
 8008d8c:	6838      	ldr	r0, [r7, #0]
 8008d8e:	f7f7 fab5 	bl	80002fc <__aeabi_fcmple>
 8008d92:	1e03      	subs	r3, r0, #0
 8008d94:	d001      	beq.n	8008d9a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4a>
 8008d96:	2303      	movs	r3, #3
 8008d98:	e030      	b.n	8008dfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8008d9a:	4927      	ldr	r1, [pc, #156]	@ (8008e38 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>)
 8008d9c:	6838      	ldr	r0, [r7, #0]
 8008d9e:	f7f7 faad 	bl	80002fc <__aeabi_fcmple>
 8008da2:	1e03      	subs	r3, r0, #0
 8008da4:	d001      	beq.n	8008daa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x5a>
 8008da6:	2304      	movs	r3, #4
 8008da8:	e028      	b.n	8008dfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8008daa:	4924      	ldr	r1, [pc, #144]	@ (8008e3c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xec>)
 8008dac:	6838      	ldr	r0, [r7, #0]
 8008dae:	f7f7 faa5 	bl	80002fc <__aeabi_fcmple>
 8008db2:	1e03      	subs	r3, r0, #0
 8008db4:	d001      	beq.n	8008dba <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x6a>
 8008db6:	2305      	movs	r3, #5
 8008db8:	e020      	b.n	8008dfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8008dba:	4921      	ldr	r1, [pc, #132]	@ (8008e40 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf0>)
 8008dbc:	6838      	ldr	r0, [r7, #0]
 8008dbe:	f7f7 fa9d 	bl	80002fc <__aeabi_fcmple>
 8008dc2:	1e03      	subs	r3, r0, #0
 8008dc4:	d001      	beq.n	8008dca <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8008dc6:	2306      	movs	r3, #6
 8008dc8:	e018      	b.n	8008dfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8008dca:	491e      	ldr	r1, [pc, #120]	@ (8008e44 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf4>)
 8008dcc:	6838      	ldr	r0, [r7, #0]
 8008dce:	f7f7 fa95 	bl	80002fc <__aeabi_fcmple>
 8008dd2:	1e03      	subs	r3, r0, #0
 8008dd4:	d001      	beq.n	8008dda <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x8a>
 8008dd6:	2307      	movs	r3, #7
 8008dd8:	e010      	b.n	8008dfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8008dda:	491b      	ldr	r1, [pc, #108]	@ (8008e48 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf8>)
 8008ddc:	6838      	ldr	r0, [r7, #0]
 8008dde:	f7f7 fa8d 	bl	80002fc <__aeabi_fcmple>
 8008de2:	1e03      	subs	r3, r0, #0
 8008de4:	d001      	beq.n	8008dea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x9a>
 8008de6:	2308      	movs	r3, #8
 8008de8:	e008      	b.n	8008dfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8008dea:	4918      	ldr	r1, [pc, #96]	@ (8008e4c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xfc>)
 8008dec:	6838      	ldr	r0, [r7, #0]
 8008dee:	f7f7 fa85 	bl	80002fc <__aeabi_fcmple>
 8008df2:	1e03      	subs	r3, r0, #0
 8008df4:	d001      	beq.n	8008dfa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xaa>
 8008df6:	2309      	movs	r3, #9
 8008df8:	e000      	b.n	8008dfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8008dfa:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8008dfc:	210f      	movs	r1, #15
 8008dfe:	187a      	adds	r2, r7, r1
 8008e00:	7013      	strb	r3, [r2, #0]
          : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
          :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	331c      	adds	r3, #28
 8008e06:	001a      	movs	r2, r3
 8008e08:	187b      	adds	r3, r7, r1
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	0019      	movs	r1, r3
 8008e0e:	0010      	movs	r0, r2
 8008e10:	f000 fa5b 	bl	80092ca <lsm6dso_xl_data_rate_set>
 8008e14:	1e03      	subs	r3, r0, #0
 8008e16:	d002      	beq.n	8008e1e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xce>
  {
    return LSM6DSO_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	425b      	negs	r3, r3
 8008e1c:	e000      	b.n	8008e20 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd0>
  }

  return LSM6DSO_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	0018      	movs	r0, r3
 8008e22:	46bd      	mov	sp, r7
 8008e24:	b004      	add	sp, #16
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	3fcccccd 	.word	0x3fcccccd
 8008e2c:	41480000 	.word	0x41480000
 8008e30:	41d00000 	.word	0x41d00000
 8008e34:	42500000 	.word	0x42500000
 8008e38:	42d00000 	.word	0x42d00000
 8008e3c:	43500000 	.word	0x43500000
 8008e40:	43d08000 	.word	0x43d08000
 8008e44:	44504000 	.word	0x44504000
 8008e48:	44d06000 	.word	0x44d06000
 8008e4c:	45505000 	.word	0x45505000

08008e50 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8008e5a:	492c      	ldr	r1, [pc, #176]	@ (8008f0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>)
 8008e5c:	6838      	ldr	r0, [r7, #0]
 8008e5e:	f7f7 fa4d 	bl	80002fc <__aeabi_fcmple>
 8008e62:	1e03      	subs	r3, r0, #0
 8008e64:	d001      	beq.n	8008e6a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x1a>
 8008e66:	230b      	movs	r3, #11
 8008e68:	e048      	b.n	8008efc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8008e6a:	4929      	ldr	r1, [pc, #164]	@ (8008f10 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>)
 8008e6c:	6838      	ldr	r0, [r7, #0]
 8008e6e:	f7f7 fa45 	bl	80002fc <__aeabi_fcmple>
 8008e72:	1e03      	subs	r3, r0, #0
 8008e74:	d001      	beq.n	8008e7a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x2a>
 8008e76:	2301      	movs	r3, #1
 8008e78:	e040      	b.n	8008efc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8008e7a:	4926      	ldr	r1, [pc, #152]	@ (8008f14 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc4>)
 8008e7c:	6838      	ldr	r0, [r7, #0]
 8008e7e:	f7f7 fa3d 	bl	80002fc <__aeabi_fcmple>
 8008e82:	1e03      	subs	r3, r0, #0
 8008e84:	d001      	beq.n	8008e8a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8008e86:	2302      	movs	r3, #2
 8008e88:	e038      	b.n	8008efc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8008e8a:	4923      	ldr	r1, [pc, #140]	@ (8008f18 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 8008e8c:	6838      	ldr	r0, [r7, #0]
 8008e8e:	f7f7 fa35 	bl	80002fc <__aeabi_fcmple>
 8008e92:	1e03      	subs	r3, r0, #0
 8008e94:	d001      	beq.n	8008e9a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4a>
 8008e96:	2303      	movs	r3, #3
 8008e98:	e030      	b.n	8008efc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8008e9a:	4920      	ldr	r1, [pc, #128]	@ (8008f1c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 8008e9c:	6838      	ldr	r0, [r7, #0]
 8008e9e:	f7f7 fa2d 	bl	80002fc <__aeabi_fcmple>
 8008ea2:	1e03      	subs	r3, r0, #0
 8008ea4:	d001      	beq.n	8008eaa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x5a>
 8008ea6:	2304      	movs	r3, #4
 8008ea8:	e028      	b.n	8008efc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8008eaa:	491d      	ldr	r1, [pc, #116]	@ (8008f20 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8008eac:	6838      	ldr	r0, [r7, #0]
 8008eae:	f7f7 fa25 	bl	80002fc <__aeabi_fcmple>
 8008eb2:	1e03      	subs	r3, r0, #0
 8008eb4:	d001      	beq.n	8008eba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x6a>
 8008eb6:	2305      	movs	r3, #5
 8008eb8:	e020      	b.n	8008efc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8008eba:	491a      	ldr	r1, [pc, #104]	@ (8008f24 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8008ebc:	6838      	ldr	r0, [r7, #0]
 8008ebe:	f7f7 fa1d 	bl	80002fc <__aeabi_fcmple>
 8008ec2:	1e03      	subs	r3, r0, #0
 8008ec4:	d001      	beq.n	8008eca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8008ec6:	2306      	movs	r3, #6
 8008ec8:	e018      	b.n	8008efc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8008eca:	4917      	ldr	r1, [pc, #92]	@ (8008f28 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8008ecc:	6838      	ldr	r0, [r7, #0]
 8008ece:	f7f7 fa15 	bl	80002fc <__aeabi_fcmple>
 8008ed2:	1e03      	subs	r3, r0, #0
 8008ed4:	d001      	beq.n	8008eda <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x8a>
 8008ed6:	2307      	movs	r3, #7
 8008ed8:	e010      	b.n	8008efc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8008eda:	4914      	ldr	r1, [pc, #80]	@ (8008f2c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 8008edc:	6838      	ldr	r0, [r7, #0]
 8008ede:	f7f7 fa0d 	bl	80002fc <__aeabi_fcmple>
 8008ee2:	1e03      	subs	r3, r0, #0
 8008ee4:	d001      	beq.n	8008eea <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8008ee6:	2308      	movs	r3, #8
 8008ee8:	e008      	b.n	8008efc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8008eea:	4911      	ldr	r1, [pc, #68]	@ (8008f30 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 8008eec:	6838      	ldr	r0, [r7, #0]
 8008eee:	f7f7 fa05 	bl	80002fc <__aeabi_fcmple>
 8008ef2:	1e03      	subs	r3, r0, #0
 8008ef4:	d001      	beq.n	8008efa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xaa>
 8008ef6:	2309      	movs	r3, #9
 8008ef8:	e000      	b.n	8008efc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8008efa:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	212b      	movs	r1, #43	@ 0x2b
 8008f00:	5453      	strb	r3, [r2, r1]
                : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	0018      	movs	r0, r3
 8008f06:	46bd      	mov	sp, r7
 8008f08:	b002      	add	sp, #8
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	3fcccccd 	.word	0x3fcccccd
 8008f10:	41480000 	.word	0x41480000
 8008f14:	41d00000 	.word	0x41d00000
 8008f18:	42500000 	.word	0x42500000
 8008f1c:	42d00000 	.word	0x42d00000
 8008f20:	43500000 	.word	0x43500000
 8008f24:	43d08000 	.word	0x43d08000
 8008f28:	44504000 	.word	0x44504000
 8008f2c:	44d06000 	.word	0x44d06000
 8008f30:	45505000 	.word	0x45505000

08008f34 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8008f3e:	492f      	ldr	r1, [pc, #188]	@ (8008ffc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xc8>)
 8008f40:	6838      	ldr	r0, [r7, #0]
 8008f42:	f7f7 f9db 	bl	80002fc <__aeabi_fcmple>
 8008f46:	1e03      	subs	r3, r0, #0
 8008f48:	d001      	beq.n	8008f4e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x1a>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e040      	b.n	8008fd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8008f4e:	492c      	ldr	r1, [pc, #176]	@ (8009000 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xcc>)
 8008f50:	6838      	ldr	r0, [r7, #0]
 8008f52:	f7f7 f9d3 	bl	80002fc <__aeabi_fcmple>
 8008f56:	1e03      	subs	r3, r0, #0
 8008f58:	d001      	beq.n	8008f5e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x2a>
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	e038      	b.n	8008fd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8008f5e:	4929      	ldr	r1, [pc, #164]	@ (8009004 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd0>)
 8008f60:	6838      	ldr	r0, [r7, #0]
 8008f62:	f7f7 f9cb 	bl	80002fc <__aeabi_fcmple>
 8008f66:	1e03      	subs	r3, r0, #0
 8008f68:	d001      	beq.n	8008f6e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x3a>
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e030      	b.n	8008fd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8008f6e:	4926      	ldr	r1, [pc, #152]	@ (8009008 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>)
 8008f70:	6838      	ldr	r0, [r7, #0]
 8008f72:	f7f7 f9c3 	bl	80002fc <__aeabi_fcmple>
 8008f76:	1e03      	subs	r3, r0, #0
 8008f78:	d001      	beq.n	8008f7e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4a>
 8008f7a:	2304      	movs	r3, #4
 8008f7c:	e028      	b.n	8008fd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8008f7e:	4923      	ldr	r1, [pc, #140]	@ (800900c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd8>)
 8008f80:	6838      	ldr	r0, [r7, #0]
 8008f82:	f7f7 f9bb 	bl	80002fc <__aeabi_fcmple>
 8008f86:	1e03      	subs	r3, r0, #0
 8008f88:	d001      	beq.n	8008f8e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x5a>
 8008f8a:	2305      	movs	r3, #5
 8008f8c:	e020      	b.n	8008fd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8008f8e:	4920      	ldr	r1, [pc, #128]	@ (8009010 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xdc>)
 8008f90:	6838      	ldr	r0, [r7, #0]
 8008f92:	f7f7 f9b3 	bl	80002fc <__aeabi_fcmple>
 8008f96:	1e03      	subs	r3, r0, #0
 8008f98:	d001      	beq.n	8008f9e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x6a>
 8008f9a:	2306      	movs	r3, #6
 8008f9c:	e018      	b.n	8008fd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8008f9e:	491d      	ldr	r1, [pc, #116]	@ (8009014 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe0>)
 8008fa0:	6838      	ldr	r0, [r7, #0]
 8008fa2:	f7f7 f9ab 	bl	80002fc <__aeabi_fcmple>
 8008fa6:	1e03      	subs	r3, r0, #0
 8008fa8:	d001      	beq.n	8008fae <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8008faa:	2307      	movs	r3, #7
 8008fac:	e010      	b.n	8008fd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8008fae:	491a      	ldr	r1, [pc, #104]	@ (8009018 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe4>)
 8008fb0:	6838      	ldr	r0, [r7, #0]
 8008fb2:	f7f7 f9a3 	bl	80002fc <__aeabi_fcmple>
 8008fb6:	1e03      	subs	r3, r0, #0
 8008fb8:	d001      	beq.n	8008fbe <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x8a>
 8008fba:	2308      	movs	r3, #8
 8008fbc:	e008      	b.n	8008fd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8008fbe:	4917      	ldr	r1, [pc, #92]	@ (800901c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe8>)
 8008fc0:	6838      	ldr	r0, [r7, #0]
 8008fc2:	f7f7 f99b 	bl	80002fc <__aeabi_fcmple>
 8008fc6:	1e03      	subs	r3, r0, #0
 8008fc8:	d001      	beq.n	8008fce <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9a>
 8008fca:	2309      	movs	r3, #9
 8008fcc:	e000      	b.n	8008fd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8008fce:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8008fd0:	210f      	movs	r1, #15
 8008fd2:	187a      	adds	r2, r7, r1
 8008fd4:	7013      	strb	r3, [r2, #0]
          : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
          :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	331c      	adds	r3, #28
 8008fda:	001a      	movs	r2, r3
 8008fdc:	187b      	adds	r3, r7, r1
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	0019      	movs	r1, r3
 8008fe2:	0010      	movs	r0, r2
 8008fe4:	f000 fb7c 	bl	80096e0 <lsm6dso_gy_data_rate_set>
 8008fe8:	1e03      	subs	r3, r0, #0
 8008fea:	d002      	beq.n	8008ff2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbe>
  {
    return LSM6DSO_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	425b      	negs	r3, r3
 8008ff0:	e000      	b.n	8008ff4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xc0>
  }

  return LSM6DSO_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	b004      	add	sp, #16
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	41480000 	.word	0x41480000
 8009000:	41d00000 	.word	0x41d00000
 8009004:	42500000 	.word	0x42500000
 8009008:	42d00000 	.word	0x42d00000
 800900c:	43500000 	.word	0x43500000
 8009010:	43d08000 	.word	0x43d08000
 8009014:	44504000 	.word	0x44504000
 8009018:	44d06000 	.word	0x44d06000
 800901c:	45505000 	.word	0x45505000

08009020 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800902a:	4928      	ldr	r1, [pc, #160]	@ (80090cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xac>)
 800902c:	6838      	ldr	r0, [r7, #0]
 800902e:	f7f7 f965 	bl	80002fc <__aeabi_fcmple>
 8009032:	1e03      	subs	r3, r0, #0
 8009034:	d001      	beq.n	800903a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x1a>
 8009036:	2301      	movs	r3, #1
 8009038:	e040      	b.n	80090bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 800903a:	4925      	ldr	r1, [pc, #148]	@ (80090d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb0>)
 800903c:	6838      	ldr	r0, [r7, #0]
 800903e:	f7f7 f95d 	bl	80002fc <__aeabi_fcmple>
 8009042:	1e03      	subs	r3, r0, #0
 8009044:	d001      	beq.n	800904a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x2a>
 8009046:	2302      	movs	r3, #2
 8009048:	e038      	b.n	80090bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 800904a:	4922      	ldr	r1, [pc, #136]	@ (80090d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb4>)
 800904c:	6838      	ldr	r0, [r7, #0]
 800904e:	f7f7 f955 	bl	80002fc <__aeabi_fcmple>
 8009052:	1e03      	subs	r3, r0, #0
 8009054:	d001      	beq.n	800905a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x3a>
 8009056:	2303      	movs	r3, #3
 8009058:	e030      	b.n	80090bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 800905a:	491f      	ldr	r1, [pc, #124]	@ (80090d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb8>)
 800905c:	6838      	ldr	r0, [r7, #0]
 800905e:	f7f7 f94d 	bl	80002fc <__aeabi_fcmple>
 8009062:	1e03      	subs	r3, r0, #0
 8009064:	d001      	beq.n	800906a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4a>
 8009066:	2304      	movs	r3, #4
 8009068:	e028      	b.n	80090bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 800906a:	491c      	ldr	r1, [pc, #112]	@ (80090dc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>)
 800906c:	6838      	ldr	r0, [r7, #0]
 800906e:	f7f7 f945 	bl	80002fc <__aeabi_fcmple>
 8009072:	1e03      	subs	r3, r0, #0
 8009074:	d001      	beq.n	800907a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x5a>
 8009076:	2305      	movs	r3, #5
 8009078:	e020      	b.n	80090bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 800907a:	4919      	ldr	r1, [pc, #100]	@ (80090e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc0>)
 800907c:	6838      	ldr	r0, [r7, #0]
 800907e:	f7f7 f93d 	bl	80002fc <__aeabi_fcmple>
 8009082:	1e03      	subs	r3, r0, #0
 8009084:	d001      	beq.n	800908a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x6a>
 8009086:	2306      	movs	r3, #6
 8009088:	e018      	b.n	80090bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 800908a:	4916      	ldr	r1, [pc, #88]	@ (80090e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc4>)
 800908c:	6838      	ldr	r0, [r7, #0]
 800908e:	f7f7 f935 	bl	80002fc <__aeabi_fcmple>
 8009092:	1e03      	subs	r3, r0, #0
 8009094:	d001      	beq.n	800909a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8009096:	2307      	movs	r3, #7
 8009098:	e010      	b.n	80090bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 800909a:	4913      	ldr	r1, [pc, #76]	@ (80090e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc8>)
 800909c:	6838      	ldr	r0, [r7, #0]
 800909e:	f7f7 f92d 	bl	80002fc <__aeabi_fcmple>
 80090a2:	1e03      	subs	r3, r0, #0
 80090a4:	d001      	beq.n	80090aa <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x8a>
 80090a6:	2308      	movs	r3, #8
 80090a8:	e008      	b.n	80090bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 80090aa:	4910      	ldr	r1, [pc, #64]	@ (80090ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xcc>)
 80090ac:	6838      	ldr	r0, [r7, #0]
 80090ae:	f7f7 f925 	bl	80002fc <__aeabi_fcmple>
 80090b2:	1e03      	subs	r3, r0, #0
 80090b4:	d001      	beq.n	80090ba <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9a>
 80090b6:	2309      	movs	r3, #9
 80090b8:	e000      	b.n	80090bc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 80090ba:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	212c      	movs	r1, #44	@ 0x2c
 80090c0:	5453      	strb	r3, [r2, r1]
                 : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                 :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	0018      	movs	r0, r3
 80090c6:	46bd      	mov	sp, r7
 80090c8:	b002      	add	sp, #8
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	41480000 	.word	0x41480000
 80090d0:	41d00000 	.word	0x41d00000
 80090d4:	42500000 	.word	0x42500000
 80090d8:	42d00000 	.word	0x42d00000
 80090dc:	43500000 	.word	0x43500000
 80090e0:	43d08000 	.word	0x43d08000
 80090e4:	44504000 	.word	0x44504000
 80090e8:	44d06000 	.word	0x44d06000
 80090ec:	45505000 	.word	0x45505000

080090f0 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80090f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	0008      	movs	r0, r1
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	0019      	movs	r1, r3
 80090fe:	250b      	movs	r5, #11
 8009100:	197b      	adds	r3, r7, r5
 8009102:	1c02      	adds	r2, r0, #0
 8009104:	701a      	strb	r2, [r3, #0]
 8009106:	2608      	movs	r6, #8
 8009108:	19bb      	adds	r3, r7, r6
 800910a:	1c0a      	adds	r2, r1, #0
 800910c:	801a      	strh	r2, [r3, #0]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	695c      	ldr	r4, [r3, #20]
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	7b1b      	ldrb	r3, [r3, #12]
 800911a:	0018      	movs	r0, r3
 800911c:	197b      	adds	r3, r7, r5
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	b299      	uxth	r1, r3
 8009122:	19bb      	adds	r3, r7, r6
 8009124:	881b      	ldrh	r3, [r3, #0]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	47a0      	blx	r4
 800912a:	0003      	movs	r3, r0
}
 800912c:	0018      	movs	r0, r3
 800912e:	46bd      	mov	sp, r7
 8009130:	b007      	add	sp, #28
 8009132:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009134 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009136:	b087      	sub	sp, #28
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	0008      	movs	r0, r1
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	0019      	movs	r1, r3
 8009142:	250b      	movs	r5, #11
 8009144:	197b      	adds	r3, r7, r5
 8009146:	1c02      	adds	r2, r0, #0
 8009148:	701a      	strb	r2, [r3, #0]
 800914a:	2608      	movs	r6, #8
 800914c:	19bb      	adds	r3, r7, r6
 800914e:	1c0a      	adds	r2, r1, #0
 8009150:	801a      	strh	r2, [r3, #0]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	691c      	ldr	r4, [r3, #16]
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	7b1b      	ldrb	r3, [r3, #12]
 800915e:	0018      	movs	r0, r3
 8009160:	197b      	adds	r3, r7, r5
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	b299      	uxth	r1, r3
 8009166:	19bb      	adds	r3, r7, r6
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	47a0      	blx	r4
 800916e:	0003      	movs	r3, r0
}
 8009170:	0018      	movs	r0, r3
 8009172:	46bd      	mov	sp, r7
 8009174:	b007      	add	sp, #28
 8009176:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009178 <lsm6dso_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8009178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	0008      	movs	r0, r1
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	0019      	movs	r1, r3
 8009186:	260b      	movs	r6, #11
 8009188:	19bb      	adds	r3, r7, r6
 800918a:	1c02      	adds	r2, r0, #0
 800918c:	701a      	strb	r2, [r3, #0]
 800918e:	2508      	movs	r5, #8
 8009190:	197b      	adds	r3, r7, r5
 8009192:	1c0a      	adds	r2, r1, #0
 8009194:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	685c      	ldr	r4, [r3, #4]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6898      	ldr	r0, [r3, #8]
 800919e:	197b      	adds	r3, r7, r5
 80091a0:	881d      	ldrh	r5, [r3, #0]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	19bb      	adds	r3, r7, r6
 80091a6:	7819      	ldrb	r1, [r3, #0]
 80091a8:	002b      	movs	r3, r5
 80091aa:	47a0      	blx	r4
 80091ac:	0003      	movs	r3, r0
 80091ae:	617b      	str	r3, [r7, #20]
  return ret;
 80091b0:	697b      	ldr	r3, [r7, #20]
}
 80091b2:	0018      	movs	r0, r3
 80091b4:	46bd      	mov	sp, r7
 80091b6:	b007      	add	sp, #28
 80091b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091ba <lsm6dso_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 80091ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091bc:	b087      	sub	sp, #28
 80091be:	af00      	add	r7, sp, #0
 80091c0:	60f8      	str	r0, [r7, #12]
 80091c2:	0008      	movs	r0, r1
 80091c4:	607a      	str	r2, [r7, #4]
 80091c6:	0019      	movs	r1, r3
 80091c8:	260b      	movs	r6, #11
 80091ca:	19bb      	adds	r3, r7, r6
 80091cc:	1c02      	adds	r2, r0, #0
 80091ce:	701a      	strb	r2, [r3, #0]
 80091d0:	2508      	movs	r5, #8
 80091d2:	197b      	adds	r3, r7, r5
 80091d4:	1c0a      	adds	r2, r1, #0
 80091d6:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681c      	ldr	r4, [r3, #0]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6898      	ldr	r0, [r3, #8]
 80091e0:	197b      	adds	r3, r7, r5
 80091e2:	881d      	ldrh	r5, [r3, #0]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	19bb      	adds	r3, r7, r6
 80091e8:	7819      	ldrb	r1, [r3, #0]
 80091ea:	002b      	movs	r3, r5
 80091ec:	47a0      	blx	r4
 80091ee:	0003      	movs	r3, r0
 80091f0:	617b      	str	r3, [r7, #20]
  return ret;
 80091f2:	697b      	ldr	r3, [r7, #20]
}
 80091f4:	0018      	movs	r0, r3
 80091f6:	46bd      	mov	sp, r7
 80091f8:	b007      	add	sp, #28
 80091fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091fc <lsm6dso_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80091fc:	b590      	push	{r4, r7, lr}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	000a      	movs	r2, r1
 8009206:	1cfb      	adds	r3, r7, #3
 8009208:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 800920a:	2408      	movs	r4, #8
 800920c:	193a      	adds	r2, r7, r4
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	2301      	movs	r3, #1
 8009212:	2110      	movs	r1, #16
 8009214:	f7ff ffb0 	bl	8009178 <lsm6dso_read_reg>
 8009218:	0003      	movs	r3, r0
 800921a:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d117      	bne.n	8009252 <lsm6dso_xl_full_scale_set+0x56>
    reg.fs_xl = (uint8_t) val;
 8009222:	1cfb      	adds	r3, r7, #3
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	2203      	movs	r2, #3
 8009228:	4013      	ands	r3, r2
 800922a:	b2da      	uxtb	r2, r3
 800922c:	193b      	adds	r3, r7, r4
 800922e:	2103      	movs	r1, #3
 8009230:	400a      	ands	r2, r1
 8009232:	0090      	lsls	r0, r2, #2
 8009234:	781a      	ldrb	r2, [r3, #0]
 8009236:	210c      	movs	r1, #12
 8009238:	438a      	bics	r2, r1
 800923a:	1c11      	adds	r1, r2, #0
 800923c:	1c02      	adds	r2, r0, #0
 800923e:	430a      	orrs	r2, r1
 8009240:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8009242:	193a      	adds	r2, r7, r4
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	2301      	movs	r3, #1
 8009248:	2110      	movs	r1, #16
 800924a:	f7ff ffb6 	bl	80091ba <lsm6dso_write_reg>
 800924e:	0003      	movs	r3, r0
 8009250:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8009252:	68fb      	ldr	r3, [r7, #12]
}
 8009254:	0018      	movs	r0, r3
 8009256:	46bd      	mov	sp, r7
 8009258:	b005      	add	sp, #20
 800925a:	bd90      	pop	{r4, r7, pc}

0800925c <lsm6dso_xl_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_xl_t *val)
{
 800925c:	b590      	push	{r4, r7, lr}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8009266:	2408      	movs	r4, #8
 8009268:	193a      	adds	r2, r7, r4
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	2301      	movs	r3, #1
 800926e:	2110      	movs	r1, #16
 8009270:	f7ff ff82 	bl	8009178 <lsm6dso_read_reg>
 8009274:	0003      	movs	r3, r0
 8009276:	60fb      	str	r3, [r7, #12]
  switch (reg.fs_xl) {
 8009278:	193b      	adds	r3, r7, r4
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	071b      	lsls	r3, r3, #28
 800927e:	0f9b      	lsrs	r3, r3, #30
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b03      	cmp	r3, #3
 8009284:	d014      	beq.n	80092b0 <lsm6dso_xl_full_scale_get+0x54>
 8009286:	dc17      	bgt.n	80092b8 <lsm6dso_xl_full_scale_get+0x5c>
 8009288:	2b02      	cmp	r3, #2
 800928a:	d00d      	beq.n	80092a8 <lsm6dso_xl_full_scale_get+0x4c>
 800928c:	dc14      	bgt.n	80092b8 <lsm6dso_xl_full_scale_get+0x5c>
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <lsm6dso_xl_full_scale_get+0x3c>
 8009292:	2b01      	cmp	r3, #1
 8009294:	d004      	beq.n	80092a0 <lsm6dso_xl_full_scale_get+0x44>
 8009296:	e00f      	b.n	80092b8 <lsm6dso_xl_full_scale_get+0x5c>
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	2200      	movs	r2, #0
 800929c:	701a      	strb	r2, [r3, #0]
      break;
 800929e:	e00f      	b.n	80092c0 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2201      	movs	r2, #1
 80092a4:	701a      	strb	r2, [r3, #0]
      break;
 80092a6:	e00b      	b.n	80092c0 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2202      	movs	r2, #2
 80092ac:	701a      	strb	r2, [r3, #0]
      break;
 80092ae:	e007      	b.n	80092c0 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	2203      	movs	r2, #3
 80092b4:	701a      	strb	r2, [r3, #0]
      break;
 80092b6:	e003      	b.n	80092c0 <lsm6dso_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSO_2g;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	2200      	movs	r2, #0
 80092bc:	701a      	strb	r2, [r3, #0]
      break;
 80092be:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80092c0:	68fb      	ldr	r3, [r7, #12]
}
 80092c2:	0018      	movs	r0, r3
 80092c4:	46bd      	mov	sp, r7
 80092c6:	b005      	add	sp, #20
 80092c8:	bd90      	pop	{r4, r7, pc}

080092ca <lsm6dso_xl_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t val)
{
 80092ca:	b590      	push	{r4, r7, lr}
 80092cc:	b087      	sub	sp, #28
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	000a      	movs	r2, r1
 80092d4:	1cfb      	adds	r3, r7, #3
 80092d6:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
 80092d8:	2317      	movs	r3, #23
 80092da:	18fb      	adds	r3, r7, r3
 80092dc:	1cfa      	adds	r2, r7, #3
 80092de:	7812      	ldrb	r2, [r2, #0]
 80092e0:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80092e2:	240c      	movs	r4, #12
 80092e4:	193a      	adds	r2, r7, r4
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	0011      	movs	r1, r2
 80092ea:	0018      	movs	r0, r3
 80092ec:	f000 fce5 	bl	8009cba <lsm6dso_fsm_enable_get>
 80092f0:	0003      	movs	r3, r0
 80092f2:	613b      	str	r3, [r7, #16]
  if (ret == 0) {
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d000      	beq.n	80092fc <lsm6dso_xl_data_rate_set+0x32>
 80092fa:	e105      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80092fc:	0021      	movs	r1, r4
 80092fe:	187b      	adds	r3, r7, r1
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	07db      	lsls	r3, r3, #31
 8009304:	0fdb      	lsrs	r3, r3, #31
 8009306:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8009308:	187b      	adds	r3, r7, r1
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	079b      	lsls	r3, r3, #30
 800930e:	0fdb      	lsrs	r3, r3, #31
 8009310:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8009312:	4313      	orrs	r3, r2
 8009314:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8009316:	187b      	adds	r3, r7, r1
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	075b      	lsls	r3, r3, #29
 800931c:	0fdb      	lsrs	r3, r3, #31
 800931e:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8009320:	4313      	orrs	r3, r2
 8009322:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8009324:	187b      	adds	r3, r7, r1
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	071b      	lsls	r3, r3, #28
 800932a:	0fdb      	lsrs	r3, r3, #31
 800932c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800932e:	4313      	orrs	r3, r2
 8009330:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8009332:	187b      	adds	r3, r7, r1
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	06db      	lsls	r3, r3, #27
 8009338:	0fdb      	lsrs	r3, r3, #31
 800933a:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800933c:	4313      	orrs	r3, r2
 800933e:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8009340:	187b      	adds	r3, r7, r1
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	069b      	lsls	r3, r3, #26
 8009346:	0fdb      	lsrs	r3, r3, #31
 8009348:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 800934a:	4313      	orrs	r3, r2
 800934c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800934e:	187b      	adds	r3, r7, r1
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	065b      	lsls	r3, r3, #25
 8009354:	0fdb      	lsrs	r3, r3, #31
 8009356:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8009358:	4313      	orrs	r3, r2
 800935a:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800935c:	187b      	adds	r3, r7, r1
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	061b      	lsls	r3, r3, #24
 8009362:	0fdb      	lsrs	r3, r3, #31
 8009364:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8009366:	4313      	orrs	r3, r2
 8009368:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800936a:	187b      	adds	r3, r7, r1
 800936c:	785b      	ldrb	r3, [r3, #1]
 800936e:	07db      	lsls	r3, r3, #31
 8009370:	0fdb      	lsrs	r3, r3, #31
 8009372:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8009374:	4313      	orrs	r3, r2
 8009376:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8009378:	187b      	adds	r3, r7, r1
 800937a:	785b      	ldrb	r3, [r3, #1]
 800937c:	079b      	lsls	r3, r3, #30
 800937e:	0fdb      	lsrs	r3, r3, #31
 8009380:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8009382:	4313      	orrs	r3, r2
 8009384:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8009386:	187b      	adds	r3, r7, r1
 8009388:	785b      	ldrb	r3, [r3, #1]
 800938a:	075b      	lsls	r3, r3, #29
 800938c:	0fdb      	lsrs	r3, r3, #31
 800938e:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8009390:	4313      	orrs	r3, r2
 8009392:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8009394:	187b      	adds	r3, r7, r1
 8009396:	785b      	ldrb	r3, [r3, #1]
 8009398:	071b      	lsls	r3, r3, #28
 800939a:	0fdb      	lsrs	r3, r3, #31
 800939c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800939e:	4313      	orrs	r3, r2
 80093a0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80093a2:	187b      	adds	r3, r7, r1
 80093a4:	785b      	ldrb	r3, [r3, #1]
 80093a6:	06db      	lsls	r3, r3, #27
 80093a8:	0fdb      	lsrs	r3, r3, #31
 80093aa:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80093ac:	4313      	orrs	r3, r2
 80093ae:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80093b0:	187b      	adds	r3, r7, r1
 80093b2:	785b      	ldrb	r3, [r3, #1]
 80093b4:	069b      	lsls	r3, r3, #26
 80093b6:	0fdb      	lsrs	r3, r3, #31
 80093b8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80093ba:	4313      	orrs	r3, r2
 80093bc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80093be:	187b      	adds	r3, r7, r1
 80093c0:	785b      	ldrb	r3, [r3, #1]
 80093c2:	065b      	lsls	r3, r3, #25
 80093c4:	0fdb      	lsrs	r3, r3, #31
 80093c6:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80093c8:	4313      	orrs	r3, r2
 80093ca:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 80093cc:	187b      	adds	r3, r7, r1
 80093ce:	785b      	ldrb	r3, [r3, #1]
 80093d0:	061b      	lsls	r3, r3, #24
 80093d2:	0fdb      	lsrs	r3, r3, #31
 80093d4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80093d6:	4313      	orrs	r3, r2
 80093d8:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d000      	beq.n	80093e0 <lsm6dso_xl_data_rate_set+0x116>
 80093de:	e093      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80093e0:	240b      	movs	r4, #11
 80093e2:	193a      	adds	r2, r7, r4
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	0011      	movs	r1, r2
 80093e8:	0018      	movs	r0, r3
 80093ea:	f000 fc8c 	bl	8009d06 <lsm6dso_fsm_data_rate_get>
 80093ee:	0003      	movs	r3, r0
 80093f0:	613b      	str	r3, [r7, #16]
      if (ret == 0) {
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d000      	beq.n	80093fa <lsm6dso_xl_data_rate_set+0x130>
 80093f8:	e086      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
        switch (fsm_odr) {
 80093fa:	193b      	adds	r3, r7, r4
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d052      	beq.n	80094a8 <lsm6dso_xl_data_rate_set+0x1de>
 8009402:	dd00      	ble.n	8009406 <lsm6dso_xl_data_rate_set+0x13c>
 8009404:	e07a      	b.n	80094fc <lsm6dso_xl_data_rate_set+0x232>
 8009406:	2b02      	cmp	r3, #2
 8009408:	d02d      	beq.n	8009466 <lsm6dso_xl_data_rate_set+0x19c>
 800940a:	dd00      	ble.n	800940e <lsm6dso_xl_data_rate_set+0x144>
 800940c:	e076      	b.n	80094fc <lsm6dso_xl_data_rate_set+0x232>
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <lsm6dso_xl_data_rate_set+0x14e>
 8009412:	2b01      	cmp	r3, #1
 8009414:	d00f      	beq.n	8009436 <lsm6dso_xl_data_rate_set+0x16c>
 8009416:	e071      	b.n	80094fc <lsm6dso_xl_data_rate_set+0x232>
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_XL_ODR_OFF){
 8009418:	1cfb      	adds	r3, r7, #3
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d104      	bne.n	800942a <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8009420:	2317      	movs	r3, #23
 8009422:	18fb      	adds	r3, r7, r3
 8009424:	2201      	movs	r2, #1
 8009426:	701a      	strb	r2, [r3, #0]

            } else {
              odr_xl = val;
            }
            break;
 8009428:	e06e      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
              odr_xl = val;
 800942a:	2317      	movs	r3, #23
 800942c:	18fb      	adds	r3, r7, r3
 800942e:	1cfa      	adds	r2, r7, #3
 8009430:	7812      	ldrb	r2, [r2, #0]
 8009432:	701a      	strb	r2, [r3, #0]
            break;
 8009434:	e068      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 8009436:	1cfb      	adds	r3, r7, #3
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d104      	bne.n	8009448 <lsm6dso_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 800943e:	2317      	movs	r3, #23
 8009440:	18fb      	adds	r3, r7, r3
 8009442:	2202      	movs	r2, #2
 8009444:	701a      	strb	r2, [r3, #0]
              odr_xl = LSM6DSO_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 8009446:	e05f      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 8009448:	1cfb      	adds	r3, r7, #3
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d104      	bne.n	800945a <lsm6dso_xl_data_rate_set+0x190>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8009450:	2317      	movs	r3, #23
 8009452:	18fb      	adds	r3, r7, r3
 8009454:	2202      	movs	r2, #2
 8009456:	701a      	strb	r2, [r3, #0]
            break;
 8009458:	e056      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
              odr_xl = val;
 800945a:	2317      	movs	r3, #23
 800945c:	18fb      	adds	r3, r7, r3
 800945e:	1cfa      	adds	r2, r7, #3
 8009460:	7812      	ldrb	r2, [r2, #0]
 8009462:	701a      	strb	r2, [r3, #0]
            break;
 8009464:	e050      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 8009466:	1cfb      	adds	r3, r7, #3
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d104      	bne.n	8009478 <lsm6dso_xl_data_rate_set+0x1ae>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800946e:	2317      	movs	r3, #23
 8009470:	18fb      	adds	r3, r7, r3
 8009472:	2203      	movs	r2, #3
 8009474:	701a      	strb	r2, [r3, #0]
              odr_xl = LSM6DSO_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 8009476:	e047      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 8009478:	1cfb      	adds	r3, r7, #3
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d104      	bne.n	800948a <lsm6dso_xl_data_rate_set+0x1c0>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8009480:	2317      	movs	r3, #23
 8009482:	18fb      	adds	r3, r7, r3
 8009484:	2203      	movs	r2, #3
 8009486:	701a      	strb	r2, [r3, #0]
            break;
 8009488:	e03e      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 800948a:	1cfb      	adds	r3, r7, #3
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	2b02      	cmp	r3, #2
 8009490:	d104      	bne.n	800949c <lsm6dso_xl_data_rate_set+0x1d2>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8009492:	2317      	movs	r3, #23
 8009494:	18fb      	adds	r3, r7, r3
 8009496:	2203      	movs	r2, #3
 8009498:	701a      	strb	r2, [r3, #0]
            break;
 800949a:	e035      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
              odr_xl = val;
 800949c:	2317      	movs	r3, #23
 800949e:	18fb      	adds	r3, r7, r3
 80094a0:	1cfa      	adds	r2, r7, #3
 80094a2:	7812      	ldrb	r2, [r2, #0]
 80094a4:	701a      	strb	r2, [r3, #0]
            break;
 80094a6:	e02f      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 80094a8:	1cfb      	adds	r3, r7, #3
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d104      	bne.n	80094ba <lsm6dso_xl_data_rate_set+0x1f0>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80094b0:	2317      	movs	r3, #23
 80094b2:	18fb      	adds	r3, r7, r3
 80094b4:	2204      	movs	r2, #4
 80094b6:	701a      	strb	r2, [r3, #0]
              odr_xl = LSM6DSO_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 80094b8:	e026      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 80094ba:	1cfb      	adds	r3, r7, #3
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d104      	bne.n	80094cc <lsm6dso_xl_data_rate_set+0x202>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80094c2:	2317      	movs	r3, #23
 80094c4:	18fb      	adds	r3, r7, r3
 80094c6:	2204      	movs	r2, #4
 80094c8:	701a      	strb	r2, [r3, #0]
            break;
 80094ca:	e01d      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 80094cc:	1cfb      	adds	r3, r7, #3
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d104      	bne.n	80094de <lsm6dso_xl_data_rate_set+0x214>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80094d4:	2317      	movs	r3, #23
 80094d6:	18fb      	adds	r3, r7, r3
 80094d8:	2204      	movs	r2, #4
 80094da:	701a      	strb	r2, [r3, #0]
            break;
 80094dc:	e014      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
            } else if (val == LSM6DSO_XL_ODR_52Hz){
 80094de:	1cfb      	adds	r3, r7, #3
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d104      	bne.n	80094f0 <lsm6dso_xl_data_rate_set+0x226>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80094e6:	2317      	movs	r3, #23
 80094e8:	18fb      	adds	r3, r7, r3
 80094ea:	2204      	movs	r2, #4
 80094ec:	701a      	strb	r2, [r3, #0]
            break;
 80094ee:	e00b      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
              odr_xl = val;
 80094f0:	2317      	movs	r3, #23
 80094f2:	18fb      	adds	r3, r7, r3
 80094f4:	1cfa      	adds	r2, r7, #3
 80094f6:	7812      	ldrb	r2, [r2, #0]
 80094f8:	701a      	strb	r2, [r3, #0]
            break;
 80094fa:	e005      	b.n	8009508 <lsm6dso_xl_data_rate_set+0x23e>
          default:
            odr_xl = val;
 80094fc:	2317      	movs	r3, #23
 80094fe:	18fb      	adds	r3, r7, r3
 8009500:	1cfa      	adds	r2, r7, #3
 8009502:	7812      	ldrb	r2, [r2, #0]
 8009504:	701a      	strb	r2, [r3, #0]
            break;
 8009506:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  if (ret == 0) {
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d108      	bne.n	8009520 <lsm6dso_xl_data_rate_set+0x256>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 800950e:	2308      	movs	r3, #8
 8009510:	18fa      	adds	r2, r7, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	2301      	movs	r3, #1
 8009516:	2110      	movs	r1, #16
 8009518:	f7ff fe2e 	bl	8009178 <lsm6dso_read_reg>
 800951c:	0003      	movs	r3, r0
 800951e:	613b      	str	r3, [r7, #16]
  }
  if (ret == 0) {
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d117      	bne.n	8009556 <lsm6dso_xl_data_rate_set+0x28c>
    reg.odr_xl = (uint8_t) odr_xl;
 8009526:	2317      	movs	r3, #23
 8009528:	18fb      	adds	r3, r7, r3
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	220f      	movs	r2, #15
 800952e:	4013      	ands	r3, r2
 8009530:	b2da      	uxtb	r2, r3
 8009532:	2408      	movs	r4, #8
 8009534:	193b      	adds	r3, r7, r4
 8009536:	0110      	lsls	r0, r2, #4
 8009538:	781a      	ldrb	r2, [r3, #0]
 800953a:	210f      	movs	r1, #15
 800953c:	400a      	ands	r2, r1
 800953e:	1c11      	adds	r1, r2, #0
 8009540:	1c02      	adds	r2, r0, #0
 8009542:	430a      	orrs	r2, r1
 8009544:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8009546:	193a      	adds	r2, r7, r4
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	2301      	movs	r3, #1
 800954c:	2110      	movs	r1, #16
 800954e:	f7ff fe34 	bl	80091ba <lsm6dso_write_reg>
 8009552:	0003      	movs	r3, r0
 8009554:	613b      	str	r3, [r7, #16]
  }
  return ret;
 8009556:	693b      	ldr	r3, [r7, #16]
}
 8009558:	0018      	movs	r0, r3
 800955a:	46bd      	mov	sp, r7
 800955c:	b007      	add	sp, #28
 800955e:	bd90      	pop	{r4, r7, pc}

08009560 <lsm6dso_xl_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t *val)
{
 8009560:	b590      	push	{r4, r7, lr}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 800956a:	2408      	movs	r4, #8
 800956c:	193a      	adds	r2, r7, r4
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	2301      	movs	r3, #1
 8009572:	2110      	movs	r1, #16
 8009574:	f7ff fe00 	bl	8009178 <lsm6dso_read_reg>
 8009578:	0003      	movs	r3, r0
 800957a:	60fb      	str	r3, [r7, #12]

  switch (reg.odr_xl) {
 800957c:	193b      	adds	r3, r7, r4
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	061b      	lsls	r3, r3, #24
 8009582:	0f1b      	lsrs	r3, r3, #28
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b0b      	cmp	r3, #11
 8009588:	d834      	bhi.n	80095f4 <lsm6dso_xl_data_rate_get+0x94>
 800958a:	009a      	lsls	r2, r3, #2
 800958c:	4b1e      	ldr	r3, [pc, #120]	@ (8009608 <lsm6dso_xl_data_rate_get+0xa8>)
 800958e:	18d3      	adds	r3, r2, r3
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	469f      	mov	pc, r3
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	2200      	movs	r2, #0
 8009598:	701a      	strb	r2, [r3, #0]
      break;
 800959a:	e02f      	b.n	80095fc <lsm6dso_xl_data_rate_get+0x9c>
    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2201      	movs	r2, #1
 80095a0:	701a      	strb	r2, [r3, #0]
      break;
 80095a2:	e02b      	b.n	80095fc <lsm6dso_xl_data_rate_get+0x9c>
    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2202      	movs	r2, #2
 80095a8:	701a      	strb	r2, [r3, #0]
      break;
 80095aa:	e027      	b.n	80095fc <lsm6dso_xl_data_rate_get+0x9c>
    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2203      	movs	r2, #3
 80095b0:	701a      	strb	r2, [r3, #0]
      break;
 80095b2:	e023      	b.n	80095fc <lsm6dso_xl_data_rate_get+0x9c>
    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2204      	movs	r2, #4
 80095b8:	701a      	strb	r2, [r3, #0]
      break;
 80095ba:	e01f      	b.n	80095fc <lsm6dso_xl_data_rate_get+0x9c>
    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	2205      	movs	r2, #5
 80095c0:	701a      	strb	r2, [r3, #0]
      break;
 80095c2:	e01b      	b.n	80095fc <lsm6dso_xl_data_rate_get+0x9c>
    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2206      	movs	r2, #6
 80095c8:	701a      	strb	r2, [r3, #0]
      break;
 80095ca:	e017      	b.n	80095fc <lsm6dso_xl_data_rate_get+0x9c>
    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2207      	movs	r2, #7
 80095d0:	701a      	strb	r2, [r3, #0]
      break;
 80095d2:	e013      	b.n	80095fc <lsm6dso_xl_data_rate_get+0x9c>
    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2208      	movs	r2, #8
 80095d8:	701a      	strb	r2, [r3, #0]
      break;
 80095da:	e00f      	b.n	80095fc <lsm6dso_xl_data_rate_get+0x9c>
    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	2209      	movs	r2, #9
 80095e0:	701a      	strb	r2, [r3, #0]
      break;
 80095e2:	e00b      	b.n	80095fc <lsm6dso_xl_data_rate_get+0x9c>
    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	220a      	movs	r2, #10
 80095e8:	701a      	strb	r2, [r3, #0]
      break;
 80095ea:	e007      	b.n	80095fc <lsm6dso_xl_data_rate_get+0x9c>
    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	220b      	movs	r2, #11
 80095f0:	701a      	strb	r2, [r3, #0]
      break;
 80095f2:	e003      	b.n	80095fc <lsm6dso_xl_data_rate_get+0x9c>
    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	2200      	movs	r2, #0
 80095f8:	701a      	strb	r2, [r3, #0]
      break;
 80095fa:	46c0      	nop			@ (mov r8, r8)
  }
  return ret;
 80095fc:	68fb      	ldr	r3, [r7, #12]
}
 80095fe:	0018      	movs	r0, r3
 8009600:	46bd      	mov	sp, r7
 8009602:	b005      	add	sp, #20
 8009604:	bd90      	pop	{r4, r7, pc}
 8009606:	46c0      	nop			@ (mov r8, r8)
 8009608:	08014a90 	.word	0x08014a90

0800960c <lsm6dso_gy_full_scale_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dso_fs_g_t val)
{
 800960c:	b590      	push	{r4, r7, lr}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	000a      	movs	r2, r1
 8009616:	1cfb      	adds	r3, r7, #3
 8009618:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 800961a:	2408      	movs	r4, #8
 800961c:	193a      	adds	r2, r7, r4
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	2301      	movs	r3, #1
 8009622:	2111      	movs	r1, #17
 8009624:	f7ff fda8 	bl	8009178 <lsm6dso_read_reg>
 8009628:	0003      	movs	r3, r0
 800962a:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d117      	bne.n	8009662 <lsm6dso_gy_full_scale_set+0x56>
    reg.fs_g = (uint8_t) val;
 8009632:	1cfb      	adds	r3, r7, #3
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	2207      	movs	r2, #7
 8009638:	4013      	ands	r3, r2
 800963a:	b2da      	uxtb	r2, r3
 800963c:	193b      	adds	r3, r7, r4
 800963e:	2107      	movs	r1, #7
 8009640:	400a      	ands	r2, r1
 8009642:	1890      	adds	r0, r2, r2
 8009644:	781a      	ldrb	r2, [r3, #0]
 8009646:	210e      	movs	r1, #14
 8009648:	438a      	bics	r2, r1
 800964a:	1c11      	adds	r1, r2, #0
 800964c:	1c02      	adds	r2, r0, #0
 800964e:	430a      	orrs	r2, r1
 8009650:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8009652:	193a      	adds	r2, r7, r4
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	2301      	movs	r3, #1
 8009658:	2111      	movs	r1, #17
 800965a:	f7ff fdae 	bl	80091ba <lsm6dso_write_reg>
 800965e:	0003      	movs	r3, r0
 8009660:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009662:	68fb      	ldr	r3, [r7, #12]
}
 8009664:	0018      	movs	r0, r3
 8009666:	46bd      	mov	sp, r7
 8009668:	b005      	add	sp, #20
 800966a:	bd90      	pop	{r4, r7, pc}

0800966c <lsm6dso_gy_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_g_t *val)
{
 800966c:	b590      	push	{r4, r7, lr}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8009676:	2408      	movs	r4, #8
 8009678:	193a      	adds	r2, r7, r4
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	2301      	movs	r3, #1
 800967e:	2111      	movs	r1, #17
 8009680:	f7ff fd7a 	bl	8009178 <lsm6dso_read_reg>
 8009684:	0003      	movs	r3, r0
 8009686:	60fb      	str	r3, [r7, #12]
  switch (reg.fs_g) {
 8009688:	193b      	adds	r3, r7, r4
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	071b      	lsls	r3, r3, #28
 800968e:	0f5b      	lsrs	r3, r3, #29
 8009690:	b2db      	uxtb	r3, r3
 8009692:	2b06      	cmp	r3, #6
 8009694:	d818      	bhi.n	80096c8 <lsm6dso_gy_full_scale_get+0x5c>
 8009696:	009a      	lsls	r2, r3, #2
 8009698:	4b10      	ldr	r3, [pc, #64]	@ (80096dc <lsm6dso_gy_full_scale_get+0x70>)
 800969a:	18d3      	adds	r3, r2, r3
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	469f      	mov	pc, r3
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	2200      	movs	r2, #0
 80096a4:	701a      	strb	r2, [r3, #0]
      break;
 80096a6:	e013      	b.n	80096d0 <lsm6dso_gy_full_scale_get+0x64>
    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	2201      	movs	r2, #1
 80096ac:	701a      	strb	r2, [r3, #0]
      break;
 80096ae:	e00f      	b.n	80096d0 <lsm6dso_gy_full_scale_get+0x64>
    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2202      	movs	r2, #2
 80096b4:	701a      	strb	r2, [r3, #0]
      break;
 80096b6:	e00b      	b.n	80096d0 <lsm6dso_gy_full_scale_get+0x64>
    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2204      	movs	r2, #4
 80096bc:	701a      	strb	r2, [r3, #0]
      break;
 80096be:	e007      	b.n	80096d0 <lsm6dso_gy_full_scale_get+0x64>
    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2206      	movs	r2, #6
 80096c4:	701a      	strb	r2, [r3, #0]
      break;
 80096c6:	e003      	b.n	80096d0 <lsm6dso_gy_full_scale_get+0x64>
    default:
      *val = LSM6DSO_250dps;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2200      	movs	r2, #0
 80096cc:	701a      	strb	r2, [r3, #0]
      break;
 80096ce:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80096d0:	68fb      	ldr	r3, [r7, #12]
}
 80096d2:	0018      	movs	r0, r3
 80096d4:	46bd      	mov	sp, r7
 80096d6:	b005      	add	sp, #20
 80096d8:	bd90      	pop	{r4, r7, pc}
 80096da:	46c0      	nop			@ (mov r8, r8)
 80096dc:	08014ac0 	.word	0x08014ac0

080096e0 <lsm6dso_gy_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_g_t val)
{
 80096e0:	b590      	push	{r4, r7, lr}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	000a      	movs	r2, r1
 80096ea:	1cfb      	adds	r3, r7, #3
 80096ec:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
 80096ee:	2317      	movs	r3, #23
 80096f0:	18fb      	adds	r3, r7, r3
 80096f2:	1cfa      	adds	r2, r7, #3
 80096f4:	7812      	ldrb	r2, [r2, #0]
 80096f6:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80096f8:	240c      	movs	r4, #12
 80096fa:	193a      	adds	r2, r7, r4
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	0011      	movs	r1, r2
 8009700:	0018      	movs	r0, r3
 8009702:	f000 fada 	bl	8009cba <lsm6dso_fsm_enable_get>
 8009706:	0003      	movs	r3, r0
 8009708:	613b      	str	r3, [r7, #16]
  if (ret == 0) {
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d000      	beq.n	8009712 <lsm6dso_gy_data_rate_set+0x32>
 8009710:	e105      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8009712:	0021      	movs	r1, r4
 8009714:	187b      	adds	r3, r7, r1
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	07db      	lsls	r3, r3, #31
 800971a:	0fdb      	lsrs	r3, r3, #31
 800971c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800971e:	187b      	adds	r3, r7, r1
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	079b      	lsls	r3, r3, #30
 8009724:	0fdb      	lsrs	r3, r3, #31
 8009726:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8009728:	4313      	orrs	r3, r2
 800972a:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800972c:	187b      	adds	r3, r7, r1
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	075b      	lsls	r3, r3, #29
 8009732:	0fdb      	lsrs	r3, r3, #31
 8009734:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8009736:	4313      	orrs	r3, r2
 8009738:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800973a:	187b      	adds	r3, r7, r1
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	071b      	lsls	r3, r3, #28
 8009740:	0fdb      	lsrs	r3, r3, #31
 8009742:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8009744:	4313      	orrs	r3, r2
 8009746:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8009748:	187b      	adds	r3, r7, r1
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	06db      	lsls	r3, r3, #27
 800974e:	0fdb      	lsrs	r3, r3, #31
 8009750:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8009752:	4313      	orrs	r3, r2
 8009754:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8009756:	187b      	adds	r3, r7, r1
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	069b      	lsls	r3, r3, #26
 800975c:	0fdb      	lsrs	r3, r3, #31
 800975e:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8009760:	4313      	orrs	r3, r2
 8009762:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8009764:	187b      	adds	r3, r7, r1
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	065b      	lsls	r3, r3, #25
 800976a:	0fdb      	lsrs	r3, r3, #31
 800976c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800976e:	4313      	orrs	r3, r2
 8009770:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8009772:	187b      	adds	r3, r7, r1
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	061b      	lsls	r3, r3, #24
 8009778:	0fdb      	lsrs	r3, r3, #31
 800977a:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800977c:	4313      	orrs	r3, r2
 800977e:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8009780:	187b      	adds	r3, r7, r1
 8009782:	785b      	ldrb	r3, [r3, #1]
 8009784:	07db      	lsls	r3, r3, #31
 8009786:	0fdb      	lsrs	r3, r3, #31
 8009788:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800978a:	4313      	orrs	r3, r2
 800978c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800978e:	187b      	adds	r3, r7, r1
 8009790:	785b      	ldrb	r3, [r3, #1]
 8009792:	079b      	lsls	r3, r3, #30
 8009794:	0fdb      	lsrs	r3, r3, #31
 8009796:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8009798:	4313      	orrs	r3, r2
 800979a:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800979c:	187b      	adds	r3, r7, r1
 800979e:	785b      	ldrb	r3, [r3, #1]
 80097a0:	075b      	lsls	r3, r3, #29
 80097a2:	0fdb      	lsrs	r3, r3, #31
 80097a4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80097a6:	4313      	orrs	r3, r2
 80097a8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80097aa:	187b      	adds	r3, r7, r1
 80097ac:	785b      	ldrb	r3, [r3, #1]
 80097ae:	071b      	lsls	r3, r3, #28
 80097b0:	0fdb      	lsrs	r3, r3, #31
 80097b2:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80097b4:	4313      	orrs	r3, r2
 80097b6:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80097b8:	187b      	adds	r3, r7, r1
 80097ba:	785b      	ldrb	r3, [r3, #1]
 80097bc:	06db      	lsls	r3, r3, #27
 80097be:	0fdb      	lsrs	r3, r3, #31
 80097c0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80097c2:	4313      	orrs	r3, r2
 80097c4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80097c6:	187b      	adds	r3, r7, r1
 80097c8:	785b      	ldrb	r3, [r3, #1]
 80097ca:	069b      	lsls	r3, r3, #26
 80097cc:	0fdb      	lsrs	r3, r3, #31
 80097ce:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80097d0:	4313      	orrs	r3, r2
 80097d2:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80097d4:	187b      	adds	r3, r7, r1
 80097d6:	785b      	ldrb	r3, [r3, #1]
 80097d8:	065b      	lsls	r3, r3, #25
 80097da:	0fdb      	lsrs	r3, r3, #31
 80097dc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80097de:	4313      	orrs	r3, r2
 80097e0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 80097e2:	187b      	adds	r3, r7, r1
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	061b      	lsls	r3, r3, #24
 80097e8:	0fdb      	lsrs	r3, r3, #31
 80097ea:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80097ec:	4313      	orrs	r3, r2
 80097ee:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d000      	beq.n	80097f6 <lsm6dso_gy_data_rate_set+0x116>
 80097f4:	e093      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80097f6:	240b      	movs	r4, #11
 80097f8:	193a      	adds	r2, r7, r4
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	0011      	movs	r1, r2
 80097fe:	0018      	movs	r0, r3
 8009800:	f000 fa81 	bl	8009d06 <lsm6dso_fsm_data_rate_get>
 8009804:	0003      	movs	r3, r0
 8009806:	613b      	str	r3, [r7, #16]
      if (ret == 0) {
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d000      	beq.n	8009810 <lsm6dso_gy_data_rate_set+0x130>
 800980e:	e086      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
        switch (fsm_odr) {
 8009810:	193b      	adds	r3, r7, r4
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	2b03      	cmp	r3, #3
 8009816:	d052      	beq.n	80098be <lsm6dso_gy_data_rate_set+0x1de>
 8009818:	dd00      	ble.n	800981c <lsm6dso_gy_data_rate_set+0x13c>
 800981a:	e07a      	b.n	8009912 <lsm6dso_gy_data_rate_set+0x232>
 800981c:	2b02      	cmp	r3, #2
 800981e:	d02d      	beq.n	800987c <lsm6dso_gy_data_rate_set+0x19c>
 8009820:	dd00      	ble.n	8009824 <lsm6dso_gy_data_rate_set+0x144>
 8009822:	e076      	b.n	8009912 <lsm6dso_gy_data_rate_set+0x232>
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <lsm6dso_gy_data_rate_set+0x14e>
 8009828:	2b01      	cmp	r3, #1
 800982a:	d00f      	beq.n	800984c <lsm6dso_gy_data_rate_set+0x16c>
 800982c:	e071      	b.n	8009912 <lsm6dso_gy_data_rate_set+0x232>
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_GY_ODR_OFF){
 800982e:	1cfb      	adds	r3, r7, #3
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d104      	bne.n	8009840 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8009836:	2317      	movs	r3, #23
 8009838:	18fb      	adds	r3, r7, r3
 800983a:	2201      	movs	r2, #1
 800983c:	701a      	strb	r2, [r3, #0]

            } else {
              odr_gy = val;
            }
            break;
 800983e:	e06e      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
              odr_gy = val;
 8009840:	2317      	movs	r3, #23
 8009842:	18fb      	adds	r3, r7, r3
 8009844:	1cfa      	adds	r2, r7, #3
 8009846:	7812      	ldrb	r2, [r2, #0]
 8009848:	701a      	strb	r2, [r3, #0]
            break;
 800984a:	e068      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 800984c:	1cfb      	adds	r3, r7, #3
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d104      	bne.n	800985e <lsm6dso_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8009854:	2317      	movs	r3, #23
 8009856:	18fb      	adds	r3, r7, r3
 8009858:	2202      	movs	r2, #2
 800985a:	701a      	strb	r2, [r3, #0]
              odr_gy = LSM6DSO_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 800985c:	e05f      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 800985e:	1cfb      	adds	r3, r7, #3
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d104      	bne.n	8009870 <lsm6dso_gy_data_rate_set+0x190>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8009866:	2317      	movs	r3, #23
 8009868:	18fb      	adds	r3, r7, r3
 800986a:	2202      	movs	r2, #2
 800986c:	701a      	strb	r2, [r3, #0]
            break;
 800986e:	e056      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
              odr_gy = val;
 8009870:	2317      	movs	r3, #23
 8009872:	18fb      	adds	r3, r7, r3
 8009874:	1cfa      	adds	r2, r7, #3
 8009876:	7812      	ldrb	r2, [r2, #0]
 8009878:	701a      	strb	r2, [r3, #0]
            break;
 800987a:	e050      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 800987c:	1cfb      	adds	r3, r7, #3
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d104      	bne.n	800988e <lsm6dso_gy_data_rate_set+0x1ae>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8009884:	2317      	movs	r3, #23
 8009886:	18fb      	adds	r3, r7, r3
 8009888:	2203      	movs	r2, #3
 800988a:	701a      	strb	r2, [r3, #0]
              odr_gy = LSM6DSO_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 800988c:	e047      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 800988e:	1cfb      	adds	r3, r7, #3
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	2b01      	cmp	r3, #1
 8009894:	d104      	bne.n	80098a0 <lsm6dso_gy_data_rate_set+0x1c0>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8009896:	2317      	movs	r3, #23
 8009898:	18fb      	adds	r3, r7, r3
 800989a:	2203      	movs	r2, #3
 800989c:	701a      	strb	r2, [r3, #0]
            break;
 800989e:	e03e      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 80098a0:	1cfb      	adds	r3, r7, #3
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d104      	bne.n	80098b2 <lsm6dso_gy_data_rate_set+0x1d2>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80098a8:	2317      	movs	r3, #23
 80098aa:	18fb      	adds	r3, r7, r3
 80098ac:	2203      	movs	r2, #3
 80098ae:	701a      	strb	r2, [r3, #0]
            break;
 80098b0:	e035      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
              odr_gy = val;
 80098b2:	2317      	movs	r3, #23
 80098b4:	18fb      	adds	r3, r7, r3
 80098b6:	1cfa      	adds	r2, r7, #3
 80098b8:	7812      	ldrb	r2, [r2, #0]
 80098ba:	701a      	strb	r2, [r3, #0]
            break;
 80098bc:	e02f      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 80098be:	1cfb      	adds	r3, r7, #3
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d104      	bne.n	80098d0 <lsm6dso_gy_data_rate_set+0x1f0>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80098c6:	2317      	movs	r3, #23
 80098c8:	18fb      	adds	r3, r7, r3
 80098ca:	2204      	movs	r2, #4
 80098cc:	701a      	strb	r2, [r3, #0]
              odr_gy = LSM6DSO_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 80098ce:	e026      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 80098d0:	1cfb      	adds	r3, r7, #3
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d104      	bne.n	80098e2 <lsm6dso_gy_data_rate_set+0x202>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80098d8:	2317      	movs	r3, #23
 80098da:	18fb      	adds	r3, r7, r3
 80098dc:	2204      	movs	r2, #4
 80098de:	701a      	strb	r2, [r3, #0]
            break;
 80098e0:	e01d      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 80098e2:	1cfb      	adds	r3, r7, #3
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d104      	bne.n	80098f4 <lsm6dso_gy_data_rate_set+0x214>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80098ea:	2317      	movs	r3, #23
 80098ec:	18fb      	adds	r3, r7, r3
 80098ee:	2204      	movs	r2, #4
 80098f0:	701a      	strb	r2, [r3, #0]
            break;
 80098f2:	e014      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
            } else if (val == LSM6DSO_GY_ODR_52Hz){
 80098f4:	1cfb      	adds	r3, r7, #3
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	2b03      	cmp	r3, #3
 80098fa:	d104      	bne.n	8009906 <lsm6dso_gy_data_rate_set+0x226>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80098fc:	2317      	movs	r3, #23
 80098fe:	18fb      	adds	r3, r7, r3
 8009900:	2204      	movs	r2, #4
 8009902:	701a      	strb	r2, [r3, #0]
            break;
 8009904:	e00b      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
              odr_gy = val;
 8009906:	2317      	movs	r3, #23
 8009908:	18fb      	adds	r3, r7, r3
 800990a:	1cfa      	adds	r2, r7, #3
 800990c:	7812      	ldrb	r2, [r2, #0]
 800990e:	701a      	strb	r2, [r3, #0]
            break;
 8009910:	e005      	b.n	800991e <lsm6dso_gy_data_rate_set+0x23e>
          default:
            odr_gy = val;
 8009912:	2317      	movs	r3, #23
 8009914:	18fb      	adds	r3, r7, r3
 8009916:	1cfa      	adds	r2, r7, #3
 8009918:	7812      	ldrb	r2, [r2, #0]
 800991a:	701a      	strb	r2, [r3, #0]
            break;
 800991c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0) {
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d108      	bne.n	8009936 <lsm6dso_gy_data_rate_set+0x256>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8009924:	2308      	movs	r3, #8
 8009926:	18fa      	adds	r2, r7, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	2301      	movs	r3, #1
 800992c:	2111      	movs	r1, #17
 800992e:	f7ff fc23 	bl	8009178 <lsm6dso_read_reg>
 8009932:	0003      	movs	r3, r0
 8009934:	613b      	str	r3, [r7, #16]
  }
  if (ret == 0) {
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d117      	bne.n	800996c <lsm6dso_gy_data_rate_set+0x28c>
    reg.odr_g = (uint8_t) odr_gy;
 800993c:	2317      	movs	r3, #23
 800993e:	18fb      	adds	r3, r7, r3
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	220f      	movs	r2, #15
 8009944:	4013      	ands	r3, r2
 8009946:	b2da      	uxtb	r2, r3
 8009948:	2408      	movs	r4, #8
 800994a:	193b      	adds	r3, r7, r4
 800994c:	0110      	lsls	r0, r2, #4
 800994e:	781a      	ldrb	r2, [r3, #0]
 8009950:	210f      	movs	r1, #15
 8009952:	400a      	ands	r2, r1
 8009954:	1c11      	adds	r1, r2, #0
 8009956:	1c02      	adds	r2, r0, #0
 8009958:	430a      	orrs	r2, r1
 800995a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 800995c:	193a      	adds	r2, r7, r4
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	2301      	movs	r3, #1
 8009962:	2111      	movs	r1, #17
 8009964:	f7ff fc29 	bl	80091ba <lsm6dso_write_reg>
 8009968:	0003      	movs	r3, r0
 800996a:	613b      	str	r3, [r7, #16]
  }

  return ret;
 800996c:	693b      	ldr	r3, [r7, #16]
}
 800996e:	0018      	movs	r0, r3
 8009970:	46bd      	mov	sp, r7
 8009972:	b007      	add	sp, #28
 8009974:	bd90      	pop	{r4, r7, pc}
	...

08009978 <lsm6dso_gy_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_g_t *val)
{
 8009978:	b590      	push	{r4, r7, lr}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8009982:	2408      	movs	r4, #8
 8009984:	193a      	adds	r2, r7, r4
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	2301      	movs	r3, #1
 800998a:	2111      	movs	r1, #17
 800998c:	f7ff fbf4 	bl	8009178 <lsm6dso_read_reg>
 8009990:	0003      	movs	r3, r0
 8009992:	60fb      	str	r3, [r7, #12]
  switch (reg.odr_g) {
 8009994:	193b      	adds	r3, r7, r4
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	061b      	lsls	r3, r3, #24
 800999a:	0f1b      	lsrs	r3, r3, #28
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b0a      	cmp	r3, #10
 80099a0:	d830      	bhi.n	8009a04 <lsm6dso_gy_data_rate_get+0x8c>
 80099a2:	009a      	lsls	r2, r3, #2
 80099a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009a18 <lsm6dso_gy_data_rate_get+0xa0>)
 80099a6:	18d3      	adds	r3, r2, r3
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	469f      	mov	pc, r3
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2200      	movs	r2, #0
 80099b0:	701a      	strb	r2, [r3, #0]
      break;
 80099b2:	e02b      	b.n	8009a0c <lsm6dso_gy_data_rate_get+0x94>
    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	2201      	movs	r2, #1
 80099b8:	701a      	strb	r2, [r3, #0]
      break;
 80099ba:	e027      	b.n	8009a0c <lsm6dso_gy_data_rate_get+0x94>
    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2202      	movs	r2, #2
 80099c0:	701a      	strb	r2, [r3, #0]
      break;
 80099c2:	e023      	b.n	8009a0c <lsm6dso_gy_data_rate_get+0x94>
    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	2203      	movs	r2, #3
 80099c8:	701a      	strb	r2, [r3, #0]
      break;
 80099ca:	e01f      	b.n	8009a0c <lsm6dso_gy_data_rate_get+0x94>
    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	2204      	movs	r2, #4
 80099d0:	701a      	strb	r2, [r3, #0]
      break;
 80099d2:	e01b      	b.n	8009a0c <lsm6dso_gy_data_rate_get+0x94>
    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	2205      	movs	r2, #5
 80099d8:	701a      	strb	r2, [r3, #0]
      break;
 80099da:	e017      	b.n	8009a0c <lsm6dso_gy_data_rate_get+0x94>
    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2206      	movs	r2, #6
 80099e0:	701a      	strb	r2, [r3, #0]
      break;
 80099e2:	e013      	b.n	8009a0c <lsm6dso_gy_data_rate_get+0x94>
    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2207      	movs	r2, #7
 80099e8:	701a      	strb	r2, [r3, #0]
      break;
 80099ea:	e00f      	b.n	8009a0c <lsm6dso_gy_data_rate_get+0x94>
    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2208      	movs	r2, #8
 80099f0:	701a      	strb	r2, [r3, #0]
      break;
 80099f2:	e00b      	b.n	8009a0c <lsm6dso_gy_data_rate_get+0x94>
    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2209      	movs	r2, #9
 80099f8:	701a      	strb	r2, [r3, #0]
      break;
 80099fa:	e007      	b.n	8009a0c <lsm6dso_gy_data_rate_get+0x94>
    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	220a      	movs	r2, #10
 8009a00:	701a      	strb	r2, [r3, #0]
      break;
 8009a02:	e003      	b.n	8009a0c <lsm6dso_gy_data_rate_get+0x94>
    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	2200      	movs	r2, #0
 8009a08:	701a      	strb	r2, [r3, #0]
      break;
 8009a0a:	46c0      	nop			@ (mov r8, r8)
  }
  return ret;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
}
 8009a0e:	0018      	movs	r0, r3
 8009a10:	46bd      	mov	sp, r7
 8009a12:	b005      	add	sp, #20
 8009a14:	bd90      	pop	{r4, r7, pc}
 8009a16:	46c0      	nop			@ (mov r8, r8)
 8009a18:	08014adc 	.word	0x08014adc

08009a1c <lsm6dso_block_data_update_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009a1c:	b590      	push	{r4, r7, lr}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	000a      	movs	r2, r1
 8009a26:	1cfb      	adds	r3, r7, #3
 8009a28:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8009a2a:	2408      	movs	r4, #8
 8009a2c:	193a      	adds	r2, r7, r4
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	2301      	movs	r3, #1
 8009a32:	2112      	movs	r1, #18
 8009a34:	f7ff fba0 	bl	8009178 <lsm6dso_read_reg>
 8009a38:	0003      	movs	r3, r0
 8009a3a:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d117      	bne.n	8009a72 <lsm6dso_block_data_update_set+0x56>
    reg.bdu = val;
 8009a42:	1cfb      	adds	r3, r7, #3
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	2201      	movs	r2, #1
 8009a48:	4013      	ands	r3, r2
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	193b      	adds	r3, r7, r4
 8009a4e:	2101      	movs	r1, #1
 8009a50:	400a      	ands	r2, r1
 8009a52:	0190      	lsls	r0, r2, #6
 8009a54:	781a      	ldrb	r2, [r3, #0]
 8009a56:	2140      	movs	r1, #64	@ 0x40
 8009a58:	438a      	bics	r2, r1
 8009a5a:	1c11      	adds	r1, r2, #0
 8009a5c:	1c02      	adds	r2, r0, #0
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8009a62:	193a      	adds	r2, r7, r4
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	2301      	movs	r3, #1
 8009a68:	2112      	movs	r1, #18
 8009a6a:	f7ff fba6 	bl	80091ba <lsm6dso_write_reg>
 8009a6e:	0003      	movs	r3, r0
 8009a70:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8009a72:	68fb      	ldr	r3, [r7, #12]
}
 8009a74:	0018      	movs	r0, r3
 8009a76:	46bd      	mov	sp, r7
 8009a78:	b005      	add	sp, #20
 8009a7a:	bd90      	pop	{r4, r7, pc}

08009a7c <lsm6dso_angular_rate_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	2306      	movs	r3, #6
 8009a8c:	2122      	movs	r1, #34	@ 0x22
 8009a8e:	f7ff fb73 	bl	8009178 <lsm6dso_read_reg>
 8009a92:	0003      	movs	r3, r0
 8009a94:	60fb      	str	r3, [r7, #12]
  return ret;
 8009a96:	68fb      	ldr	r3, [r7, #12]
}
 8009a98:	0018      	movs	r0, r3
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	b004      	add	sp, #16
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <lsm6dso_acceleration_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	2306      	movs	r3, #6
 8009ab0:	2128      	movs	r1, #40	@ 0x28
 8009ab2:	f7ff fb61 	bl	8009178 <lsm6dso_read_reg>
 8009ab6:	0003      	movs	r3, r0
 8009ab8:	60fb      	str	r3, [r7, #12]
  return ret;
 8009aba:	68fb      	ldr	r3, [r7, #12]
}
 8009abc:	0018      	movs	r0, r3
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	b004      	add	sp, #16
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <lsm6dso_mem_bank_set>:
  * @param  val      change the values of reg_access in
  *                               reg FUNC_CFG_ACCESS
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx, lsm6dso_reg_access_t val)
{
 8009ac4:	b590      	push	{r4, r7, lr}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	000a      	movs	r2, r1
 8009ace:	1cfb      	adds	r3, r7, #3
 8009ad0:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 8009ad2:	2408      	movs	r4, #8
 8009ad4:	193a      	adds	r2, r7, r4
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	2301      	movs	r3, #1
 8009ada:	2101      	movs	r1, #1
 8009adc:	f7ff fb4c 	bl	8009178 <lsm6dso_read_reg>
 8009ae0:	0003      	movs	r3, r0
 8009ae2:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d115      	bne.n	8009b16 <lsm6dso_mem_bank_set+0x52>
    reg.reg_access = (uint8_t)val;
 8009aea:	1cfb      	adds	r3, r7, #3
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	2203      	movs	r2, #3
 8009af0:	4013      	ands	r3, r2
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	193b      	adds	r3, r7, r4
 8009af6:	0190      	lsls	r0, r2, #6
 8009af8:	781a      	ldrb	r2, [r3, #0]
 8009afa:	213f      	movs	r1, #63	@ 0x3f
 8009afc:	400a      	ands	r2, r1
 8009afe:	1c11      	adds	r1, r2, #0
 8009b00:	1c02      	adds	r2, r0, #0
 8009b02:	430a      	orrs	r2, r1
 8009b04:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 8009b06:	193a      	adds	r2, r7, r4
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	2101      	movs	r1, #1
 8009b0e:	f7ff fb54 	bl	80091ba <lsm6dso_write_reg>
 8009b12:	0003      	movs	r3, r0
 8009b14:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8009b16:	68fb      	ldr	r3, [r7, #12]
}
 8009b18:	0018      	movs	r0, r3
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	b005      	add	sp, #20
 8009b1e:	bd90      	pop	{r4, r7, pc}

08009b20 <lsm6dso_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	2301      	movs	r3, #1
 8009b30:	210f      	movs	r1, #15
 8009b32:	f7ff fb21 	bl	8009178 <lsm6dso_read_reg>
 8009b36:	0003      	movs	r3, r0
 8009b38:	60fb      	str	r3, [r7, #12]
  return ret;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
}
 8009b3c:	0018      	movs	r0, r3
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	b004      	add	sp, #16
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <lsm6dso_auto_increment_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8009b44:	b590      	push	{r4, r7, lr}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	000a      	movs	r2, r1
 8009b4e:	1cfb      	adds	r3, r7, #3
 8009b50:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8009b52:	2408      	movs	r4, #8
 8009b54:	193a      	adds	r2, r7, r4
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	2301      	movs	r3, #1
 8009b5a:	2112      	movs	r1, #18
 8009b5c:	f7ff fb0c 	bl	8009178 <lsm6dso_read_reg>
 8009b60:	0003      	movs	r3, r0
 8009b62:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d117      	bne.n	8009b9a <lsm6dso_auto_increment_set+0x56>
    reg.if_inc = val;
 8009b6a:	1cfb      	adds	r3, r7, #3
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	4013      	ands	r3, r2
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	193b      	adds	r3, r7, r4
 8009b76:	2101      	movs	r1, #1
 8009b78:	400a      	ands	r2, r1
 8009b7a:	0090      	lsls	r0, r2, #2
 8009b7c:	781a      	ldrb	r2, [r3, #0]
 8009b7e:	2104      	movs	r1, #4
 8009b80:	438a      	bics	r2, r1
 8009b82:	1c11      	adds	r1, r2, #0
 8009b84:	1c02      	adds	r2, r0, #0
 8009b86:	430a      	orrs	r2, r1
 8009b88:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8009b8a:	193a      	adds	r2, r7, r4
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	2301      	movs	r3, #1
 8009b90:	2112      	movs	r1, #18
 8009b92:	f7ff fb12 	bl	80091ba <lsm6dso_write_reg>
 8009b96:	0003      	movs	r3, r0
 8009b98:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
}
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	b005      	add	sp, #20
 8009ba2:	bd90      	pop	{r4, r7, pc}

08009ba4 <lsm6dso_i3c_disable_set>:
  * @param  val      change the values of i3c_disable
  *                                    in reg CTRL9_XL
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx, lsm6dso_i3c_disable_t val)
{
 8009ba4:	b590      	push	{r4, r7, lr}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	000a      	movs	r2, r1
 8009bae:	1cfb      	adds	r3, r7, #3
 8009bb0:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8009bb2:	240c      	movs	r4, #12
 8009bb4:	193a      	adds	r2, r7, r4
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	2301      	movs	r3, #1
 8009bba:	2118      	movs	r1, #24
 8009bbc:	f7ff fadc 	bl	8009178 <lsm6dso_read_reg>
 8009bc0:	0003      	movs	r3, r0
 8009bc2:	617b      	str	r3, [r7, #20]
  if (ret == 0) {
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d11a      	bne.n	8009c00 <lsm6dso_i3c_disable_set+0x5c>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8009bca:	1cfb      	adds	r3, r7, #3
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	09db      	lsrs	r3, r3, #7
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	1c1a      	adds	r2, r3, #0
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	b2da      	uxtb	r2, r3
 8009bda:	193b      	adds	r3, r7, r4
 8009bdc:	2101      	movs	r1, #1
 8009bde:	400a      	ands	r2, r1
 8009be0:	1890      	adds	r0, r2, r2
 8009be2:	781a      	ldrb	r2, [r3, #0]
 8009be4:	2102      	movs	r1, #2
 8009be6:	438a      	bics	r2, r1
 8009be8:	1c11      	adds	r1, r2, #0
 8009bea:	1c02      	adds	r2, r0, #0
 8009bec:	430a      	orrs	r2, r1
 8009bee:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8009bf0:	193a      	adds	r2, r7, r4
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	2118      	movs	r1, #24
 8009bf8:	f7ff fadf 	bl	80091ba <lsm6dso_write_reg>
 8009bfc:	0003      	movs	r3, r0
 8009bfe:	617b      	str	r3, [r7, #20]
  }
  if (ret == 0) {
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d108      	bne.n	8009c18 <lsm6dso_i3c_disable_set+0x74>

    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8009c06:	2310      	movs	r3, #16
 8009c08:	18fa      	adds	r2, r7, r3
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	2162      	movs	r1, #98	@ 0x62
 8009c10:	f7ff fab2 	bl	8009178 <lsm6dso_read_reg>
 8009c14:	0003      	movs	r3, r0
 8009c16:	617b      	str	r3, [r7, #20]
                           (uint8_t*)&i3c_bus_avb, 1);
  }
  if (ret == 0) {
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d118      	bne.n	8009c50 <lsm6dso_i3c_disable_set+0xac>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8009c1e:	1cfb      	adds	r3, r7, #3
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2203      	movs	r2, #3
 8009c24:	4013      	ands	r3, r2
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	2410      	movs	r4, #16
 8009c2a:	193b      	adds	r3, r7, r4
 8009c2c:	2103      	movs	r1, #3
 8009c2e:	400a      	ands	r2, r1
 8009c30:	00d0      	lsls	r0, r2, #3
 8009c32:	781a      	ldrb	r2, [r3, #0]
 8009c34:	2118      	movs	r1, #24
 8009c36:	438a      	bics	r2, r1
 8009c38:	1c11      	adds	r1, r2, #0
 8009c3a:	1c02      	adds	r2, r0, #0
 8009c3c:	430a      	orrs	r2, r1
 8009c3e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8009c40:	193a      	adds	r2, r7, r4
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	2301      	movs	r3, #1
 8009c46:	2162      	movs	r1, #98	@ 0x62
 8009c48:	f7ff fab7 	bl	80091ba <lsm6dso_write_reg>
 8009c4c:	0003      	movs	r3, r0
 8009c4e:	617b      	str	r3, [r7, #20]
                            (uint8_t*)&i3c_bus_avb, 1);
  }

  return ret;
 8009c50:	697b      	ldr	r3, [r7, #20]
}
 8009c52:	0018      	movs	r0, r3
 8009c54:	46bd      	mov	sp, r7
 8009c56:	b007      	add	sp, #28
 8009c58:	bd90      	pop	{r4, r7, pc}

08009c5a <lsm6dso_fifo_mode_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fifo_mode in reg FIFO_CTRL4
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dso_fifo_mode_t val)
{
 8009c5a:	b590      	push	{r4, r7, lr}
 8009c5c:	b085      	sub	sp, #20
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	000a      	movs	r2, r1
 8009c64:	1cfb      	adds	r3, r7, #3
 8009c66:	701a      	strb	r2, [r3, #0]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 8009c68:	2408      	movs	r4, #8
 8009c6a:	193a      	adds	r2, r7, r4
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	2301      	movs	r3, #1
 8009c70:	210a      	movs	r1, #10
 8009c72:	f7ff fa81 	bl	8009178 <lsm6dso_read_reg>
 8009c76:	0003      	movs	r3, r0
 8009c78:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d117      	bne.n	8009cb0 <lsm6dso_fifo_mode_set+0x56>
    reg.fifo_mode = (uint8_t)val;
 8009c80:	1cfb      	adds	r3, r7, #3
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	2207      	movs	r2, #7
 8009c86:	4013      	ands	r3, r2
 8009c88:	b2da      	uxtb	r2, r3
 8009c8a:	193b      	adds	r3, r7, r4
 8009c8c:	2107      	movs	r1, #7
 8009c8e:	400a      	ands	r2, r1
 8009c90:	0010      	movs	r0, r2
 8009c92:	781a      	ldrb	r2, [r3, #0]
 8009c94:	2107      	movs	r1, #7
 8009c96:	438a      	bics	r2, r1
 8009c98:	1c11      	adds	r1, r2, #0
 8009c9a:	1c02      	adds	r2, r0, #0
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 8009ca0:	193a      	adds	r2, r7, r4
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	210a      	movs	r1, #10
 8009ca8:	f7ff fa87 	bl	80091ba <lsm6dso_write_reg>
 8009cac:	0003      	movs	r3, r0
 8009cae:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
}
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	b005      	add	sp, #20
 8009cb8:	bd90      	pop	{r4, r7, pc}

08009cba <lsm6dso_fsm_enable_get>:
  * @param  val      union of registers from FSM_ENABLE_A to FSM_ENABLE_B
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2102      	movs	r1, #2
 8009cc8:	0018      	movs	r0, r3
 8009cca:	f7ff fefb 	bl	8009ac4 <lsm6dso_mem_bank_set>
 8009cce:	0003      	movs	r3, r0
 8009cd0:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d107      	bne.n	8009ce8 <lsm6dso_fsm_enable_get+0x2e>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t*) val, 2);
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	2302      	movs	r3, #2
 8009cde:	2146      	movs	r1, #70	@ 0x46
 8009ce0:	f7ff fa4a 	bl	8009178 <lsm6dso_read_reg>
 8009ce4:	0003      	movs	r3, r0
 8009ce6:	60fb      	str	r3, [r7, #12]
  }
  if (ret == 0) {
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d106      	bne.n	8009cfc <lsm6dso_fsm_enable_get+0x42>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	f7ff fee6 	bl	8009ac4 <lsm6dso_mem_bank_set>
 8009cf8:	0003      	movs	r3, r0
 8009cfa:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
}
 8009cfe:	0018      	movs	r0, r3
 8009d00:	46bd      	mov	sp, r7
 8009d02:	b004      	add	sp, #16
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <lsm6dso_fsm_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_fsm_odr_t *val)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2102      	movs	r1, #2
 8009d14:	0018      	movs	r0, r3
 8009d16:	f7ff fed5 	bl	8009ac4 <lsm6dso_mem_bank_set>
 8009d1a:	0003      	movs	r3, r0
 8009d1c:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d108      	bne.n	8009d36 <lsm6dso_fsm_data_rate_get+0x30>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8009d24:	2308      	movs	r3, #8
 8009d26:	18fa      	adds	r2, r7, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	215f      	movs	r1, #95	@ 0x5f
 8009d2e:	f7ff fa23 	bl	8009178 <lsm6dso_read_reg>
 8009d32:	0003      	movs	r3, r0
 8009d34:	60fb      	str	r3, [r7, #12]
                           (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d12b      	bne.n	8009d94 <lsm6dso_fsm_data_rate_get+0x8e>
    switch (reg.fsm_odr) {
 8009d3c:	2308      	movs	r3, #8
 8009d3e:	18fb      	adds	r3, r7, r3
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	06db      	lsls	r3, r3, #27
 8009d44:	0f9b      	lsrs	r3, r3, #30
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b03      	cmp	r3, #3
 8009d4a:	d014      	beq.n	8009d76 <lsm6dso_fsm_data_rate_get+0x70>
 8009d4c:	dc17      	bgt.n	8009d7e <lsm6dso_fsm_data_rate_get+0x78>
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d00d      	beq.n	8009d6e <lsm6dso_fsm_data_rate_get+0x68>
 8009d52:	dc14      	bgt.n	8009d7e <lsm6dso_fsm_data_rate_get+0x78>
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <lsm6dso_fsm_data_rate_get+0x58>
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d004      	beq.n	8009d66 <lsm6dso_fsm_data_rate_get+0x60>
 8009d5c:	e00f      	b.n	8009d7e <lsm6dso_fsm_data_rate_get+0x78>
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2200      	movs	r2, #0
 8009d62:	701a      	strb	r2, [r3, #0]
        break;
 8009d64:	e00f      	b.n	8009d86 <lsm6dso_fsm_data_rate_get+0x80>
      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	701a      	strb	r2, [r3, #0]
        break;
 8009d6c:	e00b      	b.n	8009d86 <lsm6dso_fsm_data_rate_get+0x80>
      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2202      	movs	r2, #2
 8009d72:	701a      	strb	r2, [r3, #0]
        break;
 8009d74:	e007      	b.n	8009d86 <lsm6dso_fsm_data_rate_get+0x80>
      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2203      	movs	r2, #3
 8009d7a:	701a      	strb	r2, [r3, #0]
        break;
 8009d7c:	e003      	b.n	8009d86 <lsm6dso_fsm_data_rate_get+0x80>
      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	2200      	movs	r2, #0
 8009d82:	701a      	strb	r2, [r3, #0]
        break;
 8009d84:	46c0      	nop			@ (mov r8, r8)
    }
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2100      	movs	r1, #0
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	f7ff fe9a 	bl	8009ac4 <lsm6dso_mem_bank_set>
 8009d90:	0003      	movs	r3, r0
 8009d92:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009d94:	68fb      	ldr	r3, [r7, #12]
}
 8009d96:	0018      	movs	r0, r3
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	b004      	add	sp, #16
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <STTS751_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d103      	bne.n	8009db8 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	425b      	negs	r3, r3
 8009db4:	60fb      	str	r3, [r7, #12]
 8009db6:	e031      	b.n	8009e1c <STTS751_RegisterBusIO+0x7c>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	689a      	ldr	r2, [r3, #8]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	7b1a      	ldrb	r2, [r3, #12]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	691a      	ldr	r2, [r3, #16]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	695a      	ldr	r2, [r3, #20]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	699a      	ldr	r2, [r3, #24]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a0d      	ldr	r2, [pc, #52]	@ (8009e28 <STTS751_RegisterBusIO+0x88>)
 8009df4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a0c      	ldr	r2, [pc, #48]	@ (8009e2c <STTS751_RegisterBusIO+0x8c>)
 8009dfa:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	625a      	str	r2, [r3, #36]	@ 0x24

    if (pObj->IO.Init != NULL)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d005      	beq.n	8009e16 <STTS751_RegisterBusIO+0x76>
    {
      ret = pObj->IO.Init();
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4798      	blx	r3
 8009e10:	0003      	movs	r3, r0
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	e002      	b.n	8009e1c <STTS751_RegisterBusIO+0x7c>
    }
    else
    {
      ret = STTS751_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	425b      	negs	r3, r3
 8009e1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
}
 8009e1e:	0018      	movs	r0, r3
 8009e20:	46bd      	mov	sp, r7
 8009e22:	b004      	add	sp, #16
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	46c0      	nop			@ (mov r8, r8)
 8009e28:	0800a24f 	.word	0x0800a24f
 8009e2c:	0800a2e5 	.word	0x0800a2e5

08009e30 <STTS751_Init>:
 * @brief  Initialize the STTS751 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2228      	movs	r2, #40	@ 0x28
 8009e3c:	5c9b      	ldrb	r3, [r3, r2]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d124      	bne.n	8009e8c <STTS751_Init+0x5c>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	331c      	adds	r3, #28
 8009e46:	2101      	movs	r1, #1
 8009e48:	0018      	movs	r0, r3
 8009e4a:	f000 fc69 	bl	800a720 <stts751_pin_event_route_set>
 8009e4e:	1e03      	subs	r3, r0, #0
 8009e50:	d002      	beq.n	8009e58 <STTS751_Init+0x28>
    {
      return STTS751_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	425b      	negs	r3, r3
 8009e56:	e01e      	b.n	8009e96 <STTS751_Init+0x66>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	22fe      	movs	r2, #254	@ 0xfe
 8009e5c:	0592      	lsls	r2, r2, #22
 8009e5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	331c      	adds	r3, #28
 8009e64:	2103      	movs	r1, #3
 8009e66:	0018      	movs	r0, r3
 8009e68:	f000 fbc4 	bl	800a5f4 <stts751_resolution_set>
 8009e6c:	1e03      	subs	r3, r0, #0
 8009e6e:	d002      	beq.n	8009e76 <STTS751_Init+0x46>
    {
      return STTS751_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	425b      	negs	r3, r3
 8009e74:	e00f      	b.n	8009e96 <STTS751_Init+0x66>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	331c      	adds	r3, #28
 8009e7a:	2180      	movs	r1, #128	@ 0x80
 8009e7c:	0018      	movs	r0, r3
 8009e7e:	f000 fad5 	bl	800a42c <stts751_temp_data_rate_set>
 8009e82:	1e03      	subs	r3, r0, #0
 8009e84:	d002      	beq.n	8009e8c <STTS751_Init+0x5c>
    {
      return STTS751_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	425b      	negs	r3, r3
 8009e8a:	e004      	b.n	8009e96 <STTS751_Init+0x66>
    }
  }

  pObj->is_initialized = 1;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2228      	movs	r2, #40	@ 0x28
 8009e90:	2101      	movs	r1, #1
 8009e92:	5499      	strb	r1, [r3, r2]

  return STTS751_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	0018      	movs	r0, r3
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	b002      	add	sp, #8
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <STTS751_DeInit>:
 * @brief  Deinitialize the STTS751 sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2228      	movs	r2, #40	@ 0x28
 8009eaa:	5c9b      	ldrb	r3, [r3, r2]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d108      	bne.n	8009ec2 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	0018      	movs	r0, r3
 8009eb4:	f000 f86a 	bl	8009f8c <STTS751_TEMP_Disable>
 8009eb8:	1e03      	subs	r3, r0, #0
 8009eba:	d002      	beq.n	8009ec2 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	425b      	negs	r3, r3
 8009ec0:	e004      	b.n	8009ecc <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2228      	movs	r2, #40	@ 0x28
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	5499      	strb	r1, [r3, r2]

  return STTS751_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	0018      	movs	r0, r3
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	b002      	add	sp, #8
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <STTS751_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	331c      	adds	r3, #28
 8009ee2:	220c      	movs	r2, #12
 8009ee4:	18ba      	adds	r2, r7, r2
 8009ee6:	0011      	movs	r1, r2
 8009ee8:	0018      	movs	r0, r3
 8009eea:	f000 fc47 	bl	800a77c <stts751_device_id_get>
 8009eee:	1e03      	subs	r3, r0, #0
 8009ef0:	d002      	beq.n	8009ef8 <STTS751_ReadID+0x24>
  {
    return STTS751_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	425b      	negs	r3, r3
 8009ef6:	e005      	b.n	8009f04 <STTS751_ReadID+0x30>
  }

  *Id = buf.manufacturer_id;
 8009ef8:	230c      	movs	r3, #12
 8009efa:	18fb      	adds	r3, r7, r3
 8009efc:	785a      	ldrb	r2, [r3, #1]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	0018      	movs	r0, r3
 8009f06:	46bd      	mov	sp, r7
 8009f08:	b004      	add	sp, #16
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <STTS751_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to STTS751 sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2201      	movs	r2, #1
 8009f26:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	2200      	movs	r2, #0
 8009f32:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	2284      	movs	r2, #132	@ 0x84
 8009f38:	05d2      	lsls	r2, r2, #23
 8009f3a:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	0018      	movs	r0, r3
 8009f46:	46bd      	mov	sp, r7
 8009f48:	b002      	add	sp, #8
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <STTS751_TEMP_Enable>:
 * @brief  Enable the STTS751 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2229      	movs	r2, #41	@ 0x29
 8009f58:	5c9b      	ldrb	r3, [r3, r2]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d101      	bne.n	8009f62 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	e010      	b.n	8009f84 <STTS751_TEMP_Enable+0x38>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	1c11      	adds	r1, r2, #0
 8009f6a:	0018      	movs	r0, r3
 8009f6c:	f000 f8a2 	bl	800a0b4 <STTS751_TEMP_SetOutputDataRate>
 8009f70:	1e03      	subs	r3, r0, #0
 8009f72:	d002      	beq.n	8009f7a <STTS751_TEMP_Enable+0x2e>
  {
    return STTS751_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	425b      	negs	r3, r3
 8009f78:	e004      	b.n	8009f84 <STTS751_TEMP_Enable+0x38>
  }

  pObj->temp_is_enabled = 1;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2229      	movs	r2, #41	@ 0x29
 8009f7e:	2101      	movs	r1, #1
 8009f80:	5499      	strb	r1, [r3, r2]

  return STTS751_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	0018      	movs	r0, r3
 8009f86:	46bd      	mov	sp, r7
 8009f88:	b002      	add	sp, #8
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <STTS751_TEMP_Disable>:
 * @brief  Disable the STTS751 temperature sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2229      	movs	r2, #41	@ 0x29
 8009f98:	5c9b      	ldrb	r3, [r3, r2]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	e01c      	b.n	8009fdc <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	332c      	adds	r3, #44	@ 0x2c
 8009fa6:	001a      	movs	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	0011      	movs	r1, r2
 8009fac:	0018      	movs	r0, r3
 8009fae:	f000 f819 	bl	8009fe4 <STTS751_TEMP_GetOutputDataRate>
 8009fb2:	1e03      	subs	r3, r0, #0
 8009fb4:	d002      	beq.n	8009fbc <STTS751_TEMP_Disable+0x30>
  {
    return STTS751_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	425b      	negs	r3, r3
 8009fba:	e00f      	b.n	8009fdc <STTS751_TEMP_Disable+0x50>
  }
  
  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	331c      	adds	r3, #28
 8009fc0:	2180      	movs	r1, #128	@ 0x80
 8009fc2:	0018      	movs	r0, r3
 8009fc4:	f000 fa32 	bl	800a42c <stts751_temp_data_rate_set>
 8009fc8:	1e03      	subs	r3, r0, #0
 8009fca:	d002      	beq.n	8009fd2 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	425b      	negs	r3, r3
 8009fd0:	e004      	b.n	8009fdc <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2229      	movs	r2, #41	@ 0x29
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	5499      	strb	r1, [r3, r2]

  return STTS751_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	0018      	movs	r0, r3
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	b002      	add	sp, #8
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <STTS751_TEMP_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	331c      	adds	r3, #28
 8009ff6:	220b      	movs	r2, #11
 8009ff8:	18ba      	adds	r2, r7, r2
 8009ffa:	0011      	movs	r1, r2
 8009ffc:	0018      	movs	r0, r3
 8009ffe:	f000 fa85 	bl	800a50c <stts751_temp_data_rate_get>
 800a002:	1e03      	subs	r3, r0, #0
 800a004:	d002      	beq.n	800a00c <STTS751_TEMP_GetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	425b      	negs	r3, r3
 800a00a:	e04d      	b.n	800a0a8 <STTS751_TEMP_GetOutputDataRate+0xc4>
  }

  switch (odr_low_level)
 800a00c:	230b      	movs	r3, #11
 800a00e:	18fb      	adds	r3, r7, r3
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	2b90      	cmp	r3, #144	@ 0x90
 800a014:	d00d      	beq.n	800a032 <STTS751_TEMP_GetOutputDataRate+0x4e>
 800a016:	dc42      	bgt.n	800a09e <STTS751_TEMP_GetOutputDataRate+0xba>
 800a018:	2b09      	cmp	r3, #9
 800a01a:	dc08      	bgt.n	800a02e <STTS751_TEMP_GetOutputDataRate+0x4a>
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	db3e      	blt.n	800a09e <STTS751_TEMP_GetOutputDataRate+0xba>
 800a020:	2b09      	cmp	r3, #9
 800a022:	d83c      	bhi.n	800a09e <STTS751_TEMP_GetOutputDataRate+0xba>
 800a024:	009a      	lsls	r2, r3, #2
 800a026:	4b22      	ldr	r3, [pc, #136]	@ (800a0b0 <STTS751_TEMP_GetOutputDataRate+0xcc>)
 800a028:	18d3      	adds	r3, r2, r3
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	469f      	mov	pc, r3
 800a02e:	2b80      	cmp	r3, #128	@ 0x80
 800a030:	d135      	bne.n	800a09e <STTS751_TEMP_GetOutputDataRate+0xba>
  {
    case STTS751_TEMP_ODR_OFF:
	case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]
      break;
 800a038:	e035      	b.n	800a0a6 <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	22f6      	movs	r2, #246	@ 0xf6
 800a03e:	0592      	lsls	r2, r2, #22
 800a040:	601a      	str	r2, [r3, #0]
      break;
 800a042:	e030      	b.n	800a0a6 <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	22f8      	movs	r2, #248	@ 0xf8
 800a048:	0592      	lsls	r2, r2, #22
 800a04a:	601a      	str	r2, [r3, #0]
      break;
 800a04c:	e02b      	b.n	800a0a6 <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	22fa      	movs	r2, #250	@ 0xfa
 800a052:	0592      	lsls	r2, r2, #22
 800a054:	601a      	str	r2, [r3, #0]
      break;
 800a056:	e026      	b.n	800a0a6 <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	22fc      	movs	r2, #252	@ 0xfc
 800a05c:	0592      	lsls	r2, r2, #22
 800a05e:	601a      	str	r2, [r3, #0]
      break;
 800a060:	e021      	b.n	800a0a6 <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	22fe      	movs	r2, #254	@ 0xfe
 800a066:	0592      	lsls	r2, r2, #22
 800a068:	601a      	str	r2, [r3, #0]
      break;
 800a06a:	e01c      	b.n	800a0a6 <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	2280      	movs	r2, #128	@ 0x80
 800a070:	05d2      	lsls	r2, r2, #23
 800a072:	601a      	str	r2, [r3, #0]
      break;
 800a074:	e017      	b.n	800a0a6 <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2281      	movs	r2, #129	@ 0x81
 800a07a:	05d2      	lsls	r2, r2, #23
 800a07c:	601a      	str	r2, [r3, #0]
      break;
 800a07e:	e012      	b.n	800a0a6 <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	2282      	movs	r2, #130	@ 0x82
 800a084:	05d2      	lsls	r2, r2, #23
 800a086:	601a      	str	r2, [r3, #0]
      break;
 800a088:	e00d      	b.n	800a0a6 <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2283      	movs	r2, #131	@ 0x83
 800a08e:	05d2      	lsls	r2, r2, #23
 800a090:	601a      	str	r2, [r3, #0]
      break;
 800a092:	e008      	b.n	800a0a6 <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2284      	movs	r2, #132	@ 0x84
 800a098:	05d2      	lsls	r2, r2, #23
 800a09a:	601a      	str	r2, [r3, #0]
      break;
 800a09c:	e003      	b.n	800a0a6 <STTS751_TEMP_GetOutputDataRate+0xc2>

    default:
      ret = STTS751_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	425b      	negs	r3, r3
 800a0a2:	60fb      	str	r3, [r7, #12]
      break;
 800a0a4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
}
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	b004      	add	sp, #16
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	08014b08 	.word	0x08014b08

0800a0b4 <STTS751_TEMP_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	331c      	adds	r3, #28
 800a0c2:	220e      	movs	r2, #14
 800a0c4:	18ba      	adds	r2, r7, r2
 800a0c6:	0011      	movs	r1, r2
 800a0c8:	0018      	movs	r0, r3
 800a0ca:	f000 fac3 	bl	800a654 <stts751_resolution_get>
 800a0ce:	1e03      	subs	r3, r0, #0
 800a0d0:	d002      	beq.n	800a0d8 <STTS751_TEMP_SetOutputDataRate+0x24>
  {
    return STTS751_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	425b      	negs	r3, r3
 800a0d6:	e095      	b.n	800a204 <STTS751_TEMP_SetOutputDataRate+0x150>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if(Odr == 16.0f && res == STTS751_12bit)
 800a0d8:	2183      	movs	r1, #131	@ 0x83
 800a0da:	05c9      	lsls	r1, r1, #23
 800a0dc:	6838      	ldr	r0, [r7, #0]
 800a0de:	f7f6 f8fd 	bl	80002dc <__aeabi_fcmpeq>
 800a0e2:	1e03      	subs	r3, r0, #0
 800a0e4:	d00f      	beq.n	800a106 <STTS751_TEMP_SetOutputDataRate+0x52>
 800a0e6:	230e      	movs	r3, #14
 800a0e8:	18fb      	adds	r3, r7, r3
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d10a      	bne.n	800a106 <STTS751_TEMP_SetOutputDataRate+0x52>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	331c      	adds	r3, #28
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	f000 fa7c 	bl	800a5f4 <stts751_resolution_set>
 800a0fc:	1e03      	subs	r3, r0, #0
 800a0fe:	d002      	beq.n	800a106 <STTS751_TEMP_SetOutputDataRate+0x52>
    {
      return STTS751_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	425b      	negs	r3, r3
 800a104:	e07e      	b.n	800a204 <STTS751_TEMP_SetOutputDataRate+0x150>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if(Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 800a106:	2184      	movs	r1, #132	@ 0x84
 800a108:	05c9      	lsls	r1, r1, #23
 800a10a:	6838      	ldr	r0, [r7, #0]
 800a10c:	f7f6 f8e6 	bl	80002dc <__aeabi_fcmpeq>
 800a110:	1e03      	subs	r3, r0, #0
 800a112:	d013      	beq.n	800a13c <STTS751_TEMP_SetOutputDataRate+0x88>
 800a114:	220e      	movs	r2, #14
 800a116:	18bb      	adds	r3, r7, r2
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	d003      	beq.n	800a126 <STTS751_TEMP_SetOutputDataRate+0x72>
 800a11e:	18bb      	adds	r3, r7, r2
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d10a      	bne.n	800a13c <STTS751_TEMP_SetOutputDataRate+0x88>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	331c      	adds	r3, #28
 800a12a:	2100      	movs	r1, #0
 800a12c:	0018      	movs	r0, r3
 800a12e:	f000 fa61 	bl	800a5f4 <stts751_resolution_set>
 800a132:	1e03      	subs	r3, r0, #0
 800a134:	d002      	beq.n	800a13c <STTS751_TEMP_SetOutputDataRate+0x88>
    {
      return STTS751_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	425b      	negs	r3, r3
 800a13a:	e063      	b.n	800a204 <STTS751_TEMP_SetOutputDataRate+0x150>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
          : (Odr <= 0.125f ) ? STTS751_TEMP_ODR_125mHz
 800a13c:	21f6      	movs	r1, #246	@ 0xf6
 800a13e:	0589      	lsls	r1, r1, #22
 800a140:	6838      	ldr	r0, [r7, #0]
 800a142:	f7f6 f8db 	bl	80002fc <__aeabi_fcmple>
 800a146:	1e03      	subs	r3, r0, #0
 800a148:	d001      	beq.n	800a14e <STTS751_TEMP_SetOutputDataRate+0x9a>
 800a14a:	2300      	movs	r3, #0
 800a14c:	e048      	b.n	800a1e0 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800a14e:	21f8      	movs	r1, #248	@ 0xf8
 800a150:	0589      	lsls	r1, r1, #22
 800a152:	6838      	ldr	r0, [r7, #0]
 800a154:	f7f6 f8d2 	bl	80002fc <__aeabi_fcmple>
 800a158:	1e03      	subs	r3, r0, #0
 800a15a:	d001      	beq.n	800a160 <STTS751_TEMP_SetOutputDataRate+0xac>
 800a15c:	2301      	movs	r3, #1
 800a15e:	e03f      	b.n	800a1e0 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800a160:	21fa      	movs	r1, #250	@ 0xfa
 800a162:	0589      	lsls	r1, r1, #22
 800a164:	6838      	ldr	r0, [r7, #0]
 800a166:	f7f6 f8c9 	bl	80002fc <__aeabi_fcmple>
 800a16a:	1e03      	subs	r3, r0, #0
 800a16c:	d001      	beq.n	800a172 <STTS751_TEMP_SetOutputDataRate+0xbe>
 800a16e:	2302      	movs	r3, #2
 800a170:	e036      	b.n	800a1e0 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800a172:	21fc      	movs	r1, #252	@ 0xfc
 800a174:	0589      	lsls	r1, r1, #22
 800a176:	6838      	ldr	r0, [r7, #0]
 800a178:	f7f6 f8c0 	bl	80002fc <__aeabi_fcmple>
 800a17c:	1e03      	subs	r3, r0, #0
 800a17e:	d001      	beq.n	800a184 <STTS751_TEMP_SetOutputDataRate+0xd0>
 800a180:	2303      	movs	r3, #3
 800a182:	e02d      	b.n	800a1e0 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800a184:	21fe      	movs	r1, #254	@ 0xfe
 800a186:	0589      	lsls	r1, r1, #22
 800a188:	6838      	ldr	r0, [r7, #0]
 800a18a:	f7f6 f8b7 	bl	80002fc <__aeabi_fcmple>
 800a18e:	1e03      	subs	r3, r0, #0
 800a190:	d001      	beq.n	800a196 <STTS751_TEMP_SetOutputDataRate+0xe2>
 800a192:	2304      	movs	r3, #4
 800a194:	e024      	b.n	800a1e0 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800a196:	2180      	movs	r1, #128	@ 0x80
 800a198:	05c9      	lsls	r1, r1, #23
 800a19a:	6838      	ldr	r0, [r7, #0]
 800a19c:	f7f6 f8ae 	bl	80002fc <__aeabi_fcmple>
 800a1a0:	1e03      	subs	r3, r0, #0
 800a1a2:	d001      	beq.n	800a1a8 <STTS751_TEMP_SetOutputDataRate+0xf4>
 800a1a4:	2305      	movs	r3, #5
 800a1a6:	e01b      	b.n	800a1e0 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800a1a8:	2181      	movs	r1, #129	@ 0x81
 800a1aa:	05c9      	lsls	r1, r1, #23
 800a1ac:	6838      	ldr	r0, [r7, #0]
 800a1ae:	f7f6 f8a5 	bl	80002fc <__aeabi_fcmple>
 800a1b2:	1e03      	subs	r3, r0, #0
 800a1b4:	d001      	beq.n	800a1ba <STTS751_TEMP_SetOutputDataRate+0x106>
 800a1b6:	2306      	movs	r3, #6
 800a1b8:	e012      	b.n	800a1e0 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800a1ba:	2182      	movs	r1, #130	@ 0x82
 800a1bc:	05c9      	lsls	r1, r1, #23
 800a1be:	6838      	ldr	r0, [r7, #0]
 800a1c0:	f7f6 f89c 	bl	80002fc <__aeabi_fcmple>
 800a1c4:	1e03      	subs	r3, r0, #0
 800a1c6:	d001      	beq.n	800a1cc <STTS751_TEMP_SetOutputDataRate+0x118>
 800a1c8:	2307      	movs	r3, #7
 800a1ca:	e009      	b.n	800a1e0 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800a1cc:	2183      	movs	r1, #131	@ 0x83
 800a1ce:	05c9      	lsls	r1, r1, #23
 800a1d0:	6838      	ldr	r0, [r7, #0]
 800a1d2:	f7f6 f893 	bl	80002fc <__aeabi_fcmple>
 800a1d6:	1e03      	subs	r3, r0, #0
 800a1d8:	d001      	beq.n	800a1de <STTS751_TEMP_SetOutputDataRate+0x12a>
 800a1da:	2308      	movs	r3, #8
 800a1dc:	e000      	b.n	800a1e0 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800a1de:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 800a1e0:	210f      	movs	r1, #15
 800a1e2:	187a      	adds	r2, r7, r1
 800a1e4:	7013      	strb	r3, [r2, #0]
          : (Odr <= 4.0f   ) ? STTS751_TEMP_ODR_4Hz
          : (Odr <= 8.0f   ) ? STTS751_TEMP_ODR_8Hz
          : (Odr <= 16.0f  ) ? STTS751_TEMP_ODR_16Hz
          :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	331c      	adds	r3, #28
 800a1ea:	001a      	movs	r2, r3
 800a1ec:	187b      	adds	r3, r7, r1
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	0019      	movs	r1, r3
 800a1f2:	0010      	movs	r0, r2
 800a1f4:	f000 f91a 	bl	800a42c <stts751_temp_data_rate_set>
 800a1f8:	1e03      	subs	r3, r0, #0
 800a1fa:	d002      	beq.n	800a202 <STTS751_TEMP_SetOutputDataRate+0x14e>
  {
    return STTS751_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	425b      	negs	r3, r3
 800a200:	e000      	b.n	800a204 <STTS751_TEMP_SetOutputDataRate+0x150>
  }

  return STTS751_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	0018      	movs	r0, r3
 800a206:	46bd      	mov	sp, r7
 800a208:	b004      	add	sp, #16
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <STTS751_TEMP_GetTemperature>:
 * @param  pObj the device pObj
 * @param  Value pointer where the temperature value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	331c      	adds	r3, #28
 800a21a:	220e      	movs	r2, #14
 800a21c:	18ba      	adds	r2, r7, r2
 800a21e:	0011      	movs	r1, r2
 800a220:	0018      	movs	r0, r3
 800a222:	f000 fa4e 	bl	800a6c2 <stts751_temperature_raw_get>
 800a226:	1e03      	subs	r3, r0, #0
 800a228:	d002      	beq.n	800a230 <STTS751_TEMP_GetTemperature+0x24>
  {
    return STTS751_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	425b      	negs	r3, r3
 800a22e:	e00a      	b.n	800a246 <STTS751_TEMP_GetTemperature+0x3a>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 800a230:	230e      	movs	r3, #14
 800a232:	18fb      	adds	r3, r7, r3
 800a234:	2200      	movs	r2, #0
 800a236:	5e9b      	ldrsh	r3, [r3, r2]
 800a238:	0018      	movs	r0, r3
 800a23a:	f000 f8e0 	bl	800a3fe <stts751_from_lsb_to_celsius>
 800a23e:	1c02      	adds	r2, r0, #0
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	601a      	str	r2, [r3, #0]

  return STTS751_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	0018      	movs	r0, r3
 800a248:	46bd      	mov	sp, r7
 800a24a:	b004      	add	sp, #16
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a24e:	b5b0      	push	{r4, r5, r7, lr}
 800a250:	b088      	sub	sp, #32
 800a252:	af00      	add	r7, sp, #0
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	0008      	movs	r0, r1
 800a258:	607a      	str	r2, [r7, #4]
 800a25a:	0019      	movs	r1, r3
 800a25c:	230b      	movs	r3, #11
 800a25e:	18fb      	adds	r3, r7, r3
 800a260:	1c02      	adds	r2, r0, #0
 800a262:	701a      	strb	r2, [r3, #0]
 800a264:	2308      	movs	r3, #8
 800a266:	18fb      	adds	r3, r7, r3
 800a268:	1c0a      	adds	r2, r1, #0
 800a26a:	801a      	strh	r2, [r3, #0]
  uint16_t i;
  int32_t ret = STTS751_OK;
 800a26c:	2300      	movs	r3, #0
 800a26e:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d12e      	bne.n	800a2da <ReadRegWrap+0x8c>
  {
    for (i = 0; i < Length; i++)
 800a27c:	231e      	movs	r3, #30
 800a27e:	18fb      	adds	r3, r7, r3
 800a280:	2200      	movs	r2, #0
 800a282:	801a      	strh	r2, [r3, #0]
 800a284:	e021      	b.n	800a2ca <ReadRegWrap+0x7c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	695c      	ldr	r4, [r3, #20]
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	7b1b      	ldrb	r3, [r3, #12]
 800a28e:	0018      	movs	r0, r3
 800a290:	230b      	movs	r3, #11
 800a292:	18fb      	adds	r3, r7, r3
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	b29a      	uxth	r2, r3
 800a298:	251e      	movs	r5, #30
 800a29a:	197b      	adds	r3, r7, r5
 800a29c:	881b      	ldrh	r3, [r3, #0]
 800a29e:	18d3      	adds	r3, r2, r3
 800a2a0:	b299      	uxth	r1, r3
 800a2a2:	197b      	adds	r3, r7, r5
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	18d2      	adds	r2, r2, r3
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	47a0      	blx	r4
 800a2ae:	0003      	movs	r3, r0
 800a2b0:	61bb      	str	r3, [r7, #24]
      if (ret != STTS751_OK)
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d002      	beq.n	800a2be <ReadRegWrap+0x70>
      {
        return STTS751_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	425b      	negs	r3, r3
 800a2bc:	e00e      	b.n	800a2dc <ReadRegWrap+0x8e>
    for (i = 0; i < Length; i++)
 800a2be:	211e      	movs	r1, #30
 800a2c0:	187b      	adds	r3, r7, r1
 800a2c2:	881a      	ldrh	r2, [r3, #0]
 800a2c4:	187b      	adds	r3, r7, r1
 800a2c6:	3201      	adds	r2, #1
 800a2c8:	801a      	strh	r2, [r3, #0]
 800a2ca:	231e      	movs	r3, #30
 800a2cc:	18fa      	adds	r2, r7, r3
 800a2ce:	2308      	movs	r3, #8
 800a2d0:	18fb      	adds	r3, r7, r3
 800a2d2:	8812      	ldrh	r2, [r2, #0]
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d3d5      	bcc.n	800a286 <ReadRegWrap+0x38>
      }
    }
  }

  return ret;
 800a2da:	69bb      	ldr	r3, [r7, #24]
}
 800a2dc:	0018      	movs	r0, r3
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	b008      	add	sp, #32
 800a2e2:	bdb0      	pop	{r4, r5, r7, pc}

0800a2e4 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a2e4:	b5b0      	push	{r4, r5, r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	0008      	movs	r0, r1
 800a2ee:	607a      	str	r2, [r7, #4]
 800a2f0:	0019      	movs	r1, r3
 800a2f2:	230b      	movs	r3, #11
 800a2f4:	18fb      	adds	r3, r7, r3
 800a2f6:	1c02      	adds	r2, r0, #0
 800a2f8:	701a      	strb	r2, [r3, #0]
 800a2fa:	2308      	movs	r3, #8
 800a2fc:	18fb      	adds	r3, r7, r3
 800a2fe:	1c0a      	adds	r2, r1, #0
 800a300:	801a      	strh	r2, [r3, #0]
  uint16_t i;
  int32_t ret = STTS751_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d12e      	bne.n	800a370 <WriteRegWrap+0x8c>
  {
	for (i = 0; i < Length; i++)
 800a312:	231e      	movs	r3, #30
 800a314:	18fb      	adds	r3, r7, r3
 800a316:	2200      	movs	r2, #0
 800a318:	801a      	strh	r2, [r3, #0]
 800a31a:	e021      	b.n	800a360 <WriteRegWrap+0x7c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	691c      	ldr	r4, [r3, #16]
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	7b1b      	ldrb	r3, [r3, #12]
 800a324:	0018      	movs	r0, r3
 800a326:	230b      	movs	r3, #11
 800a328:	18fb      	adds	r3, r7, r3
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	251e      	movs	r5, #30
 800a330:	197b      	adds	r3, r7, r5
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	18d3      	adds	r3, r2, r3
 800a336:	b299      	uxth	r1, r3
 800a338:	197b      	adds	r3, r7, r5
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	18d2      	adds	r2, r2, r3
 800a340:	2301      	movs	r3, #1
 800a342:	47a0      	blx	r4
 800a344:	0003      	movs	r3, r0
 800a346:	61bb      	str	r3, [r7, #24]
      if (ret != STTS751_OK)
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d002      	beq.n	800a354 <WriteRegWrap+0x70>
      {
        return STTS751_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	425b      	negs	r3, r3
 800a352:	e00e      	b.n	800a372 <WriteRegWrap+0x8e>
	for (i = 0; i < Length; i++)
 800a354:	211e      	movs	r1, #30
 800a356:	187b      	adds	r3, r7, r1
 800a358:	881a      	ldrh	r2, [r3, #0]
 800a35a:	187b      	adds	r3, r7, r1
 800a35c:	3201      	adds	r2, #1
 800a35e:	801a      	strh	r2, [r3, #0]
 800a360:	231e      	movs	r3, #30
 800a362:	18fa      	adds	r2, r7, r3
 800a364:	2308      	movs	r3, #8
 800a366:	18fb      	adds	r3, r7, r3
 800a368:	8812      	ldrh	r2, [r2, #0]
 800a36a:	881b      	ldrh	r3, [r3, #0]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d3d5      	bcc.n	800a31c <WriteRegWrap+0x38>
      }
    }
  }

  return ret;
 800a370:	69bb      	ldr	r3, [r7, #24]
}
 800a372:	0018      	movs	r0, r3
 800a374:	46bd      	mov	sp, r7
 800a376:	b008      	add	sp, #32
 800a378:	bdb0      	pop	{r4, r5, r7, pc}

0800a37a <stts751_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 800a37a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a37c:	b087      	sub	sp, #28
 800a37e:	af00      	add	r7, sp, #0
 800a380:	60f8      	str	r0, [r7, #12]
 800a382:	0008      	movs	r0, r1
 800a384:	607a      	str	r2, [r7, #4]
 800a386:	0019      	movs	r1, r3
 800a388:	260b      	movs	r6, #11
 800a38a:	19bb      	adds	r3, r7, r6
 800a38c:	1c02      	adds	r2, r0, #0
 800a38e:	701a      	strb	r2, [r3, #0]
 800a390:	2508      	movs	r5, #8
 800a392:	197b      	adds	r3, r7, r5
 800a394:	1c0a      	adds	r2, r1, #0
 800a396:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	685c      	ldr	r4, [r3, #4]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6898      	ldr	r0, [r3, #8]
 800a3a0:	197b      	adds	r3, r7, r5
 800a3a2:	881d      	ldrh	r5, [r3, #0]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	19bb      	adds	r3, r7, r6
 800a3a8:	7819      	ldrb	r1, [r3, #0]
 800a3aa:	002b      	movs	r3, r5
 800a3ac:	47a0      	blx	r4
 800a3ae:	0003      	movs	r3, r0
 800a3b0:	617b      	str	r3, [r7, #20]
  return ret;
 800a3b2:	697b      	ldr	r3, [r7, #20]
}
 800a3b4:	0018      	movs	r0, r3
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	b007      	add	sp, #28
 800a3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a3bc <stts751_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 800a3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3be:	b087      	sub	sp, #28
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	0008      	movs	r0, r1
 800a3c6:	607a      	str	r2, [r7, #4]
 800a3c8:	0019      	movs	r1, r3
 800a3ca:	260b      	movs	r6, #11
 800a3cc:	19bb      	adds	r3, r7, r6
 800a3ce:	1c02      	adds	r2, r0, #0
 800a3d0:	701a      	strb	r2, [r3, #0]
 800a3d2:	2508      	movs	r5, #8
 800a3d4:	197b      	adds	r3, r7, r5
 800a3d6:	1c0a      	adds	r2, r1, #0
 800a3d8:	801a      	strh	r2, [r3, #0]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681c      	ldr	r4, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6898      	ldr	r0, [r3, #8]
 800a3e2:	197b      	adds	r3, r7, r5
 800a3e4:	881d      	ldrh	r5, [r3, #0]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	19bb      	adds	r3, r7, r6
 800a3ea:	7819      	ldrb	r1, [r3, #0]
 800a3ec:	002b      	movs	r3, r5
 800a3ee:	47a0      	blx	r4
 800a3f0:	0003      	movs	r3, r0
 800a3f2:	617b      	str	r3, [r7, #20]
  return ret;
 800a3f4:	697b      	ldr	r3, [r7, #20]
}
 800a3f6:	0018      	movs	r0, r3
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	b007      	add	sp, #28
 800a3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a3fe <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float stts751_from_lsb_to_celsius(int16_t lsb)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b082      	sub	sp, #8
 800a402:	af00      	add	r7, sp, #0
 800a404:	0002      	movs	r2, r0
 800a406:	1dbb      	adds	r3, r7, #6
 800a408:	801a      	strh	r2, [r3, #0]
  return ((float)lsb) / 256.0f;
 800a40a:	1dbb      	adds	r3, r7, #6
 800a40c:	2200      	movs	r2, #0
 800a40e:	5e9b      	ldrsh	r3, [r3, r2]
 800a410:	0018      	movs	r0, r3
 800a412:	f7f6 ff1d 	bl	8001250 <__aeabi_i2f>
 800a416:	1c03      	adds	r3, r0, #0
 800a418:	2187      	movs	r1, #135	@ 0x87
 800a41a:	05c9      	lsls	r1, r1, #23
 800a41c:	1c18      	adds	r0, r3, #0
 800a41e:	f7f6 fa2f 	bl	8000880 <__aeabi_fdiv>
 800a422:	1c03      	adds	r3, r0, #0
}
 800a424:	1c18      	adds	r0, r3, #0
 800a426:	46bd      	mov	sp, r7
 800a428:	b002      	add	sp, #8
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <stts751_temp_data_rate_set>:
  * @param  val      change the sensor data rate
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx, stts751_odr_t val)
{
 800a42c:	b590      	push	{r4, r7, lr}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	000a      	movs	r2, r1
 800a436:	1cfb      	adds	r3, r7, #3
 800a438:	701a      	strb	r2, [r3, #0]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 800a43a:	230b      	movs	r3, #11
 800a43c:	18fb      	adds	r3, r7, r3
 800a43e:	22aa      	movs	r2, #170	@ 0xaa
 800a440:	701a      	strb	r2, [r3, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800a442:	240c      	movs	r4, #12
 800a444:	193a      	adds	r2, r7, r4
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	2301      	movs	r3, #1
 800a44a:	2104      	movs	r1, #4
 800a44c:	f7ff ff95 	bl	800a37a <stts751_read_reg>
 800a450:	0003      	movs	r3, r0
 800a452:	617b      	str	r3, [r7, #20]
                         (uint8_t*)&conversion_rate, 1);
  if (ret == 0) {
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d117      	bne.n	800a48a <stts751_temp_data_rate_set+0x5e>
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 800a45a:	1cfb      	adds	r3, r7, #3
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	220f      	movs	r2, #15
 800a460:	4013      	ands	r3, r2
 800a462:	b2da      	uxtb	r2, r3
 800a464:	193b      	adds	r3, r7, r4
 800a466:	210f      	movs	r1, #15
 800a468:	400a      	ands	r2, r1
 800a46a:	0010      	movs	r0, r2
 800a46c:	781a      	ldrb	r2, [r3, #0]
 800a46e:	210f      	movs	r1, #15
 800a470:	438a      	bics	r2, r1
 800a472:	1c11      	adds	r1, r2, #0
 800a474:	1c02      	adds	r2, r0, #0
 800a476:	430a      	orrs	r2, r1
 800a478:	701a      	strb	r2, [r3, #0]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 800a47a:	193a      	adds	r2, r7, r4
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	2301      	movs	r3, #1
 800a480:	2104      	movs	r1, #4
 800a482:	f7ff ff9b 	bl	800a3bc <stts751_write_reg>
 800a486:	0003      	movs	r3, r0
 800a488:	617b      	str	r3, [r7, #20]
                            (uint8_t*)&conversion_rate, 1);
  }
  if (ret == 0) {
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d108      	bne.n	800a4a2 <stts751_temp_data_rate_set+0x76>
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800a490:	2310      	movs	r3, #16
 800a492:	18fa      	adds	r2, r7, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	2301      	movs	r3, #1
 800a498:	2103      	movs	r1, #3
 800a49a:	f7ff ff6e 	bl	800a37a <stts751_read_reg>
 800a49e:	0003      	movs	r3, r0
 800a4a0:	617b      	str	r3, [r7, #20]
                           (uint8_t*)&configuration, 1);
  }
  if (ret == 0) {
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d11b      	bne.n	800a4e0 <stts751_temp_data_rate_set+0xb4>
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 800a4a8:	1cfb      	adds	r3, r7, #3
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	09db      	lsrs	r3, r3, #7
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	1c1a      	adds	r2, r3, #0
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	b2da      	uxtb	r2, r3
 800a4b8:	2410      	movs	r4, #16
 800a4ba:	193b      	adds	r3, r7, r4
 800a4bc:	2101      	movs	r1, #1
 800a4be:	400a      	ands	r2, r1
 800a4c0:	0190      	lsls	r0, r2, #6
 800a4c2:	781a      	ldrb	r2, [r3, #0]
 800a4c4:	2140      	movs	r1, #64	@ 0x40
 800a4c6:	438a      	bics	r2, r1
 800a4c8:	1c11      	adds	r1, r2, #0
 800a4ca:	1c02      	adds	r2, r0, #0
 800a4cc:	430a      	orrs	r2, r1
 800a4ce:	701a      	strb	r2, [r3, #0]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 800a4d0:	193a      	adds	r2, r7, r4
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	2103      	movs	r1, #3
 800a4d8:	f7ff ff70 	bl	800a3bc <stts751_write_reg>
 800a4dc:	0003      	movs	r3, r0
 800a4de:	617b      	str	r3, [r7, #20]
                            (uint8_t*)&configuration, 1);
  }
  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT)) {
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10c      	bne.n	800a500 <stts751_temp_data_rate_set+0xd4>
 800a4e6:	1cfb      	adds	r3, r7, #3
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2b90      	cmp	r3, #144	@ 0x90
 800a4ec:	d108      	bne.n	800a500 <stts751_temp_data_rate_set+0xd4>
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 800a4ee:	230b      	movs	r3, #11
 800a4f0:	18fa      	adds	r2, r7, r3
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	210f      	movs	r1, #15
 800a4f8:	f7ff ff60 	bl	800a3bc <stts751_write_reg>
 800a4fc:	0003      	movs	r3, r0
 800a4fe:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a500:	697b      	ldr	r3, [r7, #20]
}
 800a502:	0018      	movs	r0, r3
 800a504:	46bd      	mov	sp, r7
 800a506:	b007      	add	sp, #28
 800a508:	bd90      	pop	{r4, r7, pc}
	...

0800a50c <stts751_temp_data_rate_get>:
  * @param  val      Get the sensor data rate
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx, stts751_odr_t *val)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 800a516:	2310      	movs	r3, #16
 800a518:	18fa      	adds	r2, r7, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	2301      	movs	r3, #1
 800a51e:	2104      	movs	r1, #4
 800a520:	f7ff ff2b 	bl	800a37a <stts751_read_reg>
 800a524:	0003      	movs	r3, r0
 800a526:	617b      	str	r3, [r7, #20]
                         (uint8_t*)&conversion_rate, 1);
  if (ret == 0) {
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d108      	bne.n	800a540 <stts751_temp_data_rate_get+0x34>
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800a52e:	230c      	movs	r3, #12
 800a530:	18fa      	adds	r2, r7, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	2301      	movs	r3, #1
 800a536:	2103      	movs	r1, #3
 800a538:	f7ff ff1f 	bl	800a37a <stts751_read_reg>
 800a53c:	0003      	movs	r3, r0
 800a53e:	617b      	str	r3, [r7, #20]
                           (uint8_t*)&configuration, 1);
  }
  switch ( (configuration.stop << 7) + conversion_rate.conv) {
 800a540:	230c      	movs	r3, #12
 800a542:	18fb      	adds	r3, r7, r3
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	065b      	lsls	r3, r3, #25
 800a548:	0fdb      	lsrs	r3, r3, #31
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	01db      	lsls	r3, r3, #7
 800a54e:	2210      	movs	r2, #16
 800a550:	18ba      	adds	r2, r7, r2
 800a552:	7812      	ldrb	r2, [r2, #0]
 800a554:	0712      	lsls	r2, r2, #28
 800a556:	0f12      	lsrs	r2, r2, #28
 800a558:	b2d2      	uxtb	r2, r2
 800a55a:	189b      	adds	r3, r3, r2
 800a55c:	2b90      	cmp	r3, #144	@ 0x90
 800a55e:	d011      	beq.n	800a584 <stts751_temp_data_rate_get+0x78>
 800a560:	dc3c      	bgt.n	800a5dc <stts751_temp_data_rate_get+0xd0>
 800a562:	2b09      	cmp	r3, #9
 800a564:	dc08      	bgt.n	800a578 <stts751_temp_data_rate_get+0x6c>
 800a566:	2b00      	cmp	r3, #0
 800a568:	db38      	blt.n	800a5dc <stts751_temp_data_rate_get+0xd0>
 800a56a:	2b09      	cmp	r3, #9
 800a56c:	d836      	bhi.n	800a5dc <stts751_temp_data_rate_get+0xd0>
 800a56e:	009a      	lsls	r2, r3, #2
 800a570:	4b1f      	ldr	r3, [pc, #124]	@ (800a5f0 <stts751_temp_data_rate_get+0xe4>)
 800a572:	18d3      	adds	r3, r2, r3
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	469f      	mov	pc, r3
 800a578:	2b80      	cmp	r3, #128	@ 0x80
 800a57a:	d12f      	bne.n	800a5dc <stts751_temp_data_rate_get+0xd0>
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	2280      	movs	r2, #128	@ 0x80
 800a580:	701a      	strb	r2, [r3, #0]
      break;
 800a582:	e02f      	b.n	800a5e4 <stts751_temp_data_rate_get+0xd8>
    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	2290      	movs	r2, #144	@ 0x90
 800a588:	701a      	strb	r2, [r3, #0]
      break;
 800a58a:	e02b      	b.n	800a5e4 <stts751_temp_data_rate_get+0xd8>
    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2200      	movs	r2, #0
 800a590:	701a      	strb	r2, [r3, #0]
      break;
 800a592:	e027      	b.n	800a5e4 <stts751_temp_data_rate_get+0xd8>
    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	2201      	movs	r2, #1
 800a598:	701a      	strb	r2, [r3, #0]
      break;
 800a59a:	e023      	b.n	800a5e4 <stts751_temp_data_rate_get+0xd8>
     case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	701a      	strb	r2, [r3, #0]
      break;
 800a5a2:	e01f      	b.n	800a5e4 <stts751_temp_data_rate_get+0xd8>
    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	2203      	movs	r2, #3
 800a5a8:	701a      	strb	r2, [r3, #0]
      break;
 800a5aa:	e01b      	b.n	800a5e4 <stts751_temp_data_rate_get+0xd8>
    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	2204      	movs	r2, #4
 800a5b0:	701a      	strb	r2, [r3, #0]
      break;
 800a5b2:	e017      	b.n	800a5e4 <stts751_temp_data_rate_get+0xd8>
    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2205      	movs	r2, #5
 800a5b8:	701a      	strb	r2, [r3, #0]
      break;
 800a5ba:	e013      	b.n	800a5e4 <stts751_temp_data_rate_get+0xd8>
     case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	2206      	movs	r2, #6
 800a5c0:	701a      	strb	r2, [r3, #0]
      break;
 800a5c2:	e00f      	b.n	800a5e4 <stts751_temp_data_rate_get+0xd8>
    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	2207      	movs	r2, #7
 800a5c8:	701a      	strb	r2, [r3, #0]
      break;
 800a5ca:	e00b      	b.n	800a5e4 <stts751_temp_data_rate_get+0xd8>
    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	2208      	movs	r2, #8
 800a5d0:	701a      	strb	r2, [r3, #0]
      break;
 800a5d2:	e007      	b.n	800a5e4 <stts751_temp_data_rate_get+0xd8>
    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	2209      	movs	r2, #9
 800a5d8:	701a      	strb	r2, [r3, #0]
      break;
 800a5da:	e003      	b.n	800a5e4 <stts751_temp_data_rate_get+0xd8>
    default:
      *val = STTS751_TEMP_ODR_OFF;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	2280      	movs	r2, #128	@ 0x80
 800a5e0:	701a      	strb	r2, [r3, #0]
      break;
 800a5e2:	46c0      	nop			@ (mov r8, r8)
  }
  return ret;
 800a5e4:	697b      	ldr	r3, [r7, #20]
}
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	b006      	add	sp, #24
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	46c0      	nop			@ (mov r8, r8)
 800a5f0:	08014b30 	.word	0x08014b30

0800a5f4 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 800a5f4:	b590      	push	{r4, r7, lr}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	000a      	movs	r2, r1
 800a5fe:	1cfb      	adds	r3, r7, #3
 800a600:	701a      	strb	r2, [r3, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,(uint8_t*) &reg, 1);
 800a602:	2408      	movs	r4, #8
 800a604:	193a      	adds	r2, r7, r4
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	2301      	movs	r3, #1
 800a60a:	2103      	movs	r1, #3
 800a60c:	f7ff feb5 	bl	800a37a <stts751_read_reg>
 800a610:	0003      	movs	r3, r0
 800a612:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d117      	bne.n	800a64a <stts751_resolution_set+0x56>
    reg.tres = (uint8_t) val;
 800a61a:	1cfb      	adds	r3, r7, #3
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	2203      	movs	r2, #3
 800a620:	4013      	ands	r3, r2
 800a622:	b2da      	uxtb	r2, r3
 800a624:	193b      	adds	r3, r7, r4
 800a626:	2103      	movs	r1, #3
 800a628:	400a      	ands	r2, r1
 800a62a:	0090      	lsls	r0, r2, #2
 800a62c:	781a      	ldrb	r2, [r3, #0]
 800a62e:	210c      	movs	r1, #12
 800a630:	438a      	bics	r2, r1
 800a632:	1c11      	adds	r1, r2, #0
 800a634:	1c02      	adds	r2, r0, #0
 800a636:	430a      	orrs	r2, r1
 800a638:	701a      	strb	r2, [r3, #0]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,(uint8_t*) &reg, 1);
 800a63a:	193a      	adds	r2, r7, r4
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	2301      	movs	r3, #1
 800a640:	2103      	movs	r1, #3
 800a642:	f7ff febb 	bl	800a3bc <stts751_write_reg>
 800a646:	0003      	movs	r3, r0
 800a648:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800a64a:	68fb      	ldr	r3, [r7, #12]
}
 800a64c:	0018      	movs	r0, r3
 800a64e:	46bd      	mov	sp, r7
 800a650:	b005      	add	sp, #20
 800a652:	bd90      	pop	{r4, r7, pc}

0800a654 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 800a654:	b590      	push	{r4, r7, lr}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,(uint8_t*) &reg, 1);
 800a65e:	2408      	movs	r4, #8
 800a660:	193a      	adds	r2, r7, r4
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	2301      	movs	r3, #1
 800a666:	2103      	movs	r1, #3
 800a668:	f7ff fe87 	bl	800a37a <stts751_read_reg>
 800a66c:	0003      	movs	r3, r0
 800a66e:	60fb      	str	r3, [r7, #12]

  switch (reg.tres) {
 800a670:	193b      	adds	r3, r7, r4
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	071b      	lsls	r3, r3, #28
 800a676:	0f9b      	lsrs	r3, r3, #30
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d014      	beq.n	800a6a8 <stts751_resolution_get+0x54>
 800a67e:	dc17      	bgt.n	800a6b0 <stts751_resolution_get+0x5c>
 800a680:	2b02      	cmp	r3, #2
 800a682:	d005      	beq.n	800a690 <stts751_resolution_get+0x3c>
 800a684:	dc14      	bgt.n	800a6b0 <stts751_resolution_get+0x5c>
 800a686:	2b00      	cmp	r3, #0
 800a688:	d006      	beq.n	800a698 <stts751_resolution_get+0x44>
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d008      	beq.n	800a6a0 <stts751_resolution_get+0x4c>
 800a68e:	e00f      	b.n	800a6b0 <stts751_resolution_get+0x5c>
    case STTS751_9bit:
      *val = STTS751_9bit;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	2202      	movs	r2, #2
 800a694:	701a      	strb	r2, [r3, #0]
      break;
 800a696:	e00f      	b.n	800a6b8 <stts751_resolution_get+0x64>
    case STTS751_10bit:
      *val = STTS751_10bit;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	2200      	movs	r2, #0
 800a69c:	701a      	strb	r2, [r3, #0]
      break;
 800a69e:	e00b      	b.n	800a6b8 <stts751_resolution_get+0x64>
    case STTS751_11bit:
      *val = STTS751_11bit;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	701a      	strb	r2, [r3, #0]
      break;
 800a6a6:	e007      	b.n	800a6b8 <stts751_resolution_get+0x64>
    case STTS751_12bit:
      *val = STTS751_12bit;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	2203      	movs	r2, #3
 800a6ac:	701a      	strb	r2, [r3, #0]
      break;
 800a6ae:	e003      	b.n	800a6b8 <stts751_resolution_get+0x64>
    default:
      *val = STTS751_9bit;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	2202      	movs	r2, #2
 800a6b4:	701a      	strb	r2, [r3, #0]
      break;
 800a6b6:	46c0      	nop			@ (mov r8, r8)
  }
  return ret;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
}
 800a6ba:	0018      	movs	r0, r3
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	b005      	add	sp, #20
 800a6c0:	bd90      	pop	{r4, r7, pc}

0800a6c2 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800a6c2:	b5b0      	push	{r4, r5, r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	6039      	str	r1, [r7, #0]
  uint16_t temperature;
  uint8_t temperature_low;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 800a6cc:	240a      	movs	r4, #10
 800a6ce:	193a      	adds	r2, r7, r4
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	f7ff fe50 	bl	800a37a <stts751_read_reg>
 800a6da:	0003      	movs	r3, r0
 800a6dc:	60fb      	str	r3, [r7, #12]
                         (uint8_t*)&temperature, 1);
  if (ret == 0) {
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d118      	bne.n	800a716 <stts751_temperature_raw_get+0x54>
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 800a6e4:	2509      	movs	r5, #9
 800a6e6:	197a      	adds	r2, r7, r5
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	2102      	movs	r1, #2
 800a6ee:	f7ff fe44 	bl	800a37a <stts751_read_reg>
 800a6f2:	0003      	movs	r3, r0
 800a6f4:	60fb      	str	r3, [r7, #12]
                           &temperature_low, 1);

    temperature  = (temperature << 8) + temperature_low;
 800a6f6:	0021      	movs	r1, r4
 800a6f8:	187b      	adds	r3, r7, r1
 800a6fa:	881b      	ldrh	r3, [r3, #0]
 800a6fc:	021b      	lsls	r3, r3, #8
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	197a      	adds	r2, r7, r5
 800a702:	7812      	ldrb	r2, [r2, #0]
 800a704:	189b      	adds	r3, r3, r2
 800a706:	b29a      	uxth	r2, r3
 800a708:	187b      	adds	r3, r7, r1
 800a70a:	801a      	strh	r2, [r3, #0]
    *buff = (int16_t)temperature;
 800a70c:	187b      	adds	r3, r7, r1
 800a70e:	881b      	ldrh	r3, [r3, #0]
 800a710:	b21a      	sxth	r2, r3
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 800a716:	68fb      	ldr	r3, [r7, #12]
}
 800a718:	0018      	movs	r0, r3
 800a71a:	46bd      	mov	sp, r7
 800a71c:	b004      	add	sp, #16
 800a71e:	bdb0      	pop	{r4, r5, r7, pc}

0800a720 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a720:	b590      	push	{r4, r7, lr}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	000a      	movs	r2, r1
 800a72a:	1cfb      	adds	r3, r7, #3
 800a72c:	701a      	strb	r2, [r3, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,(uint8_t*)&reg, 1);
 800a72e:	2408      	movs	r4, #8
 800a730:	193a      	adds	r2, r7, r4
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	2301      	movs	r3, #1
 800a736:	2103      	movs	r1, #3
 800a738:	f7ff fe1f 	bl	800a37a <stts751_read_reg>
 800a73c:	0003      	movs	r3, r0
 800a73e:	60fb      	str	r3, [r7, #12]
  if (ret == 0) {
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d115      	bne.n	800a772 <stts751_pin_event_route_set+0x52>
    reg.mask1 = val;
 800a746:	1cfb      	adds	r3, r7, #3
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	2201      	movs	r2, #1
 800a74c:	4013      	ands	r3, r2
 800a74e:	b2da      	uxtb	r2, r3
 800a750:	193b      	adds	r3, r7, r4
 800a752:	01d0      	lsls	r0, r2, #7
 800a754:	781a      	ldrb	r2, [r3, #0]
 800a756:	217f      	movs	r1, #127	@ 0x7f
 800a758:	400a      	ands	r2, r1
 800a75a:	1c11      	adds	r1, r2, #0
 800a75c:	1c02      	adds	r2, r0, #0
 800a75e:	430a      	orrs	r2, r1
 800a760:	701a      	strb	r2, [r3, #0]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t*)&reg, 1);
 800a762:	193a      	adds	r2, r7, r4
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	2301      	movs	r3, #1
 800a768:	2103      	movs	r1, #3
 800a76a:	f7ff fe27 	bl	800a3bc <stts751_write_reg>
 800a76e:	0003      	movs	r3, r0
 800a770:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800a772:	68fb      	ldr	r3, [r7, #12]
}
 800a774:	0018      	movs	r0, r3
 800a776:	46bd      	mov	sp, r7
 800a778:	b005      	add	sp, #20
 800a77a:	bd90      	pop	{r4, r7, pc}

0800a77c <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 800a786:	683a      	ldr	r2, [r7, #0]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	2301      	movs	r3, #1
 800a78c:	21fd      	movs	r1, #253	@ 0xfd
 800a78e:	f7ff fdf4 	bl	800a37a <stts751_read_reg>
 800a792:	0003      	movs	r3, r0
 800a794:	60fb      	str	r3, [r7, #12]
                         (uint8_t*)&buff->product_id, 1);
  if (ret == 0){
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d108      	bne.n	800a7ae <stts751_device_id_get+0x32>
  ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	1c5a      	adds	r2, r3, #1
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	21fe      	movs	r1, #254	@ 0xfe
 800a7a6:	f7ff fde8 	bl	800a37a <stts751_read_reg>
 800a7aa:	0003      	movs	r3, r0
 800a7ac:	60fb      	str	r3, [r7, #12]
                         (uint8_t*)&buff->manufacturer_id, 1);
  }
  if (ret == 0){
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d108      	bne.n	800a7c6 <stts751_device_id_get+0x4a>
  ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	1c9a      	adds	r2, r3, #2
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	21ff      	movs	r1, #255	@ 0xff
 800a7be:	f7ff fddc 	bl	800a37a <stts751_read_reg>
 800a7c2:	0003      	movs	r3, r0
 800a7c4:	60fb      	str	r3, [r7, #12]
                         (uint8_t*)&buff->revision_id, 1);
  }
  return ret;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
}
 800a7c8:	0018      	movs	r0, r3
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	b004      	add	sp, #16
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <IKS01A3_ENV_SENSOR_Init>:
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
 *         - ENV_TEMPERATURE for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08a      	sub	sp, #40	@ 0x28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t function = ENV_TEMPERATURE;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d100      	bne.n	800a7ee <IKS01A3_ENV_SENSOR_Init+0x1e>
 800a7ec:	e079      	b.n	800a8e2 <IKS01A3_ENV_SENSOR_Init+0x112>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d900      	bls.n	800a7f6 <IKS01A3_ENV_SENSOR_Init+0x26>
 800a7f4:	e0ac      	b.n	800a950 <IKS01A3_ENV_SENSOR_Init+0x180>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d003      	beq.n	800a804 <IKS01A3_ENV_SENSOR_Init+0x34>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d038      	beq.n	800a874 <IKS01A3_ENV_SENSOR_Init+0xa4>
 800a802:	e0a5      	b.n	800a950 <IKS01A3_ENV_SENSOR_Init+0x180>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	0018      	movs	r0, r3
 800a808:	f000 f918 	bl	800aa3c <HTS221_0_Probe>
 800a80c:	1e03      	subs	r3, r0, #0
 800a80e:	d002      	beq.n	800a816 <IKS01A3_ENV_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800a810:	2301      	movs	r3, #1
 800a812:	425b      	negs	r3, r3
 800a814:	e0db      	b.n	800a9ce <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a816:	4b70      	ldr	r3, [pc, #448]	@ (800a9d8 <IKS01A3_ENV_SENSOR_Init+0x208>)
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	0092      	lsls	r2, r2, #2
 800a81c:	58d3      	ldr	r3, [r2, r3]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	4a6e      	ldr	r2, [pc, #440]	@ (800a9dc <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800a822:	6879      	ldr	r1, [r7, #4]
 800a824:	0089      	lsls	r1, r1, #2
 800a826:	588a      	ldr	r2, [r1, r2]
 800a828:	2108      	movs	r1, #8
 800a82a:	1879      	adds	r1, r7, r1
 800a82c:	0010      	movs	r0, r2
 800a82e:	4798      	blx	r3
 800a830:	1e03      	subs	r3, r0, #0
 800a832:	d002      	beq.n	800a83a <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a834:	2307      	movs	r3, #7
 800a836:	425b      	negs	r3, r3
 800a838:	e0c9      	b.n	800a9ce <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (cap.Temperature == 1U)
 800a83a:	2308      	movs	r3, #8
 800a83c:	18fb      	adds	r3, r7, r3
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d103      	bne.n	800a84c <IKS01A3_ENV_SENSOR_Init+0x7c>
      {
        component_functions |= ENV_TEMPERATURE;
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	2201      	movs	r2, #1
 800a848:	4313      	orrs	r3, r2
 800a84a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800a84c:	2308      	movs	r3, #8
 800a84e:	18fb      	adds	r3, r7, r3
 800a850:	789b      	ldrb	r3, [r3, #2]
 800a852:	2b01      	cmp	r3, #1
 800a854:	d103      	bne.n	800a85e <IKS01A3_ENV_SENSOR_Init+0x8e>
      {
        component_functions |= ENV_HUMIDITY;
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	2204      	movs	r2, #4
 800a85a:	4313      	orrs	r3, r2
 800a85c:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800a85e:	2308      	movs	r3, #8
 800a860:	18fb      	adds	r3, r7, r3
 800a862:	785b      	ldrb	r3, [r3, #1]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d000      	beq.n	800a86a <IKS01A3_ENV_SENSOR_Init+0x9a>
 800a868:	e076      	b.n	800a958 <IKS01A3_ENV_SENSOR_Init+0x188>
      {
        component_functions |= ENV_PRESSURE;
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	2202      	movs	r2, #2
 800a86e:	4313      	orrs	r3, r2
 800a870:	61bb      	str	r3, [r7, #24]
      }
      break;
 800a872:	e071      	b.n	800a958 <IKS01A3_ENV_SENSOR_Init+0x188>
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	0018      	movs	r0, r3
 800a878:	f000 f9a6 	bl	800abc8 <LPS22HH_0_Probe>
 800a87c:	1e03      	subs	r3, r0, #0
 800a87e:	d002      	beq.n	800a886 <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800a880:	2301      	movs	r3, #1
 800a882:	425b      	negs	r3, r3
 800a884:	e0a3      	b.n	800a9ce <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a886:	4b54      	ldr	r3, [pc, #336]	@ (800a9d8 <IKS01A3_ENV_SENSOR_Init+0x208>)
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	0092      	lsls	r2, r2, #2
 800a88c:	58d3      	ldr	r3, [r2, r3]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	4a52      	ldr	r2, [pc, #328]	@ (800a9dc <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800a892:	6879      	ldr	r1, [r7, #4]
 800a894:	0089      	lsls	r1, r1, #2
 800a896:	588a      	ldr	r2, [r1, r2]
 800a898:	2108      	movs	r1, #8
 800a89a:	1879      	adds	r1, r7, r1
 800a89c:	0010      	movs	r0, r2
 800a89e:	4798      	blx	r3
 800a8a0:	1e03      	subs	r3, r0, #0
 800a8a2:	d002      	beq.n	800a8aa <IKS01A3_ENV_SENSOR_Init+0xda>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a8a4:	2307      	movs	r3, #7
 800a8a6:	425b      	negs	r3, r3
 800a8a8:	e091      	b.n	800a9ce <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (cap.Temperature == 1U)
 800a8aa:	2308      	movs	r3, #8
 800a8ac:	18fb      	adds	r3, r7, r3
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d103      	bne.n	800a8bc <IKS01A3_ENV_SENSOR_Init+0xec>
      {
        component_functions |= ENV_TEMPERATURE;
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800a8bc:	2308      	movs	r3, #8
 800a8be:	18fb      	adds	r3, r7, r3
 800a8c0:	789b      	ldrb	r3, [r3, #2]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d103      	bne.n	800a8ce <IKS01A3_ENV_SENSOR_Init+0xfe>
      {
        component_functions |= ENV_HUMIDITY;
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	2204      	movs	r2, #4
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800a8ce:	2308      	movs	r3, #8
 800a8d0:	18fb      	adds	r3, r7, r3
 800a8d2:	785b      	ldrb	r3, [r3, #1]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d141      	bne.n	800a95c <IKS01A3_ENV_SENSOR_Init+0x18c>
      {
        component_functions |= ENV_PRESSURE;
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	61bb      	str	r3, [r7, #24]
      }
      break;
 800a8e0:	e03c      	b.n	800a95c <IKS01A3_ENV_SENSOR_Init+0x18c>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	0018      	movs	r0, r3
 800a8e6:	f000 fa37 	bl	800ad58 <STTS751_0_Probe>
 800a8ea:	1e03      	subs	r3, r0, #0
 800a8ec:	d002      	beq.n	800a8f4 <IKS01A3_ENV_SENSOR_Init+0x124>
      {
        return BSP_ERROR_NO_INIT;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	425b      	negs	r3, r3
 800a8f2:	e06c      	b.n	800a9ce <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a8f4:	4b38      	ldr	r3, [pc, #224]	@ (800a9d8 <IKS01A3_ENV_SENSOR_Init+0x208>)
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	0092      	lsls	r2, r2, #2
 800a8fa:	58d3      	ldr	r3, [r2, r3]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	4a37      	ldr	r2, [pc, #220]	@ (800a9dc <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800a900:	6879      	ldr	r1, [r7, #4]
 800a902:	0089      	lsls	r1, r1, #2
 800a904:	588a      	ldr	r2, [r1, r2]
 800a906:	2108      	movs	r1, #8
 800a908:	1879      	adds	r1, r7, r1
 800a90a:	0010      	movs	r0, r2
 800a90c:	4798      	blx	r3
 800a90e:	1e03      	subs	r3, r0, #0
 800a910:	d002      	beq.n	800a918 <IKS01A3_ENV_SENSOR_Init+0x148>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a912:	2307      	movs	r3, #7
 800a914:	425b      	negs	r3, r3
 800a916:	e05a      	b.n	800a9ce <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (cap.Temperature == 1U)
 800a918:	2308      	movs	r3, #8
 800a91a:	18fb      	adds	r3, r7, r3
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d103      	bne.n	800a92a <IKS01A3_ENV_SENSOR_Init+0x15a>
      {
        component_functions |= ENV_TEMPERATURE;
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	2201      	movs	r2, #1
 800a926:	4313      	orrs	r3, r2
 800a928:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800a92a:	2308      	movs	r3, #8
 800a92c:	18fb      	adds	r3, r7, r3
 800a92e:	789b      	ldrb	r3, [r3, #2]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d103      	bne.n	800a93c <IKS01A3_ENV_SENSOR_Init+0x16c>
      {
        component_functions |= ENV_HUMIDITY;
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	2204      	movs	r2, #4
 800a938:	4313      	orrs	r3, r2
 800a93a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800a93c:	2308      	movs	r3, #8
 800a93e:	18fb      	adds	r3, r7, r3
 800a940:	785b      	ldrb	r3, [r3, #1]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d10c      	bne.n	800a960 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_PRESSURE;
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	2202      	movs	r2, #2
 800a94a:	4313      	orrs	r3, r2
 800a94c:	61bb      	str	r3, [r7, #24]
      }
      break;
 800a94e:	e007      	b.n	800a960 <IKS01A3_ENV_SENSOR_Init+0x190>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a950:	2302      	movs	r3, #2
 800a952:	425b      	negs	r3, r3
 800a954:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a956:	e004      	b.n	800a962 <IKS01A3_ENV_SENSOR_Init+0x192>
      break;
 800a958:	46c0      	nop			@ (mov r8, r8)
 800a95a:	e002      	b.n	800a962 <IKS01A3_ENV_SENSOR_Init+0x192>
      break;
 800a95c:	46c0      	nop			@ (mov r8, r8)
 800a95e:	e000      	b.n	800a962 <IKS01A3_ENV_SENSOR_Init+0x192>
      break;
 800a960:	46c0      	nop			@ (mov r8, r8)
  }

  if (ret != BSP_ERROR_NONE)
 800a962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a964:	2b00      	cmp	r3, #0
 800a966:	d001      	beq.n	800a96c <IKS01A3_ENV_SENSOR_Init+0x19c>
  {
    return ret;
 800a968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96a:	e030      	b.n	800a9ce <IKS01A3_ENV_SENSOR_Init+0x1fe>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 800a96c:	2300      	movs	r3, #0
 800a96e:	61fb      	str	r3, [r7, #28]
 800a970:	e029      	b.n	800a9c6 <IKS01A3_ENV_SENSOR_Init+0x1f6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	6a3a      	ldr	r2, [r7, #32]
 800a976:	4013      	ands	r3, r2
 800a978:	6a3a      	ldr	r2, [r7, #32]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d11d      	bne.n	800a9ba <IKS01A3_ENV_SENSOR_Init+0x1ea>
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	6a3a      	ldr	r2, [r7, #32]
 800a982:	4013      	ands	r3, r2
 800a984:	6a3a      	ldr	r2, [r7, #32]
 800a986:	429a      	cmp	r2, r3
 800a988:	d117      	bne.n	800a9ba <IKS01A3_ENV_SENSOR_Init+0x1ea>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800a98a:	4b15      	ldr	r3, [pc, #84]	@ (800a9e0 <IKS01A3_ENV_SENSOR_Init+0x210>)
 800a98c:	6a3a      	ldr	r2, [r7, #32]
 800a98e:	0092      	lsls	r2, r2, #2
 800a990:	58d0      	ldr	r0, [r2, r3]
 800a992:	4914      	ldr	r1, [pc, #80]	@ (800a9e4 <IKS01A3_ENV_SENSOR_Init+0x214>)
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	0013      	movs	r3, r2
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	189b      	adds	r3, r3, r2
 800a99c:	181b      	adds	r3, r3, r0
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	585b      	ldr	r3, [r3, r1]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a0d      	ldr	r2, [pc, #52]	@ (800a9dc <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800a9a6:	6879      	ldr	r1, [r7, #4]
 800a9a8:	0089      	lsls	r1, r1, #2
 800a9aa:	588a      	ldr	r2, [r1, r2]
 800a9ac:	0010      	movs	r0, r2
 800a9ae:	4798      	blx	r3
 800a9b0:	1e03      	subs	r3, r0, #0
 800a9b2:	d002      	beq.n	800a9ba <IKS01A3_ENV_SENSOR_Init+0x1ea>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800a9b4:	2305      	movs	r3, #5
 800a9b6:	425b      	negs	r3, r3
 800a9b8:	e009      	b.n	800a9ce <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
    }
    function = function << 1;
 800a9ba:	6a3b      	ldr	r3, [r7, #32]
 800a9bc:	005b      	lsls	r3, r3, #1
 800a9be:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	61fb      	str	r3, [r7, #28]
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d9d2      	bls.n	800a972 <IKS01A3_ENV_SENSOR_Init+0x1a2>
  }

  return ret;
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	b00a      	add	sp, #40	@ 0x28
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	46c0      	nop			@ (mov r8, r8)
 800a9d8:	20000538 	.word	0x20000538
 800a9dc:	20000508 	.word	0x20000508
 800a9e0:	20000158 	.word	0x20000158
 800a9e4:	20000514 	.word	0x20000514

0800a9e8 <IKS01A3_ENV_SENSOR_GetCapabilities>:
 * @param  Instance Environmental sensor instance
 * @param  Capabilities pointer to Environmental sensor capabilities
 * @retval BSP status
 */
int32_t IKS01A3_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_ENV_SENSOR_Capabilities_t *Capabilities)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d903      	bls.n	800aa00 <IKS01A3_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	425b      	negs	r3, r3
 800a9fc:	60fb      	str	r3, [r7, #12]
 800a9fe:	e013      	b.n	800aa28 <IKS01A3_ENV_SENSOR_GetCapabilities+0x40>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800aa00:	4b0c      	ldr	r3, [pc, #48]	@ (800aa34 <IKS01A3_ENV_SENSOR_GetCapabilities+0x4c>)
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	0092      	lsls	r2, r2, #2
 800aa06:	58d3      	ldr	r3, [r2, r3]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	4a0b      	ldr	r2, [pc, #44]	@ (800aa38 <IKS01A3_ENV_SENSOR_GetCapabilities+0x50>)
 800aa0c:	6879      	ldr	r1, [r7, #4]
 800aa0e:	0089      	lsls	r1, r1, #2
 800aa10:	588a      	ldr	r2, [r1, r2]
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	0010      	movs	r0, r2
 800aa16:	4798      	blx	r3
 800aa18:	1e03      	subs	r3, r0, #0
 800aa1a:	d003      	beq.n	800aa24 <IKS01A3_ENV_SENSOR_GetCapabilities+0x3c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aa1c:	2307      	movs	r3, #7
 800aa1e:	425b      	negs	r3, r3
 800aa20:	60fb      	str	r3, [r7, #12]
 800aa22:	e001      	b.n	800aa28 <IKS01A3_ENV_SENSOR_GetCapabilities+0x40>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800aa24:	2300      	movs	r3, #0
 800aa26:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800aa28:	68fb      	ldr	r3, [r7, #12]
}
 800aa2a:	0018      	movs	r0, r3
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	b004      	add	sp, #16
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	46c0      	nop			@ (mov r8, r8)
 800aa34:	20000538 	.word	0x20000538
 800aa38:	20000508 	.word	0x20000508

0800aa3c <HTS221_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
 * @retval BSP status
 */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800aa3c:	b590      	push	{r4, r7, lr}
 800aa3e:	b091      	sub	sp, #68	@ 0x44
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t              id;
  int32_t              ret = BSP_ERROR_NONE;
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800aa48:	2120      	movs	r1, #32
 800aa4a:	187b      	adds	r3, r7, r1
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800aa50:	187b      	adds	r3, r7, r1
 800aa52:	22bf      	movs	r2, #191	@ 0xbf
 800aa54:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 800aa56:	187b      	adds	r3, r7, r1
 800aa58:	4a4d      	ldr	r2, [pc, #308]	@ (800ab90 <HTS221_0_Probe+0x154>)
 800aa5a:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800aa5c:	187b      	adds	r3, r7, r1
 800aa5e:	4a4d      	ldr	r2, [pc, #308]	@ (800ab94 <HTS221_0_Probe+0x158>)
 800aa60:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800aa62:	187b      	adds	r3, r7, r1
 800aa64:	4a4c      	ldr	r2, [pc, #304]	@ (800ab98 <HTS221_0_Probe+0x15c>)
 800aa66:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800aa68:	187b      	adds	r3, r7, r1
 800aa6a:	4a4c      	ldr	r2, [pc, #304]	@ (800ab9c <HTS221_0_Probe+0x160>)
 800aa6c:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 800aa6e:	187b      	adds	r3, r7, r1
 800aa70:	4a4b      	ldr	r2, [pc, #300]	@ (800aba0 <HTS221_0_Probe+0x164>)
 800aa72:	619a      	str	r2, [r3, #24]

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800aa74:	187a      	adds	r2, r7, r1
 800aa76:	4b4b      	ldr	r3, [pc, #300]	@ (800aba4 <HTS221_0_Probe+0x168>)
 800aa78:	0011      	movs	r1, r2
 800aa7a:	0018      	movs	r0, r3
 800aa7c:	f7f9 fee0 	bl	8004840 <HTS221_RegisterBusIO>
 800aa80:	1e03      	subs	r3, r0, #0
 800aa82:	d003      	beq.n	800aa8c <HTS221_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aa84:	2307      	movs	r3, #7
 800aa86:	425b      	negs	r3, r3
 800aa88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa8a:	e07b      	b.n	800ab84 <HTS221_0_Probe+0x148>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800aa8c:	231f      	movs	r3, #31
 800aa8e:	18fa      	adds	r2, r7, r3
 800aa90:	4b44      	ldr	r3, [pc, #272]	@ (800aba4 <HTS221_0_Probe+0x168>)
 800aa92:	0011      	movs	r1, r2
 800aa94:	0018      	movs	r0, r3
 800aa96:	f7f9 ff5a 	bl	800494e <HTS221_ReadID>
 800aa9a:	1e03      	subs	r3, r0, #0
 800aa9c:	d003      	beq.n	800aaa6 <HTS221_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aa9e:	2307      	movs	r3, #7
 800aaa0:	425b      	negs	r3, r3
 800aaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaa4:	e06e      	b.n	800ab84 <HTS221_0_Probe+0x148>
  }
  else if (id != HTS221_ID)
 800aaa6:	231f      	movs	r3, #31
 800aaa8:	18fb      	adds	r3, r7, r3
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	2bbc      	cmp	r3, #188	@ 0xbc
 800aaae:	d003      	beq.n	800aab8 <HTS221_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aab0:	2307      	movs	r3, #7
 800aab2:	425b      	negs	r3, r3
 800aab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aab6:	e065      	b.n	800ab84 <HTS221_0_Probe+0x148>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800aab8:	240c      	movs	r4, #12
 800aaba:	193a      	adds	r2, r7, r4
 800aabc:	4b39      	ldr	r3, [pc, #228]	@ (800aba4 <HTS221_0_Probe+0x168>)
 800aabe:	0011      	movs	r1, r2
 800aac0:	0018      	movs	r0, r3
 800aac2:	f7f9 ff5b 	bl	800497c <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800aac6:	0021      	movs	r1, r4
 800aac8:	187b      	adds	r3, r7, r1
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	001a      	movs	r2, r3
 800aace:	187b      	adds	r3, r7, r1
 800aad0:	785b      	ldrb	r3, [r3, #1]
 800aad2:	005b      	lsls	r3, r3, #1
 800aad4:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 800aad6:	187b      	adds	r3, r7, r1
 800aad8:	789b      	ldrb	r3, [r3, #2]
 800aada:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800aadc:	431a      	orrs	r2, r3
 800aade:	4b32      	ldr	r3, [pc, #200]	@ (800aba8 <HTS221_0_Probe+0x16c>)
 800aae0:	601a      	str	r2, [r3, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 800aae2:	4b32      	ldr	r3, [pc, #200]	@ (800abac <HTS221_0_Probe+0x170>)
 800aae4:	4a2f      	ldr	r2, [pc, #188]	@ (800aba4 <HTS221_0_Probe+0x168>)
 800aae6:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800aae8:	4b31      	ldr	r3, [pc, #196]	@ (800abb0 <HTS221_0_Probe+0x174>)
 800aaea:	4a32      	ldr	r2, [pc, #200]	@ (800abb4 <HTS221_0_Probe+0x178>)
 800aaec:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800aaee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d11c      	bne.n	800ab2e <HTS221_0_Probe+0xf2>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	4013      	ands	r3, r2
 800aafa:	d018      	beq.n	800ab2e <HTS221_0_Probe+0xf2>
 800aafc:	187b      	adds	r3, r7, r1
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d114      	bne.n	800ab2e <HTS221_0_Probe+0xf2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800ab04:	4b2c      	ldr	r3, [pc, #176]	@ (800abb8 <HTS221_0_Probe+0x17c>)
 800ab06:	685a      	ldr	r2, [r3, #4]
 800ab08:	4b2c      	ldr	r3, [pc, #176]	@ (800abbc <HTS221_0_Probe+0x180>)
 800ab0a:	0092      	lsls	r2, r2, #2
 800ab0c:	492c      	ldr	r1, [pc, #176]	@ (800abc0 <HTS221_0_Probe+0x184>)
 800ab0e:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800ab10:	4b27      	ldr	r3, [pc, #156]	@ (800abb0 <HTS221_0_Probe+0x174>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	4b25      	ldr	r3, [pc, #148]	@ (800abac <HTS221_0_Probe+0x170>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	0018      	movs	r0, r3
 800ab1c:	4790      	blx	r2
 800ab1e:	1e03      	subs	r3, r0, #0
 800ab20:	d003      	beq.n	800ab2a <HTS221_0_Probe+0xee>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab22:	2305      	movs	r3, #5
 800ab24:	425b      	negs	r3, r3
 800ab26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab28:	e001      	b.n	800ab2e <HTS221_0_Probe+0xf2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800ab2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d11d      	bne.n	800ab70 <HTS221_0_Probe+0x134>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2204      	movs	r2, #4
 800ab38:	4013      	ands	r3, r2
 800ab3a:	d019      	beq.n	800ab70 <HTS221_0_Probe+0x134>
 800ab3c:	230c      	movs	r3, #12
 800ab3e:	18fb      	adds	r3, r7, r3
 800ab40:	789b      	ldrb	r3, [r3, #2]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d114      	bne.n	800ab70 <HTS221_0_Probe+0x134>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800ab46:	4b1c      	ldr	r3, [pc, #112]	@ (800abb8 <HTS221_0_Probe+0x17c>)
 800ab48:	691a      	ldr	r2, [r3, #16]
 800ab4a:	4b1c      	ldr	r3, [pc, #112]	@ (800abbc <HTS221_0_Probe+0x180>)
 800ab4c:	0092      	lsls	r2, r2, #2
 800ab4e:	491d      	ldr	r1, [pc, #116]	@ (800abc4 <HTS221_0_Probe+0x188>)
 800ab50:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 800ab52:	4b17      	ldr	r3, [pc, #92]	@ (800abb0 <HTS221_0_Probe+0x174>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	4b14      	ldr	r3, [pc, #80]	@ (800abac <HTS221_0_Probe+0x170>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	0018      	movs	r0, r3
 800ab5e:	4790      	blx	r2
 800ab60:	1e03      	subs	r3, r0, #0
 800ab62:	d003      	beq.n	800ab6c <HTS221_0_Probe+0x130>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab64:	2305      	movs	r3, #5
 800ab66:	425b      	negs	r3, r3
 800ab68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab6a:	e001      	b.n	800ab70 <HTS221_0_Probe+0x134>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800ab70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <HTS221_0_Probe+0x148>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2202      	movs	r2, #2
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	d002      	beq.n	800ab84 <HTS221_0_Probe+0x148>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab7e:	2305      	movs	r3, #5
 800ab80:	425b      	negs	r3, r3
 800ab82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
  }

  return ret;
 800ab84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ab86:	0018      	movs	r0, r3
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	b011      	add	sp, #68	@ 0x44
 800ab8c:	bd90      	pop	{r4, r7, pc}
 800ab8e:	46c0      	nop			@ (mov r8, r8)
 800ab90:	0800439d 	.word	0x0800439d
 800ab94:	08004419 	.word	0x08004419
 800ab98:	080044e1 	.word	0x080044e1
 800ab9c:	08004469 	.word	0x08004469
 800aba0:	08004559 	.word	0x08004559
 800aba4:	20000550 	.word	0x20000550
 800aba8:	20000544 	.word	0x20000544
 800abac:	20000508 	.word	0x20000508
 800abb0:	20000538 	.word	0x20000538
 800abb4:	20000004 	.word	0x20000004
 800abb8:	20000158 	.word	0x20000158
 800abbc:	20000514 	.word	0x20000514
 800abc0:	20000028 	.word	0x20000028
 800abc4:	20000014 	.word	0x20000014

0800abc8 <LPS22HH_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE and/or ENV_PRESSURE
 * @retval BSP status
 */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 800abc8:	b590      	push	{r4, r7, lr}
 800abca:	b091      	sub	sp, #68	@ 0x44
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800abd0:	2300      	movs	r3, #0
 800abd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 800abd4:	2120      	movs	r1, #32
 800abd6:	187b      	adds	r3, r7, r1
 800abd8:	2200      	movs	r2, #0
 800abda:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 800abdc:	187b      	adds	r3, r7, r1
 800abde:	22bb      	movs	r2, #187	@ 0xbb
 800abe0:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 800abe2:	187b      	adds	r3, r7, r1
 800abe4:	4a4e      	ldr	r2, [pc, #312]	@ (800ad20 <LPS22HH_0_Probe+0x158>)
 800abe6:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800abe8:	187b      	adds	r3, r7, r1
 800abea:	4a4e      	ldr	r2, [pc, #312]	@ (800ad24 <LPS22HH_0_Probe+0x15c>)
 800abec:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800abee:	187b      	adds	r3, r7, r1
 800abf0:	4a4d      	ldr	r2, [pc, #308]	@ (800ad28 <LPS22HH_0_Probe+0x160>)
 800abf2:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800abf4:	187b      	adds	r3, r7, r1
 800abf6:	4a4d      	ldr	r2, [pc, #308]	@ (800ad2c <LPS22HH_0_Probe+0x164>)
 800abf8:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 800abfa:	187b      	adds	r3, r7, r1
 800abfc:	4a4c      	ldr	r2, [pc, #304]	@ (800ad30 <LPS22HH_0_Probe+0x168>)
 800abfe:	619a      	str	r2, [r3, #24]

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 800ac00:	187a      	adds	r2, r7, r1
 800ac02:	4b4c      	ldr	r3, [pc, #304]	@ (800ad34 <LPS22HH_0_Probe+0x16c>)
 800ac04:	0011      	movs	r1, r2
 800ac06:	0018      	movs	r0, r3
 800ac08:	f7fc fa80 	bl	800710c <LPS22HH_RegisterBusIO>
 800ac0c:	1e03      	subs	r3, r0, #0
 800ac0e:	d003      	beq.n	800ac18 <LPS22HH_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ac10:	2307      	movs	r3, #7
 800ac12:	425b      	negs	r3, r3
 800ac14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac16:	e07d      	b.n	800ad14 <LPS22HH_0_Probe+0x14c>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 800ac18:	231f      	movs	r3, #31
 800ac1a:	18fa      	adds	r2, r7, r3
 800ac1c:	4b45      	ldr	r3, [pc, #276]	@ (800ad34 <LPS22HH_0_Probe+0x16c>)
 800ac1e:	0011      	movs	r1, r2
 800ac20:	0018      	movs	r0, r3
 800ac22:	f7fc fb18 	bl	8007256 <LPS22HH_ReadID>
 800ac26:	1e03      	subs	r3, r0, #0
 800ac28:	d003      	beq.n	800ac32 <LPS22HH_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ac2a:	2307      	movs	r3, #7
 800ac2c:	425b      	negs	r3, r3
 800ac2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac30:	e070      	b.n	800ad14 <LPS22HH_0_Probe+0x14c>
  }
  else if (id != LPS22HH_ID)
 800ac32:	231f      	movs	r3, #31
 800ac34:	18fb      	adds	r3, r7, r3
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2bb3      	cmp	r3, #179	@ 0xb3
 800ac3a:	d003      	beq.n	800ac44 <LPS22HH_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ac3c:	2307      	movs	r3, #7
 800ac3e:	425b      	negs	r3, r3
 800ac40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac42:	e067      	b.n	800ad14 <LPS22HH_0_Probe+0x14c>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 800ac44:	240c      	movs	r4, #12
 800ac46:	193a      	adds	r2, r7, r4
 800ac48:	4b3a      	ldr	r3, [pc, #232]	@ (800ad34 <LPS22HH_0_Probe+0x16c>)
 800ac4a:	0011      	movs	r1, r2
 800ac4c:	0018      	movs	r0, r3
 800ac4e:	f7fc fb19 	bl	8007284 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800ac52:	0021      	movs	r1, r4
 800ac54:	187b      	adds	r3, r7, r1
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	001a      	movs	r2, r3
 800ac5a:	187b      	adds	r3, r7, r1
 800ac5c:	785b      	ldrb	r3, [r3, #1]
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800ac62:	187b      	adds	r3, r7, r1
 800ac64:	789b      	ldrb	r3, [r3, #2]
 800ac66:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800ac68:	431a      	orrs	r2, r3
 800ac6a:	4b33      	ldr	r3, [pc, #204]	@ (800ad38 <LPS22HH_0_Probe+0x170>)
 800ac6c:	605a      	str	r2, [r3, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 800ac6e:	4b33      	ldr	r3, [pc, #204]	@ (800ad3c <LPS22HH_0_Probe+0x174>)
 800ac70:	4a30      	ldr	r2, [pc, #192]	@ (800ad34 <LPS22HH_0_Probe+0x16c>)
 800ac72:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800ac74:	4b32      	ldr	r3, [pc, #200]	@ (800ad40 <LPS22HH_0_Probe+0x178>)
 800ac76:	4a33      	ldr	r2, [pc, #204]	@ (800ad44 <LPS22HH_0_Probe+0x17c>)
 800ac78:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800ac7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d11d      	bne.n	800acbc <LPS22HH_0_Probe+0xf4>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	4013      	ands	r3, r2
 800ac86:	d019      	beq.n	800acbc <LPS22HH_0_Probe+0xf4>
 800ac88:	187b      	adds	r3, r7, r1
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d115      	bne.n	800acbc <LPS22HH_0_Probe+0xf4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800ac90:	4b2d      	ldr	r3, [pc, #180]	@ (800ad48 <LPS22HH_0_Probe+0x180>)
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	4b2d      	ldr	r3, [pc, #180]	@ (800ad4c <LPS22HH_0_Probe+0x184>)
 800ac96:	3203      	adds	r2, #3
 800ac98:	0092      	lsls	r2, r2, #2
 800ac9a:	492d      	ldr	r1, [pc, #180]	@ (800ad50 <LPS22HH_0_Probe+0x188>)
 800ac9c:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800ac9e:	4b28      	ldr	r3, [pc, #160]	@ (800ad40 <LPS22HH_0_Probe+0x178>)
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	4b25      	ldr	r3, [pc, #148]	@ (800ad3c <LPS22HH_0_Probe+0x174>)
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	0018      	movs	r0, r3
 800acaa:	4790      	blx	r2
 800acac:	1e03      	subs	r3, r0, #0
 800acae:	d003      	beq.n	800acb8 <LPS22HH_0_Probe+0xf0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800acb0:	2305      	movs	r3, #5
 800acb2:	425b      	negs	r3, r3
 800acb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acb6:	e001      	b.n	800acbc <LPS22HH_0_Probe+0xf4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800acb8:	2300      	movs	r3, #0
 800acba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800acbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d11e      	bne.n	800ad00 <LPS22HH_0_Probe+0x138>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2202      	movs	r2, #2
 800acc6:	4013      	ands	r3, r2
 800acc8:	d01a      	beq.n	800ad00 <LPS22HH_0_Probe+0x138>
 800acca:	230c      	movs	r3, #12
 800accc:	18fb      	adds	r3, r7, r3
 800acce:	785b      	ldrb	r3, [r3, #1]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d115      	bne.n	800ad00 <LPS22HH_0_Probe+0x138>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 800acd4:	4b1c      	ldr	r3, [pc, #112]	@ (800ad48 <LPS22HH_0_Probe+0x180>)
 800acd6:	689a      	ldr	r2, [r3, #8]
 800acd8:	4b1c      	ldr	r3, [pc, #112]	@ (800ad4c <LPS22HH_0_Probe+0x184>)
 800acda:	3203      	adds	r2, #3
 800acdc:	0092      	lsls	r2, r2, #2
 800acde:	491d      	ldr	r1, [pc, #116]	@ (800ad54 <LPS22HH_0_Probe+0x18c>)
 800ace0:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 800ace2:	4b17      	ldr	r3, [pc, #92]	@ (800ad40 <LPS22HH_0_Probe+0x178>)
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	4b14      	ldr	r3, [pc, #80]	@ (800ad3c <LPS22HH_0_Probe+0x174>)
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	0018      	movs	r0, r3
 800acee:	4790      	blx	r2
 800acf0:	1e03      	subs	r3, r0, #0
 800acf2:	d003      	beq.n	800acfc <LPS22HH_0_Probe+0x134>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800acf4:	2305      	movs	r3, #5
 800acf6:	425b      	negs	r3, r3
 800acf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acfa:	e001      	b.n	800ad00 <LPS22HH_0_Probe+0x138>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800acfc:	2300      	movs	r3, #0
 800acfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800ad00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d106      	bne.n	800ad14 <LPS22HH_0_Probe+0x14c>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2204      	movs	r2, #4
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	d002      	beq.n	800ad14 <LPS22HH_0_Probe+0x14c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad0e:	2305      	movs	r3, #5
 800ad10:	425b      	negs	r3, r3
 800ad12:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
  }
  return ret;
 800ad14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ad16:	0018      	movs	r0, r3
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	b011      	add	sp, #68	@ 0x44
 800ad1c:	bd90      	pop	{r4, r7, pc}
 800ad1e:	46c0      	nop			@ (mov r8, r8)
 800ad20:	0800439d 	.word	0x0800439d
 800ad24:	08004419 	.word	0x08004419
 800ad28:	080044e1 	.word	0x080044e1
 800ad2c:	08004469 	.word	0x08004469
 800ad30:	08004559 	.word	0x08004559
 800ad34:	2000057c 	.word	0x2000057c
 800ad38:	20000544 	.word	0x20000544
 800ad3c:	20000508 	.word	0x20000508
 800ad40:	20000538 	.word	0x20000538
 800ad44:	200000a4 	.word	0x200000a4
 800ad48:	20000158 	.word	0x20000158
 800ad4c:	20000514 	.word	0x20000514
 800ad50:	200000c8 	.word	0x200000c8
 800ad54:	200000b4 	.word	0x200000b4

0800ad58 <STTS751_0_Probe>:
 * @param  Functions Environmental sensor functions. Could be :
 *         - ENV_TEMPERATURE
 * @retval BSP status
 */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 800ad58:	b590      	push	{r4, r7, lr}
 800ad5a:	b091      	sub	sp, #68	@ 0x44
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800ad60:	2300      	movs	r3, #0
 800ad62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 800ad64:	2120      	movs	r1, #32
 800ad66:	187b      	adds	r3, r7, r1
 800ad68:	2200      	movs	r2, #0
 800ad6a:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 800ad6c:	187b      	adds	r3, r7, r1
 800ad6e:	2295      	movs	r2, #149	@ 0x95
 800ad70:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 800ad72:	187b      	adds	r3, r7, r1
 800ad74:	4a42      	ldr	r2, [pc, #264]	@ (800ae80 <STTS751_0_Probe+0x128>)
 800ad76:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800ad78:	187b      	adds	r3, r7, r1
 800ad7a:	4a42      	ldr	r2, [pc, #264]	@ (800ae84 <STTS751_0_Probe+0x12c>)
 800ad7c:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800ad7e:	187b      	adds	r3, r7, r1
 800ad80:	4a41      	ldr	r2, [pc, #260]	@ (800ae88 <STTS751_0_Probe+0x130>)
 800ad82:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800ad84:	187b      	adds	r3, r7, r1
 800ad86:	4a41      	ldr	r2, [pc, #260]	@ (800ae8c <STTS751_0_Probe+0x134>)
 800ad88:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 800ad8a:	187b      	adds	r3, r7, r1
 800ad8c:	4a40      	ldr	r2, [pc, #256]	@ (800ae90 <STTS751_0_Probe+0x138>)
 800ad8e:	619a      	str	r2, [r3, #24]

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 800ad90:	187a      	adds	r2, r7, r1
 800ad92:	4b40      	ldr	r3, [pc, #256]	@ (800ae94 <STTS751_0_Probe+0x13c>)
 800ad94:	0011      	movs	r1, r2
 800ad96:	0018      	movs	r0, r3
 800ad98:	f7ff f802 	bl	8009da0 <STTS751_RegisterBusIO>
 800ad9c:	1e03      	subs	r3, r0, #0
 800ad9e:	d003      	beq.n	800ada8 <STTS751_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ada0:	2307      	movs	r3, #7
 800ada2:	425b      	negs	r3, r3
 800ada4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ada6:	e065      	b.n	800ae74 <STTS751_0_Probe+0x11c>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 800ada8:	231f      	movs	r3, #31
 800adaa:	18fa      	adds	r2, r7, r3
 800adac:	4b39      	ldr	r3, [pc, #228]	@ (800ae94 <STTS751_0_Probe+0x13c>)
 800adae:	0011      	movs	r1, r2
 800adb0:	0018      	movs	r0, r3
 800adb2:	f7ff f88f 	bl	8009ed4 <STTS751_ReadID>
 800adb6:	1e03      	subs	r3, r0, #0
 800adb8:	d003      	beq.n	800adc2 <STTS751_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800adba:	2307      	movs	r3, #7
 800adbc:	425b      	negs	r3, r3
 800adbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adc0:	e058      	b.n	800ae74 <STTS751_0_Probe+0x11c>
  }
  else if (id != STTS751_ID_MAN)
 800adc2:	231f      	movs	r3, #31
 800adc4:	18fb      	adds	r3, r7, r3
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b53      	cmp	r3, #83	@ 0x53
 800adca:	d003      	beq.n	800add4 <STTS751_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800adcc:	2307      	movs	r3, #7
 800adce:	425b      	negs	r3, r3
 800add0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800add2:	e04f      	b.n	800ae74 <STTS751_0_Probe+0x11c>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 800add4:	240c      	movs	r4, #12
 800add6:	193a      	adds	r2, r7, r4
 800add8:	4b2e      	ldr	r3, [pc, #184]	@ (800ae94 <STTS751_0_Probe+0x13c>)
 800adda:	0011      	movs	r1, r2
 800addc:	0018      	movs	r0, r3
 800adde:	f7ff f895 	bl	8009f0c <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800ade2:	0021      	movs	r1, r4
 800ade4:	187b      	adds	r3, r7, r1
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	001a      	movs	r2, r3
 800adea:	187b      	adds	r3, r7, r1
 800adec:	785b      	ldrb	r3, [r3, #1]
 800adee:	005b      	lsls	r3, r3, #1
 800adf0:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800adf2:	187b      	adds	r3, r7, r1
 800adf4:	789b      	ldrb	r3, [r3, #2]
 800adf6:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800adf8:	431a      	orrs	r2, r3
 800adfa:	4b27      	ldr	r3, [pc, #156]	@ (800ae98 <STTS751_0_Probe+0x140>)
 800adfc:	609a      	str	r2, [r3, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 800adfe:	4b27      	ldr	r3, [pc, #156]	@ (800ae9c <STTS751_0_Probe+0x144>)
 800ae00:	4a24      	ldr	r2, [pc, #144]	@ (800ae94 <STTS751_0_Probe+0x13c>)
 800ae02:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 800ae04:	4b26      	ldr	r3, [pc, #152]	@ (800aea0 <STTS751_0_Probe+0x148>)
 800ae06:	4a27      	ldr	r2, [pc, #156]	@ (800aea4 <STTS751_0_Probe+0x14c>)
 800ae08:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800ae0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d11d      	bne.n	800ae4c <STTS751_0_Probe+0xf4>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	4013      	ands	r3, r2
 800ae16:	d019      	beq.n	800ae4c <STTS751_0_Probe+0xf4>
 800ae18:	187b      	adds	r3, r7, r1
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d115      	bne.n	800ae4c <STTS751_0_Probe+0xf4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 800ae20:	4b21      	ldr	r3, [pc, #132]	@ (800aea8 <STTS751_0_Probe+0x150>)
 800ae22:	685a      	ldr	r2, [r3, #4]
 800ae24:	4b21      	ldr	r3, [pc, #132]	@ (800aeac <STTS751_0_Probe+0x154>)
 800ae26:	3206      	adds	r2, #6
 800ae28:	0092      	lsls	r2, r2, #2
 800ae2a:	4921      	ldr	r1, [pc, #132]	@ (800aeb0 <STTS751_0_Probe+0x158>)
 800ae2c:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 800ae2e:	4b1c      	ldr	r3, [pc, #112]	@ (800aea0 <STTS751_0_Probe+0x148>)
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	4b19      	ldr	r3, [pc, #100]	@ (800ae9c <STTS751_0_Probe+0x144>)
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	0018      	movs	r0, r3
 800ae3a:	4790      	blx	r2
 800ae3c:	1e03      	subs	r3, r0, #0
 800ae3e:	d003      	beq.n	800ae48 <STTS751_0_Probe+0xf0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae40:	2305      	movs	r3, #5
 800ae42:	425b      	negs	r3, r3
 800ae44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae46:	e001      	b.n	800ae4c <STTS751_0_Probe+0xf4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800ae4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d106      	bne.n	800ae60 <STTS751_0_Probe+0x108>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2204      	movs	r2, #4
 800ae56:	4013      	ands	r3, r2
 800ae58:	d002      	beq.n	800ae60 <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae5a:	2305      	movs	r3, #5
 800ae5c:	425b      	negs	r3, r3
 800ae5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800ae60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d106      	bne.n	800ae74 <STTS751_0_Probe+0x11c>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2202      	movs	r2, #2
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	d002      	beq.n	800ae74 <STTS751_0_Probe+0x11c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae6e:	2305      	movs	r3, #5
 800ae70:	425b      	negs	r3, r3
 800ae72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
  }
  return ret;
 800ae74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ae76:	0018      	movs	r0, r3
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	b011      	add	sp, #68	@ 0x44
 800ae7c:	bd90      	pop	{r4, r7, pc}
 800ae7e:	46c0      	nop			@ (mov r8, r8)
 800ae80:	0800439d 	.word	0x0800439d
 800ae84:	08004419 	.word	0x08004419
 800ae88:	080044e1 	.word	0x080044e1
 800ae8c:	08004469 	.word	0x08004469
 800ae90:	08004559 	.word	0x08004559
 800ae94:	200005a8 	.word	0x200005a8
 800ae98:	20000544 	.word	0x20000544
 800ae9c:	20000508 	.word	0x20000508
 800aea0:	20000538 	.word	0x20000538
 800aea4:	20000134 	.word	0x20000134
 800aea8:	20000158 	.word	0x20000158
 800aeac:	20000514 	.word	0x20000514
 800aeb0:	20000144 	.word	0x20000144

0800aeb4 <IKS01A3_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b08e      	sub	sp, #56	@ 0x38
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800aebe:	2300      	movs	r3, #0
 800aec0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800aec2:	2301      	movs	r3, #1
 800aec4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d100      	bne.n	800aed2 <IKS01A3_MOTION_SENSOR_Init+0x1e>
 800aed0:	e079      	b.n	800afc6 <IKS01A3_MOTION_SENSOR_Init+0x112>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d900      	bls.n	800aeda <IKS01A3_MOTION_SENSOR_Init+0x26>
 800aed8:	e0ac      	b.n	800b034 <IKS01A3_MOTION_SENSOR_Init+0x180>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d003      	beq.n	800aee8 <IKS01A3_MOTION_SENSOR_Init+0x34>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d038      	beq.n	800af58 <IKS01A3_MOTION_SENSOR_Init+0xa4>
 800aee6:	e0a5      	b.n	800b034 <IKS01A3_MOTION_SENSOR_Init+0x180>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	0018      	movs	r0, r3
 800aeec:	f000 f918 	bl	800b120 <LSM6DSO_0_Probe>
 800aef0:	1e03      	subs	r3, r0, #0
 800aef2:	d002      	beq.n	800aefa <IKS01A3_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800aef4:	2301      	movs	r3, #1
 800aef6:	425b      	negs	r3, r3
 800aef8:	e0db      	b.n	800b0b2 <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800aefa:	4b70      	ldr	r3, [pc, #448]	@ (800b0bc <IKS01A3_MOTION_SENSOR_Init+0x208>)
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	0092      	lsls	r2, r2, #2
 800af00:	58d3      	ldr	r3, [r2, r3]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	4a6e      	ldr	r2, [pc, #440]	@ (800b0c0 <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 800af06:	6879      	ldr	r1, [r7, #4]
 800af08:	0089      	lsls	r1, r1, #2
 800af0a:	588a      	ldr	r2, [r1, r2]
 800af0c:	210c      	movs	r1, #12
 800af0e:	1879      	adds	r1, r7, r1
 800af10:	0010      	movs	r0, r2
 800af12:	4798      	blx	r3
 800af14:	1e03      	subs	r3, r0, #0
 800af16:	d002      	beq.n	800af1e <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800af18:	2307      	movs	r3, #7
 800af1a:	425b      	negs	r3, r3
 800af1c:	e0c9      	b.n	800b0b2 <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (cap.Acc == 1U)
 800af1e:	230c      	movs	r3, #12
 800af20:	18fb      	adds	r3, r7, r3
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d103      	bne.n	800af30 <IKS01A3_MOTION_SENSOR_Init+0x7c>
      {
        component_functions |= MOTION_ACCELERO;
 800af28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2a:	2202      	movs	r2, #2
 800af2c:	4313      	orrs	r3, r2
 800af2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800af30:	230c      	movs	r3, #12
 800af32:	18fb      	adds	r3, r7, r3
 800af34:	785b      	ldrb	r3, [r3, #1]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d103      	bne.n	800af42 <IKS01A3_MOTION_SENSOR_Init+0x8e>
      {
        component_functions |= MOTION_GYRO;
 800af3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3c:	2201      	movs	r2, #1
 800af3e:	4313      	orrs	r3, r2
 800af40:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800af42:	230c      	movs	r3, #12
 800af44:	18fb      	adds	r3, r7, r3
 800af46:	789b      	ldrb	r3, [r3, #2]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d000      	beq.n	800af4e <IKS01A3_MOTION_SENSOR_Init+0x9a>
 800af4c:	e076      	b.n	800b03c <IKS01A3_MOTION_SENSOR_Init+0x188>
      {
        component_functions |= MOTION_MAGNETO;
 800af4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af50:	2204      	movs	r2, #4
 800af52:	4313      	orrs	r3, r2
 800af54:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800af56:	e071      	b.n	800b03c <IKS01A3_MOTION_SENSOR_Init+0x188>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	0018      	movs	r0, r3
 800af5c:	f000 f9a6 	bl	800b2ac <LIS2DW12_0_Probe>
 800af60:	1e03      	subs	r3, r0, #0
 800af62:	d002      	beq.n	800af6a <IKS01A3_MOTION_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800af64:	2301      	movs	r3, #1
 800af66:	425b      	negs	r3, r3
 800af68:	e0a3      	b.n	800b0b2 <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800af6a:	4b54      	ldr	r3, [pc, #336]	@ (800b0bc <IKS01A3_MOTION_SENSOR_Init+0x208>)
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	0092      	lsls	r2, r2, #2
 800af70:	58d3      	ldr	r3, [r2, r3]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	4a52      	ldr	r2, [pc, #328]	@ (800b0c0 <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 800af76:	6879      	ldr	r1, [r7, #4]
 800af78:	0089      	lsls	r1, r1, #2
 800af7a:	588a      	ldr	r2, [r1, r2]
 800af7c:	210c      	movs	r1, #12
 800af7e:	1879      	adds	r1, r7, r1
 800af80:	0010      	movs	r0, r2
 800af82:	4798      	blx	r3
 800af84:	1e03      	subs	r3, r0, #0
 800af86:	d002      	beq.n	800af8e <IKS01A3_MOTION_SENSOR_Init+0xda>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800af88:	2307      	movs	r3, #7
 800af8a:	425b      	negs	r3, r3
 800af8c:	e091      	b.n	800b0b2 <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (cap.Acc == 1U)
 800af8e:	230c      	movs	r3, #12
 800af90:	18fb      	adds	r3, r7, r3
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d103      	bne.n	800afa0 <IKS01A3_MOTION_SENSOR_Init+0xec>
      {
        component_functions |= MOTION_ACCELERO;
 800af98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af9a:	2202      	movs	r2, #2
 800af9c:	4313      	orrs	r3, r2
 800af9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800afa0:	230c      	movs	r3, #12
 800afa2:	18fb      	adds	r3, r7, r3
 800afa4:	785b      	ldrb	r3, [r3, #1]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d103      	bne.n	800afb2 <IKS01A3_MOTION_SENSOR_Init+0xfe>
      {
        component_functions |= MOTION_GYRO;
 800afaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afac:	2201      	movs	r2, #1
 800afae:	4313      	orrs	r3, r2
 800afb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800afb2:	230c      	movs	r3, #12
 800afb4:	18fb      	adds	r3, r7, r3
 800afb6:	789b      	ldrb	r3, [r3, #2]
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d141      	bne.n	800b040 <IKS01A3_MOTION_SENSOR_Init+0x18c>
      {
        component_functions |= MOTION_MAGNETO;
 800afbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afbe:	2204      	movs	r2, #4
 800afc0:	4313      	orrs	r3, r2
 800afc2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800afc4:	e03c      	b.n	800b040 <IKS01A3_MOTION_SENSOR_Init+0x18c>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	0018      	movs	r0, r3
 800afca:	f000 fa1d 	bl	800b408 <LIS2MDL_0_Probe>
 800afce:	1e03      	subs	r3, r0, #0
 800afd0:	d002      	beq.n	800afd8 <IKS01A3_MOTION_SENSOR_Init+0x124>
      {
        return BSP_ERROR_NO_INIT;
 800afd2:	2301      	movs	r3, #1
 800afd4:	425b      	negs	r3, r3
 800afd6:	e06c      	b.n	800b0b2 <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800afd8:	4b38      	ldr	r3, [pc, #224]	@ (800b0bc <IKS01A3_MOTION_SENSOR_Init+0x208>)
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	0092      	lsls	r2, r2, #2
 800afde:	58d3      	ldr	r3, [r2, r3]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	4a37      	ldr	r2, [pc, #220]	@ (800b0c0 <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 800afe4:	6879      	ldr	r1, [r7, #4]
 800afe6:	0089      	lsls	r1, r1, #2
 800afe8:	588a      	ldr	r2, [r1, r2]
 800afea:	210c      	movs	r1, #12
 800afec:	1879      	adds	r1, r7, r1
 800afee:	0010      	movs	r0, r2
 800aff0:	4798      	blx	r3
 800aff2:	1e03      	subs	r3, r0, #0
 800aff4:	d002      	beq.n	800affc <IKS01A3_MOTION_SENSOR_Init+0x148>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800aff6:	2307      	movs	r3, #7
 800aff8:	425b      	negs	r3, r3
 800affa:	e05a      	b.n	800b0b2 <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (cap.Acc == 1U)
 800affc:	230c      	movs	r3, #12
 800affe:	18fb      	adds	r3, r7, r3
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d103      	bne.n	800b00e <IKS01A3_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_ACCELERO;
 800b006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b008:	2202      	movs	r2, #2
 800b00a:	4313      	orrs	r3, r2
 800b00c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b00e:	230c      	movs	r3, #12
 800b010:	18fb      	adds	r3, r7, r3
 800b012:	785b      	ldrb	r3, [r3, #1]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d103      	bne.n	800b020 <IKS01A3_MOTION_SENSOR_Init+0x16c>
      {
        component_functions |= MOTION_GYRO;
 800b018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b01a:	2201      	movs	r2, #1
 800b01c:	4313      	orrs	r3, r2
 800b01e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b020:	230c      	movs	r3, #12
 800b022:	18fb      	adds	r3, r7, r3
 800b024:	789b      	ldrb	r3, [r3, #2]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d10c      	bne.n	800b044 <IKS01A3_MOTION_SENSOR_Init+0x190>
      {
        component_functions |= MOTION_MAGNETO;
 800b02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b02c:	2204      	movs	r2, #4
 800b02e:	4313      	orrs	r3, r2
 800b030:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b032:	e007      	b.n	800b044 <IKS01A3_MOTION_SENSOR_Init+0x190>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b034:	2302      	movs	r3, #2
 800b036:	425b      	negs	r3, r3
 800b038:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800b03a:	e004      	b.n	800b046 <IKS01A3_MOTION_SENSOR_Init+0x192>
      break;
 800b03c:	46c0      	nop			@ (mov r8, r8)
 800b03e:	e002      	b.n	800b046 <IKS01A3_MOTION_SENSOR_Init+0x192>
      break;
 800b040:	46c0      	nop			@ (mov r8, r8)
 800b042:	e000      	b.n	800b046 <IKS01A3_MOTION_SENSOR_Init+0x192>
      break;
 800b044:	46c0      	nop			@ (mov r8, r8)
  }

  if (ret != BSP_ERROR_NONE)
 800b046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <IKS01A3_MOTION_SENSOR_Init+0x19c>
  {
    return ret;
 800b04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b04e:	e030      	b.n	800b0b2 <IKS01A3_MOTION_SENSOR_Init+0x1fe>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800b050:	2300      	movs	r3, #0
 800b052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b054:	e029      	b.n	800b0aa <IKS01A3_MOTION_SENSOR_Init+0x1f6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b05a:	4013      	ands	r3, r2
 800b05c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b05e:	429a      	cmp	r2, r3
 800b060:	d11d      	bne.n	800b09e <IKS01A3_MOTION_SENSOR_Init+0x1ea>
 800b062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b066:	4013      	ands	r3, r2
 800b068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d117      	bne.n	800b09e <IKS01A3_MOTION_SENSOR_Init+0x1ea>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b06e:	4b15      	ldr	r3, [pc, #84]	@ (800b0c4 <IKS01A3_MOTION_SENSOR_Init+0x210>)
 800b070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b072:	0092      	lsls	r2, r2, #2
 800b074:	58d0      	ldr	r0, [r2, r3]
 800b076:	4914      	ldr	r1, [pc, #80]	@ (800b0c8 <IKS01A3_MOTION_SENSOR_Init+0x214>)
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	0013      	movs	r3, r2
 800b07c:	005b      	lsls	r3, r3, #1
 800b07e:	189b      	adds	r3, r3, r2
 800b080:	181b      	adds	r3, r3, r0
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	585b      	ldr	r3, [r3, r1]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a0d      	ldr	r2, [pc, #52]	@ (800b0c0 <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 800b08a:	6879      	ldr	r1, [r7, #4]
 800b08c:	0089      	lsls	r1, r1, #2
 800b08e:	588a      	ldr	r2, [r1, r2]
 800b090:	0010      	movs	r0, r2
 800b092:	4798      	blx	r3
 800b094:	1e03      	subs	r3, r0, #0
 800b096:	d002      	beq.n	800b09e <IKS01A3_MOTION_SENSOR_Init+0x1ea>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b098:	2305      	movs	r3, #5
 800b09a:	425b      	negs	r3, r3
 800b09c:	e009      	b.n	800b0b2 <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
    }
    function = function << 1;
 800b09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a0:	005b      	lsls	r3, r3, #1
 800b0a2:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800b0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d9d2      	bls.n	800b056 <IKS01A3_MOTION_SENSOR_Init+0x1a2>
  }

  return ret;
 800b0b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b0b2:	0018      	movs	r0, r3
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	b00e      	add	sp, #56	@ 0x38
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	46c0      	nop			@ (mov r8, r8)
 800b0bc:	20000608 	.word	0x20000608
 800b0c0:	200005d8 	.word	0x200005d8
 800b0c4:	2000016c 	.word	0x2000016c
 800b0c8:	200005e4 	.word	0x200005e4

0800b0cc <IKS01A3_MOTION_SENSOR_GetCapabilities>:
 * @param  Instance Motion sensor instance
 * @param  Capabilities pointer to motion sensor capabilities
 * @retval BSP status
 */
int32_t IKS01A3_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d903      	bls.n	800b0e4 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b0dc:	2302      	movs	r3, #2
 800b0de:	425b      	negs	r3, r3
 800b0e0:	60fb      	str	r3, [r7, #12]
 800b0e2:	e013      	b.n	800b10c <IKS01A3_MOTION_SENSOR_GetCapabilities+0x40>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800b0e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b118 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x4c>)
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	0092      	lsls	r2, r2, #2
 800b0ea:	58d3      	ldr	r3, [r2, r3]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	4a0b      	ldr	r2, [pc, #44]	@ (800b11c <IKS01A3_MOTION_SENSOR_GetCapabilities+0x50>)
 800b0f0:	6879      	ldr	r1, [r7, #4]
 800b0f2:	0089      	lsls	r1, r1, #2
 800b0f4:	588a      	ldr	r2, [r1, r2]
 800b0f6:	6839      	ldr	r1, [r7, #0]
 800b0f8:	0010      	movs	r0, r2
 800b0fa:	4798      	blx	r3
 800b0fc:	1e03      	subs	r3, r0, #0
 800b0fe:	d003      	beq.n	800b108 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x3c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b100:	2307      	movs	r3, #7
 800b102:	425b      	negs	r3, r3
 800b104:	60fb      	str	r3, [r7, #12]
 800b106:	e001      	b.n	800b10c <IKS01A3_MOTION_SENSOR_GetCapabilities+0x40>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b108:	2300      	movs	r3, #0
 800b10a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b10c:	68fb      	ldr	r3, [r7, #12]
}
 800b10e:	0018      	movs	r0, r3
 800b110:	46bd      	mov	sp, r7
 800b112:	b004      	add	sp, #16
 800b114:	bd80      	pop	{r7, pc}
 800b116:	46c0      	nop			@ (mov r8, r8)
 800b118:	20000608 	.word	0x20000608
 800b11c:	200005d8 	.word	0x200005d8

0800b120 <LSM6DSO_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 800b120:	b590      	push	{r4, r7, lr}
 800b122:	b093      	sub	sp, #76	@ 0x4c
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800b128:	2300      	movs	r3, #0
 800b12a:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800b12c:	2128      	movs	r1, #40	@ 0x28
 800b12e:	187b      	adds	r3, r7, r1
 800b130:	2200      	movs	r2, #0
 800b132:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 800b134:	187b      	adds	r3, r7, r1
 800b136:	22d7      	movs	r2, #215	@ 0xd7
 800b138:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b13a:	187b      	adds	r3, r7, r1
 800b13c:	4a4d      	ldr	r2, [pc, #308]	@ (800b274 <LSM6DSO_0_Probe+0x154>)
 800b13e:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b140:	187b      	adds	r3, r7, r1
 800b142:	4a4d      	ldr	r2, [pc, #308]	@ (800b278 <LSM6DSO_0_Probe+0x158>)
 800b144:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b146:	187b      	adds	r3, r7, r1
 800b148:	4a4c      	ldr	r2, [pc, #304]	@ (800b27c <LSM6DSO_0_Probe+0x15c>)
 800b14a:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b14c:	187b      	adds	r3, r7, r1
 800b14e:	4a4c      	ldr	r2, [pc, #304]	@ (800b280 <LSM6DSO_0_Probe+0x160>)
 800b150:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b152:	187b      	adds	r3, r7, r1
 800b154:	4a4b      	ldr	r2, [pc, #300]	@ (800b284 <LSM6DSO_0_Probe+0x164>)
 800b156:	619a      	str	r2, [r3, #24]

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 800b158:	187a      	adds	r2, r7, r1
 800b15a:	4b4b      	ldr	r3, [pc, #300]	@ (800b288 <LSM6DSO_0_Probe+0x168>)
 800b15c:	0011      	movs	r1, r2
 800b15e:	0018      	movs	r0, r3
 800b160:	f7fc fe68 	bl	8007e34 <LSM6DSO_RegisterBusIO>
 800b164:	1e03      	subs	r3, r0, #0
 800b166:	d003      	beq.n	800b170 <LSM6DSO_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b168:	2307      	movs	r3, #7
 800b16a:	425b      	negs	r3, r3
 800b16c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b16e:	e07b      	b.n	800b268 <LSM6DSO_0_Probe+0x148>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800b170:	2327      	movs	r3, #39	@ 0x27
 800b172:	18fa      	adds	r2, r7, r3
 800b174:	4b44      	ldr	r3, [pc, #272]	@ (800b288 <LSM6DSO_0_Probe+0x168>)
 800b176:	0011      	movs	r1, r2
 800b178:	0018      	movs	r0, r3
 800b17a:	f7fc ff55 	bl	8008028 <LSM6DSO_ReadID>
 800b17e:	1e03      	subs	r3, r0, #0
 800b180:	d003      	beq.n	800b18a <LSM6DSO_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b182:	2307      	movs	r3, #7
 800b184:	425b      	negs	r3, r3
 800b186:	647b      	str	r3, [r7, #68]	@ 0x44
 800b188:	e06e      	b.n	800b268 <LSM6DSO_0_Probe+0x148>
  }
  else if (id != LSM6DSO_ID)
 800b18a:	2327      	movs	r3, #39	@ 0x27
 800b18c:	18fb      	adds	r3, r7, r3
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	2b6c      	cmp	r3, #108	@ 0x6c
 800b192:	d003      	beq.n	800b19c <LSM6DSO_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b194:	2307      	movs	r3, #7
 800b196:	425b      	negs	r3, r3
 800b198:	647b      	str	r3, [r7, #68]	@ 0x44
 800b19a:	e065      	b.n	800b268 <LSM6DSO_0_Probe+0x148>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800b19c:	2408      	movs	r4, #8
 800b19e:	193a      	adds	r2, r7, r4
 800b1a0:	4b39      	ldr	r3, [pc, #228]	@ (800b288 <LSM6DSO_0_Probe+0x168>)
 800b1a2:	0011      	movs	r1, r2
 800b1a4:	0018      	movs	r0, r3
 800b1a6:	f7fc ff55 	bl	8008054 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b1aa:	0021      	movs	r1, r4
 800b1ac:	187b      	adds	r3, r7, r1
 800b1ae:	785b      	ldrb	r3, [r3, #1]
 800b1b0:	001a      	movs	r2, r3
 800b1b2:	187b      	adds	r3, r7, r1
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	005b      	lsls	r3, r3, #1
 800b1b8:	431a      	orrs	r2, r3
 800b1ba:	187b      	adds	r3, r7, r1
 800b1bc:	789b      	ldrb	r3, [r3, #2]
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	4b32      	ldr	r3, [pc, #200]	@ (800b28c <LSM6DSO_0_Probe+0x16c>)
 800b1c4:	601a      	str	r2, [r3, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800b1c6:	4b32      	ldr	r3, [pc, #200]	@ (800b290 <LSM6DSO_0_Probe+0x170>)
 800b1c8:	4a2f      	ldr	r2, [pc, #188]	@ (800b288 <LSM6DSO_0_Probe+0x168>)
 800b1ca:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800b1cc:	4b31      	ldr	r3, [pc, #196]	@ (800b294 <LSM6DSO_0_Probe+0x174>)
 800b1ce:	4a32      	ldr	r2, [pc, #200]	@ (800b298 <LSM6DSO_0_Probe+0x178>)
 800b1d0:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b1d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d11c      	bne.n	800b212 <LSM6DSO_0_Probe+0xf2>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	4013      	ands	r3, r2
 800b1de:	d018      	beq.n	800b212 <LSM6DSO_0_Probe+0xf2>
 800b1e0:	187b      	adds	r3, r7, r1
 800b1e2:	785b      	ldrb	r3, [r3, #1]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d114      	bne.n	800b212 <LSM6DSO_0_Probe+0xf2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800b1e8:	4b2c      	ldr	r3, [pc, #176]	@ (800b29c <LSM6DSO_0_Probe+0x17c>)
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	4b2c      	ldr	r3, [pc, #176]	@ (800b2a0 <LSM6DSO_0_Probe+0x180>)
 800b1ee:	0092      	lsls	r2, r2, #2
 800b1f0:	492c      	ldr	r1, [pc, #176]	@ (800b2a4 <LSM6DSO_0_Probe+0x184>)
 800b1f2:	50d1      	str	r1, [r2, r3]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800b1f4:	4b27      	ldr	r3, [pc, #156]	@ (800b294 <LSM6DSO_0_Probe+0x174>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	4b25      	ldr	r3, [pc, #148]	@ (800b290 <LSM6DSO_0_Probe+0x170>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	0018      	movs	r0, r3
 800b200:	4790      	blx	r2
 800b202:	1e03      	subs	r3, r0, #0
 800b204:	d003      	beq.n	800b20e <LSM6DSO_0_Probe+0xee>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b206:	2305      	movs	r3, #5
 800b208:	425b      	negs	r3, r3
 800b20a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b20c:	e001      	b.n	800b212 <LSM6DSO_0_Probe+0xf2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b20e:	2300      	movs	r3, #0
 800b210:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b214:	2b00      	cmp	r3, #0
 800b216:	d11d      	bne.n	800b254 <LSM6DSO_0_Probe+0x134>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2202      	movs	r2, #2
 800b21c:	4013      	ands	r3, r2
 800b21e:	d019      	beq.n	800b254 <LSM6DSO_0_Probe+0x134>
 800b220:	2308      	movs	r3, #8
 800b222:	18fb      	adds	r3, r7, r3
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	2b01      	cmp	r3, #1
 800b228:	d114      	bne.n	800b254 <LSM6DSO_0_Probe+0x134>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b22a:	4b1c      	ldr	r3, [pc, #112]	@ (800b29c <LSM6DSO_0_Probe+0x17c>)
 800b22c:	689a      	ldr	r2, [r3, #8]
 800b22e:	4b1c      	ldr	r3, [pc, #112]	@ (800b2a0 <LSM6DSO_0_Probe+0x180>)
 800b230:	0092      	lsls	r2, r2, #2
 800b232:	491d      	ldr	r1, [pc, #116]	@ (800b2a8 <LSM6DSO_0_Probe+0x188>)
 800b234:	50d1      	str	r1, [r2, r3]
            void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800b236:	4b17      	ldr	r3, [pc, #92]	@ (800b294 <LSM6DSO_0_Probe+0x174>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	4b14      	ldr	r3, [pc, #80]	@ (800b290 <LSM6DSO_0_Probe+0x170>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	0018      	movs	r0, r3
 800b242:	4790      	blx	r2
 800b244:	1e03      	subs	r3, r0, #0
 800b246:	d003      	beq.n	800b250 <LSM6DSO_0_Probe+0x130>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b248:	2305      	movs	r3, #5
 800b24a:	425b      	negs	r3, r3
 800b24c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b24e:	e001      	b.n	800b254 <LSM6DSO_0_Probe+0x134>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b250:	2300      	movs	r3, #0
 800b252:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b256:	2b00      	cmp	r3, #0
 800b258:	d106      	bne.n	800b268 <LSM6DSO_0_Probe+0x148>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2204      	movs	r2, #4
 800b25e:	4013      	ands	r3, r2
 800b260:	d002      	beq.n	800b268 <LSM6DSO_0_Probe+0x148>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b262:	2305      	movs	r3, #5
 800b264:	425b      	negs	r3, r3
 800b266:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 800b268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b26a:	0018      	movs	r0, r3
 800b26c:	46bd      	mov	sp, r7
 800b26e:	b013      	add	sp, #76	@ 0x4c
 800b270:	bd90      	pop	{r4, r7, pc}
 800b272:	46c0      	nop			@ (mov r8, r8)
 800b274:	0800439d 	.word	0x0800439d
 800b278:	08004419 	.word	0x08004419
 800b27c:	080044e1 	.word	0x080044e1
 800b280:	08004469 	.word	0x08004469
 800b284:	08004559 	.word	0x08004559
 800b288:	20000620 	.word	0x20000620
 800b28c:	20000614 	.word	0x20000614
 800b290:	200005d8 	.word	0x200005d8
 800b294:	20000608 	.word	0x20000608
 800b298:	200000dc 	.word	0x200000dc
 800b29c:	2000016c 	.word	0x2000016c
 800b2a0:	200005e4 	.word	0x200005e4
 800b2a4:	20000110 	.word	0x20000110
 800b2a8:	200000ec 	.word	0x200000ec

0800b2ac <LIS2DW12_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 800b2ac:	b590      	push	{r4, r7, lr}
 800b2ae:	b093      	sub	sp, #76	@ 0x4c
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800b2b8:	2128      	movs	r1, #40	@ 0x28
 800b2ba:	187b      	adds	r3, r7, r1
 800b2bc:	2200      	movs	r2, #0
 800b2be:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800b2c0:	187b      	adds	r3, r7, r1
 800b2c2:	2233      	movs	r2, #51	@ 0x33
 800b2c4:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b2c6:	187b      	adds	r3, r7, r1
 800b2c8:	4a42      	ldr	r2, [pc, #264]	@ (800b3d4 <LIS2DW12_0_Probe+0x128>)
 800b2ca:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b2cc:	187b      	adds	r3, r7, r1
 800b2ce:	4a42      	ldr	r2, [pc, #264]	@ (800b3d8 <LIS2DW12_0_Probe+0x12c>)
 800b2d0:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b2d2:	187b      	adds	r3, r7, r1
 800b2d4:	4a41      	ldr	r2, [pc, #260]	@ (800b3dc <LIS2DW12_0_Probe+0x130>)
 800b2d6:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b2d8:	187b      	adds	r3, r7, r1
 800b2da:	4a41      	ldr	r2, [pc, #260]	@ (800b3e0 <LIS2DW12_0_Probe+0x134>)
 800b2dc:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b2de:	187b      	adds	r3, r7, r1
 800b2e0:	4a40      	ldr	r2, [pc, #256]	@ (800b3e4 <LIS2DW12_0_Probe+0x138>)
 800b2e2:	619a      	str	r2, [r3, #24]

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800b2e4:	187a      	adds	r2, r7, r1
 800b2e6:	4b40      	ldr	r3, [pc, #256]	@ (800b3e8 <LIS2DW12_0_Probe+0x13c>)
 800b2e8:	0011      	movs	r1, r2
 800b2ea:	0018      	movs	r0, r3
 800b2ec:	f7fa f8d4 	bl	8005498 <LIS2DW12_RegisterBusIO>
 800b2f0:	1e03      	subs	r3, r0, #0
 800b2f2:	d003      	beq.n	800b2fc <LIS2DW12_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2f4:	2307      	movs	r3, #7
 800b2f6:	425b      	negs	r3, r3
 800b2f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2fa:	e065      	b.n	800b3c8 <LIS2DW12_0_Probe+0x11c>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800b2fc:	2327      	movs	r3, #39	@ 0x27
 800b2fe:	18fa      	adds	r2, r7, r3
 800b300:	4b39      	ldr	r3, [pc, #228]	@ (800b3e8 <LIS2DW12_0_Probe+0x13c>)
 800b302:	0011      	movs	r1, r2
 800b304:	0018      	movs	r0, r3
 800b306:	f7fa f9aa 	bl	800565e <LIS2DW12_ReadID>
 800b30a:	1e03      	subs	r3, r0, #0
 800b30c:	d003      	beq.n	800b316 <LIS2DW12_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b30e:	2307      	movs	r3, #7
 800b310:	425b      	negs	r3, r3
 800b312:	647b      	str	r3, [r7, #68]	@ 0x44
 800b314:	e058      	b.n	800b3c8 <LIS2DW12_0_Probe+0x11c>
  }
  else if (id != LIS2DW12_ID)
 800b316:	2327      	movs	r3, #39	@ 0x27
 800b318:	18fb      	adds	r3, r7, r3
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2b44      	cmp	r3, #68	@ 0x44
 800b31e:	d003      	beq.n	800b328 <LIS2DW12_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b320:	2307      	movs	r3, #7
 800b322:	425b      	negs	r3, r3
 800b324:	647b      	str	r3, [r7, #68]	@ 0x44
 800b326:	e04f      	b.n	800b3c8 <LIS2DW12_0_Probe+0x11c>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800b328:	2408      	movs	r4, #8
 800b32a:	193a      	adds	r2, r7, r4
 800b32c:	4b2e      	ldr	r3, [pc, #184]	@ (800b3e8 <LIS2DW12_0_Probe+0x13c>)
 800b32e:	0011      	movs	r1, r2
 800b330:	0018      	movs	r0, r3
 800b332:	f7fa f9ab 	bl	800568c <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b336:	0021      	movs	r1, r4
 800b338:	187b      	adds	r3, r7, r1
 800b33a:	785b      	ldrb	r3, [r3, #1]
 800b33c:	001a      	movs	r2, r3
 800b33e:	187b      	adds	r3, r7, r1
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	005b      	lsls	r3, r3, #1
 800b344:	431a      	orrs	r2, r3
 800b346:	187b      	adds	r3, r7, r1
 800b348:	789b      	ldrb	r3, [r3, #2]
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	431a      	orrs	r2, r3
 800b34e:	4b27      	ldr	r3, [pc, #156]	@ (800b3ec <LIS2DW12_0_Probe+0x140>)
 800b350:	605a      	str	r2, [r3, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800b352:	4b27      	ldr	r3, [pc, #156]	@ (800b3f0 <LIS2DW12_0_Probe+0x144>)
 800b354:	4a24      	ldr	r2, [pc, #144]	@ (800b3e8 <LIS2DW12_0_Probe+0x13c>)
 800b356:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 800b358:	4b26      	ldr	r3, [pc, #152]	@ (800b3f4 <LIS2DW12_0_Probe+0x148>)
 800b35a:	4a27      	ldr	r2, [pc, #156]	@ (800b3f8 <LIS2DW12_0_Probe+0x14c>)
 800b35c:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b35e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b360:	2b00      	cmp	r3, #0
 800b362:	d11d      	bne.n	800b3a0 <LIS2DW12_0_Probe+0xf4>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2202      	movs	r2, #2
 800b368:	4013      	ands	r3, r2
 800b36a:	d019      	beq.n	800b3a0 <LIS2DW12_0_Probe+0xf4>
 800b36c:	187b      	adds	r3, r7, r1
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d115      	bne.n	800b3a0 <LIS2DW12_0_Probe+0xf4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b374:	4b21      	ldr	r3, [pc, #132]	@ (800b3fc <LIS2DW12_0_Probe+0x150>)
 800b376:	689a      	ldr	r2, [r3, #8]
 800b378:	4b21      	ldr	r3, [pc, #132]	@ (800b400 <LIS2DW12_0_Probe+0x154>)
 800b37a:	3203      	adds	r2, #3
 800b37c:	0092      	lsls	r2, r2, #2
 800b37e:	4921      	ldr	r1, [pc, #132]	@ (800b404 <LIS2DW12_0_Probe+0x158>)
 800b380:	50d1      	str	r1, [r2, r3]
            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 800b382:	4b1c      	ldr	r3, [pc, #112]	@ (800b3f4 <LIS2DW12_0_Probe+0x148>)
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	4b19      	ldr	r3, [pc, #100]	@ (800b3f0 <LIS2DW12_0_Probe+0x144>)
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	0018      	movs	r0, r3
 800b38e:	4790      	blx	r2
 800b390:	1e03      	subs	r3, r0, #0
 800b392:	d003      	beq.n	800b39c <LIS2DW12_0_Probe+0xf0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b394:	2305      	movs	r3, #5
 800b396:	425b      	negs	r3, r3
 800b398:	647b      	str	r3, [r7, #68]	@ 0x44
 800b39a:	e001      	b.n	800b3a0 <LIS2DW12_0_Probe+0xf4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b39c:	2300      	movs	r3, #0
 800b39e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800b3a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d106      	bne.n	800b3b4 <LIS2DW12_0_Probe+0x108>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	4013      	ands	r3, r2
 800b3ac:	d002      	beq.n	800b3b4 <LIS2DW12_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3ae:	2305      	movs	r3, #5
 800b3b0:	425b      	negs	r3, r3
 800b3b2:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b3b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d106      	bne.n	800b3c8 <LIS2DW12_0_Probe+0x11c>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2204      	movs	r2, #4
 800b3be:	4013      	ands	r3, r2
 800b3c0:	d002      	beq.n	800b3c8 <LIS2DW12_0_Probe+0x11c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3c2:	2305      	movs	r3, #5
 800b3c4:	425b      	negs	r3, r3
 800b3c6:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 800b3c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b3ca:	0018      	movs	r0, r3
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	b013      	add	sp, #76	@ 0x4c
 800b3d0:	bd90      	pop	{r4, r7, pc}
 800b3d2:	46c0      	nop			@ (mov r8, r8)
 800b3d4:	0800439d 	.word	0x0800439d
 800b3d8:	08004419 	.word	0x08004419
 800b3dc:	080044e1 	.word	0x080044e1
 800b3e0:	08004469 	.word	0x08004469
 800b3e4:	08004559 	.word	0x08004559
 800b3e8:	20000650 	.word	0x20000650
 800b3ec:	20000614 	.word	0x20000614
 800b3f0:	200005d8 	.word	0x200005d8
 800b3f4:	20000608 	.word	0x20000608
 800b3f8:	2000003c 	.word	0x2000003c
 800b3fc:	2000016c 	.word	0x2000016c
 800b400:	200005e4 	.word	0x200005e4
 800b404:	2000004c 	.word	0x2000004c

0800b408 <LIS2MDL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval BSP status
 */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800b408:	b590      	push	{r4, r7, lr}
 800b40a:	b093      	sub	sp, #76	@ 0x4c
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800b410:	2300      	movs	r3, #0
 800b412:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800b414:	2128      	movs	r1, #40	@ 0x28
 800b416:	187b      	adds	r3, r7, r1
 800b418:	2200      	movs	r2, #0
 800b41a:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800b41c:	187b      	adds	r3, r7, r1
 800b41e:	223d      	movs	r2, #61	@ 0x3d
 800b420:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 800b422:	187b      	adds	r3, r7, r1
 800b424:	4a42      	ldr	r2, [pc, #264]	@ (800b530 <LIS2MDL_0_Probe+0x128>)
 800b426:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800b428:	187b      	adds	r3, r7, r1
 800b42a:	4a42      	ldr	r2, [pc, #264]	@ (800b534 <LIS2MDL_0_Probe+0x12c>)
 800b42c:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800b42e:	187b      	adds	r3, r7, r1
 800b430:	4a41      	ldr	r2, [pc, #260]	@ (800b538 <LIS2MDL_0_Probe+0x130>)
 800b432:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800b434:	187b      	adds	r3, r7, r1
 800b436:	4a41      	ldr	r2, [pc, #260]	@ (800b53c <LIS2MDL_0_Probe+0x134>)
 800b438:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 800b43a:	187b      	adds	r3, r7, r1
 800b43c:	4a40      	ldr	r2, [pc, #256]	@ (800b540 <LIS2MDL_0_Probe+0x138>)
 800b43e:	619a      	str	r2, [r3, #24]

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800b440:	187a      	adds	r2, r7, r1
 800b442:	4b40      	ldr	r3, [pc, #256]	@ (800b544 <LIS2MDL_0_Probe+0x13c>)
 800b444:	0011      	movs	r1, r2
 800b446:	0018      	movs	r0, r3
 800b448:	f7fb f9d4 	bl	80067f4 <LIS2MDL_RegisterBusIO>
 800b44c:	1e03      	subs	r3, r0, #0
 800b44e:	d003      	beq.n	800b458 <LIS2MDL_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b450:	2307      	movs	r3, #7
 800b452:	425b      	negs	r3, r3
 800b454:	647b      	str	r3, [r7, #68]	@ 0x44
 800b456:	e065      	b.n	800b524 <LIS2MDL_0_Probe+0x11c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800b458:	2327      	movs	r3, #39	@ 0x27
 800b45a:	18fa      	adds	r2, r7, r3
 800b45c:	4b39      	ldr	r3, [pc, #228]	@ (800b544 <LIS2MDL_0_Probe+0x13c>)
 800b45e:	0011      	movs	r1, r2
 800b460:	0018      	movs	r0, r3
 800b462:	f7fb fa8c 	bl	800697e <LIS2MDL_ReadID>
 800b466:	1e03      	subs	r3, r0, #0
 800b468:	d003      	beq.n	800b472 <LIS2MDL_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b46a:	2307      	movs	r3, #7
 800b46c:	425b      	negs	r3, r3
 800b46e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b470:	e058      	b.n	800b524 <LIS2MDL_0_Probe+0x11c>
  }
  else if (id != LIS2MDL_ID)
 800b472:	2327      	movs	r3, #39	@ 0x27
 800b474:	18fb      	adds	r3, r7, r3
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b40      	cmp	r3, #64	@ 0x40
 800b47a:	d003      	beq.n	800b484 <LIS2MDL_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b47c:	2307      	movs	r3, #7
 800b47e:	425b      	negs	r3, r3
 800b480:	647b      	str	r3, [r7, #68]	@ 0x44
 800b482:	e04f      	b.n	800b524 <LIS2MDL_0_Probe+0x11c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800b484:	2408      	movs	r4, #8
 800b486:	193a      	adds	r2, r7, r4
 800b488:	4b2e      	ldr	r3, [pc, #184]	@ (800b544 <LIS2MDL_0_Probe+0x13c>)
 800b48a:	0011      	movs	r1, r2
 800b48c:	0018      	movs	r0, r3
 800b48e:	f7fb fa8d 	bl	80069ac <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b492:	0021      	movs	r1, r4
 800b494:	187b      	adds	r3, r7, r1
 800b496:	785b      	ldrb	r3, [r3, #1]
 800b498:	001a      	movs	r2, r3
 800b49a:	187b      	adds	r3, r7, r1
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	005b      	lsls	r3, r3, #1
 800b4a0:	431a      	orrs	r2, r3
 800b4a2:	187b      	adds	r3, r7, r1
 800b4a4:	789b      	ldrb	r3, [r3, #2]
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	431a      	orrs	r2, r3
 800b4aa:	4b27      	ldr	r3, [pc, #156]	@ (800b548 <LIS2MDL_0_Probe+0x140>)
 800b4ac:	609a      	str	r2, [r3, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 800b4ae:	4b27      	ldr	r3, [pc, #156]	@ (800b54c <LIS2MDL_0_Probe+0x144>)
 800b4b0:	4a24      	ldr	r2, [pc, #144]	@ (800b544 <LIS2MDL_0_Probe+0x13c>)
 800b4b2:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800b4b4:	4b26      	ldr	r3, [pc, #152]	@ (800b550 <LIS2MDL_0_Probe+0x148>)
 800b4b6:	4a27      	ldr	r2, [pc, #156]	@ (800b554 <LIS2MDL_0_Probe+0x14c>)
 800b4b8:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800b4ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d11d      	bne.n	800b4fc <LIS2MDL_0_Probe+0xf4>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2204      	movs	r2, #4
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	d019      	beq.n	800b4fc <LIS2MDL_0_Probe+0xf4>
 800b4c8:	187b      	adds	r3, r7, r1
 800b4ca:	789b      	ldrb	r3, [r3, #2]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d115      	bne.n	800b4fc <LIS2MDL_0_Probe+0xf4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b4d0:	4b21      	ldr	r3, [pc, #132]	@ (800b558 <LIS2MDL_0_Probe+0x150>)
 800b4d2:	691a      	ldr	r2, [r3, #16]
 800b4d4:	4b21      	ldr	r3, [pc, #132]	@ (800b55c <LIS2MDL_0_Probe+0x154>)
 800b4d6:	3206      	adds	r2, #6
 800b4d8:	0092      	lsls	r2, r2, #2
 800b4da:	4921      	ldr	r1, [pc, #132]	@ (800b560 <LIS2MDL_0_Probe+0x158>)
 800b4dc:	50d1      	str	r1, [r2, r3]
            void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800b4de:	4b1c      	ldr	r3, [pc, #112]	@ (800b550 <LIS2MDL_0_Probe+0x148>)
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	4b19      	ldr	r3, [pc, #100]	@ (800b54c <LIS2MDL_0_Probe+0x144>)
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	0018      	movs	r0, r3
 800b4ea:	4790      	blx	r2
 800b4ec:	1e03      	subs	r3, r0, #0
 800b4ee:	d003      	beq.n	800b4f8 <LIS2MDL_0_Probe+0xf0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4f0:	2305      	movs	r3, #5
 800b4f2:	425b      	negs	r3, r3
 800b4f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4f6:	e001      	b.n	800b4fc <LIS2MDL_0_Probe+0xf4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800b4fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d106      	bne.n	800b510 <LIS2MDL_0_Probe+0x108>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2202      	movs	r2, #2
 800b506:	4013      	ands	r3, r2
 800b508:	d002      	beq.n	800b510 <LIS2MDL_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b50a:	2305      	movs	r3, #5
 800b50c:	425b      	negs	r3, r3
 800b50e:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800b510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b512:	2b00      	cmp	r3, #0
 800b514:	d106      	bne.n	800b524 <LIS2MDL_0_Probe+0x11c>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2201      	movs	r2, #1
 800b51a:	4013      	ands	r3, r2
 800b51c:	d002      	beq.n	800b524 <LIS2MDL_0_Probe+0x11c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b51e:	2305      	movs	r3, #5
 800b520:	425b      	negs	r3, r3
 800b522:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }
  return ret;
 800b524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b526:	0018      	movs	r0, r3
 800b528:	46bd      	mov	sp, r7
 800b52a:	b013      	add	sp, #76	@ 0x4c
 800b52c:	bd90      	pop	{r4, r7, pc}
 800b52e:	46c0      	nop			@ (mov r8, r8)
 800b530:	0800439d 	.word	0x0800439d
 800b534:	08004419 	.word	0x08004419
 800b538:	080044e1 	.word	0x080044e1
 800b53c:	08004469 	.word	0x08004469
 800b540:	08004559 	.word	0x08004559
 800b544:	20000684 	.word	0x20000684
 800b548:	20000614 	.word	0x20000614
 800b54c:	200005d8 	.word	0x200005d8
 800b550:	20000608 	.word	0x20000608
 800b554:	20000070 	.word	0x20000070
 800b558:	2000016c 	.word	0x2000016c
 800b55c:	200005e4 	.word	0x200005e4
 800b560:	20000080 	.word	0x20000080

0800b564 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	0002      	movs	r2, r0
 800b56c:	1dfb      	adds	r3, r7, #7
 800b56e:	701a      	strb	r2, [r3, #0]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800b570:	1dfb      	adds	r3, r7, #7
 800b572:	781a      	ldrb	r2, [r3, #0]
 800b574:	4b04      	ldr	r3, [pc, #16]	@ (800b588 <BSP_LED_Init+0x24>)
 800b576:	0092      	lsls	r2, r2, #2
 800b578:	58d3      	ldr	r3, [r2, r3]
 800b57a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	0018      	movs	r0, r3
 800b580:	46bd      	mov	sp, r7
 800b582:	b002      	add	sp, #8
 800b584:	bd80      	pop	{r7, pc}
 800b586:	46c0      	nop			@ (mov r8, r8)
 800b588:	08014b58 	.word	0x08014b58

0800b58c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800b58c:	b590      	push	{r4, r7, lr}
 800b58e:	b089      	sub	sp, #36	@ 0x24
 800b590:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b592:	4b1f      	ldr	r3, [pc, #124]	@ (800b610 <LED_USER_GPIO_Init+0x84>)
 800b594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b596:	4b1e      	ldr	r3, [pc, #120]	@ (800b610 <LED_USER_GPIO_Init+0x84>)
 800b598:	2101      	movs	r1, #1
 800b59a:	430a      	orrs	r2, r1
 800b59c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b59e:	4b1c      	ldr	r3, [pc, #112]	@ (800b610 <LED_USER_GPIO_Init+0x84>)
 800b5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	60bb      	str	r3, [r7, #8]
 800b5a8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5aa:	240c      	movs	r4, #12
 800b5ac:	193b      	adds	r3, r7, r4
 800b5ae:	0018      	movs	r0, r3
 800b5b0:	2314      	movs	r3, #20
 800b5b2:	001a      	movs	r2, r3
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	f006 f8b1 	bl	801171c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5ba:	4b15      	ldr	r3, [pc, #84]	@ (800b610 <LED_USER_GPIO_Init+0x84>)
 800b5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5be:	4b14      	ldr	r3, [pc, #80]	@ (800b610 <LED_USER_GPIO_Init+0x84>)
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	430a      	orrs	r2, r1
 800b5c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b5c6:	4b12      	ldr	r3, [pc, #72]	@ (800b610 <LED_USER_GPIO_Init+0x84>)
 800b5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	607b      	str	r3, [r7, #4]
 800b5d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800b5d2:	23a0      	movs	r3, #160	@ 0xa0
 800b5d4:	05db      	lsls	r3, r3, #23
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2120      	movs	r1, #32
 800b5da:	0018      	movs	r0, r3
 800b5dc:	f001 fb3f 	bl	800cc5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800b5e0:	0021      	movs	r1, r4
 800b5e2:	187b      	adds	r3, r7, r1
 800b5e4:	2220      	movs	r2, #32
 800b5e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b5e8:	187b      	adds	r3, r7, r1
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5ee:	187b      	adds	r3, r7, r1
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5f4:	187b      	adds	r3, r7, r1
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800b5fa:	187a      	adds	r2, r7, r1
 800b5fc:	23a0      	movs	r3, #160	@ 0xa0
 800b5fe:	05db      	lsls	r3, r3, #23
 800b600:	0011      	movs	r1, r2
 800b602:	0018      	movs	r0, r3
 800b604:	f001 f8ae 	bl	800c764 <HAL_GPIO_Init>

}
 800b608:	46c0      	nop			@ (mov r8, r8)
 800b60a:	46bd      	mov	sp, r7
 800b60c:	b009      	add	sp, #36	@ 0x24
 800b60e:	bd90      	pop	{r4, r7, pc}
 800b610:	40021000 	.word	0x40021000

0800b614 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	0002      	movs	r2, r0
 800b61c:	1dfb      	adds	r3, r7, #7
 800b61e:	701a      	strb	r2, [r3, #0]
 800b620:	1dbb      	adds	r3, r7, #6
 800b622:	1c0a      	adds	r2, r1, #0
 800b624:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b626:	2300      	movs	r3, #0
 800b628:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800b62a:	1dfb      	adds	r3, r7, #7
 800b62c:	781a      	ldrb	r2, [r3, #0]
 800b62e:	4b21      	ldr	r3, [pc, #132]	@ (800b6b4 <BSP_PB_Init+0xa0>)
 800b630:	0092      	lsls	r2, r2, #2
 800b632:	58d3      	ldr	r3, [r2, r3]
 800b634:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800b636:	1dbb      	adds	r3, r7, #6
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d134      	bne.n	800b6a8 <BSP_PB_Init+0x94>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800b63e:	1dfb      	adds	r3, r7, #7
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	00da      	lsls	r2, r3, #3
 800b644:	4b1c      	ldr	r3, [pc, #112]	@ (800b6b8 <BSP_PB_Init+0xa4>)
 800b646:	18d0      	adds	r0, r2, r3
 800b648:	1dfb      	adds	r3, r7, #7
 800b64a:	781a      	ldrb	r2, [r3, #0]
 800b64c:	4b1b      	ldr	r3, [pc, #108]	@ (800b6bc <BSP_PB_Init+0xa8>)
 800b64e:	0092      	lsls	r2, r2, #2
 800b650:	58d3      	ldr	r3, [r2, r3]
 800b652:	0019      	movs	r1, r3
 800b654:	f000 fe16 	bl	800c284 <HAL_EXTI_GetHandle>
 800b658:	1e03      	subs	r3, r0, #0
 800b65a:	d003      	beq.n	800b664 <BSP_PB_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b65c:	2304      	movs	r3, #4
 800b65e:	425b      	negs	r3, r3
 800b660:	60fb      	str	r3, [r7, #12]
 800b662:	e021      	b.n	800b6a8 <BSP_PB_Init+0x94>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800b664:	1dfb      	adds	r3, r7, #7
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	00da      	lsls	r2, r3, #3
 800b66a:	4b13      	ldr	r3, [pc, #76]	@ (800b6b8 <BSP_PB_Init+0xa4>)
 800b66c:	18d0      	adds	r0, r2, r3
 800b66e:	1dfb      	adds	r3, r7, #7
 800b670:	781a      	ldrb	r2, [r3, #0]
 800b672:	4b13      	ldr	r3, [pc, #76]	@ (800b6c0 <BSP_PB_Init+0xac>)
 800b674:	0092      	lsls	r2, r2, #2
 800b676:	58d3      	ldr	r3, [r2, r3]
 800b678:	001a      	movs	r2, r3
 800b67a:	2100      	movs	r1, #0
 800b67c:	f000 fde1 	bl	800c242 <HAL_EXTI_RegisterCallback>
 800b680:	1e03      	subs	r3, r0, #0
 800b682:	d003      	beq.n	800b68c <BSP_PB_Init+0x78>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b684:	2304      	movs	r3, #4
 800b686:	425b      	negs	r3, r3
 800b688:	60fb      	str	r3, [r7, #12]
 800b68a:	e00d      	b.n	800b6a8 <BSP_PB_Init+0x94>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800b68c:	2007      	movs	r0, #7
 800b68e:	1dfb      	adds	r3, r7, #7
 800b690:	781a      	ldrb	r2, [r3, #0]
 800b692:	4b0c      	ldr	r3, [pc, #48]	@ (800b6c4 <BSP_PB_Init+0xb0>)
 800b694:	0092      	lsls	r2, r2, #2
 800b696:	58d3      	ldr	r3, [r2, r3]
 800b698:	2200      	movs	r2, #0
 800b69a:	0019      	movs	r1, r3
 800b69c:	f000 fca8 	bl	800bff0 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800b6a0:	2307      	movs	r3, #7
 800b6a2:	0018      	movs	r0, r3
 800b6a4:	f000 fcb9 	bl	800c01a <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
}
 800b6aa:	0018      	movs	r0, r3
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	b004      	add	sp, #16
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	46c0      	nop			@ (mov r8, r8)
 800b6b4:	08014b5c 	.word	0x08014b5c
 800b6b8:	20000184 	.word	0x20000184
 800b6bc:	08014b60 	.word	0x08014b60
 800b6c0:	08014b64 	.word	0x08014b64
 800b6c4:	08014b68 	.word	0x08014b68

0800b6c8 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	0002      	movs	r2, r0
 800b6d0:	1dfb      	adds	r3, r7, #7
 800b6d2:	701a      	strb	r2, [r3, #0]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800b6d4:	1dfb      	adds	r3, r7, #7
 800b6d6:	781a      	ldrb	r2, [r3, #0]
 800b6d8:	4b08      	ldr	r3, [pc, #32]	@ (800b6fc <BSP_PB_GetState+0x34>)
 800b6da:	0092      	lsls	r2, r2, #2
 800b6dc:	58d3      	ldr	r3, [r2, r3]
 800b6de:	2280      	movs	r2, #128	@ 0x80
 800b6e0:	0192      	lsls	r2, r2, #6
 800b6e2:	0011      	movs	r1, r2
 800b6e4:	0018      	movs	r0, r3
 800b6e6:	f001 fa9d 	bl	800cc24 <HAL_GPIO_ReadPin>
 800b6ea:	0003      	movs	r3, r0
 800b6ec:	425a      	negs	r2, r3
 800b6ee:	4153      	adcs	r3, r2
 800b6f0:	b2db      	uxtb	r3, r3
}
 800b6f2:	0018      	movs	r0, r3
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	b002      	add	sp, #8
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	46c0      	nop			@ (mov r8, r8)
 800b6fc:	20000180 	.word	0x20000180

0800b700 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800b704:	2000      	movs	r0, #0
 800b706:	f7f8 fbd1 	bl	8003eac <BSP_PB_Callback>
}
 800b70a:	46c0      	nop			@ (mov r8, r8)
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800b710:	b590      	push	{r4, r7, lr}
 800b712:	b089      	sub	sp, #36	@ 0x24
 800b714:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b716:	4b1a      	ldr	r3, [pc, #104]	@ (800b780 <BUTTON_USER_GPIO_Init+0x70>)
 800b718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b71a:	4b19      	ldr	r3, [pc, #100]	@ (800b780 <BUTTON_USER_GPIO_Init+0x70>)
 800b71c:	2104      	movs	r1, #4
 800b71e:	430a      	orrs	r2, r1
 800b720:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b722:	4b17      	ldr	r3, [pc, #92]	@ (800b780 <BUTTON_USER_GPIO_Init+0x70>)
 800b724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b726:	2204      	movs	r2, #4
 800b728:	4013      	ands	r3, r2
 800b72a:	60bb      	str	r3, [r7, #8]
 800b72c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b72e:	240c      	movs	r4, #12
 800b730:	193b      	adds	r3, r7, r4
 800b732:	0018      	movs	r0, r3
 800b734:	2314      	movs	r3, #20
 800b736:	001a      	movs	r2, r3
 800b738:	2100      	movs	r1, #0
 800b73a:	f005 ffef 	bl	801171c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b73e:	4b10      	ldr	r3, [pc, #64]	@ (800b780 <BUTTON_USER_GPIO_Init+0x70>)
 800b740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b742:	4b0f      	ldr	r3, [pc, #60]	@ (800b780 <BUTTON_USER_GPIO_Init+0x70>)
 800b744:	2104      	movs	r1, #4
 800b746:	430a      	orrs	r2, r1
 800b748:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b74a:	4b0d      	ldr	r3, [pc, #52]	@ (800b780 <BUTTON_USER_GPIO_Init+0x70>)
 800b74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b74e:	2204      	movs	r2, #4
 800b750:	4013      	ands	r3, r2
 800b752:	607b      	str	r3, [r7, #4]
 800b754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800b756:	193b      	adds	r3, r7, r4
 800b758:	2280      	movs	r2, #128	@ 0x80
 800b75a:	0192      	lsls	r2, r2, #6
 800b75c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800b75e:	193b      	adds	r3, r7, r4
 800b760:	2284      	movs	r2, #132	@ 0x84
 800b762:	0392      	lsls	r2, r2, #14
 800b764:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b766:	193b      	adds	r3, r7, r4
 800b768:	2200      	movs	r2, #0
 800b76a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800b76c:	193b      	adds	r3, r7, r4
 800b76e:	4a05      	ldr	r2, [pc, #20]	@ (800b784 <BUTTON_USER_GPIO_Init+0x74>)
 800b770:	0019      	movs	r1, r3
 800b772:	0010      	movs	r0, r2
 800b774:	f000 fff6 	bl	800c764 <HAL_GPIO_Init>

}
 800b778:	46c0      	nop			@ (mov r8, r8)
 800b77a:	46bd      	mov	sp, r7
 800b77c:	b009      	add	sp, #36	@ 0x24
 800b77e:	bd90      	pop	{r4, r7, pc}
 800b780:	40021000 	.word	0x40021000
 800b784:	50000800 	.word	0x50000800

0800b788 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	0002      	movs	r2, r0
 800b790:	1dfb      	adds	r3, r7, #7
 800b792:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b794:	2300      	movs	r3, #0
 800b796:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800b798:	1dfb      	adds	r3, r7, #7
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d903      	bls.n	800b7a8 <BSP_COM_Init+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b7a0:	2302      	movs	r3, #2
 800b7a2:	425b      	negs	r3, r3
 800b7a4:	60fb      	str	r3, [r7, #12]
 800b7a6:	e027      	b.n	800b7f8 <BSP_COM_Init+0x70>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800b7a8:	1dfb      	adds	r3, r7, #7
 800b7aa:	7819      	ldrb	r1, [r3, #0]
 800b7ac:	1dfb      	adds	r3, r7, #7
 800b7ae:	781a      	ldrb	r2, [r3, #0]
 800b7b0:	4b14      	ldr	r3, [pc, #80]	@ (800b804 <BSP_COM_Init+0x7c>)
 800b7b2:	0089      	lsls	r1, r1, #2
 800b7b4:	58c8      	ldr	r0, [r1, r3]
 800b7b6:	4914      	ldr	r1, [pc, #80]	@ (800b808 <BSP_COM_Init+0x80>)
 800b7b8:	0013      	movs	r3, r2
 800b7ba:	011b      	lsls	r3, r3, #4
 800b7bc:	189b      	adds	r3, r3, r2
 800b7be:	00db      	lsls	r3, r3, #3
 800b7c0:	5058      	str	r0, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800b7c2:	1dfb      	adds	r3, r7, #7
 800b7c4:	781a      	ldrb	r2, [r3, #0]
 800b7c6:	0013      	movs	r3, r2
 800b7c8:	011b      	lsls	r3, r3, #4
 800b7ca:	189b      	adds	r3, r3, r2
 800b7cc:	00db      	lsls	r3, r3, #3
 800b7ce:	4a0e      	ldr	r2, [pc, #56]	@ (800b808 <BSP_COM_Init+0x80>)
 800b7d0:	189b      	adds	r3, r3, r2
 800b7d2:	0018      	movs	r0, r3
 800b7d4:	f000 f870 	bl	800b8b8 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800b7d8:	1dfb      	adds	r3, r7, #7
 800b7da:	781a      	ldrb	r2, [r3, #0]
 800b7dc:	0013      	movs	r3, r2
 800b7de:	011b      	lsls	r3, r3, #4
 800b7e0:	189b      	adds	r3, r3, r2
 800b7e2:	00db      	lsls	r3, r3, #3
 800b7e4:	4a08      	ldr	r2, [pc, #32]	@ (800b808 <BSP_COM_Init+0x80>)
 800b7e6:	189b      	adds	r3, r3, r2
 800b7e8:	0018      	movs	r0, r3
 800b7ea:	f000 f80f 	bl	800b80c <MX_USART2_UART_Init>
 800b7ee:	1e03      	subs	r3, r0, #0
 800b7f0:	d002      	beq.n	800b7f8 <BSP_COM_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b7f2:	2304      	movs	r3, #4
 800b7f4:	425b      	negs	r3, r3
 800b7f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
}
 800b7fa:	0018      	movs	r0, r3
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	b004      	add	sp, #16
 800b800:	bd80      	pop	{r7, pc}
 800b802:	46c0      	nop			@ (mov r8, r8)
 800b804:	2000018c 	.word	0x2000018c
 800b808:	200006b0 	.word	0x200006b0

0800b80c <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800b80c:	b590      	push	{r4, r7, lr}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b814:	240f      	movs	r4, #15
 800b816:	193b      	adds	r3, r7, r4
 800b818:	2200      	movs	r2, #0
 800b81a:	701a      	strb	r2, [r3, #0]

  huart->Instance = USART2;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	4a17      	ldr	r2, [pc, #92]	@ (800b87c <MX_USART2_UART_Init+0x70>)
 800b820:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	22e1      	movs	r2, #225	@ 0xe1
 800b826:	0252      	lsls	r2, r2, #9
 800b828:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	220c      	movs	r2, #12
 800b840:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	0018      	movs	r0, r3
 800b85e:	f003 fca1 	bl	800f1a4 <HAL_UART_Init>
 800b862:	1e03      	subs	r3, r0, #0
 800b864:	d002      	beq.n	800b86c <MX_USART2_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 800b866:	193b      	adds	r3, r7, r4
 800b868:	2201      	movs	r2, #1
 800b86a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b86c:	230f      	movs	r3, #15
 800b86e:	18fb      	adds	r3, r7, r3
 800b870:	781b      	ldrb	r3, [r3, #0]
}
 800b872:	0018      	movs	r0, r3
 800b874:	46bd      	mov	sp, r7
 800b876:	b005      	add	sp, #20
 800b878:	bd90      	pop	{r4, r7, pc}
 800b87a:	46c0      	nop			@ (mov r8, r8)
 800b87c:	40004400 	.word	0x40004400

0800b880 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800b888:	4b09      	ldr	r3, [pc, #36]	@ (800b8b0 <__io_putchar+0x30>)
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	001a      	movs	r2, r3
 800b88e:	0013      	movs	r3, r2
 800b890:	011b      	lsls	r3, r3, #4
 800b892:	189b      	adds	r3, r3, r2
 800b894:	00db      	lsls	r3, r3, #3
 800b896:	4a07      	ldr	r2, [pc, #28]	@ (800b8b4 <__io_putchar+0x34>)
 800b898:	1898      	adds	r0, r3, r2
 800b89a:	23fa      	movs	r3, #250	@ 0xfa
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	1d39      	adds	r1, r7, #4
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f003 fcdb 	bl	800f25c <HAL_UART_Transmit>
  return ch;
 800b8a6:	687b      	ldr	r3, [r7, #4]
}
 800b8a8:	0018      	movs	r0, r3
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	b002      	add	sp, #8
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	20000738 	.word	0x20000738
 800b8b4:	200006b0 	.word	0x200006b0

0800b8b8 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b8b8:	b590      	push	{r4, r7, lr}
 800b8ba:	b089      	sub	sp, #36	@ 0x24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800b8c0:	4b22      	ldr	r3, [pc, #136]	@ (800b94c <USART2_MspInit+0x94>)
 800b8c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8c4:	4b21      	ldr	r3, [pc, #132]	@ (800b94c <USART2_MspInit+0x94>)
 800b8c6:	2180      	movs	r1, #128	@ 0x80
 800b8c8:	0289      	lsls	r1, r1, #10
 800b8ca:	430a      	orrs	r2, r1
 800b8cc:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b8ce:	4b1f      	ldr	r3, [pc, #124]	@ (800b94c <USART2_MspInit+0x94>)
 800b8d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8d2:	4b1e      	ldr	r3, [pc, #120]	@ (800b94c <USART2_MspInit+0x94>)
 800b8d4:	2101      	movs	r1, #1
 800b8d6:	430a      	orrs	r2, r1
 800b8d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b8da:	4b1c      	ldr	r3, [pc, #112]	@ (800b94c <USART2_MspInit+0x94>)
 800b8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8de:	2201      	movs	r2, #1
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	60bb      	str	r3, [r7, #8]
 800b8e4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800b8e6:	240c      	movs	r4, #12
 800b8e8:	193b      	adds	r3, r7, r4
 800b8ea:	2204      	movs	r2, #4
 800b8ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8ee:	193b      	adds	r3, r7, r4
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8f4:	193b      	adds	r3, r7, r4
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8fa:	193b      	adds	r3, r7, r4
 800b8fc:	2203      	movs	r2, #3
 800b8fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800b900:	193b      	adds	r3, r7, r4
 800b902:	2204      	movs	r2, #4
 800b904:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800b906:	193a      	adds	r2, r7, r4
 800b908:	23a0      	movs	r3, #160	@ 0xa0
 800b90a:	05db      	lsls	r3, r3, #23
 800b90c:	0011      	movs	r1, r2
 800b90e:	0018      	movs	r0, r3
 800b910:	f000 ff28 	bl	800c764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800b914:	0021      	movs	r1, r4
 800b916:	187b      	adds	r3, r7, r1
 800b918:	2208      	movs	r2, #8
 800b91a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b91c:	187b      	adds	r3, r7, r1
 800b91e:	2202      	movs	r2, #2
 800b920:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b922:	187b      	adds	r3, r7, r1
 800b924:	2200      	movs	r2, #0
 800b926:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b928:	187b      	adds	r3, r7, r1
 800b92a:	2203      	movs	r2, #3
 800b92c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800b92e:	187b      	adds	r3, r7, r1
 800b930:	2204      	movs	r2, #4
 800b932:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800b934:	187a      	adds	r2, r7, r1
 800b936:	23a0      	movs	r3, #160	@ 0xa0
 800b938:	05db      	lsls	r3, r3, #23
 800b93a:	0011      	movs	r1, r2
 800b93c:	0018      	movs	r0, r3
 800b93e:	f000 ff11 	bl	800c764 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800b942:	46c0      	nop			@ (mov r8, r8)
 800b944:	46bd      	mov	sp, r7
 800b946:	b009      	add	sp, #36	@ 0x24
 800b948:	bd90      	pop	{r4, r7, pc}
 800b94a:	46c0      	nop			@ (mov r8, r8)
 800b94c:	40021000 	.word	0x40021000

0800b950 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b956:	1dfb      	adds	r3, r7, #7
 800b958:	2200      	movs	r2, #0
 800b95a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800b95c:	4b0b      	ldr	r3, [pc, #44]	@ (800b98c <HAL_Init+0x3c>)
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	4b0a      	ldr	r3, [pc, #40]	@ (800b98c <HAL_Init+0x3c>)
 800b962:	2140      	movs	r1, #64	@ 0x40
 800b964:	430a      	orrs	r2, r1
 800b966:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b968:	2000      	movs	r0, #0
 800b96a:	f000 f811 	bl	800b990 <HAL_InitTick>
 800b96e:	1e03      	subs	r3, r0, #0
 800b970:	d003      	beq.n	800b97a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800b972:	1dfb      	adds	r3, r7, #7
 800b974:	2201      	movs	r2, #1
 800b976:	701a      	strb	r2, [r3, #0]
 800b978:	e001      	b.n	800b97e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b97a:	f7f8 fbc1 	bl	8004100 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b97e:	1dfb      	adds	r3, r7, #7
 800b980:	781b      	ldrb	r3, [r3, #0]
}
 800b982:	0018      	movs	r0, r3
 800b984:	46bd      	mov	sp, r7
 800b986:	b002      	add	sp, #8
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	46c0      	nop			@ (mov r8, r8)
 800b98c:	40022000 	.word	0x40022000

0800b990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b990:	b590      	push	{r4, r7, lr}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b998:	4b14      	ldr	r3, [pc, #80]	@ (800b9ec <HAL_InitTick+0x5c>)
 800b99a:	681c      	ldr	r4, [r3, #0]
 800b99c:	4b14      	ldr	r3, [pc, #80]	@ (800b9f0 <HAL_InitTick+0x60>)
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	0019      	movs	r1, r3
 800b9a2:	23fa      	movs	r3, #250	@ 0xfa
 800b9a4:	0098      	lsls	r0, r3, #2
 800b9a6:	f7f4 fbc3 	bl	8000130 <__udivsi3>
 800b9aa:	0003      	movs	r3, r0
 800b9ac:	0019      	movs	r1, r3
 800b9ae:	0020      	movs	r0, r4
 800b9b0:	f7f4 fbbe 	bl	8000130 <__udivsi3>
 800b9b4:	0003      	movs	r3, r0
 800b9b6:	0018      	movs	r0, r3
 800b9b8:	f000 fb3f 	bl	800c03a <HAL_SYSTICK_Config>
 800b9bc:	1e03      	subs	r3, r0, #0
 800b9be:	d001      	beq.n	800b9c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e00f      	b.n	800b9e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b03      	cmp	r3, #3
 800b9c8:	d80b      	bhi.n	800b9e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b9ca:	6879      	ldr	r1, [r7, #4]
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	425b      	negs	r3, r3
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	0018      	movs	r0, r3
 800b9d4:	f000 fb0c 	bl	800bff0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b9d8:	4b06      	ldr	r3, [pc, #24]	@ (800b9f4 <HAL_InitTick+0x64>)
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	e000      	b.n	800b9e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
}
 800b9e4:	0018      	movs	r0, r3
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	b003      	add	sp, #12
 800b9ea:	bd90      	pop	{r4, r7, pc}
 800b9ec:	20000000 	.word	0x20000000
 800b9f0:	20000194 	.word	0x20000194
 800b9f4:	20000190 	.word	0x20000190

0800b9f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b9fc:	4b05      	ldr	r3, [pc, #20]	@ (800ba14 <HAL_IncTick+0x1c>)
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	001a      	movs	r2, r3
 800ba02:	4b05      	ldr	r3, [pc, #20]	@ (800ba18 <HAL_IncTick+0x20>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	18d2      	adds	r2, r2, r3
 800ba08:	4b03      	ldr	r3, [pc, #12]	@ (800ba18 <HAL_IncTick+0x20>)
 800ba0a:	601a      	str	r2, [r3, #0]
}
 800ba0c:	46c0      	nop			@ (mov r8, r8)
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	46c0      	nop			@ (mov r8, r8)
 800ba14:	20000194 	.word	0x20000194
 800ba18:	2000073c 	.word	0x2000073c

0800ba1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	af00      	add	r7, sp, #0
  return uwTick;
 800ba20:	4b02      	ldr	r3, [pc, #8]	@ (800ba2c <HAL_GetTick+0x10>)
 800ba22:	681b      	ldr	r3, [r3, #0]
}
 800ba24:	0018      	movs	r0, r3
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	46c0      	nop			@ (mov r8, r8)
 800ba2c:	2000073c 	.word	0x2000073c

0800ba30 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d101      	bne.n	800ba42 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e159      	b.n	800bcf6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10a      	bne.n	800ba60 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2250      	movs	r2, #80	@ 0x50
 800ba54:	2100      	movs	r1, #0
 800ba56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	0018      	movs	r0, r3
 800ba5c:	f7f8 fb64 	bl	8004128 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba64:	2210      	movs	r2, #16
 800ba66:	4013      	ands	r3, r2
 800ba68:	2b10      	cmp	r3, #16
 800ba6a:	d005      	beq.n	800ba78 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	2204      	movs	r2, #4
 800ba74:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800ba76:	d00b      	beq.n	800ba90 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba7c:	2210      	movs	r2, #16
 800ba7e:	431a      	orrs	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2250      	movs	r2, #80	@ 0x50
 800ba88:	2100      	movs	r1, #0
 800ba8a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e132      	b.n	800bcf6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba94:	4a9a      	ldr	r2, [pc, #616]	@ (800bd00 <HAL_ADC_Init+0x2d0>)
 800ba96:	4013      	ands	r3, r2
 800ba98:	2202      	movs	r2, #2
 800ba9a:	431a      	orrs	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	2203      	movs	r2, #3
 800baa8:	4013      	ands	r3, r2
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d108      	bne.n	800bac0 <HAL_ADC_Init+0x90>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2201      	movs	r2, #1
 800bab6:	4013      	ands	r3, r2
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d101      	bne.n	800bac0 <HAL_ADC_Init+0x90>
 800babc:	2301      	movs	r3, #1
 800babe:	e000      	b.n	800bac2 <HAL_ADC_Init+0x92>
 800bac0:	2300      	movs	r3, #0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d149      	bne.n	800bb5a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685a      	ldr	r2, [r3, #4]
 800baca:	23c0      	movs	r3, #192	@ 0xc0
 800bacc:	061b      	lsls	r3, r3, #24
 800bace:	429a      	cmp	r2, r3
 800bad0:	d00b      	beq.n	800baea <HAL_ADC_Init+0xba>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	685a      	ldr	r2, [r3, #4]
 800bad6:	2380      	movs	r3, #128	@ 0x80
 800bad8:	05db      	lsls	r3, r3, #23
 800bada:	429a      	cmp	r2, r3
 800badc:	d005      	beq.n	800baea <HAL_ADC_Init+0xba>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	685a      	ldr	r2, [r3, #4]
 800bae2:	2380      	movs	r3, #128	@ 0x80
 800bae4:	061b      	lsls	r3, r3, #24
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d111      	bne.n	800bb0e <HAL_ADC_Init+0xde>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	691a      	ldr	r2, [r3, #16]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	0092      	lsls	r2, r2, #2
 800baf6:	0892      	lsrs	r2, r2, #2
 800baf8:	611a      	str	r2, [r3, #16]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	6919      	ldr	r1, [r3, #16]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	685a      	ldr	r2, [r3, #4]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	430a      	orrs	r2, r1
 800bb0a:	611a      	str	r2, [r3, #16]
 800bb0c:	e014      	b.n	800bb38 <HAL_ADC_Init+0x108>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	691a      	ldr	r2, [r3, #16]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	0092      	lsls	r2, r2, #2
 800bb1a:	0892      	lsrs	r2, r2, #2
 800bb1c:	611a      	str	r2, [r3, #16]
 800bb1e:	4b79      	ldr	r3, [pc, #484]	@ (800bd04 <HAL_ADC_Init+0x2d4>)
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	4b78      	ldr	r3, [pc, #480]	@ (800bd04 <HAL_ADC_Init+0x2d4>)
 800bb24:	4978      	ldr	r1, [pc, #480]	@ (800bd08 <HAL_ADC_Init+0x2d8>)
 800bb26:	400a      	ands	r2, r1
 800bb28:	601a      	str	r2, [r3, #0]
 800bb2a:	4b76      	ldr	r3, [pc, #472]	@ (800bd04 <HAL_ADC_Init+0x2d4>)
 800bb2c:	6819      	ldr	r1, [r3, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	685a      	ldr	r2, [r3, #4]
 800bb32:	4b74      	ldr	r3, [pc, #464]	@ (800bd04 <HAL_ADC_Init+0x2d4>)
 800bb34:	430a      	orrs	r2, r1
 800bb36:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68da      	ldr	r2, [r3, #12]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2118      	movs	r1, #24
 800bb44:	438a      	bics	r2, r1
 800bb46:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68d9      	ldr	r1, [r3, #12]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	689a      	ldr	r2, [r3, #8]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	430a      	orrs	r2, r1
 800bb58:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800bb5a:	4b6a      	ldr	r3, [pc, #424]	@ (800bd04 <HAL_ADC_Init+0x2d4>)
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	4b69      	ldr	r3, [pc, #420]	@ (800bd04 <HAL_ADC_Init+0x2d4>)
 800bb60:	496a      	ldr	r1, [pc, #424]	@ (800bd0c <HAL_ADC_Init+0x2dc>)
 800bb62:	400a      	ands	r2, r1
 800bb64:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800bb66:	4b67      	ldr	r3, [pc, #412]	@ (800bd04 <HAL_ADC_Init+0x2d4>)
 800bb68:	6819      	ldr	r1, [r3, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb6e:	065a      	lsls	r2, r3, #25
 800bb70:	4b64      	ldr	r3, [pc, #400]	@ (800bd04 <HAL_ADC_Init+0x2d4>)
 800bb72:	430a      	orrs	r2, r1
 800bb74:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	689a      	ldr	r2, [r3, #8]
 800bb7c:	2380      	movs	r3, #128	@ 0x80
 800bb7e:	055b      	lsls	r3, r3, #21
 800bb80:	4013      	ands	r3, r2
 800bb82:	d108      	bne.n	800bb96 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	689a      	ldr	r2, [r3, #8]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2180      	movs	r1, #128	@ 0x80
 800bb90:	0549      	lsls	r1, r1, #21
 800bb92:	430a      	orrs	r2, r1
 800bb94:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68da      	ldr	r2, [r3, #12]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	495b      	ldr	r1, [pc, #364]	@ (800bd10 <HAL_ADC_Init+0x2e0>)
 800bba2:	400a      	ands	r2, r1
 800bba4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	68d9      	ldr	r1, [r3, #12]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d101      	bne.n	800bbbc <HAL_ADC_Init+0x18c>
 800bbb8:	2304      	movs	r3, #4
 800bbba:	e000      	b.n	800bbbe <HAL_ADC_Init+0x18e>
 800bbbc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800bbbe:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2020      	movs	r0, #32
 800bbc4:	5c1b      	ldrb	r3, [r3, r0]
 800bbc6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800bbc8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	202c      	movs	r0, #44	@ 0x2c
 800bbce:	5c1b      	ldrb	r3, [r3, r0]
 800bbd0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800bbd2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800bbd8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800bbe0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800bbe8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	430a      	orrs	r2, r1
 800bbf0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bbf6:	23c2      	movs	r3, #194	@ 0xc2
 800bbf8:	33ff      	adds	r3, #255	@ 0xff
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d00b      	beq.n	800bc16 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68d9      	ldr	r1, [r3, #12]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800bc0c:	431a      	orrs	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	430a      	orrs	r2, r1
 800bc14:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2221      	movs	r2, #33	@ 0x21
 800bc1a:	5c9b      	ldrb	r3, [r3, r2]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d11a      	bne.n	800bc56 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2220      	movs	r2, #32
 800bc24:	5c9b      	ldrb	r3, [r3, r2]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d109      	bne.n	800bc3e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68da      	ldr	r2, [r3, #12]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2180      	movs	r1, #128	@ 0x80
 800bc36:	0249      	lsls	r1, r1, #9
 800bc38:	430a      	orrs	r2, r1
 800bc3a:	60da      	str	r2, [r3, #12]
 800bc3c:	e00b      	b.n	800bc56 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc42:	2220      	movs	r2, #32
 800bc44:	431a      	orrs	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc4e:	2201      	movs	r2, #1
 800bc50:	431a      	orrs	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d11f      	bne.n	800bc9e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	691a      	ldr	r2, [r3, #16]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	492a      	ldr	r1, [pc, #168]	@ (800bd14 <HAL_ADC_Init+0x2e4>)
 800bc6a:	400a      	ands	r2, r1
 800bc6c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	6919      	ldr	r1, [r3, #16]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800bc7c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800bc82:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	430a      	orrs	r2, r1
 800bc8a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	691a      	ldr	r2, [r3, #16]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2101      	movs	r1, #1
 800bc98:	430a      	orrs	r2, r1
 800bc9a:	611a      	str	r2, [r3, #16]
 800bc9c:	e00e      	b.n	800bcbc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	2201      	movs	r2, #1
 800bca6:	4013      	ands	r3, r2
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d107      	bne.n	800bcbc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	691a      	ldr	r2, [r3, #16]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2101      	movs	r1, #1
 800bcb8:	438a      	bics	r2, r1
 800bcba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	695a      	ldr	r2, [r3, #20]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2107      	movs	r1, #7
 800bcc8:	438a      	bics	r2, r1
 800bcca:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	6959      	ldr	r1, [r3, #20]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	430a      	orrs	r2, r1
 800bcdc:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bce8:	2203      	movs	r2, #3
 800bcea:	4393      	bics	r3, r2
 800bcec:	2201      	movs	r2, #1
 800bcee:	431a      	orrs	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	0018      	movs	r0, r3
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	b002      	add	sp, #8
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	46c0      	nop			@ (mov r8, r8)
 800bd00:	fffffefd 	.word	0xfffffefd
 800bd04:	40012708 	.word	0x40012708
 800bd08:	ffc3ffff 	.word	0xffc3ffff
 800bd0c:	fdffffff 	.word	0xfdffffff
 800bd10:	fffe0219 	.word	0xfffe0219
 800bd14:	fffffc03 	.word	0xfffffc03

0800bd18 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2250      	movs	r2, #80	@ 0x50
 800bd26:	5c9b      	ldrb	r3, [r3, r2]
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d101      	bne.n	800bd30 <HAL_ADC_ConfigChannel+0x18>
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	e085      	b.n	800be3c <HAL_ADC_ConfigChannel+0x124>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2250      	movs	r2, #80	@ 0x50
 800bd34:	2101      	movs	r1, #1
 800bd36:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	2204      	movs	r2, #4
 800bd40:	4013      	ands	r3, r2
 800bd42:	d00b      	beq.n	800bd5c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd48:	2220      	movs	r2, #32
 800bd4a:	431a      	orrs	r2, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2250      	movs	r2, #80	@ 0x50
 800bd54:	2100      	movs	r1, #0
 800bd56:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e06f      	b.n	800be3c <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	4a38      	ldr	r2, [pc, #224]	@ (800be44 <HAL_ADC_ConfigChannel+0x12c>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d035      	beq.n	800bdd2 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	035b      	lsls	r3, r3, #13
 800bd72:	0b5a      	lsrs	r2, r3, #13
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	430a      	orrs	r2, r1
 800bd7a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	2380      	movs	r3, #128	@ 0x80
 800bd82:	02db      	lsls	r3, r3, #11
 800bd84:	4013      	ands	r3, r2
 800bd86:	d009      	beq.n	800bd9c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800bd88:	4b2f      	ldr	r3, [pc, #188]	@ (800be48 <HAL_ADC_ConfigChannel+0x130>)
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	4b2e      	ldr	r3, [pc, #184]	@ (800be48 <HAL_ADC_ConfigChannel+0x130>)
 800bd8e:	2180      	movs	r1, #128	@ 0x80
 800bd90:	0409      	lsls	r1, r1, #16
 800bd92:	430a      	orrs	r2, r1
 800bd94:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800bd96:	200a      	movs	r0, #10
 800bd98:	f000 f85e 	bl	800be58 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	2380      	movs	r3, #128	@ 0x80
 800bda2:	029b      	lsls	r3, r3, #10
 800bda4:	4013      	ands	r3, r2
 800bda6:	d006      	beq.n	800bdb6 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800bda8:	4b27      	ldr	r3, [pc, #156]	@ (800be48 <HAL_ADC_ConfigChannel+0x130>)
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	4b26      	ldr	r3, [pc, #152]	@ (800be48 <HAL_ADC_ConfigChannel+0x130>)
 800bdae:	2180      	movs	r1, #128	@ 0x80
 800bdb0:	03c9      	lsls	r1, r1, #15
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	2380      	movs	r3, #128	@ 0x80
 800bdbc:	025b      	lsls	r3, r3, #9
 800bdbe:	4013      	ands	r3, r2
 800bdc0:	d037      	beq.n	800be32 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 800bdc2:	4b21      	ldr	r3, [pc, #132]	@ (800be48 <HAL_ADC_ConfigChannel+0x130>)
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	4b20      	ldr	r3, [pc, #128]	@ (800be48 <HAL_ADC_ConfigChannel+0x130>)
 800bdc8:	2180      	movs	r1, #128	@ 0x80
 800bdca:	0449      	lsls	r1, r1, #17
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	601a      	str	r2, [r3, #0]
 800bdd0:	e02f      	b.n	800be32 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	035b      	lsls	r3, r3, #13
 800bdde:	0b5b      	lsrs	r3, r3, #13
 800bde0:	43d9      	mvns	r1, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	400a      	ands	r2, r1
 800bde8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	2380      	movs	r3, #128	@ 0x80
 800bdf0:	02db      	lsls	r3, r3, #11
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	d005      	beq.n	800be02 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800bdf6:	4b14      	ldr	r3, [pc, #80]	@ (800be48 <HAL_ADC_ConfigChannel+0x130>)
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	4b13      	ldr	r3, [pc, #76]	@ (800be48 <HAL_ADC_ConfigChannel+0x130>)
 800bdfc:	4913      	ldr	r1, [pc, #76]	@ (800be4c <HAL_ADC_ConfigChannel+0x134>)
 800bdfe:	400a      	ands	r2, r1
 800be00:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	2380      	movs	r3, #128	@ 0x80
 800be08:	029b      	lsls	r3, r3, #10
 800be0a:	4013      	ands	r3, r2
 800be0c:	d005      	beq.n	800be1a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800be0e:	4b0e      	ldr	r3, [pc, #56]	@ (800be48 <HAL_ADC_ConfigChannel+0x130>)
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	4b0d      	ldr	r3, [pc, #52]	@ (800be48 <HAL_ADC_ConfigChannel+0x130>)
 800be14:	490e      	ldr	r1, [pc, #56]	@ (800be50 <HAL_ADC_ConfigChannel+0x138>)
 800be16:	400a      	ands	r2, r1
 800be18:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	2380      	movs	r3, #128	@ 0x80
 800be20:	025b      	lsls	r3, r3, #9
 800be22:	4013      	ands	r3, r2
 800be24:	d005      	beq.n	800be32 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 800be26:	4b08      	ldr	r3, [pc, #32]	@ (800be48 <HAL_ADC_ConfigChannel+0x130>)
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	4b07      	ldr	r3, [pc, #28]	@ (800be48 <HAL_ADC_ConfigChannel+0x130>)
 800be2c:	4909      	ldr	r1, [pc, #36]	@ (800be54 <HAL_ADC_ConfigChannel+0x13c>)
 800be2e:	400a      	ands	r2, r1
 800be30:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2250      	movs	r2, #80	@ 0x50
 800be36:	2100      	movs	r1, #0
 800be38:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	0018      	movs	r0, r3
 800be3e:	46bd      	mov	sp, r7
 800be40:	b002      	add	sp, #8
 800be42:	bd80      	pop	{r7, pc}
 800be44:	00001001 	.word	0x00001001
 800be48:	40012708 	.word	0x40012708
 800be4c:	ff7fffff 	.word	0xff7fffff
 800be50:	ffbfffff 	.word	0xffbfffff
 800be54:	feffffff 	.word	0xfeffffff

0800be58 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800be60:	4b0b      	ldr	r3, [pc, #44]	@ (800be90 <ADC_DelayMicroSecond+0x38>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	490b      	ldr	r1, [pc, #44]	@ (800be94 <ADC_DelayMicroSecond+0x3c>)
 800be66:	0018      	movs	r0, r3
 800be68:	f7f4 f962 	bl	8000130 <__udivsi3>
 800be6c:	0003      	movs	r3, r0
 800be6e:	001a      	movs	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4353      	muls	r3, r2
 800be74:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800be76:	e002      	b.n	800be7e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	3b01      	subs	r3, #1
 800be7c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1f9      	bne.n	800be78 <ADC_DelayMicroSecond+0x20>
  }
}
 800be84:	46c0      	nop			@ (mov r8, r8)
 800be86:	46c0      	nop			@ (mov r8, r8)
 800be88:	46bd      	mov	sp, r7
 800be8a:	b004      	add	sp, #16
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	46c0      	nop			@ (mov r8, r8)
 800be90:	20000000 	.word	0x20000000
 800be94:	000f4240 	.word	0x000f4240

0800be98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	0002      	movs	r2, r0
 800bea0:	1dfb      	adds	r3, r7, #7
 800bea2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800bea4:	1dfb      	adds	r3, r7, #7
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	2b7f      	cmp	r3, #127	@ 0x7f
 800beaa:	d809      	bhi.n	800bec0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800beac:	1dfb      	adds	r3, r7, #7
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	001a      	movs	r2, r3
 800beb2:	231f      	movs	r3, #31
 800beb4:	401a      	ands	r2, r3
 800beb6:	4b04      	ldr	r3, [pc, #16]	@ (800bec8 <__NVIC_EnableIRQ+0x30>)
 800beb8:	2101      	movs	r1, #1
 800beba:	4091      	lsls	r1, r2
 800bebc:	000a      	movs	r2, r1
 800bebe:	601a      	str	r2, [r3, #0]
  }
}
 800bec0:	46c0      	nop			@ (mov r8, r8)
 800bec2:	46bd      	mov	sp, r7
 800bec4:	b002      	add	sp, #8
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	e000e100 	.word	0xe000e100

0800becc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800becc:	b590      	push	{r4, r7, lr}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	0002      	movs	r2, r0
 800bed4:	6039      	str	r1, [r7, #0]
 800bed6:	1dfb      	adds	r3, r7, #7
 800bed8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800beda:	1dfb      	adds	r3, r7, #7
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	2b7f      	cmp	r3, #127	@ 0x7f
 800bee0:	d828      	bhi.n	800bf34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bee2:	4a2f      	ldr	r2, [pc, #188]	@ (800bfa0 <__NVIC_SetPriority+0xd4>)
 800bee4:	1dfb      	adds	r3, r7, #7
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	b25b      	sxtb	r3, r3
 800beea:	089b      	lsrs	r3, r3, #2
 800beec:	33c0      	adds	r3, #192	@ 0xc0
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	589b      	ldr	r3, [r3, r2]
 800bef2:	1dfa      	adds	r2, r7, #7
 800bef4:	7812      	ldrb	r2, [r2, #0]
 800bef6:	0011      	movs	r1, r2
 800bef8:	2203      	movs	r2, #3
 800befa:	400a      	ands	r2, r1
 800befc:	00d2      	lsls	r2, r2, #3
 800befe:	21ff      	movs	r1, #255	@ 0xff
 800bf00:	4091      	lsls	r1, r2
 800bf02:	000a      	movs	r2, r1
 800bf04:	43d2      	mvns	r2, r2
 800bf06:	401a      	ands	r2, r3
 800bf08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	019b      	lsls	r3, r3, #6
 800bf0e:	22ff      	movs	r2, #255	@ 0xff
 800bf10:	401a      	ands	r2, r3
 800bf12:	1dfb      	adds	r3, r7, #7
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	0018      	movs	r0, r3
 800bf18:	2303      	movs	r3, #3
 800bf1a:	4003      	ands	r3, r0
 800bf1c:	00db      	lsls	r3, r3, #3
 800bf1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bf20:	481f      	ldr	r0, [pc, #124]	@ (800bfa0 <__NVIC_SetPriority+0xd4>)
 800bf22:	1dfb      	adds	r3, r7, #7
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	b25b      	sxtb	r3, r3
 800bf28:	089b      	lsrs	r3, r3, #2
 800bf2a:	430a      	orrs	r2, r1
 800bf2c:	33c0      	adds	r3, #192	@ 0xc0
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800bf32:	e031      	b.n	800bf98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bf34:	4a1b      	ldr	r2, [pc, #108]	@ (800bfa4 <__NVIC_SetPriority+0xd8>)
 800bf36:	1dfb      	adds	r3, r7, #7
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	0019      	movs	r1, r3
 800bf3c:	230f      	movs	r3, #15
 800bf3e:	400b      	ands	r3, r1
 800bf40:	3b08      	subs	r3, #8
 800bf42:	089b      	lsrs	r3, r3, #2
 800bf44:	3306      	adds	r3, #6
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	18d3      	adds	r3, r2, r3
 800bf4a:	3304      	adds	r3, #4
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	1dfa      	adds	r2, r7, #7
 800bf50:	7812      	ldrb	r2, [r2, #0]
 800bf52:	0011      	movs	r1, r2
 800bf54:	2203      	movs	r2, #3
 800bf56:	400a      	ands	r2, r1
 800bf58:	00d2      	lsls	r2, r2, #3
 800bf5a:	21ff      	movs	r1, #255	@ 0xff
 800bf5c:	4091      	lsls	r1, r2
 800bf5e:	000a      	movs	r2, r1
 800bf60:	43d2      	mvns	r2, r2
 800bf62:	401a      	ands	r2, r3
 800bf64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	019b      	lsls	r3, r3, #6
 800bf6a:	22ff      	movs	r2, #255	@ 0xff
 800bf6c:	401a      	ands	r2, r3
 800bf6e:	1dfb      	adds	r3, r7, #7
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	0018      	movs	r0, r3
 800bf74:	2303      	movs	r3, #3
 800bf76:	4003      	ands	r3, r0
 800bf78:	00db      	lsls	r3, r3, #3
 800bf7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800bf7c:	4809      	ldr	r0, [pc, #36]	@ (800bfa4 <__NVIC_SetPriority+0xd8>)
 800bf7e:	1dfb      	adds	r3, r7, #7
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	001c      	movs	r4, r3
 800bf84:	230f      	movs	r3, #15
 800bf86:	4023      	ands	r3, r4
 800bf88:	3b08      	subs	r3, #8
 800bf8a:	089b      	lsrs	r3, r3, #2
 800bf8c:	430a      	orrs	r2, r1
 800bf8e:	3306      	adds	r3, #6
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	18c3      	adds	r3, r0, r3
 800bf94:	3304      	adds	r3, #4
 800bf96:	601a      	str	r2, [r3, #0]
}
 800bf98:	46c0      	nop			@ (mov r8, r8)
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	b003      	add	sp, #12
 800bf9e:	bd90      	pop	{r4, r7, pc}
 800bfa0:	e000e100 	.word	0xe000e100
 800bfa4:	e000ed00 	.word	0xe000ed00

0800bfa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	1e5a      	subs	r2, r3, #1
 800bfb4:	2380      	movs	r3, #128	@ 0x80
 800bfb6:	045b      	lsls	r3, r3, #17
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d301      	bcc.n	800bfc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e010      	b.n	800bfe2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bfc0:	4b0a      	ldr	r3, [pc, #40]	@ (800bfec <SysTick_Config+0x44>)
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	3a01      	subs	r2, #1
 800bfc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bfc8:	2301      	movs	r3, #1
 800bfca:	425b      	negs	r3, r3
 800bfcc:	2103      	movs	r1, #3
 800bfce:	0018      	movs	r0, r3
 800bfd0:	f7ff ff7c 	bl	800becc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bfd4:	4b05      	ldr	r3, [pc, #20]	@ (800bfec <SysTick_Config+0x44>)
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bfda:	4b04      	ldr	r3, [pc, #16]	@ (800bfec <SysTick_Config+0x44>)
 800bfdc:	2207      	movs	r2, #7
 800bfde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	0018      	movs	r0, r3
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	b002      	add	sp, #8
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	46c0      	nop			@ (mov r8, r8)
 800bfec:	e000e010 	.word	0xe000e010

0800bff0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60b9      	str	r1, [r7, #8]
 800bff8:	607a      	str	r2, [r7, #4]
 800bffa:	210f      	movs	r1, #15
 800bffc:	187b      	adds	r3, r7, r1
 800bffe:	1c02      	adds	r2, r0, #0
 800c000:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	187b      	adds	r3, r7, r1
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	b25b      	sxtb	r3, r3
 800c00a:	0011      	movs	r1, r2
 800c00c:	0018      	movs	r0, r3
 800c00e:	f7ff ff5d 	bl	800becc <__NVIC_SetPriority>
}
 800c012:	46c0      	nop			@ (mov r8, r8)
 800c014:	46bd      	mov	sp, r7
 800c016:	b004      	add	sp, #16
 800c018:	bd80      	pop	{r7, pc}

0800c01a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b082      	sub	sp, #8
 800c01e:	af00      	add	r7, sp, #0
 800c020:	0002      	movs	r2, r0
 800c022:	1dfb      	adds	r3, r7, #7
 800c024:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c026:	1dfb      	adds	r3, r7, #7
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	b25b      	sxtb	r3, r3
 800c02c:	0018      	movs	r0, r3
 800c02e:	f7ff ff33 	bl	800be98 <__NVIC_EnableIRQ>
}
 800c032:	46c0      	nop			@ (mov r8, r8)
 800c034:	46bd      	mov	sp, r7
 800c036:	b002      	add	sp, #8
 800c038:	bd80      	pop	{r7, pc}

0800c03a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b082      	sub	sp, #8
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	0018      	movs	r0, r3
 800c046:	f7ff ffaf 	bl	800bfa8 <SysTick_Config>
 800c04a:	0003      	movs	r3, r0
}
 800c04c:	0018      	movs	r0, r3
 800c04e:	46bd      	mov	sp, r7
 800c050:	b002      	add	sp, #8
 800c052:	bd80      	pop	{r7, pc}

0800c054 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d101      	bne.n	800c066 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800c062:	2301      	movs	r3, #1
 800c064:	e015      	b.n	800c092 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	791b      	ldrb	r3, [r3, #4]
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d106      	bne.n	800c07e <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	0018      	movs	r0, r3
 800c07a:	f7f8 f8af 	bl	80041dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2202      	movs	r2, #2
 800c082:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800c090:	2300      	movs	r3, #0
}
 800c092:	0018      	movs	r0, r3
 800c094:	46bd      	mov	sp, r7
 800c096:	b002      	add	sp, #8
 800c098:	bd80      	pop	{r7, pc}
	...

0800c09c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b086      	sub	sp, #24
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	617b      	str	r3, [r7, #20]
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	795b      	ldrb	r3, [r3, #5]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d101      	bne.n	800c0bc <HAL_DAC_ConfigChannel+0x20>
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	e035      	b.n	800c128 <HAL_DAC_ConfigChannel+0x8c>
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2202      	movs	r2, #2
 800c0c6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800c0d0:	4a17      	ldr	r2, [pc, #92]	@ (800c130 <HAL_DAC_ConfigChannel+0x94>)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	409a      	lsls	r2, r3
 800c0d6:	0013      	movs	r3, r2
 800c0d8:	43da      	mvns	r2, r3
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	4013      	ands	r3, r2
 800c0de:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800c0ec:	693a      	ldr	r2, [r7, #16]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	409a      	lsls	r2, r3
 800c0f2:	0013      	movs	r3, r2
 800c0f4:	697a      	ldr	r2, [r7, #20]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	697a      	ldr	r2, [r7, #20]
 800c100:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	21c0      	movs	r1, #192	@ 0xc0
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	4099      	lsls	r1, r3
 800c10e:	000b      	movs	r3, r1
 800c110:	43d9      	mvns	r1, r3
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	400a      	ands	r2, r1
 800c118:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2201      	movs	r2, #1
 800c11e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2200      	movs	r2, #0
 800c124:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800c126:	2300      	movs	r3, #0
}
 800c128:	0018      	movs	r0, r3
 800c12a:	46bd      	mov	sp, r7
 800c12c:	b006      	add	sp, #24
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	00000ffe 	.word	0x00000ffe

0800c134 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c13c:	230f      	movs	r3, #15
 800c13e:	18fb      	adds	r3, r7, r3
 800c140:	2200      	movs	r2, #0
 800c142:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2225      	movs	r2, #37	@ 0x25
 800c148:	5c9b      	ldrb	r3, [r3, r2]
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d008      	beq.n	800c162 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2204      	movs	r2, #4
 800c154:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2224      	movs	r2, #36	@ 0x24
 800c15a:	2100      	movs	r1, #0
 800c15c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	e024      	b.n	800c1ac <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	210e      	movs	r1, #14
 800c16e:	438a      	bics	r2, r1
 800c170:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2101      	movs	r1, #1
 800c17e:	438a      	bics	r2, r1
 800c180:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c186:	221c      	movs	r2, #28
 800c188:	401a      	ands	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c18e:	2101      	movs	r1, #1
 800c190:	4091      	lsls	r1, r2
 800c192:	000a      	movs	r2, r1
 800c194:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2225      	movs	r2, #37	@ 0x25
 800c19a:	2101      	movs	r1, #1
 800c19c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2224      	movs	r2, #36	@ 0x24
 800c1a2:	2100      	movs	r1, #0
 800c1a4:	5499      	strb	r1, [r3, r2]

    return status;
 800c1a6:	230f      	movs	r3, #15
 800c1a8:	18fb      	adds	r3, r7, r3
 800c1aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c1ac:	0018      	movs	r0, r3
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	b004      	add	sp, #16
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c1bc:	210f      	movs	r1, #15
 800c1be:	187b      	adds	r3, r7, r1
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2225      	movs	r2, #37	@ 0x25
 800c1c8:	5c9b      	ldrb	r3, [r3, r2]
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d006      	beq.n	800c1de <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2204      	movs	r2, #4
 800c1d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c1d6:	187b      	adds	r3, r7, r1
 800c1d8:	2201      	movs	r2, #1
 800c1da:	701a      	strb	r2, [r3, #0]
 800c1dc:	e02a      	b.n	800c234 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	210e      	movs	r1, #14
 800c1ea:	438a      	bics	r2, r1
 800c1ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2101      	movs	r1, #1
 800c1fa:	438a      	bics	r2, r1
 800c1fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c202:	221c      	movs	r2, #28
 800c204:	401a      	ands	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c20a:	2101      	movs	r1, #1
 800c20c:	4091      	lsls	r1, r2
 800c20e:	000a      	movs	r2, r1
 800c210:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2225      	movs	r2, #37	@ 0x25
 800c216:	2101      	movs	r1, #1
 800c218:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2224      	movs	r2, #36	@ 0x24
 800c21e:	2100      	movs	r1, #0
 800c220:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c226:	2b00      	cmp	r3, #0
 800c228:	d004      	beq.n	800c234 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	0010      	movs	r0, r2
 800c232:	4798      	blx	r3
    }
  }
  return status;
 800c234:	230f      	movs	r3, #15
 800c236:	18fb      	adds	r3, r7, r3
 800c238:	781b      	ldrb	r3, [r3, #0]
}
 800c23a:	0018      	movs	r0, r3
 800c23c:	46bd      	mov	sp, r7
 800c23e:	b004      	add	sp, #16
 800c240:	bd80      	pop	{r7, pc}

0800c242 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b086      	sub	sp, #24
 800c246:	af00      	add	r7, sp, #0
 800c248:	60f8      	str	r0, [r7, #12]
 800c24a:	607a      	str	r2, [r7, #4]
 800c24c:	200b      	movs	r0, #11
 800c24e:	183b      	adds	r3, r7, r0
 800c250:	1c0a      	adds	r2, r1, #0
 800c252:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c254:	2317      	movs	r3, #23
 800c256:	18fb      	adds	r3, r7, r3
 800c258:	2200      	movs	r2, #0
 800c25a:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 800c25c:	183b      	adds	r3, r7, r0
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d103      	bne.n	800c26c <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	605a      	str	r2, [r3, #4]
      break;
 800c26a:	e004      	b.n	800c276 <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 800c26c:	2317      	movs	r3, #23
 800c26e:	18fb      	adds	r3, r7, r3
 800c270:	2201      	movs	r2, #1
 800c272:	701a      	strb	r2, [r3, #0]
      break;
 800c274:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 800c276:	2317      	movs	r3, #23
 800c278:	18fb      	adds	r3, r7, r3
 800c27a:	781b      	ldrb	r3, [r3, #0]
}
 800c27c:	0018      	movs	r0, r3
 800c27e:	46bd      	mov	sp, r7
 800c280:	b006      	add	sp, #24
 800c282:	bd80      	pop	{r7, pc}

0800c284 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d101      	bne.n	800c298 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800c294:	2301      	movs	r3, #1
 800c296:	e003      	b.n	800c2a0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	683a      	ldr	r2, [r7, #0]
 800c29c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c29e:	2300      	movs	r3, #0
  }
}
 800c2a0:	0018      	movs	r0, r3
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	b002      	add	sp, #8
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	221f      	movs	r2, #31
 800c2b6:	4013      	ands	r3, r2
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	409a      	lsls	r2, r3
 800c2bc:	0013      	movs	r3, r2
 800c2be:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800c2c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c2ec <HAL_EXTI_IRQHandler+0x44>)
 800c2c2:	695a      	ldr	r2, [r3, #20]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d009      	beq.n	800c2e4 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800c2d0:	4b06      	ldr	r3, [pc, #24]	@ (800c2ec <HAL_EXTI_IRQHandler+0x44>)
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d002      	beq.n	800c2e4 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	4798      	blx	r3
    }
  }
}
 800c2e4:	46c0      	nop			@ (mov r8, r8)
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	b004      	add	sp, #16
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	40010400 	.word	0x40010400

0800c2f0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800c2f0:	b5b0      	push	{r4, r5, r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c2fc:	2317      	movs	r3, #23
 800c2fe:	18fb      	adds	r3, r7, r3
 800c300:	2201      	movs	r2, #1
 800c302:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c304:	4b16      	ldr	r3, [pc, #88]	@ (800c360 <HAL_FLASH_Program+0x70>)
 800c306:	7c1b      	ldrb	r3, [r3, #16]
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d101      	bne.n	800c310 <HAL_FLASH_Program+0x20>
 800c30c:	2302      	movs	r3, #2
 800c30e:	e022      	b.n	800c356 <HAL_FLASH_Program+0x66>
 800c310:	4b13      	ldr	r3, [pc, #76]	@ (800c360 <HAL_FLASH_Program+0x70>)
 800c312:	2201      	movs	r2, #1
 800c314:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c316:	2517      	movs	r5, #23
 800c318:	197c      	adds	r4, r7, r5
 800c31a:	4b12      	ldr	r3, [pc, #72]	@ (800c364 <HAL_FLASH_Program+0x74>)
 800c31c:	0018      	movs	r0, r3
 800c31e:	f000 f88b 	bl	800c438 <FLASH_WaitForLastOperation>
 800c322:	0003      	movs	r3, r0
 800c324:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800c326:	0029      	movs	r1, r5
 800c328:	187b      	adds	r3, r7, r1
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10c      	bne.n	800c34a <HAL_FLASH_Program+0x5a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c330:	4b0b      	ldr	r3, [pc, #44]	@ (800c360 <HAL_FLASH_Program+0x70>)
 800c332:	2200      	movs	r2, #0
 800c334:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c33c:	187c      	adds	r4, r7, r1
 800c33e:	4b09      	ldr	r3, [pc, #36]	@ (800c364 <HAL_FLASH_Program+0x74>)
 800c340:	0018      	movs	r0, r3
 800c342:	f000 f879 	bl	800c438 <FLASH_WaitForLastOperation>
 800c346:	0003      	movs	r3, r0
 800c348:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c34a:	4b05      	ldr	r3, [pc, #20]	@ (800c360 <HAL_FLASH_Program+0x70>)
 800c34c:	2200      	movs	r2, #0
 800c34e:	741a      	strb	r2, [r3, #16]

  return status;
 800c350:	2317      	movs	r3, #23
 800c352:	18fb      	adds	r3, r7, r3
 800c354:	781b      	ldrb	r3, [r3, #0]
}
 800c356:	0018      	movs	r0, r3
 800c358:	46bd      	mov	sp, r7
 800c35a:	b006      	add	sp, #24
 800c35c:	bdb0      	pop	{r4, r5, r7, pc}
 800c35e:	46c0      	nop			@ (mov r8, r8)
 800c360:	20000740 	.word	0x20000740
 800c364:	0000c350 	.word	0x0000c350

0800c368 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b086      	sub	sp, #24
 800c36c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800c36e:	4b23      	ldr	r3, [pc, #140]	@ (800c3fc <HAL_FLASH_Unlock+0x94>)
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	2201      	movs	r2, #1
 800c374:	4013      	ands	r3, r2
 800c376:	2b01      	cmp	r3, #1
 800c378:	d11a      	bne.n	800c3b0 <HAL_FLASH_Unlock+0x48>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c37a:	f3ef 8310 	mrs	r3, PRIMASK
 800c37e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c380:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800c382:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c384:	b672      	cpsid	i
}
 800c386:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 800c388:	4b1c      	ldr	r3, [pc, #112]	@ (800c3fc <HAL_FLASH_Unlock+0x94>)
 800c38a:	4a1d      	ldr	r2, [pc, #116]	@ (800c400 <HAL_FLASH_Unlock+0x98>)
 800c38c:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 800c38e:	4b1b      	ldr	r3, [pc, #108]	@ (800c3fc <HAL_FLASH_Unlock+0x94>)
 800c390:	4a1c      	ldr	r2, [pc, #112]	@ (800c404 <HAL_FLASH_Unlock+0x9c>)
 800c392:	60da      	str	r2, [r3, #12]
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	f383 8810 	msr	PRIMASK, r3
}
 800c39e:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800c3a0:	4b16      	ldr	r3, [pc, #88]	@ (800c3fc <HAL_FLASH_Unlock+0x94>)
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	4013      	ands	r3, r2
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d101      	bne.n	800c3b0 <HAL_FLASH_Unlock+0x48>
    {
      return HAL_ERROR;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e021      	b.n	800c3f4 <HAL_FLASH_Unlock+0x8c>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 800c3b0:	4b12      	ldr	r3, [pc, #72]	@ (800c3fc <HAL_FLASH_Unlock+0x94>)
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	2202      	movs	r2, #2
 800c3b6:	4013      	ands	r3, r2
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d11a      	bne.n	800c3f2 <HAL_FLASH_Unlock+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3bc:	f3ef 8310 	mrs	r3, PRIMASK
 800c3c0:	607b      	str	r3, [r7, #4]
  return(result);
 800c3c2:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800c3c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c3c6:	b672      	cpsid	i
}
 800c3c8:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 800c3ca:	4b0c      	ldr	r3, [pc, #48]	@ (800c3fc <HAL_FLASH_Unlock+0x94>)
 800c3cc:	4a0e      	ldr	r2, [pc, #56]	@ (800c408 <HAL_FLASH_Unlock+0xa0>)
 800c3ce:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 800c3d0:	4b0a      	ldr	r3, [pc, #40]	@ (800c3fc <HAL_FLASH_Unlock+0x94>)
 800c3d2:	4a0e      	ldr	r2, [pc, #56]	@ (800c40c <HAL_FLASH_Unlock+0xa4>)
 800c3d4:	611a      	str	r2, [r3, #16]
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	f383 8810 	msr	PRIMASK, r3
}
 800c3e0:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 800c3e2:	4b06      	ldr	r3, [pc, #24]	@ (800c3fc <HAL_FLASH_Unlock+0x94>)
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	d101      	bne.n	800c3f2 <HAL_FLASH_Unlock+0x8a>
    {
      return HAL_ERROR;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e000      	b.n	800c3f4 <HAL_FLASH_Unlock+0x8c>
    }
  }

  return HAL_OK; 
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	0018      	movs	r0, r3
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	b006      	add	sp, #24
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	40022000 	.word	0x40022000
 800c400:	89abcdef 	.word	0x89abcdef
 800c404:	02030405 	.word	0x02030405
 800c408:	8c9daebf 	.word	0x8c9daebf
 800c40c:	13141516 	.word	0x13141516

0800c410 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 800c414:	4b07      	ldr	r3, [pc, #28]	@ (800c434 <HAL_FLASH_Lock+0x24>)
 800c416:	685a      	ldr	r2, [r3, #4]
 800c418:	4b06      	ldr	r3, [pc, #24]	@ (800c434 <HAL_FLASH_Lock+0x24>)
 800c41a:	2102      	movs	r1, #2
 800c41c:	430a      	orrs	r2, r1
 800c41e:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800c420:	4b04      	ldr	r3, [pc, #16]	@ (800c434 <HAL_FLASH_Lock+0x24>)
 800c422:	685a      	ldr	r2, [r3, #4]
 800c424:	4b03      	ldr	r3, [pc, #12]	@ (800c434 <HAL_FLASH_Lock+0x24>)
 800c426:	2101      	movs	r1, #1
 800c428:	430a      	orrs	r2, r1
 800c42a:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	0018      	movs	r0, r3
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	40022000 	.word	0x40022000

0800c438 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800c440:	f7ff faec 	bl	800ba1c <HAL_GetTick>
 800c444:	0003      	movs	r3, r0
 800c446:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800c448:	e00f      	b.n	800c46a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	3301      	adds	r3, #1
 800c44e:	d00c      	beq.n	800c46a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d007      	beq.n	800c466 <FLASH_WaitForLastOperation+0x2e>
 800c456:	f7ff fae1 	bl	800ba1c <HAL_GetTick>
 800c45a:	0002      	movs	r2, r0
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	1ad3      	subs	r3, r2, r3
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	429a      	cmp	r2, r3
 800c464:	d201      	bcs.n	800c46a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800c466:	2303      	movs	r3, #3
 800c468:	e052      	b.n	800c510 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800c46a:	4b2b      	ldr	r3, [pc, #172]	@ (800c518 <FLASH_WaitForLastOperation+0xe0>)
 800c46c:	699b      	ldr	r3, [r3, #24]
 800c46e:	2201      	movs	r2, #1
 800c470:	4013      	ands	r3, r2
 800c472:	2b01      	cmp	r3, #1
 800c474:	d0e9      	beq.n	800c44a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800c476:	4b28      	ldr	r3, [pc, #160]	@ (800c518 <FLASH_WaitForLastOperation+0xe0>)
 800c478:	699b      	ldr	r3, [r3, #24]
 800c47a:	2202      	movs	r2, #2
 800c47c:	4013      	ands	r3, r2
 800c47e:	2b02      	cmp	r3, #2
 800c480:	d102      	bne.n	800c488 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c482:	4b25      	ldr	r3, [pc, #148]	@ (800c518 <FLASH_WaitForLastOperation+0xe0>)
 800c484:	2202      	movs	r2, #2
 800c486:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800c488:	4b23      	ldr	r3, [pc, #140]	@ (800c518 <FLASH_WaitForLastOperation+0xe0>)
 800c48a:	699a      	ldr	r2, [r3, #24]
 800c48c:	2380      	movs	r3, #128	@ 0x80
 800c48e:	005b      	lsls	r3, r3, #1
 800c490:	401a      	ands	r2, r3
 800c492:	2380      	movs	r3, #128	@ 0x80
 800c494:	005b      	lsls	r3, r3, #1
 800c496:	429a      	cmp	r2, r3
 800c498:	d035      	beq.n	800c506 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800c49a:	4b1f      	ldr	r3, [pc, #124]	@ (800c518 <FLASH_WaitForLastOperation+0xe0>)
 800c49c:	699a      	ldr	r2, [r3, #24]
 800c49e:	2380      	movs	r3, #128	@ 0x80
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800c4a4:	2380      	movs	r3, #128	@ 0x80
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d02c      	beq.n	800c506 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800c4ac:	4b1a      	ldr	r3, [pc, #104]	@ (800c518 <FLASH_WaitForLastOperation+0xe0>)
 800c4ae:	699a      	ldr	r2, [r3, #24]
 800c4b0:	2380      	movs	r3, #128	@ 0x80
 800c4b2:	00db      	lsls	r3, r3, #3
 800c4b4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800c4b6:	2380      	movs	r3, #128	@ 0x80
 800c4b8:	00db      	lsls	r3, r3, #3
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d023      	beq.n	800c506 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800c4be:	4b16      	ldr	r3, [pc, #88]	@ (800c518 <FLASH_WaitForLastOperation+0xe0>)
 800c4c0:	699a      	ldr	r2, [r3, #24]
 800c4c2:	2380      	movs	r3, #128	@ 0x80
 800c4c4:	011b      	lsls	r3, r3, #4
 800c4c6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800c4c8:	2380      	movs	r3, #128	@ 0x80
 800c4ca:	011b      	lsls	r3, r3, #4
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d01a      	beq.n	800c506 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800c4d0:	4b11      	ldr	r3, [pc, #68]	@ (800c518 <FLASH_WaitForLastOperation+0xe0>)
 800c4d2:	699a      	ldr	r2, [r3, #24]
 800c4d4:	2380      	movs	r3, #128	@ 0x80
 800c4d6:	019b      	lsls	r3, r3, #6
 800c4d8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800c4da:	2380      	movs	r3, #128	@ 0x80
 800c4dc:	019b      	lsls	r3, r3, #6
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d011      	beq.n	800c506 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800c4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c518 <FLASH_WaitForLastOperation+0xe0>)
 800c4e4:	699a      	ldr	r2, [r3, #24]
 800c4e6:	2380      	movs	r3, #128	@ 0x80
 800c4e8:	029b      	lsls	r3, r3, #10
 800c4ea:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800c4ec:	2380      	movs	r3, #128	@ 0x80
 800c4ee:	029b      	lsls	r3, r3, #10
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d008      	beq.n	800c506 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800c4f4:	4b08      	ldr	r3, [pc, #32]	@ (800c518 <FLASH_WaitForLastOperation+0xe0>)
 800c4f6:	699a      	ldr	r2, [r3, #24]
 800c4f8:	2380      	movs	r3, #128	@ 0x80
 800c4fa:	025b      	lsls	r3, r3, #9
 800c4fc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800c4fe:	2380      	movs	r3, #128	@ 0x80
 800c500:	025b      	lsls	r3, r3, #9
 800c502:	429a      	cmp	r2, r3
 800c504:	d103      	bne.n	800c50e <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800c506:	f000 f809 	bl	800c51c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	e000      	b.n	800c510 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	0018      	movs	r0, r3
 800c512:	46bd      	mov	sp, r7
 800c514:	b004      	add	sp, #16
 800c516:	bd80      	pop	{r7, pc}
 800c518:	40022000 	.word	0x40022000

0800c51c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800c522:	2300      	movs	r3, #0
 800c524:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800c526:	4b49      	ldr	r3, [pc, #292]	@ (800c64c <FLASH_SetErrorCode+0x130>)
 800c528:	699a      	ldr	r2, [r3, #24]
 800c52a:	2380      	movs	r3, #128	@ 0x80
 800c52c:	005b      	lsls	r3, r3, #1
 800c52e:	401a      	ands	r2, r3
 800c530:	2380      	movs	r3, #128	@ 0x80
 800c532:	005b      	lsls	r3, r3, #1
 800c534:	429a      	cmp	r2, r3
 800c536:	d10a      	bne.n	800c54e <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800c538:	4b45      	ldr	r3, [pc, #276]	@ (800c650 <FLASH_SetErrorCode+0x134>)
 800c53a:	695b      	ldr	r3, [r3, #20]
 800c53c:	2202      	movs	r2, #2
 800c53e:	431a      	orrs	r2, r3
 800c540:	4b43      	ldr	r3, [pc, #268]	@ (800c650 <FLASH_SetErrorCode+0x134>)
 800c542:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2280      	movs	r2, #128	@ 0x80
 800c548:	0052      	lsls	r2, r2, #1
 800c54a:	4313      	orrs	r3, r2
 800c54c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800c54e:	4b3f      	ldr	r3, [pc, #252]	@ (800c64c <FLASH_SetErrorCode+0x130>)
 800c550:	699a      	ldr	r2, [r3, #24]
 800c552:	2380      	movs	r3, #128	@ 0x80
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	401a      	ands	r2, r3
 800c558:	2380      	movs	r3, #128	@ 0x80
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d10a      	bne.n	800c576 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800c560:	4b3b      	ldr	r3, [pc, #236]	@ (800c650 <FLASH_SetErrorCode+0x134>)
 800c562:	695b      	ldr	r3, [r3, #20]
 800c564:	2201      	movs	r2, #1
 800c566:	431a      	orrs	r2, r3
 800c568:	4b39      	ldr	r3, [pc, #228]	@ (800c650 <FLASH_SetErrorCode+0x134>)
 800c56a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2280      	movs	r2, #128	@ 0x80
 800c570:	0092      	lsls	r2, r2, #2
 800c572:	4313      	orrs	r3, r2
 800c574:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800c576:	4b35      	ldr	r3, [pc, #212]	@ (800c64c <FLASH_SetErrorCode+0x130>)
 800c578:	699a      	ldr	r2, [r3, #24]
 800c57a:	2380      	movs	r3, #128	@ 0x80
 800c57c:	00db      	lsls	r3, r3, #3
 800c57e:	401a      	ands	r2, r3
 800c580:	2380      	movs	r3, #128	@ 0x80
 800c582:	00db      	lsls	r3, r3, #3
 800c584:	429a      	cmp	r2, r3
 800c586:	d10a      	bne.n	800c59e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800c588:	4b31      	ldr	r3, [pc, #196]	@ (800c650 <FLASH_SetErrorCode+0x134>)
 800c58a:	695b      	ldr	r3, [r3, #20]
 800c58c:	2208      	movs	r2, #8
 800c58e:	431a      	orrs	r2, r3
 800c590:	4b2f      	ldr	r3, [pc, #188]	@ (800c650 <FLASH_SetErrorCode+0x134>)
 800c592:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2280      	movs	r2, #128	@ 0x80
 800c598:	00d2      	lsls	r2, r2, #3
 800c59a:	4313      	orrs	r3, r2
 800c59c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800c59e:	4b2b      	ldr	r3, [pc, #172]	@ (800c64c <FLASH_SetErrorCode+0x130>)
 800c5a0:	699a      	ldr	r2, [r3, #24]
 800c5a2:	2380      	movs	r3, #128	@ 0x80
 800c5a4:	011b      	lsls	r3, r3, #4
 800c5a6:	401a      	ands	r2, r3
 800c5a8:	2380      	movs	r3, #128	@ 0x80
 800c5aa:	011b      	lsls	r3, r3, #4
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d10a      	bne.n	800c5c6 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800c5b0:	4b27      	ldr	r3, [pc, #156]	@ (800c650 <FLASH_SetErrorCode+0x134>)
 800c5b2:	695b      	ldr	r3, [r3, #20]
 800c5b4:	2204      	movs	r2, #4
 800c5b6:	431a      	orrs	r2, r3
 800c5b8:	4b25      	ldr	r3, [pc, #148]	@ (800c650 <FLASH_SetErrorCode+0x134>)
 800c5ba:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2280      	movs	r2, #128	@ 0x80
 800c5c0:	0112      	lsls	r2, r2, #4
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800c5c6:	4b21      	ldr	r3, [pc, #132]	@ (800c64c <FLASH_SetErrorCode+0x130>)
 800c5c8:	699a      	ldr	r2, [r3, #24]
 800c5ca:	2380      	movs	r3, #128	@ 0x80
 800c5cc:	019b      	lsls	r3, r3, #6
 800c5ce:	401a      	ands	r2, r3
 800c5d0:	2380      	movs	r3, #128	@ 0x80
 800c5d2:	019b      	lsls	r3, r3, #6
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d10a      	bne.n	800c5ee <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800c5d8:	4b1d      	ldr	r3, [pc, #116]	@ (800c650 <FLASH_SetErrorCode+0x134>)
 800c5da:	695b      	ldr	r3, [r3, #20]
 800c5dc:	2210      	movs	r2, #16
 800c5de:	431a      	orrs	r2, r3
 800c5e0:	4b1b      	ldr	r3, [pc, #108]	@ (800c650 <FLASH_SetErrorCode+0x134>)
 800c5e2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2280      	movs	r2, #128	@ 0x80
 800c5e8:	0192      	lsls	r2, r2, #6
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800c5ee:	4b17      	ldr	r3, [pc, #92]	@ (800c64c <FLASH_SetErrorCode+0x130>)
 800c5f0:	699a      	ldr	r2, [r3, #24]
 800c5f2:	2380      	movs	r3, #128	@ 0x80
 800c5f4:	029b      	lsls	r3, r3, #10
 800c5f6:	401a      	ands	r2, r3
 800c5f8:	2380      	movs	r3, #128	@ 0x80
 800c5fa:	029b      	lsls	r3, r3, #10
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d109      	bne.n	800c614 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800c600:	4b13      	ldr	r3, [pc, #76]	@ (800c650 <FLASH_SetErrorCode+0x134>)
 800c602:	695b      	ldr	r3, [r3, #20]
 800c604:	2220      	movs	r2, #32
 800c606:	431a      	orrs	r2, r3
 800c608:	4b11      	ldr	r3, [pc, #68]	@ (800c650 <FLASH_SetErrorCode+0x134>)
 800c60a:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2220      	movs	r2, #32
 800c610:	4313      	orrs	r3, r2
 800c612:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800c614:	4b0d      	ldr	r3, [pc, #52]	@ (800c64c <FLASH_SetErrorCode+0x130>)
 800c616:	699a      	ldr	r2, [r3, #24]
 800c618:	2380      	movs	r3, #128	@ 0x80
 800c61a:	025b      	lsls	r3, r3, #9
 800c61c:	401a      	ands	r2, r3
 800c61e:	2380      	movs	r3, #128	@ 0x80
 800c620:	025b      	lsls	r3, r3, #9
 800c622:	429a      	cmp	r2, r3
 800c624:	d10a      	bne.n	800c63c <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800c626:	4b0a      	ldr	r3, [pc, #40]	@ (800c650 <FLASH_SetErrorCode+0x134>)
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	2240      	movs	r2, #64	@ 0x40
 800c62c:	431a      	orrs	r2, r3
 800c62e:	4b08      	ldr	r3, [pc, #32]	@ (800c650 <FLASH_SetErrorCode+0x134>)
 800c630:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2280      	movs	r2, #128	@ 0x80
 800c636:	0252      	lsls	r2, r2, #9
 800c638:	4313      	orrs	r3, r2
 800c63a:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800c63c:	4b03      	ldr	r3, [pc, #12]	@ (800c64c <FLASH_SetErrorCode+0x130>)
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	619a      	str	r2, [r3, #24]
}  
 800c642:	46c0      	nop			@ (mov r8, r8)
 800c644:	46bd      	mov	sp, r7
 800c646:	b002      	add	sp, #8
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	46c0      	nop			@ (mov r8, r8)
 800c64c:	40022000 	.word	0x40022000
 800c650:	20000740 	.word	0x20000740

0800c654 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800c654:	b5b0      	push	{r4, r5, r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c65e:	230f      	movs	r3, #15
 800c660:	18fb      	adds	r3, r7, r3
 800c662:	2201      	movs	r2, #1
 800c664:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800c666:	2300      	movs	r3, #0
 800c668:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c66a:	4b29      	ldr	r3, [pc, #164]	@ (800c710 <HAL_FLASHEx_Erase+0xbc>)
 800c66c:	7c1b      	ldrb	r3, [r3, #16]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d101      	bne.n	800c676 <HAL_FLASHEx_Erase+0x22>
 800c672:	2302      	movs	r3, #2
 800c674:	e048      	b.n	800c708 <HAL_FLASHEx_Erase+0xb4>
 800c676:	4b26      	ldr	r3, [pc, #152]	@ (800c710 <HAL_FLASHEx_Erase+0xbc>)
 800c678:	2201      	movs	r2, #1
 800c67a:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c67c:	250f      	movs	r5, #15
 800c67e:	197c      	adds	r4, r7, r5
 800c680:	4b24      	ldr	r3, [pc, #144]	@ (800c714 <HAL_FLASHEx_Erase+0xc0>)
 800c682:	0018      	movs	r0, r3
 800c684:	f7ff fed8 	bl	800c438 <FLASH_WaitForLastOperation>
 800c688:	0003      	movs	r3, r0
 800c68a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800c68c:	197b      	adds	r3, r7, r5
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d133      	bne.n	800c6fc <HAL_FLASHEx_Erase+0xa8>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	2201      	movs	r2, #1
 800c698:	4252      	negs	r2, r2
 800c69a:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	60bb      	str	r3, [r7, #8]
 800c6a2:	e022      	b.n	800c6ea <HAL_FLASHEx_Erase+0x96>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	0018      	movs	r0, r3
 800c6a8:	f000 f83a 	bl	800c720 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c6ac:	250f      	movs	r5, #15
 800c6ae:	197c      	adds	r4, r7, r5
 800c6b0:	4b18      	ldr	r3, [pc, #96]	@ (800c714 <HAL_FLASHEx_Erase+0xc0>)
 800c6b2:	0018      	movs	r0, r3
 800c6b4:	f7ff fec0 	bl	800c438 <FLASH_WaitForLastOperation>
 800c6b8:	0003      	movs	r3, r0
 800c6ba:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800c6bc:	4b16      	ldr	r3, [pc, #88]	@ (800c718 <HAL_FLASHEx_Erase+0xc4>)
 800c6be:	685a      	ldr	r2, [r3, #4]
 800c6c0:	4b15      	ldr	r3, [pc, #84]	@ (800c718 <HAL_FLASHEx_Erase+0xc4>)
 800c6c2:	2108      	movs	r1, #8
 800c6c4:	438a      	bics	r2, r1
 800c6c6:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800c6c8:	4b13      	ldr	r3, [pc, #76]	@ (800c718 <HAL_FLASHEx_Erase+0xc4>)
 800c6ca:	685a      	ldr	r2, [r3, #4]
 800c6cc:	4b12      	ldr	r3, [pc, #72]	@ (800c718 <HAL_FLASHEx_Erase+0xc4>)
 800c6ce:	4913      	ldr	r1, [pc, #76]	@ (800c71c <HAL_FLASHEx_Erase+0xc8>)
 800c6d0:	400a      	ands	r2, r1
 800c6d2:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 800c6d4:	197b      	adds	r3, r7, r5
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <HAL_FLASHEx_Erase+0x90>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	601a      	str	r2, [r3, #0]
        break;
 800c6e2:	e00b      	b.n	800c6fc <HAL_FLASHEx_Erase+0xa8>
        address += FLASH_PAGE_SIZE)
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	3380      	adds	r3, #128	@ 0x80
 800c6e8:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	01da      	lsls	r2, r3, #7
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	18d3      	adds	r3, r2, r3
 800c6f6:	68ba      	ldr	r2, [r7, #8]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d3d3      	bcc.n	800c6a4 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c6fc:	4b04      	ldr	r3, [pc, #16]	@ (800c710 <HAL_FLASHEx_Erase+0xbc>)
 800c6fe:	2200      	movs	r2, #0
 800c700:	741a      	strb	r2, [r3, #16]

  return status;
 800c702:	230f      	movs	r3, #15
 800c704:	18fb      	adds	r3, r7, r3
 800c706:	781b      	ldrb	r3, [r3, #0]
}
 800c708:	0018      	movs	r0, r3
 800c70a:	46bd      	mov	sp, r7
 800c70c:	b004      	add	sp, #16
 800c70e:	bdb0      	pop	{r4, r5, r7, pc}
 800c710:	20000740 	.word	0x20000740
 800c714:	0000c350 	.word	0x0000c350
 800c718:	40022000 	.word	0x40022000
 800c71c:	fffffdff 	.word	0xfffffdff

0800c720 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c728:	4b0c      	ldr	r3, [pc, #48]	@ (800c75c <FLASH_PageErase+0x3c>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800c72e:	4b0c      	ldr	r3, [pc, #48]	@ (800c760 <FLASH_PageErase+0x40>)
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	4b0b      	ldr	r3, [pc, #44]	@ (800c760 <FLASH_PageErase+0x40>)
 800c734:	2180      	movs	r1, #128	@ 0x80
 800c736:	0089      	lsls	r1, r1, #2
 800c738:	430a      	orrs	r2, r1
 800c73a:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800c73c:	4b08      	ldr	r3, [pc, #32]	@ (800c760 <FLASH_PageErase+0x40>)
 800c73e:	685a      	ldr	r2, [r3, #4]
 800c740:	4b07      	ldr	r3, [pc, #28]	@ (800c760 <FLASH_PageErase+0x40>)
 800c742:	2108      	movs	r1, #8
 800c744:	430a      	orrs	r2, r1
 800c746:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	227f      	movs	r2, #127	@ 0x7f
 800c74c:	4393      	bics	r3, r2
 800c74e:	2200      	movs	r2, #0
 800c750:	601a      	str	r2, [r3, #0]
}
 800c752:	46c0      	nop			@ (mov r8, r8)
 800c754:	46bd      	mov	sp, r7
 800c756:	b002      	add	sp, #8
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	46c0      	nop			@ (mov r8, r8)
 800c75c:	20000740 	.word	0x20000740
 800c760:	40022000 	.word	0x40022000

0800c764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c76e:	2300      	movs	r3, #0
 800c770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c772:	2300      	movs	r3, #0
 800c774:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800c776:	2300      	movs	r3, #0
 800c778:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800c77a:	e155      	b.n	800ca28 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2101      	movs	r1, #1
 800c782:	697a      	ldr	r2, [r7, #20]
 800c784:	4091      	lsls	r1, r2
 800c786:	000a      	movs	r2, r1
 800c788:	4013      	ands	r3, r2
 800c78a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d100      	bne.n	800c794 <HAL_GPIO_Init+0x30>
 800c792:	e146      	b.n	800ca22 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	2203      	movs	r2, #3
 800c79a:	4013      	ands	r3, r2
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d005      	beq.n	800c7ac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	2203      	movs	r2, #3
 800c7a6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c7a8:	2b02      	cmp	r3, #2
 800c7aa:	d130      	bne.n	800c80e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	2203      	movs	r2, #3
 800c7b8:	409a      	lsls	r2, r3
 800c7ba:	0013      	movs	r3, r2
 800c7bc:	43da      	mvns	r2, r3
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	4013      	ands	r3, r2
 800c7c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	68da      	ldr	r2, [r3, #12]
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	005b      	lsls	r3, r3, #1
 800c7cc:	409a      	lsls	r2, r3
 800c7ce:	0013      	movs	r3, r2
 800c7d0:	693a      	ldr	r2, [r7, #16]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	693a      	ldr	r2, [r7, #16]
 800c7da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	409a      	lsls	r2, r3
 800c7e8:	0013      	movs	r3, r2
 800c7ea:	43da      	mvns	r2, r3
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	4013      	ands	r3, r2
 800c7f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	091b      	lsrs	r3, r3, #4
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	401a      	ands	r2, r3
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	409a      	lsls	r2, r3
 800c800:	0013      	movs	r3, r2
 800c802:	693a      	ldr	r2, [r7, #16]
 800c804:	4313      	orrs	r3, r2
 800c806:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	693a      	ldr	r2, [r7, #16]
 800c80c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	2203      	movs	r2, #3
 800c814:	4013      	ands	r3, r2
 800c816:	2b03      	cmp	r3, #3
 800c818:	d017      	beq.n	800c84a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	005b      	lsls	r3, r3, #1
 800c824:	2203      	movs	r2, #3
 800c826:	409a      	lsls	r2, r3
 800c828:	0013      	movs	r3, r2
 800c82a:	43da      	mvns	r2, r3
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	4013      	ands	r3, r2
 800c830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	689a      	ldr	r2, [r3, #8]
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	005b      	lsls	r3, r3, #1
 800c83a:	409a      	lsls	r2, r3
 800c83c:	0013      	movs	r3, r2
 800c83e:	693a      	ldr	r2, [r7, #16]
 800c840:	4313      	orrs	r3, r2
 800c842:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	693a      	ldr	r2, [r7, #16]
 800c848:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	2203      	movs	r2, #3
 800c850:	4013      	ands	r3, r2
 800c852:	2b02      	cmp	r3, #2
 800c854:	d123      	bne.n	800c89e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	08da      	lsrs	r2, r3, #3
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	3208      	adds	r2, #8
 800c85e:	0092      	lsls	r2, r2, #2
 800c860:	58d3      	ldr	r3, [r2, r3]
 800c862:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	2207      	movs	r2, #7
 800c868:	4013      	ands	r3, r2
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	220f      	movs	r2, #15
 800c86e:	409a      	lsls	r2, r3
 800c870:	0013      	movs	r3, r2
 800c872:	43da      	mvns	r2, r3
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	4013      	ands	r3, r2
 800c878:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	691a      	ldr	r2, [r3, #16]
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	2107      	movs	r1, #7
 800c882:	400b      	ands	r3, r1
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	409a      	lsls	r2, r3
 800c888:	0013      	movs	r3, r2
 800c88a:	693a      	ldr	r2, [r7, #16]
 800c88c:	4313      	orrs	r3, r2
 800c88e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	08da      	lsrs	r2, r3, #3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	3208      	adds	r2, #8
 800c898:	0092      	lsls	r2, r2, #2
 800c89a:	6939      	ldr	r1, [r7, #16]
 800c89c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	005b      	lsls	r3, r3, #1
 800c8a8:	2203      	movs	r2, #3
 800c8aa:	409a      	lsls	r2, r3
 800c8ac:	0013      	movs	r3, r2
 800c8ae:	43da      	mvns	r2, r3
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	4013      	ands	r3, r2
 800c8b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	2203      	movs	r2, #3
 800c8bc:	401a      	ands	r2, r3
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	005b      	lsls	r3, r3, #1
 800c8c2:	409a      	lsls	r2, r3
 800c8c4:	0013      	movs	r3, r2
 800c8c6:	693a      	ldr	r2, [r7, #16]
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	685a      	ldr	r2, [r3, #4]
 800c8d6:	23c0      	movs	r3, #192	@ 0xc0
 800c8d8:	029b      	lsls	r3, r3, #10
 800c8da:	4013      	ands	r3, r2
 800c8dc:	d100      	bne.n	800c8e0 <HAL_GPIO_Init+0x17c>
 800c8de:	e0a0      	b.n	800ca22 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c8e0:	4b57      	ldr	r3, [pc, #348]	@ (800ca40 <HAL_GPIO_Init+0x2dc>)
 800c8e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8e4:	4b56      	ldr	r3, [pc, #344]	@ (800ca40 <HAL_GPIO_Init+0x2dc>)
 800c8e6:	2101      	movs	r1, #1
 800c8e8:	430a      	orrs	r2, r1
 800c8ea:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800c8ec:	4a55      	ldr	r2, [pc, #340]	@ (800ca44 <HAL_GPIO_Init+0x2e0>)
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	089b      	lsrs	r3, r3, #2
 800c8f2:	3302      	adds	r3, #2
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	589b      	ldr	r3, [r3, r2]
 800c8f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	2203      	movs	r2, #3
 800c8fe:	4013      	ands	r3, r2
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	220f      	movs	r2, #15
 800c904:	409a      	lsls	r2, r3
 800c906:	0013      	movs	r3, r2
 800c908:	43da      	mvns	r2, r3
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	4013      	ands	r3, r2
 800c90e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	23a0      	movs	r3, #160	@ 0xa0
 800c914:	05db      	lsls	r3, r3, #23
 800c916:	429a      	cmp	r2, r3
 800c918:	d01f      	beq.n	800c95a <HAL_GPIO_Init+0x1f6>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4a4a      	ldr	r2, [pc, #296]	@ (800ca48 <HAL_GPIO_Init+0x2e4>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d019      	beq.n	800c956 <HAL_GPIO_Init+0x1f2>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	4a49      	ldr	r2, [pc, #292]	@ (800ca4c <HAL_GPIO_Init+0x2e8>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d013      	beq.n	800c952 <HAL_GPIO_Init+0x1ee>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4a48      	ldr	r2, [pc, #288]	@ (800ca50 <HAL_GPIO_Init+0x2ec>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d00d      	beq.n	800c94e <HAL_GPIO_Init+0x1ea>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4a47      	ldr	r2, [pc, #284]	@ (800ca54 <HAL_GPIO_Init+0x2f0>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d007      	beq.n	800c94a <HAL_GPIO_Init+0x1e6>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4a46      	ldr	r2, [pc, #280]	@ (800ca58 <HAL_GPIO_Init+0x2f4>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d101      	bne.n	800c946 <HAL_GPIO_Init+0x1e2>
 800c942:	2305      	movs	r3, #5
 800c944:	e00a      	b.n	800c95c <HAL_GPIO_Init+0x1f8>
 800c946:	2306      	movs	r3, #6
 800c948:	e008      	b.n	800c95c <HAL_GPIO_Init+0x1f8>
 800c94a:	2304      	movs	r3, #4
 800c94c:	e006      	b.n	800c95c <HAL_GPIO_Init+0x1f8>
 800c94e:	2303      	movs	r3, #3
 800c950:	e004      	b.n	800c95c <HAL_GPIO_Init+0x1f8>
 800c952:	2302      	movs	r3, #2
 800c954:	e002      	b.n	800c95c <HAL_GPIO_Init+0x1f8>
 800c956:	2301      	movs	r3, #1
 800c958:	e000      	b.n	800c95c <HAL_GPIO_Init+0x1f8>
 800c95a:	2300      	movs	r3, #0
 800c95c:	697a      	ldr	r2, [r7, #20]
 800c95e:	2103      	movs	r1, #3
 800c960:	400a      	ands	r2, r1
 800c962:	0092      	lsls	r2, r2, #2
 800c964:	4093      	lsls	r3, r2
 800c966:	693a      	ldr	r2, [r7, #16]
 800c968:	4313      	orrs	r3, r2
 800c96a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c96c:	4935      	ldr	r1, [pc, #212]	@ (800ca44 <HAL_GPIO_Init+0x2e0>)
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	089b      	lsrs	r3, r3, #2
 800c972:	3302      	adds	r3, #2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c97a:	4b38      	ldr	r3, [pc, #224]	@ (800ca5c <HAL_GPIO_Init+0x2f8>)
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	43da      	mvns	r2, r3
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	4013      	ands	r3, r2
 800c988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	685a      	ldr	r2, [r3, #4]
 800c98e:	2380      	movs	r3, #128	@ 0x80
 800c990:	035b      	lsls	r3, r3, #13
 800c992:	4013      	ands	r3, r2
 800c994:	d003      	beq.n	800c99e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800c996:	693a      	ldr	r2, [r7, #16]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800c99e:	4b2f      	ldr	r3, [pc, #188]	@ (800ca5c <HAL_GPIO_Init+0x2f8>)
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800c9a4:	4b2d      	ldr	r3, [pc, #180]	@ (800ca5c <HAL_GPIO_Init+0x2f8>)
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	43da      	mvns	r2, r3
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	4013      	ands	r3, r2
 800c9b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	685a      	ldr	r2, [r3, #4]
 800c9b8:	2380      	movs	r3, #128	@ 0x80
 800c9ba:	039b      	lsls	r3, r3, #14
 800c9bc:	4013      	ands	r3, r2
 800c9be:	d003      	beq.n	800c9c8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800c9c8:	4b24      	ldr	r3, [pc, #144]	@ (800ca5c <HAL_GPIO_Init+0x2f8>)
 800c9ca:	693a      	ldr	r2, [r7, #16]
 800c9cc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800c9ce:	4b23      	ldr	r3, [pc, #140]	@ (800ca5c <HAL_GPIO_Init+0x2f8>)
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	43da      	mvns	r2, r3
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	4013      	ands	r3, r2
 800c9dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	685a      	ldr	r2, [r3, #4]
 800c9e2:	2380      	movs	r3, #128	@ 0x80
 800c9e4:	029b      	lsls	r3, r3, #10
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	d003      	beq.n	800c9f2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800c9ea:	693a      	ldr	r2, [r7, #16]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800c9f2:	4b1a      	ldr	r3, [pc, #104]	@ (800ca5c <HAL_GPIO_Init+0x2f8>)
 800c9f4:	693a      	ldr	r2, [r7, #16]
 800c9f6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c9f8:	4b18      	ldr	r3, [pc, #96]	@ (800ca5c <HAL_GPIO_Init+0x2f8>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	43da      	mvns	r2, r3
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	4013      	ands	r3, r2
 800ca06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	2380      	movs	r3, #128	@ 0x80
 800ca0e:	025b      	lsls	r3, r3, #9
 800ca10:	4013      	ands	r3, r2
 800ca12:	d003      	beq.n	800ca1c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800ca14:	693a      	ldr	r2, [r7, #16]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800ca1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ca5c <HAL_GPIO_Init+0x2f8>)
 800ca1e:	693a      	ldr	r2, [r7, #16]
 800ca20:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	3301      	adds	r3, #1
 800ca26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	40da      	lsrs	r2, r3
 800ca30:	1e13      	subs	r3, r2, #0
 800ca32:	d000      	beq.n	800ca36 <HAL_GPIO_Init+0x2d2>
 800ca34:	e6a2      	b.n	800c77c <HAL_GPIO_Init+0x18>
  }
}
 800ca36:	46c0      	nop			@ (mov r8, r8)
 800ca38:	46c0      	nop			@ (mov r8, r8)
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	b006      	add	sp, #24
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	40021000 	.word	0x40021000
 800ca44:	40010000 	.word	0x40010000
 800ca48:	50000400 	.word	0x50000400
 800ca4c:	50000800 	.word	0x50000800
 800ca50:	50000c00 	.word	0x50000c00
 800ca54:	50001000 	.word	0x50001000
 800ca58:	50001c00 	.word	0x50001c00
 800ca5c:	40010400 	.word	0x40010400

0800ca60 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800ca72:	2300      	movs	r3, #0
 800ca74:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800ca76:	e0bc      	b.n	800cbf2 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800ca78:	2201      	movs	r2, #1
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	409a      	lsls	r2, r3
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	4013      	ands	r3, r2
 800ca82:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d100      	bne.n	800ca8c <HAL_GPIO_DeInit+0x2c>
 800ca8a:	e0af      	b.n	800cbec <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800ca8c:	4a5e      	ldr	r2, [pc, #376]	@ (800cc08 <HAL_GPIO_DeInit+0x1a8>)
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	089b      	lsrs	r3, r3, #2
 800ca92:	3302      	adds	r3, #2
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	589b      	ldr	r3, [r3, r2]
 800ca98:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2203      	movs	r2, #3
 800ca9e:	4013      	ands	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	220f      	movs	r2, #15
 800caa4:	409a      	lsls	r2, r3
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	4013      	ands	r3, r2
 800caaa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	23a0      	movs	r3, #160	@ 0xa0
 800cab0:	05db      	lsls	r3, r3, #23
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d01f      	beq.n	800caf6 <HAL_GPIO_DeInit+0x96>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a54      	ldr	r2, [pc, #336]	@ (800cc0c <HAL_GPIO_DeInit+0x1ac>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d019      	beq.n	800caf2 <HAL_GPIO_DeInit+0x92>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4a53      	ldr	r2, [pc, #332]	@ (800cc10 <HAL_GPIO_DeInit+0x1b0>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d013      	beq.n	800caee <HAL_GPIO_DeInit+0x8e>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4a52      	ldr	r2, [pc, #328]	@ (800cc14 <HAL_GPIO_DeInit+0x1b4>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d00d      	beq.n	800caea <HAL_GPIO_DeInit+0x8a>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a51      	ldr	r2, [pc, #324]	@ (800cc18 <HAL_GPIO_DeInit+0x1b8>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d007      	beq.n	800cae6 <HAL_GPIO_DeInit+0x86>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a50      	ldr	r2, [pc, #320]	@ (800cc1c <HAL_GPIO_DeInit+0x1bc>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d101      	bne.n	800cae2 <HAL_GPIO_DeInit+0x82>
 800cade:	2305      	movs	r3, #5
 800cae0:	e00a      	b.n	800caf8 <HAL_GPIO_DeInit+0x98>
 800cae2:	2306      	movs	r3, #6
 800cae4:	e008      	b.n	800caf8 <HAL_GPIO_DeInit+0x98>
 800cae6:	2304      	movs	r3, #4
 800cae8:	e006      	b.n	800caf8 <HAL_GPIO_DeInit+0x98>
 800caea:	2303      	movs	r3, #3
 800caec:	e004      	b.n	800caf8 <HAL_GPIO_DeInit+0x98>
 800caee:	2302      	movs	r3, #2
 800caf0:	e002      	b.n	800caf8 <HAL_GPIO_DeInit+0x98>
 800caf2:	2301      	movs	r3, #1
 800caf4:	e000      	b.n	800caf8 <HAL_GPIO_DeInit+0x98>
 800caf6:	2300      	movs	r3, #0
 800caf8:	697a      	ldr	r2, [r7, #20]
 800cafa:	2103      	movs	r1, #3
 800cafc:	400a      	ands	r2, r1
 800cafe:	0092      	lsls	r2, r2, #2
 800cb00:	4093      	lsls	r3, r2
 800cb02:	68fa      	ldr	r2, [r7, #12]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d132      	bne.n	800cb6e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800cb08:	4b45      	ldr	r3, [pc, #276]	@ (800cc20 <HAL_GPIO_DeInit+0x1c0>)
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	43d9      	mvns	r1, r3
 800cb10:	4b43      	ldr	r3, [pc, #268]	@ (800cc20 <HAL_GPIO_DeInit+0x1c0>)
 800cb12:	400a      	ands	r2, r1
 800cb14:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800cb16:	4b42      	ldr	r3, [pc, #264]	@ (800cc20 <HAL_GPIO_DeInit+0x1c0>)
 800cb18:	685a      	ldr	r2, [r3, #4]
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	43d9      	mvns	r1, r3
 800cb1e:	4b40      	ldr	r3, [pc, #256]	@ (800cc20 <HAL_GPIO_DeInit+0x1c0>)
 800cb20:	400a      	ands	r2, r1
 800cb22:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800cb24:	4b3e      	ldr	r3, [pc, #248]	@ (800cc20 <HAL_GPIO_DeInit+0x1c0>)
 800cb26:	68da      	ldr	r2, [r3, #12]
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	43d9      	mvns	r1, r3
 800cb2c:	4b3c      	ldr	r3, [pc, #240]	@ (800cc20 <HAL_GPIO_DeInit+0x1c0>)
 800cb2e:	400a      	ands	r2, r1
 800cb30:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800cb32:	4b3b      	ldr	r3, [pc, #236]	@ (800cc20 <HAL_GPIO_DeInit+0x1c0>)
 800cb34:	689a      	ldr	r2, [r3, #8]
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	43d9      	mvns	r1, r3
 800cb3a:	4b39      	ldr	r3, [pc, #228]	@ (800cc20 <HAL_GPIO_DeInit+0x1c0>)
 800cb3c:	400a      	ands	r2, r1
 800cb3e:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	2203      	movs	r2, #3
 800cb44:	4013      	ands	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	220f      	movs	r2, #15
 800cb4a:	409a      	lsls	r2, r3
 800cb4c:	0013      	movs	r3, r2
 800cb4e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800cb50:	4a2d      	ldr	r2, [pc, #180]	@ (800cc08 <HAL_GPIO_DeInit+0x1a8>)
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	089b      	lsrs	r3, r3, #2
 800cb56:	3302      	adds	r3, #2
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	589a      	ldr	r2, [r3, r2]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	43d9      	mvns	r1, r3
 800cb60:	4829      	ldr	r0, [pc, #164]	@ (800cc08 <HAL_GPIO_DeInit+0x1a8>)
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	089b      	lsrs	r3, r3, #2
 800cb66:	400a      	ands	r2, r1
 800cb68:	3302      	adds	r3, #2
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	005b      	lsls	r3, r3, #1
 800cb76:	2103      	movs	r1, #3
 800cb78:	4099      	lsls	r1, r3
 800cb7a:	000b      	movs	r3, r1
 800cb7c:	431a      	orrs	r2, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	08da      	lsrs	r2, r3, #3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	3208      	adds	r2, #8
 800cb8a:	0092      	lsls	r2, r2, #2
 800cb8c:	58d3      	ldr	r3, [r2, r3]
 800cb8e:	697a      	ldr	r2, [r7, #20]
 800cb90:	2107      	movs	r1, #7
 800cb92:	400a      	ands	r2, r1
 800cb94:	0092      	lsls	r2, r2, #2
 800cb96:	210f      	movs	r1, #15
 800cb98:	4091      	lsls	r1, r2
 800cb9a:	000a      	movs	r2, r1
 800cb9c:	43d1      	mvns	r1, r2
 800cb9e:	697a      	ldr	r2, [r7, #20]
 800cba0:	08d2      	lsrs	r2, r2, #3
 800cba2:	4019      	ands	r1, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	3208      	adds	r2, #8
 800cba8:	0092      	lsls	r2, r2, #2
 800cbaa:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	0052      	lsls	r2, r2, #1
 800cbb4:	2103      	movs	r1, #3
 800cbb6:	4091      	lsls	r1, r2
 800cbb8:	000a      	movs	r2, r1
 800cbba:	43d2      	mvns	r2, r2
 800cbbc:	401a      	ands	r2, r3
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	2101      	movs	r1, #1
 800cbc8:	697a      	ldr	r2, [r7, #20]
 800cbca:	4091      	lsls	r1, r2
 800cbcc:	000a      	movs	r2, r1
 800cbce:	43d2      	mvns	r2, r2
 800cbd0:	401a      	ands	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	697a      	ldr	r2, [r7, #20]
 800cbdc:	0052      	lsls	r2, r2, #1
 800cbde:	2103      	movs	r1, #3
 800cbe0:	4091      	lsls	r1, r2
 800cbe2:	000a      	movs	r2, r1
 800cbe4:	43d2      	mvns	r2, r2
 800cbe6:	401a      	ands	r2, r3
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	609a      	str	r2, [r3, #8]
    }
    position++;
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	3301      	adds	r3, #1
 800cbf0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800cbf2:	683a      	ldr	r2, [r7, #0]
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	40da      	lsrs	r2, r3
 800cbf8:	1e13      	subs	r3, r2, #0
 800cbfa:	d000      	beq.n	800cbfe <HAL_GPIO_DeInit+0x19e>
 800cbfc:	e73c      	b.n	800ca78 <HAL_GPIO_DeInit+0x18>
  }
}
 800cbfe:	46c0      	nop			@ (mov r8, r8)
 800cc00:	46c0      	nop			@ (mov r8, r8)
 800cc02:	46bd      	mov	sp, r7
 800cc04:	b006      	add	sp, #24
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	40010000 	.word	0x40010000
 800cc0c:	50000400 	.word	0x50000400
 800cc10:	50000800 	.word	0x50000800
 800cc14:	50000c00 	.word	0x50000c00
 800cc18:	50001000 	.word	0x50001000
 800cc1c:	50001c00 	.word	0x50001c00
 800cc20:	40010400 	.word	0x40010400

0800cc24 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	000a      	movs	r2, r1
 800cc2e:	1cbb      	adds	r3, r7, #2
 800cc30:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	1cba      	adds	r2, r7, #2
 800cc38:	8812      	ldrh	r2, [r2, #0]
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	d004      	beq.n	800cc48 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800cc3e:	230f      	movs	r3, #15
 800cc40:	18fb      	adds	r3, r7, r3
 800cc42:	2201      	movs	r2, #1
 800cc44:	701a      	strb	r2, [r3, #0]
 800cc46:	e003      	b.n	800cc50 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cc48:	230f      	movs	r3, #15
 800cc4a:	18fb      	adds	r3, r7, r3
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800cc50:	230f      	movs	r3, #15
 800cc52:	18fb      	adds	r3, r7, r3
 800cc54:	781b      	ldrb	r3, [r3, #0]
}
 800cc56:	0018      	movs	r0, r3
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	b004      	add	sp, #16
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b082      	sub	sp, #8
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
 800cc66:	0008      	movs	r0, r1
 800cc68:	0011      	movs	r1, r2
 800cc6a:	1cbb      	adds	r3, r7, #2
 800cc6c:	1c02      	adds	r2, r0, #0
 800cc6e:	801a      	strh	r2, [r3, #0]
 800cc70:	1c7b      	adds	r3, r7, #1
 800cc72:	1c0a      	adds	r2, r1, #0
 800cc74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cc76:	1c7b      	adds	r3, r7, #1
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d004      	beq.n	800cc88 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cc7e:	1cbb      	adds	r3, r7, #2
 800cc80:	881a      	ldrh	r2, [r3, #0]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800cc86:	e003      	b.n	800cc90 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800cc88:	1cbb      	adds	r3, r7, #2
 800cc8a:	881a      	ldrh	r2, [r3, #0]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800cc90:	46c0      	nop			@ (mov r8, r8)
 800cc92:	46bd      	mov	sp, r7
 800cc94:	b002      	add	sp, #8
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	0002      	movs	r2, r0
 800cca0:	1dbb      	adds	r3, r7, #6
 800cca2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800cca4:	4b09      	ldr	r3, [pc, #36]	@ (800cccc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800cca6:	695b      	ldr	r3, [r3, #20]
 800cca8:	1dba      	adds	r2, r7, #6
 800ccaa:	8812      	ldrh	r2, [r2, #0]
 800ccac:	4013      	ands	r3, r2
 800ccae:	d008      	beq.n	800ccc2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ccb0:	4b06      	ldr	r3, [pc, #24]	@ (800cccc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800ccb2:	1dba      	adds	r2, r7, #6
 800ccb4:	8812      	ldrh	r2, [r2, #0]
 800ccb6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ccb8:	1dbb      	adds	r3, r7, #6
 800ccba:	881b      	ldrh	r3, [r3, #0]
 800ccbc:	0018      	movs	r0, r3
 800ccbe:	f000 f807 	bl	800ccd0 <HAL_GPIO_EXTI_Callback>
  }
}
 800ccc2:	46c0      	nop			@ (mov r8, r8)
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	b002      	add	sp, #8
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	46c0      	nop			@ (mov r8, r8)
 800cccc:	40010400 	.word	0x40010400

0800ccd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	0002      	movs	r2, r0
 800ccd8:	1dbb      	adds	r3, r7, #6
 800ccda:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800ccdc:	46c0      	nop			@ (mov r8, r8)
 800ccde:	46bd      	mov	sp, r7
 800cce0:	b002      	add	sp, #8
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d101      	bne.n	800ccf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e082      	b.n	800cdfc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2241      	movs	r2, #65	@ 0x41
 800ccfa:	5c9b      	ldrb	r3, [r3, r2]
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d107      	bne.n	800cd12 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2240      	movs	r2, #64	@ 0x40
 800cd06:	2100      	movs	r1, #0
 800cd08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	0018      	movs	r0, r3
 800cd0e:	f000 f8af 	bl	800ce70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2241      	movs	r2, #65	@ 0x41
 800cd16:	2124      	movs	r1, #36	@ 0x24
 800cd18:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	681a      	ldr	r2, [r3, #0]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2101      	movs	r1, #1
 800cd26:	438a      	bics	r2, r1
 800cd28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	685a      	ldr	r2, [r3, #4]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4934      	ldr	r1, [pc, #208]	@ (800ce04 <HAL_I2C_Init+0x120>)
 800cd34:	400a      	ands	r2, r1
 800cd36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	689a      	ldr	r2, [r3, #8]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4931      	ldr	r1, [pc, #196]	@ (800ce08 <HAL_I2C_Init+0x124>)
 800cd44:	400a      	ands	r2, r1
 800cd46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	68db      	ldr	r3, [r3, #12]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d108      	bne.n	800cd62 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	689a      	ldr	r2, [r3, #8]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2180      	movs	r1, #128	@ 0x80
 800cd5a:	0209      	lsls	r1, r1, #8
 800cd5c:	430a      	orrs	r2, r1
 800cd5e:	609a      	str	r2, [r3, #8]
 800cd60:	e007      	b.n	800cd72 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	689a      	ldr	r2, [r3, #8]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2184      	movs	r1, #132	@ 0x84
 800cd6c:	0209      	lsls	r1, r1, #8
 800cd6e:	430a      	orrs	r2, r1
 800cd70:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d104      	bne.n	800cd84 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2280      	movs	r2, #128	@ 0x80
 800cd80:	0112      	lsls	r2, r2, #4
 800cd82:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	685a      	ldr	r2, [r3, #4]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	491f      	ldr	r1, [pc, #124]	@ (800ce0c <HAL_I2C_Init+0x128>)
 800cd90:	430a      	orrs	r2, r1
 800cd92:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68da      	ldr	r2, [r3, #12]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	491a      	ldr	r1, [pc, #104]	@ (800ce08 <HAL_I2C_Init+0x124>)
 800cda0:	400a      	ands	r2, r1
 800cda2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	691a      	ldr	r2, [r3, #16]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	695b      	ldr	r3, [r3, #20]
 800cdac:	431a      	orrs	r2, r3
 800cdae:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	699b      	ldr	r3, [r3, #24]
 800cdb4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	430a      	orrs	r2, r1
 800cdbc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	69d9      	ldr	r1, [r3, #28]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a1a      	ldr	r2, [r3, #32]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	430a      	orrs	r2, r1
 800cdcc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2101      	movs	r1, #1
 800cdda:	430a      	orrs	r2, r1
 800cddc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2200      	movs	r2, #0
 800cde2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2241      	movs	r2, #65	@ 0x41
 800cde8:	2120      	movs	r1, #32
 800cdea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2242      	movs	r2, #66	@ 0x42
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cdfa:	2300      	movs	r3, #0
}
 800cdfc:	0018      	movs	r0, r3
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	b002      	add	sp, #8
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	f0ffffff 	.word	0xf0ffffff
 800ce08:	ffff7fff 	.word	0xffff7fff
 800ce0c:	02008000 	.word	0x02008000

0800ce10 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d101      	bne.n	800ce22 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e022      	b.n	800ce68 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2241      	movs	r2, #65	@ 0x41
 800ce26:	2124      	movs	r1, #36	@ 0x24
 800ce28:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	2101      	movs	r1, #1
 800ce36:	438a      	bics	r2, r1
 800ce38:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	0018      	movs	r0, r3
 800ce3e:	f000 f81f 	bl	800ce80 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2241      	movs	r2, #65	@ 0x41
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2242      	movs	r2, #66	@ 0x42
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2240      	movs	r2, #64	@ 0x40
 800ce62:	2100      	movs	r1, #0
 800ce64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	0018      	movs	r0, r3
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	b002      	add	sp, #8
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800ce78:	46c0      	nop			@ (mov r8, r8)
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	b002      	add	sp, #8
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800ce88:	46c0      	nop			@ (mov r8, r8)
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	b002      	add	sp, #8
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce90:	b590      	push	{r4, r7, lr}
 800ce92:	b089      	sub	sp, #36	@ 0x24
 800ce94:	af02      	add	r7, sp, #8
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	000c      	movs	r4, r1
 800ce9a:	0010      	movs	r0, r2
 800ce9c:	0019      	movs	r1, r3
 800ce9e:	230a      	movs	r3, #10
 800cea0:	18fb      	adds	r3, r7, r3
 800cea2:	1c22      	adds	r2, r4, #0
 800cea4:	801a      	strh	r2, [r3, #0]
 800cea6:	2308      	movs	r3, #8
 800cea8:	18fb      	adds	r3, r7, r3
 800ceaa:	1c02      	adds	r2, r0, #0
 800ceac:	801a      	strh	r2, [r3, #0]
 800ceae:	1dbb      	adds	r3, r7, #6
 800ceb0:	1c0a      	adds	r2, r1, #0
 800ceb2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2241      	movs	r2, #65	@ 0x41
 800ceb8:	5c9b      	ldrb	r3, [r3, r2]
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	2b20      	cmp	r3, #32
 800cebe:	d000      	beq.n	800cec2 <HAL_I2C_Mem_Write+0x32>
 800cec0:	e10c      	b.n	800d0dc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d004      	beq.n	800ced2 <HAL_I2C_Mem_Write+0x42>
 800cec8:	232c      	movs	r3, #44	@ 0x2c
 800ceca:	18fb      	adds	r3, r7, r3
 800cecc:	881b      	ldrh	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d105      	bne.n	800cede <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2280      	movs	r2, #128	@ 0x80
 800ced6:	0092      	lsls	r2, r2, #2
 800ced8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ceda:	2301      	movs	r3, #1
 800cedc:	e0ff      	b.n	800d0de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2240      	movs	r2, #64	@ 0x40
 800cee2:	5c9b      	ldrb	r3, [r3, r2]
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d101      	bne.n	800ceec <HAL_I2C_Mem_Write+0x5c>
 800cee8:	2302      	movs	r3, #2
 800ceea:	e0f8      	b.n	800d0de <HAL_I2C_Mem_Write+0x24e>
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2240      	movs	r2, #64	@ 0x40
 800cef0:	2101      	movs	r1, #1
 800cef2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cef4:	f7fe fd92 	bl	800ba1c <HAL_GetTick>
 800cef8:	0003      	movs	r3, r0
 800cefa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cefc:	2380      	movs	r3, #128	@ 0x80
 800cefe:	0219      	lsls	r1, r3, #8
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	2319      	movs	r3, #25
 800cf08:	2201      	movs	r2, #1
 800cf0a:	f000 fb21 	bl	800d550 <I2C_WaitOnFlagUntilTimeout>
 800cf0e:	1e03      	subs	r3, r0, #0
 800cf10:	d001      	beq.n	800cf16 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	e0e3      	b.n	800d0de <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2241      	movs	r2, #65	@ 0x41
 800cf1a:	2121      	movs	r1, #33	@ 0x21
 800cf1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2242      	movs	r2, #66	@ 0x42
 800cf22:	2140      	movs	r1, #64	@ 0x40
 800cf24:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	222c      	movs	r2, #44	@ 0x2c
 800cf36:	18ba      	adds	r2, r7, r2
 800cf38:	8812      	ldrh	r2, [r2, #0]
 800cf3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cf42:	1dbb      	adds	r3, r7, #6
 800cf44:	881c      	ldrh	r4, [r3, #0]
 800cf46:	2308      	movs	r3, #8
 800cf48:	18fb      	adds	r3, r7, r3
 800cf4a:	881a      	ldrh	r2, [r3, #0]
 800cf4c:	230a      	movs	r3, #10
 800cf4e:	18fb      	adds	r3, r7, r3
 800cf50:	8819      	ldrh	r1, [r3, #0]
 800cf52:	68f8      	ldr	r0, [r7, #12]
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	9301      	str	r3, [sp, #4]
 800cf58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	0023      	movs	r3, r4
 800cf5e:	f000 fa0f 	bl	800d380 <I2C_RequestMemoryWrite>
 800cf62:	1e03      	subs	r3, r0, #0
 800cf64:	d005      	beq.n	800cf72 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2240      	movs	r2, #64	@ 0x40
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e0b5      	b.n	800d0de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	2bff      	cmp	r3, #255	@ 0xff
 800cf7a:	d911      	bls.n	800cfa0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	22ff      	movs	r2, #255	@ 0xff
 800cf80:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf86:	b2da      	uxtb	r2, r3
 800cf88:	2380      	movs	r3, #128	@ 0x80
 800cf8a:	045c      	lsls	r4, r3, #17
 800cf8c:	230a      	movs	r3, #10
 800cf8e:	18fb      	adds	r3, r7, r3
 800cf90:	8819      	ldrh	r1, [r3, #0]
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	2300      	movs	r3, #0
 800cf96:	9300      	str	r3, [sp, #0]
 800cf98:	0023      	movs	r3, r4
 800cf9a:	f000 fca9 	bl	800d8f0 <I2C_TransferConfig>
 800cf9e:	e012      	b.n	800cfc6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfa4:	b29a      	uxth	r2, r3
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	2380      	movs	r3, #128	@ 0x80
 800cfb2:	049c      	lsls	r4, r3, #18
 800cfb4:	230a      	movs	r3, #10
 800cfb6:	18fb      	adds	r3, r7, r3
 800cfb8:	8819      	ldrh	r1, [r3, #0]
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	9300      	str	r3, [sp, #0]
 800cfc0:	0023      	movs	r3, r4
 800cfc2:	f000 fc95 	bl	800d8f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cfc6:	697a      	ldr	r2, [r7, #20]
 800cfc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	0018      	movs	r0, r3
 800cfce:	f000 fb0d 	bl	800d5ec <I2C_WaitOnTXISFlagUntilTimeout>
 800cfd2:	1e03      	subs	r3, r0, #0
 800cfd4:	d001      	beq.n	800cfda <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e081      	b.n	800d0de <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfde:	781a      	ldrb	r2, [r3, #0]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfea:	1c5a      	adds	r2, r3, #1
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	3b01      	subs	r3, #1
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d002:	3b01      	subs	r3, #1
 800d004:	b29a      	uxth	r2, r3
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d00e:	b29b      	uxth	r3, r3
 800d010:	2b00      	cmp	r3, #0
 800d012:	d03a      	beq.n	800d08a <HAL_I2C_Mem_Write+0x1fa>
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d136      	bne.n	800d08a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d01c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	9300      	str	r3, [sp, #0]
 800d024:	0013      	movs	r3, r2
 800d026:	2200      	movs	r2, #0
 800d028:	2180      	movs	r1, #128	@ 0x80
 800d02a:	f000 fa91 	bl	800d550 <I2C_WaitOnFlagUntilTimeout>
 800d02e:	1e03      	subs	r3, r0, #0
 800d030:	d001      	beq.n	800d036 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	e053      	b.n	800d0de <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	2bff      	cmp	r3, #255	@ 0xff
 800d03e:	d911      	bls.n	800d064 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	22ff      	movs	r2, #255	@ 0xff
 800d044:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d04a:	b2da      	uxtb	r2, r3
 800d04c:	2380      	movs	r3, #128	@ 0x80
 800d04e:	045c      	lsls	r4, r3, #17
 800d050:	230a      	movs	r3, #10
 800d052:	18fb      	adds	r3, r7, r3
 800d054:	8819      	ldrh	r1, [r3, #0]
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	2300      	movs	r3, #0
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	0023      	movs	r3, r4
 800d05e:	f000 fc47 	bl	800d8f0 <I2C_TransferConfig>
 800d062:	e012      	b.n	800d08a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d068:	b29a      	uxth	r2, r3
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d072:	b2da      	uxtb	r2, r3
 800d074:	2380      	movs	r3, #128	@ 0x80
 800d076:	049c      	lsls	r4, r3, #18
 800d078:	230a      	movs	r3, #10
 800d07a:	18fb      	adds	r3, r7, r3
 800d07c:	8819      	ldrh	r1, [r3, #0]
 800d07e:	68f8      	ldr	r0, [r7, #12]
 800d080:	2300      	movs	r3, #0
 800d082:	9300      	str	r3, [sp, #0]
 800d084:	0023      	movs	r3, r4
 800d086:	f000 fc33 	bl	800d8f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d08e:	b29b      	uxth	r3, r3
 800d090:	2b00      	cmp	r3, #0
 800d092:	d198      	bne.n	800cfc6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	0018      	movs	r0, r3
 800d09c:	f000 faec 	bl	800d678 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d0a0:	1e03      	subs	r3, r0, #0
 800d0a2:	d001      	beq.n	800d0a8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e01a      	b.n	800d0de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2220      	movs	r2, #32
 800d0ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	685a      	ldr	r2, [r3, #4]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	490b      	ldr	r1, [pc, #44]	@ (800d0e8 <HAL_I2C_Mem_Write+0x258>)
 800d0bc:	400a      	ands	r2, r1
 800d0be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2241      	movs	r2, #65	@ 0x41
 800d0c4:	2120      	movs	r1, #32
 800d0c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2242      	movs	r2, #66	@ 0x42
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2240      	movs	r2, #64	@ 0x40
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	e000      	b.n	800d0de <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800d0dc:	2302      	movs	r3, #2
  }
}
 800d0de:	0018      	movs	r0, r3
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	b007      	add	sp, #28
 800d0e4:	bd90      	pop	{r4, r7, pc}
 800d0e6:	46c0      	nop			@ (mov r8, r8)
 800d0e8:	fe00e800 	.word	0xfe00e800

0800d0ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0ec:	b590      	push	{r4, r7, lr}
 800d0ee:	b089      	sub	sp, #36	@ 0x24
 800d0f0:	af02      	add	r7, sp, #8
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	000c      	movs	r4, r1
 800d0f6:	0010      	movs	r0, r2
 800d0f8:	0019      	movs	r1, r3
 800d0fa:	230a      	movs	r3, #10
 800d0fc:	18fb      	adds	r3, r7, r3
 800d0fe:	1c22      	adds	r2, r4, #0
 800d100:	801a      	strh	r2, [r3, #0]
 800d102:	2308      	movs	r3, #8
 800d104:	18fb      	adds	r3, r7, r3
 800d106:	1c02      	adds	r2, r0, #0
 800d108:	801a      	strh	r2, [r3, #0]
 800d10a:	1dbb      	adds	r3, r7, #6
 800d10c:	1c0a      	adds	r2, r1, #0
 800d10e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2241      	movs	r2, #65	@ 0x41
 800d114:	5c9b      	ldrb	r3, [r3, r2]
 800d116:	b2db      	uxtb	r3, r3
 800d118:	2b20      	cmp	r3, #32
 800d11a:	d000      	beq.n	800d11e <HAL_I2C_Mem_Read+0x32>
 800d11c:	e110      	b.n	800d340 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800d11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d120:	2b00      	cmp	r3, #0
 800d122:	d004      	beq.n	800d12e <HAL_I2C_Mem_Read+0x42>
 800d124:	232c      	movs	r3, #44	@ 0x2c
 800d126:	18fb      	adds	r3, r7, r3
 800d128:	881b      	ldrh	r3, [r3, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d105      	bne.n	800d13a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2280      	movs	r2, #128	@ 0x80
 800d132:	0092      	lsls	r2, r2, #2
 800d134:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800d136:	2301      	movs	r3, #1
 800d138:	e103      	b.n	800d342 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2240      	movs	r2, #64	@ 0x40
 800d13e:	5c9b      	ldrb	r3, [r3, r2]
 800d140:	2b01      	cmp	r3, #1
 800d142:	d101      	bne.n	800d148 <HAL_I2C_Mem_Read+0x5c>
 800d144:	2302      	movs	r3, #2
 800d146:	e0fc      	b.n	800d342 <HAL_I2C_Mem_Read+0x256>
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2240      	movs	r2, #64	@ 0x40
 800d14c:	2101      	movs	r1, #1
 800d14e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d150:	f7fe fc64 	bl	800ba1c <HAL_GetTick>
 800d154:	0003      	movs	r3, r0
 800d156:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d158:	2380      	movs	r3, #128	@ 0x80
 800d15a:	0219      	lsls	r1, r3, #8
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	9300      	str	r3, [sp, #0]
 800d162:	2319      	movs	r3, #25
 800d164:	2201      	movs	r2, #1
 800d166:	f000 f9f3 	bl	800d550 <I2C_WaitOnFlagUntilTimeout>
 800d16a:	1e03      	subs	r3, r0, #0
 800d16c:	d001      	beq.n	800d172 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800d16e:	2301      	movs	r3, #1
 800d170:	e0e7      	b.n	800d342 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2241      	movs	r2, #65	@ 0x41
 800d176:	2122      	movs	r1, #34	@ 0x22
 800d178:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2242      	movs	r2, #66	@ 0x42
 800d17e:	2140      	movs	r1, #64	@ 0x40
 800d180:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2200      	movs	r2, #0
 800d186:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d18c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	222c      	movs	r2, #44	@ 0x2c
 800d192:	18ba      	adds	r2, r7, r2
 800d194:	8812      	ldrh	r2, [r2, #0]
 800d196:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2200      	movs	r2, #0
 800d19c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d19e:	1dbb      	adds	r3, r7, #6
 800d1a0:	881c      	ldrh	r4, [r3, #0]
 800d1a2:	2308      	movs	r3, #8
 800d1a4:	18fb      	adds	r3, r7, r3
 800d1a6:	881a      	ldrh	r2, [r3, #0]
 800d1a8:	230a      	movs	r3, #10
 800d1aa:	18fb      	adds	r3, r7, r3
 800d1ac:	8819      	ldrh	r1, [r3, #0]
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	9301      	str	r3, [sp, #4]
 800d1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	0023      	movs	r3, r4
 800d1ba:	f000 f945 	bl	800d448 <I2C_RequestMemoryRead>
 800d1be:	1e03      	subs	r3, r0, #0
 800d1c0:	d005      	beq.n	800d1ce <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2240      	movs	r2, #64	@ 0x40
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e0b9      	b.n	800d342 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	2bff      	cmp	r3, #255	@ 0xff
 800d1d6:	d911      	bls.n	800d1fc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	22ff      	movs	r2, #255	@ 0xff
 800d1dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1e2:	b2da      	uxtb	r2, r3
 800d1e4:	2380      	movs	r3, #128	@ 0x80
 800d1e6:	045c      	lsls	r4, r3, #17
 800d1e8:	230a      	movs	r3, #10
 800d1ea:	18fb      	adds	r3, r7, r3
 800d1ec:	8819      	ldrh	r1, [r3, #0]
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	4b56      	ldr	r3, [pc, #344]	@ (800d34c <HAL_I2C_Mem_Read+0x260>)
 800d1f2:	9300      	str	r3, [sp, #0]
 800d1f4:	0023      	movs	r3, r4
 800d1f6:	f000 fb7b 	bl	800d8f0 <I2C_TransferConfig>
 800d1fa:	e012      	b.n	800d222 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d200:	b29a      	uxth	r2, r3
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	2380      	movs	r3, #128	@ 0x80
 800d20e:	049c      	lsls	r4, r3, #18
 800d210:	230a      	movs	r3, #10
 800d212:	18fb      	adds	r3, r7, r3
 800d214:	8819      	ldrh	r1, [r3, #0]
 800d216:	68f8      	ldr	r0, [r7, #12]
 800d218:	4b4c      	ldr	r3, [pc, #304]	@ (800d34c <HAL_I2C_Mem_Read+0x260>)
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	0023      	movs	r3, r4
 800d21e:	f000 fb67 	bl	800d8f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d224:	68f8      	ldr	r0, [r7, #12]
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	0013      	movs	r3, r2
 800d22c:	2200      	movs	r2, #0
 800d22e:	2104      	movs	r1, #4
 800d230:	f000 f98e 	bl	800d550 <I2C_WaitOnFlagUntilTimeout>
 800d234:	1e03      	subs	r3, r0, #0
 800d236:	d001      	beq.n	800d23c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	e082      	b.n	800d342 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d246:	b2d2      	uxtb	r2, r2
 800d248:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d24e:	1c5a      	adds	r2, r3, #1
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d258:	3b01      	subs	r3, #1
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d264:	b29b      	uxth	r3, r3
 800d266:	3b01      	subs	r3, #1
 800d268:	b29a      	uxth	r2, r3
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d272:	b29b      	uxth	r3, r3
 800d274:	2b00      	cmp	r3, #0
 800d276:	d03a      	beq.n	800d2ee <HAL_I2C_Mem_Read+0x202>
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d136      	bne.n	800d2ee <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d282:	68f8      	ldr	r0, [r7, #12]
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	9300      	str	r3, [sp, #0]
 800d288:	0013      	movs	r3, r2
 800d28a:	2200      	movs	r2, #0
 800d28c:	2180      	movs	r1, #128	@ 0x80
 800d28e:	f000 f95f 	bl	800d550 <I2C_WaitOnFlagUntilTimeout>
 800d292:	1e03      	subs	r3, r0, #0
 800d294:	d001      	beq.n	800d29a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	e053      	b.n	800d342 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	2bff      	cmp	r3, #255	@ 0xff
 800d2a2:	d911      	bls.n	800d2c8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	22ff      	movs	r2, #255	@ 0xff
 800d2a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2ae:	b2da      	uxtb	r2, r3
 800d2b0:	2380      	movs	r3, #128	@ 0x80
 800d2b2:	045c      	lsls	r4, r3, #17
 800d2b4:	230a      	movs	r3, #10
 800d2b6:	18fb      	adds	r3, r7, r3
 800d2b8:	8819      	ldrh	r1, [r3, #0]
 800d2ba:	68f8      	ldr	r0, [r7, #12]
 800d2bc:	2300      	movs	r3, #0
 800d2be:	9300      	str	r3, [sp, #0]
 800d2c0:	0023      	movs	r3, r4
 800d2c2:	f000 fb15 	bl	800d8f0 <I2C_TransferConfig>
 800d2c6:	e012      	b.n	800d2ee <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2d6:	b2da      	uxtb	r2, r3
 800d2d8:	2380      	movs	r3, #128	@ 0x80
 800d2da:	049c      	lsls	r4, r3, #18
 800d2dc:	230a      	movs	r3, #10
 800d2de:	18fb      	adds	r3, r7, r3
 800d2e0:	8819      	ldrh	r1, [r3, #0]
 800d2e2:	68f8      	ldr	r0, [r7, #12]
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	0023      	movs	r3, r4
 800d2ea:	f000 fb01 	bl	800d8f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d194      	bne.n	800d222 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2f8:	697a      	ldr	r2, [r7, #20]
 800d2fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	0018      	movs	r0, r3
 800d300:	f000 f9ba 	bl	800d678 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d304:	1e03      	subs	r3, r0, #0
 800d306:	d001      	beq.n	800d30c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800d308:	2301      	movs	r3, #1
 800d30a:	e01a      	b.n	800d342 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2220      	movs	r2, #32
 800d312:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	685a      	ldr	r2, [r3, #4]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	490c      	ldr	r1, [pc, #48]	@ (800d350 <HAL_I2C_Mem_Read+0x264>)
 800d320:	400a      	ands	r2, r1
 800d322:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2241      	movs	r2, #65	@ 0x41
 800d328:	2120      	movs	r1, #32
 800d32a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2242      	movs	r2, #66	@ 0x42
 800d330:	2100      	movs	r1, #0
 800d332:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2240      	movs	r2, #64	@ 0x40
 800d338:	2100      	movs	r1, #0
 800d33a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d33c:	2300      	movs	r3, #0
 800d33e:	e000      	b.n	800d342 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800d340:	2302      	movs	r3, #2
  }
}
 800d342:	0018      	movs	r0, r3
 800d344:	46bd      	mov	sp, r7
 800d346:	b007      	add	sp, #28
 800d348:	bd90      	pop	{r4, r7, pc}
 800d34a:	46c0      	nop			@ (mov r8, r8)
 800d34c:	80002400 	.word	0x80002400
 800d350:	fe00e800 	.word	0xfe00e800

0800d354 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2241      	movs	r2, #65	@ 0x41
 800d360:	5c9b      	ldrb	r3, [r3, r2]
 800d362:	b2db      	uxtb	r3, r3
}
 800d364:	0018      	movs	r0, r3
 800d366:	46bd      	mov	sp, r7
 800d368:	b002      	add	sp, #8
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800d378:	0018      	movs	r0, r3
 800d37a:	46bd      	mov	sp, r7
 800d37c:	b002      	add	sp, #8
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d380:	b5b0      	push	{r4, r5, r7, lr}
 800d382:	b086      	sub	sp, #24
 800d384:	af02      	add	r7, sp, #8
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	000c      	movs	r4, r1
 800d38a:	0010      	movs	r0, r2
 800d38c:	0019      	movs	r1, r3
 800d38e:	250a      	movs	r5, #10
 800d390:	197b      	adds	r3, r7, r5
 800d392:	1c22      	adds	r2, r4, #0
 800d394:	801a      	strh	r2, [r3, #0]
 800d396:	2308      	movs	r3, #8
 800d398:	18fb      	adds	r3, r7, r3
 800d39a:	1c02      	adds	r2, r0, #0
 800d39c:	801a      	strh	r2, [r3, #0]
 800d39e:	1dbb      	adds	r3, r7, #6
 800d3a0:	1c0a      	adds	r2, r1, #0
 800d3a2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d3a4:	1dbb      	adds	r3, r7, #6
 800d3a6:	881b      	ldrh	r3, [r3, #0]
 800d3a8:	b2da      	uxtb	r2, r3
 800d3aa:	2380      	movs	r3, #128	@ 0x80
 800d3ac:	045c      	lsls	r4, r3, #17
 800d3ae:	197b      	adds	r3, r7, r5
 800d3b0:	8819      	ldrh	r1, [r3, #0]
 800d3b2:	68f8      	ldr	r0, [r7, #12]
 800d3b4:	4b23      	ldr	r3, [pc, #140]	@ (800d444 <I2C_RequestMemoryWrite+0xc4>)
 800d3b6:	9300      	str	r3, [sp, #0]
 800d3b8:	0023      	movs	r3, r4
 800d3ba:	f000 fa99 	bl	800d8f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d3be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3c0:	6a39      	ldr	r1, [r7, #32]
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	0018      	movs	r0, r3
 800d3c6:	f000 f911 	bl	800d5ec <I2C_WaitOnTXISFlagUntilTimeout>
 800d3ca:	1e03      	subs	r3, r0, #0
 800d3cc:	d001      	beq.n	800d3d2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	e033      	b.n	800d43a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d3d2:	1dbb      	adds	r3, r7, #6
 800d3d4:	881b      	ldrh	r3, [r3, #0]
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d107      	bne.n	800d3ea <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d3da:	2308      	movs	r3, #8
 800d3dc:	18fb      	adds	r3, r7, r3
 800d3de:	881b      	ldrh	r3, [r3, #0]
 800d3e0:	b2da      	uxtb	r2, r3
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	629a      	str	r2, [r3, #40]	@ 0x28
 800d3e8:	e019      	b.n	800d41e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d3ea:	2308      	movs	r3, #8
 800d3ec:	18fb      	adds	r3, r7, r3
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	0a1b      	lsrs	r3, r3, #8
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d3fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3fe:	6a39      	ldr	r1, [r7, #32]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	0018      	movs	r0, r3
 800d404:	f000 f8f2 	bl	800d5ec <I2C_WaitOnTXISFlagUntilTimeout>
 800d408:	1e03      	subs	r3, r0, #0
 800d40a:	d001      	beq.n	800d410 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800d40c:	2301      	movs	r3, #1
 800d40e:	e014      	b.n	800d43a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d410:	2308      	movs	r3, #8
 800d412:	18fb      	adds	r3, r7, r3
 800d414:	881b      	ldrh	r3, [r3, #0]
 800d416:	b2da      	uxtb	r2, r3
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d41e:	6a3a      	ldr	r2, [r7, #32]
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d424:	9300      	str	r3, [sp, #0]
 800d426:	0013      	movs	r3, r2
 800d428:	2200      	movs	r2, #0
 800d42a:	2180      	movs	r1, #128	@ 0x80
 800d42c:	f000 f890 	bl	800d550 <I2C_WaitOnFlagUntilTimeout>
 800d430:	1e03      	subs	r3, r0, #0
 800d432:	d001      	beq.n	800d438 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800d434:	2301      	movs	r3, #1
 800d436:	e000      	b.n	800d43a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800d438:	2300      	movs	r3, #0
}
 800d43a:	0018      	movs	r0, r3
 800d43c:	46bd      	mov	sp, r7
 800d43e:	b004      	add	sp, #16
 800d440:	bdb0      	pop	{r4, r5, r7, pc}
 800d442:	46c0      	nop			@ (mov r8, r8)
 800d444:	80002000 	.word	0x80002000

0800d448 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d448:	b5b0      	push	{r4, r5, r7, lr}
 800d44a:	b086      	sub	sp, #24
 800d44c:	af02      	add	r7, sp, #8
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	000c      	movs	r4, r1
 800d452:	0010      	movs	r0, r2
 800d454:	0019      	movs	r1, r3
 800d456:	250a      	movs	r5, #10
 800d458:	197b      	adds	r3, r7, r5
 800d45a:	1c22      	adds	r2, r4, #0
 800d45c:	801a      	strh	r2, [r3, #0]
 800d45e:	2308      	movs	r3, #8
 800d460:	18fb      	adds	r3, r7, r3
 800d462:	1c02      	adds	r2, r0, #0
 800d464:	801a      	strh	r2, [r3, #0]
 800d466:	1dbb      	adds	r3, r7, #6
 800d468:	1c0a      	adds	r2, r1, #0
 800d46a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d46c:	1dbb      	adds	r3, r7, #6
 800d46e:	881b      	ldrh	r3, [r3, #0]
 800d470:	b2da      	uxtb	r2, r3
 800d472:	197b      	adds	r3, r7, r5
 800d474:	8819      	ldrh	r1, [r3, #0]
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	4b23      	ldr	r3, [pc, #140]	@ (800d508 <I2C_RequestMemoryRead+0xc0>)
 800d47a:	9300      	str	r3, [sp, #0]
 800d47c:	2300      	movs	r3, #0
 800d47e:	f000 fa37 	bl	800d8f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d484:	6a39      	ldr	r1, [r7, #32]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	0018      	movs	r0, r3
 800d48a:	f000 f8af 	bl	800d5ec <I2C_WaitOnTXISFlagUntilTimeout>
 800d48e:	1e03      	subs	r3, r0, #0
 800d490:	d001      	beq.n	800d496 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800d492:	2301      	movs	r3, #1
 800d494:	e033      	b.n	800d4fe <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d496:	1dbb      	adds	r3, r7, #6
 800d498:	881b      	ldrh	r3, [r3, #0]
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d107      	bne.n	800d4ae <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d49e:	2308      	movs	r3, #8
 800d4a0:	18fb      	adds	r3, r7, r3
 800d4a2:	881b      	ldrh	r3, [r3, #0]
 800d4a4:	b2da      	uxtb	r2, r3
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	629a      	str	r2, [r3, #40]	@ 0x28
 800d4ac:	e019      	b.n	800d4e2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d4ae:	2308      	movs	r3, #8
 800d4b0:	18fb      	adds	r3, r7, r3
 800d4b2:	881b      	ldrh	r3, [r3, #0]
 800d4b4:	0a1b      	lsrs	r3, r3, #8
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d4c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4c2:	6a39      	ldr	r1, [r7, #32]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	0018      	movs	r0, r3
 800d4c8:	f000 f890 	bl	800d5ec <I2C_WaitOnTXISFlagUntilTimeout>
 800d4cc:	1e03      	subs	r3, r0, #0
 800d4ce:	d001      	beq.n	800d4d4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e014      	b.n	800d4fe <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d4d4:	2308      	movs	r3, #8
 800d4d6:	18fb      	adds	r3, r7, r3
 800d4d8:	881b      	ldrh	r3, [r3, #0]
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d4e2:	6a3a      	ldr	r2, [r7, #32]
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e8:	9300      	str	r3, [sp, #0]
 800d4ea:	0013      	movs	r3, r2
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	2140      	movs	r1, #64	@ 0x40
 800d4f0:	f000 f82e 	bl	800d550 <I2C_WaitOnFlagUntilTimeout>
 800d4f4:	1e03      	subs	r3, r0, #0
 800d4f6:	d001      	beq.n	800d4fc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e000      	b.n	800d4fe <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800d4fc:	2300      	movs	r3, #0
}
 800d4fe:	0018      	movs	r0, r3
 800d500:	46bd      	mov	sp, r7
 800d502:	b004      	add	sp, #16
 800d504:	bdb0      	pop	{r4, r5, r7, pc}
 800d506:	46c0      	nop			@ (mov r8, r8)
 800d508:	80002000 	.word	0x80002000

0800d50c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	699b      	ldr	r3, [r3, #24]
 800d51a:	2202      	movs	r2, #2
 800d51c:	4013      	ands	r3, r2
 800d51e:	2b02      	cmp	r3, #2
 800d520:	d103      	bne.n	800d52a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2200      	movs	r2, #0
 800d528:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	699b      	ldr	r3, [r3, #24]
 800d530:	2201      	movs	r2, #1
 800d532:	4013      	ands	r3, r2
 800d534:	2b01      	cmp	r3, #1
 800d536:	d007      	beq.n	800d548 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	699a      	ldr	r2, [r3, #24]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2101      	movs	r1, #1
 800d544:	430a      	orrs	r2, r1
 800d546:	619a      	str	r2, [r3, #24]
  }
}
 800d548:	46c0      	nop			@ (mov r8, r8)
 800d54a:	46bd      	mov	sp, r7
 800d54c:	b002      	add	sp, #8
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	603b      	str	r3, [r7, #0]
 800d55c:	1dfb      	adds	r3, r7, #7
 800d55e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d560:	e030      	b.n	800d5c4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	3301      	adds	r3, #1
 800d566:	d02d      	beq.n	800d5c4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d568:	f7fe fa58 	bl	800ba1c <HAL_GetTick>
 800d56c:	0002      	movs	r2, r0
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	683a      	ldr	r2, [r7, #0]
 800d574:	429a      	cmp	r2, r3
 800d576:	d302      	bcc.n	800d57e <I2C_WaitOnFlagUntilTimeout+0x2e>
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d122      	bne.n	800d5c4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	699b      	ldr	r3, [r3, #24]
 800d584:	68ba      	ldr	r2, [r7, #8]
 800d586:	4013      	ands	r3, r2
 800d588:	68ba      	ldr	r2, [r7, #8]
 800d58a:	1ad3      	subs	r3, r2, r3
 800d58c:	425a      	negs	r2, r3
 800d58e:	4153      	adcs	r3, r2
 800d590:	b2db      	uxtb	r3, r3
 800d592:	001a      	movs	r2, r3
 800d594:	1dfb      	adds	r3, r7, #7
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d113      	bne.n	800d5c4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5a0:	2220      	movs	r2, #32
 800d5a2:	431a      	orrs	r2, r3
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2241      	movs	r2, #65	@ 0x41
 800d5ac:	2120      	movs	r1, #32
 800d5ae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2242      	movs	r2, #66	@ 0x42
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2240      	movs	r2, #64	@ 0x40
 800d5bc:	2100      	movs	r1, #0
 800d5be:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e00f      	b.n	800d5e4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	699b      	ldr	r3, [r3, #24]
 800d5ca:	68ba      	ldr	r2, [r7, #8]
 800d5cc:	4013      	ands	r3, r2
 800d5ce:	68ba      	ldr	r2, [r7, #8]
 800d5d0:	1ad3      	subs	r3, r2, r3
 800d5d2:	425a      	negs	r2, r3
 800d5d4:	4153      	adcs	r3, r2
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	001a      	movs	r2, r3
 800d5da:	1dfb      	adds	r3, r7, #7
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d0bf      	beq.n	800d562 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d5e2:	2300      	movs	r3, #0
}
 800d5e4:	0018      	movs	r0, r3
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	b004      	add	sp, #16
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	60f8      	str	r0, [r7, #12]
 800d5f4:	60b9      	str	r1, [r7, #8]
 800d5f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d5f8:	e032      	b.n	800d660 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	68b9      	ldr	r1, [r7, #8]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	0018      	movs	r0, r3
 800d602:	f000 f87d 	bl	800d700 <I2C_IsErrorOccurred>
 800d606:	1e03      	subs	r3, r0, #0
 800d608:	d001      	beq.n	800d60e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d60a:	2301      	movs	r3, #1
 800d60c:	e030      	b.n	800d670 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	3301      	adds	r3, #1
 800d612:	d025      	beq.n	800d660 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d614:	f7fe fa02 	bl	800ba1c <HAL_GetTick>
 800d618:	0002      	movs	r2, r0
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	1ad3      	subs	r3, r2, r3
 800d61e:	68ba      	ldr	r2, [r7, #8]
 800d620:	429a      	cmp	r2, r3
 800d622:	d302      	bcc.n	800d62a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d11a      	bne.n	800d660 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	699b      	ldr	r3, [r3, #24]
 800d630:	2202      	movs	r2, #2
 800d632:	4013      	ands	r3, r2
 800d634:	2b02      	cmp	r3, #2
 800d636:	d013      	beq.n	800d660 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d63c:	2220      	movs	r2, #32
 800d63e:	431a      	orrs	r2, r3
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	2241      	movs	r2, #65	@ 0x41
 800d648:	2120      	movs	r1, #32
 800d64a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2242      	movs	r2, #66	@ 0x42
 800d650:	2100      	movs	r1, #0
 800d652:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2240      	movs	r2, #64	@ 0x40
 800d658:	2100      	movs	r1, #0
 800d65a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800d65c:	2301      	movs	r3, #1
 800d65e:	e007      	b.n	800d670 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	699b      	ldr	r3, [r3, #24]
 800d666:	2202      	movs	r2, #2
 800d668:	4013      	ands	r3, r2
 800d66a:	2b02      	cmp	r3, #2
 800d66c:	d1c5      	bne.n	800d5fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d66e:	2300      	movs	r3, #0
}
 800d670:	0018      	movs	r0, r3
 800d672:	46bd      	mov	sp, r7
 800d674:	b004      	add	sp, #16
 800d676:	bd80      	pop	{r7, pc}

0800d678 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d684:	e02f      	b.n	800d6e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	68b9      	ldr	r1, [r7, #8]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	0018      	movs	r0, r3
 800d68e:	f000 f837 	bl	800d700 <I2C_IsErrorOccurred>
 800d692:	1e03      	subs	r3, r0, #0
 800d694:	d001      	beq.n	800d69a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d696:	2301      	movs	r3, #1
 800d698:	e02d      	b.n	800d6f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d69a:	f7fe f9bf 	bl	800ba1c <HAL_GetTick>
 800d69e:	0002      	movs	r2, r0
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	1ad3      	subs	r3, r2, r3
 800d6a4:	68ba      	ldr	r2, [r7, #8]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d302      	bcc.n	800d6b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d11a      	bne.n	800d6e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	699b      	ldr	r3, [r3, #24]
 800d6b6:	2220      	movs	r2, #32
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	2b20      	cmp	r3, #32
 800d6bc:	d013      	beq.n	800d6e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6c2:	2220      	movs	r2, #32
 800d6c4:	431a      	orrs	r2, r3
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2241      	movs	r2, #65	@ 0x41
 800d6ce:	2120      	movs	r1, #32
 800d6d0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2242      	movs	r2, #66	@ 0x42
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2240      	movs	r2, #64	@ 0x40
 800d6de:	2100      	movs	r1, #0
 800d6e0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e007      	b.n	800d6f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	699b      	ldr	r3, [r3, #24]
 800d6ec:	2220      	movs	r2, #32
 800d6ee:	4013      	ands	r3, r2
 800d6f0:	2b20      	cmp	r3, #32
 800d6f2:	d1c8      	bne.n	800d686 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d6f4:	2300      	movs	r3, #0
}
 800d6f6:	0018      	movs	r0, r3
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	b004      	add	sp, #16
 800d6fc:	bd80      	pop	{r7, pc}
	...

0800d700 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b08a      	sub	sp, #40	@ 0x28
 800d704:	af00      	add	r7, sp, #0
 800d706:	60f8      	str	r0, [r7, #12]
 800d708:	60b9      	str	r1, [r7, #8]
 800d70a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d70c:	2327      	movs	r3, #39	@ 0x27
 800d70e:	18fb      	adds	r3, r7, r3
 800d710:	2200      	movs	r2, #0
 800d712:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	699b      	ldr	r3, [r3, #24]
 800d71a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d71c:	2300      	movs	r3, #0
 800d71e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	2210      	movs	r2, #16
 800d728:	4013      	ands	r3, r2
 800d72a:	d100      	bne.n	800d72e <I2C_IsErrorOccurred+0x2e>
 800d72c:	e079      	b.n	800d822 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2210      	movs	r2, #16
 800d734:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d736:	e057      	b.n	800d7e8 <I2C_IsErrorOccurred+0xe8>
 800d738:	2227      	movs	r2, #39	@ 0x27
 800d73a:	18bb      	adds	r3, r7, r2
 800d73c:	18ba      	adds	r2, r7, r2
 800d73e:	7812      	ldrb	r2, [r2, #0]
 800d740:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	3301      	adds	r3, #1
 800d746:	d04f      	beq.n	800d7e8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d748:	f7fe f968 	bl	800ba1c <HAL_GetTick>
 800d74c:	0002      	movs	r2, r0
 800d74e:	69fb      	ldr	r3, [r7, #28]
 800d750:	1ad3      	subs	r3, r2, r3
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	429a      	cmp	r2, r3
 800d756:	d302      	bcc.n	800d75e <I2C_IsErrorOccurred+0x5e>
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d144      	bne.n	800d7e8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	685a      	ldr	r2, [r3, #4]
 800d764:	2380      	movs	r3, #128	@ 0x80
 800d766:	01db      	lsls	r3, r3, #7
 800d768:	4013      	ands	r3, r2
 800d76a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d76c:	2013      	movs	r0, #19
 800d76e:	183b      	adds	r3, r7, r0
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	2142      	movs	r1, #66	@ 0x42
 800d774:	5c52      	ldrb	r2, [r2, r1]
 800d776:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	699a      	ldr	r2, [r3, #24]
 800d77e:	2380      	movs	r3, #128	@ 0x80
 800d780:	021b      	lsls	r3, r3, #8
 800d782:	401a      	ands	r2, r3
 800d784:	2380      	movs	r3, #128	@ 0x80
 800d786:	021b      	lsls	r3, r3, #8
 800d788:	429a      	cmp	r2, r3
 800d78a:	d126      	bne.n	800d7da <I2C_IsErrorOccurred+0xda>
 800d78c:	697a      	ldr	r2, [r7, #20]
 800d78e:	2380      	movs	r3, #128	@ 0x80
 800d790:	01db      	lsls	r3, r3, #7
 800d792:	429a      	cmp	r2, r3
 800d794:	d021      	beq.n	800d7da <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800d796:	183b      	adds	r3, r7, r0
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	2b20      	cmp	r3, #32
 800d79c:	d01d      	beq.n	800d7da <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	685a      	ldr	r2, [r3, #4]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2180      	movs	r1, #128	@ 0x80
 800d7aa:	01c9      	lsls	r1, r1, #7
 800d7ac:	430a      	orrs	r2, r1
 800d7ae:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d7b0:	f7fe f934 	bl	800ba1c <HAL_GetTick>
 800d7b4:	0003      	movs	r3, r0
 800d7b6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d7b8:	e00f      	b.n	800d7da <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d7ba:	f7fe f92f 	bl	800ba1c <HAL_GetTick>
 800d7be:	0002      	movs	r2, r0
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	2b19      	cmp	r3, #25
 800d7c6:	d908      	bls.n	800d7da <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d7c8:	6a3b      	ldr	r3, [r7, #32]
 800d7ca:	2220      	movs	r2, #32
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800d7d0:	2327      	movs	r3, #39	@ 0x27
 800d7d2:	18fb      	adds	r3, r7, r3
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	701a      	strb	r2, [r3, #0]

              break;
 800d7d8:	e006      	b.n	800d7e8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	699b      	ldr	r3, [r3, #24]
 800d7e0:	2220      	movs	r2, #32
 800d7e2:	4013      	ands	r3, r2
 800d7e4:	2b20      	cmp	r3, #32
 800d7e6:	d1e8      	bne.n	800d7ba <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	2220      	movs	r2, #32
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	2b20      	cmp	r3, #32
 800d7f4:	d004      	beq.n	800d800 <I2C_IsErrorOccurred+0x100>
 800d7f6:	2327      	movs	r3, #39	@ 0x27
 800d7f8:	18fb      	adds	r3, r7, r3
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d09b      	beq.n	800d738 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d800:	2327      	movs	r3, #39	@ 0x27
 800d802:	18fb      	adds	r3, r7, r3
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d103      	bne.n	800d812 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2220      	movs	r2, #32
 800d810:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	2204      	movs	r2, #4
 800d816:	4313      	orrs	r3, r2
 800d818:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d81a:	2327      	movs	r3, #39	@ 0x27
 800d81c:	18fb      	adds	r3, r7, r3
 800d81e:	2201      	movs	r2, #1
 800d820:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	699b      	ldr	r3, [r3, #24]
 800d828:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d82a:	69ba      	ldr	r2, [r7, #24]
 800d82c:	2380      	movs	r3, #128	@ 0x80
 800d82e:	005b      	lsls	r3, r3, #1
 800d830:	4013      	ands	r3, r2
 800d832:	d00c      	beq.n	800d84e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d834:	6a3b      	ldr	r3, [r7, #32]
 800d836:	2201      	movs	r2, #1
 800d838:	4313      	orrs	r3, r2
 800d83a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2280      	movs	r2, #128	@ 0x80
 800d842:	0052      	lsls	r2, r2, #1
 800d844:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d846:	2327      	movs	r3, #39	@ 0x27
 800d848:	18fb      	adds	r3, r7, r3
 800d84a:	2201      	movs	r2, #1
 800d84c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d84e:	69ba      	ldr	r2, [r7, #24]
 800d850:	2380      	movs	r3, #128	@ 0x80
 800d852:	00db      	lsls	r3, r3, #3
 800d854:	4013      	ands	r3, r2
 800d856:	d00c      	beq.n	800d872 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d858:	6a3b      	ldr	r3, [r7, #32]
 800d85a:	2208      	movs	r2, #8
 800d85c:	4313      	orrs	r3, r2
 800d85e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2280      	movs	r2, #128	@ 0x80
 800d866:	00d2      	lsls	r2, r2, #3
 800d868:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d86a:	2327      	movs	r3, #39	@ 0x27
 800d86c:	18fb      	adds	r3, r7, r3
 800d86e:	2201      	movs	r2, #1
 800d870:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d872:	69ba      	ldr	r2, [r7, #24]
 800d874:	2380      	movs	r3, #128	@ 0x80
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	4013      	ands	r3, r2
 800d87a:	d00c      	beq.n	800d896 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d87c:	6a3b      	ldr	r3, [r7, #32]
 800d87e:	2202      	movs	r2, #2
 800d880:	4313      	orrs	r3, r2
 800d882:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2280      	movs	r2, #128	@ 0x80
 800d88a:	0092      	lsls	r2, r2, #2
 800d88c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d88e:	2327      	movs	r3, #39	@ 0x27
 800d890:	18fb      	adds	r3, r7, r3
 800d892:	2201      	movs	r2, #1
 800d894:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800d896:	2327      	movs	r3, #39	@ 0x27
 800d898:	18fb      	adds	r3, r7, r3
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d01d      	beq.n	800d8dc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	0018      	movs	r0, r3
 800d8a4:	f7ff fe32 	bl	800d50c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	685a      	ldr	r2, [r3, #4]
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	490e      	ldr	r1, [pc, #56]	@ (800d8ec <I2C_IsErrorOccurred+0x1ec>)
 800d8b4:	400a      	ands	r2, r1
 800d8b6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d8bc:	6a3b      	ldr	r3, [r7, #32]
 800d8be:	431a      	orrs	r2, r3
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2241      	movs	r2, #65	@ 0x41
 800d8c8:	2120      	movs	r1, #32
 800d8ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2242      	movs	r2, #66	@ 0x42
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2240      	movs	r2, #64	@ 0x40
 800d8d8:	2100      	movs	r1, #0
 800d8da:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800d8dc:	2327      	movs	r3, #39	@ 0x27
 800d8de:	18fb      	adds	r3, r7, r3
 800d8e0:	781b      	ldrb	r3, [r3, #0]
}
 800d8e2:	0018      	movs	r0, r3
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	b00a      	add	sp, #40	@ 0x28
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	46c0      	nop			@ (mov r8, r8)
 800d8ec:	fe00e800 	.word	0xfe00e800

0800d8f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d8f0:	b590      	push	{r4, r7, lr}
 800d8f2:	b087      	sub	sp, #28
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	0008      	movs	r0, r1
 800d8fa:	0011      	movs	r1, r2
 800d8fc:	607b      	str	r3, [r7, #4]
 800d8fe:	240a      	movs	r4, #10
 800d900:	193b      	adds	r3, r7, r4
 800d902:	1c02      	adds	r2, r0, #0
 800d904:	801a      	strh	r2, [r3, #0]
 800d906:	2009      	movs	r0, #9
 800d908:	183b      	adds	r3, r7, r0
 800d90a:	1c0a      	adds	r2, r1, #0
 800d90c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d90e:	193b      	adds	r3, r7, r4
 800d910:	881b      	ldrh	r3, [r3, #0]
 800d912:	059b      	lsls	r3, r3, #22
 800d914:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d916:	183b      	adds	r3, r7, r0
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	0419      	lsls	r1, r3, #16
 800d91c:	23ff      	movs	r3, #255	@ 0xff
 800d91e:	041b      	lsls	r3, r3, #16
 800d920:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d922:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92a:	4313      	orrs	r3, r2
 800d92c:	005b      	lsls	r3, r3, #1
 800d92e:	085b      	lsrs	r3, r3, #1
 800d930:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d93a:	0d51      	lsrs	r1, r2, #21
 800d93c:	2280      	movs	r2, #128	@ 0x80
 800d93e:	00d2      	lsls	r2, r2, #3
 800d940:	400a      	ands	r2, r1
 800d942:	4907      	ldr	r1, [pc, #28]	@ (800d960 <I2C_TransferConfig+0x70>)
 800d944:	430a      	orrs	r2, r1
 800d946:	43d2      	mvns	r2, r2
 800d948:	401a      	ands	r2, r3
 800d94a:	0011      	movs	r1, r2
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	697a      	ldr	r2, [r7, #20]
 800d952:	430a      	orrs	r2, r1
 800d954:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d956:	46c0      	nop			@ (mov r8, r8)
 800d958:	46bd      	mov	sp, r7
 800d95a:	b007      	add	sp, #28
 800d95c:	bd90      	pop	{r4, r7, pc}
 800d95e:	46c0      	nop			@ (mov r8, r8)
 800d960:	03ff63ff 	.word	0x03ff63ff

0800d964 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2241      	movs	r2, #65	@ 0x41
 800d972:	5c9b      	ldrb	r3, [r3, r2]
 800d974:	b2db      	uxtb	r3, r3
 800d976:	2b20      	cmp	r3, #32
 800d978:	d138      	bne.n	800d9ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2240      	movs	r2, #64	@ 0x40
 800d97e:	5c9b      	ldrb	r3, [r3, r2]
 800d980:	2b01      	cmp	r3, #1
 800d982:	d101      	bne.n	800d988 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d984:	2302      	movs	r3, #2
 800d986:	e032      	b.n	800d9ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2240      	movs	r2, #64	@ 0x40
 800d98c:	2101      	movs	r1, #1
 800d98e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2241      	movs	r2, #65	@ 0x41
 800d994:	2124      	movs	r1, #36	@ 0x24
 800d996:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2101      	movs	r1, #1
 800d9a4:	438a      	bics	r2, r1
 800d9a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	4911      	ldr	r1, [pc, #68]	@ (800d9f8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800d9b4:	400a      	ands	r2, r1
 800d9b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	6819      	ldr	r1, [r3, #0]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	683a      	ldr	r2, [r7, #0]
 800d9c4:	430a      	orrs	r2, r1
 800d9c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2101      	movs	r1, #1
 800d9d4:	430a      	orrs	r2, r1
 800d9d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2241      	movs	r2, #65	@ 0x41
 800d9dc:	2120      	movs	r1, #32
 800d9de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2240      	movs	r2, #64	@ 0x40
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	e000      	b.n	800d9ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d9ec:	2302      	movs	r3, #2
  }
}
 800d9ee:	0018      	movs	r0, r3
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	b002      	add	sp, #8
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	46c0      	nop			@ (mov r8, r8)
 800d9f8:	ffffefff 	.word	0xffffefff

0800d9fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2241      	movs	r2, #65	@ 0x41
 800da0a:	5c9b      	ldrb	r3, [r3, r2]
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	2b20      	cmp	r3, #32
 800da10:	d139      	bne.n	800da86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2240      	movs	r2, #64	@ 0x40
 800da16:	5c9b      	ldrb	r3, [r3, r2]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d101      	bne.n	800da20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800da1c:	2302      	movs	r3, #2
 800da1e:	e033      	b.n	800da88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2240      	movs	r2, #64	@ 0x40
 800da24:	2101      	movs	r1, #1
 800da26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2241      	movs	r2, #65	@ 0x41
 800da2c:	2124      	movs	r1, #36	@ 0x24
 800da2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2101      	movs	r1, #1
 800da3c:	438a      	bics	r2, r1
 800da3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	4a11      	ldr	r2, [pc, #68]	@ (800da90 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800da4c:	4013      	ands	r3, r2
 800da4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	021b      	lsls	r3, r3, #8
 800da54:	68fa      	ldr	r2, [r7, #12]
 800da56:	4313      	orrs	r3, r2
 800da58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	68fa      	ldr	r2, [r7, #12]
 800da60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	2101      	movs	r1, #1
 800da6e:	430a      	orrs	r2, r1
 800da70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2241      	movs	r2, #65	@ 0x41
 800da76:	2120      	movs	r1, #32
 800da78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2240      	movs	r2, #64	@ 0x40
 800da7e:	2100      	movs	r1, #0
 800da80:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800da82:	2300      	movs	r3, #0
 800da84:	e000      	b.n	800da88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800da86:	2302      	movs	r3, #2
  }
}
 800da88:	0018      	movs	r0, r3
 800da8a:	46bd      	mov	sp, r7
 800da8c:	b004      	add	sp, #16
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	fffff0ff 	.word	0xfffff0ff

0800da94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800da94:	b5b0      	push	{r4, r5, r7, lr}
 800da96:	b08a      	sub	sp, #40	@ 0x28
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d102      	bne.n	800daa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800daa2:	2301      	movs	r3, #1
 800daa4:	f000 fbbf 	bl	800e226 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800daa8:	4bc9      	ldr	r3, [pc, #804]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	220c      	movs	r2, #12
 800daae:	4013      	ands	r3, r2
 800dab0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dab2:	4bc7      	ldr	r3, [pc, #796]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dab4:	68da      	ldr	r2, [r3, #12]
 800dab6:	2380      	movs	r3, #128	@ 0x80
 800dab8:	025b      	lsls	r3, r3, #9
 800daba:	4013      	ands	r3, r2
 800dabc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2201      	movs	r2, #1
 800dac4:	4013      	ands	r3, r2
 800dac6:	d100      	bne.n	800daca <HAL_RCC_OscConfig+0x36>
 800dac8:	e07e      	b.n	800dbc8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	2b08      	cmp	r3, #8
 800dace:	d007      	beq.n	800dae0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	2b0c      	cmp	r3, #12
 800dad4:	d112      	bne.n	800dafc <HAL_RCC_OscConfig+0x68>
 800dad6:	69ba      	ldr	r2, [r7, #24]
 800dad8:	2380      	movs	r3, #128	@ 0x80
 800dada:	025b      	lsls	r3, r3, #9
 800dadc:	429a      	cmp	r2, r3
 800dade:	d10d      	bne.n	800dafc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dae0:	4bbb      	ldr	r3, [pc, #748]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	2380      	movs	r3, #128	@ 0x80
 800dae6:	029b      	lsls	r3, r3, #10
 800dae8:	4013      	ands	r3, r2
 800daea:	d100      	bne.n	800daee <HAL_RCC_OscConfig+0x5a>
 800daec:	e06b      	b.n	800dbc6 <HAL_RCC_OscConfig+0x132>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d167      	bne.n	800dbc6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800daf6:	2301      	movs	r3, #1
 800daf8:	f000 fb95 	bl	800e226 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	685a      	ldr	r2, [r3, #4]
 800db00:	2380      	movs	r3, #128	@ 0x80
 800db02:	025b      	lsls	r3, r3, #9
 800db04:	429a      	cmp	r2, r3
 800db06:	d107      	bne.n	800db18 <HAL_RCC_OscConfig+0x84>
 800db08:	4bb1      	ldr	r3, [pc, #708]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	4bb0      	ldr	r3, [pc, #704]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800db0e:	2180      	movs	r1, #128	@ 0x80
 800db10:	0249      	lsls	r1, r1, #9
 800db12:	430a      	orrs	r2, r1
 800db14:	601a      	str	r2, [r3, #0]
 800db16:	e027      	b.n	800db68 <HAL_RCC_OscConfig+0xd4>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	685a      	ldr	r2, [r3, #4]
 800db1c:	23a0      	movs	r3, #160	@ 0xa0
 800db1e:	02db      	lsls	r3, r3, #11
 800db20:	429a      	cmp	r2, r3
 800db22:	d10e      	bne.n	800db42 <HAL_RCC_OscConfig+0xae>
 800db24:	4baa      	ldr	r3, [pc, #680]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	4ba9      	ldr	r3, [pc, #676]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800db2a:	2180      	movs	r1, #128	@ 0x80
 800db2c:	02c9      	lsls	r1, r1, #11
 800db2e:	430a      	orrs	r2, r1
 800db30:	601a      	str	r2, [r3, #0]
 800db32:	4ba7      	ldr	r3, [pc, #668]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	4ba6      	ldr	r3, [pc, #664]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800db38:	2180      	movs	r1, #128	@ 0x80
 800db3a:	0249      	lsls	r1, r1, #9
 800db3c:	430a      	orrs	r2, r1
 800db3e:	601a      	str	r2, [r3, #0]
 800db40:	e012      	b.n	800db68 <HAL_RCC_OscConfig+0xd4>
 800db42:	4ba3      	ldr	r3, [pc, #652]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800db44:	681a      	ldr	r2, [r3, #0]
 800db46:	4ba2      	ldr	r3, [pc, #648]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800db48:	49a2      	ldr	r1, [pc, #648]	@ (800ddd4 <HAL_RCC_OscConfig+0x340>)
 800db4a:	400a      	ands	r2, r1
 800db4c:	601a      	str	r2, [r3, #0]
 800db4e:	4ba0      	ldr	r3, [pc, #640]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	2380      	movs	r3, #128	@ 0x80
 800db54:	025b      	lsls	r3, r3, #9
 800db56:	4013      	ands	r3, r2
 800db58:	60fb      	str	r3, [r7, #12]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	4b9c      	ldr	r3, [pc, #624]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	4b9b      	ldr	r3, [pc, #620]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800db62:	499d      	ldr	r1, [pc, #628]	@ (800ddd8 <HAL_RCC_OscConfig+0x344>)
 800db64:	400a      	ands	r2, r1
 800db66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d015      	beq.n	800db9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db70:	f7fd ff54 	bl	800ba1c <HAL_GetTick>
 800db74:	0003      	movs	r3, r0
 800db76:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800db78:	e009      	b.n	800db8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800db7a:	f7fd ff4f 	bl	800ba1c <HAL_GetTick>
 800db7e:	0002      	movs	r2, r0
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	1ad3      	subs	r3, r2, r3
 800db84:	2b64      	cmp	r3, #100	@ 0x64
 800db86:	d902      	bls.n	800db8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800db88:	2303      	movs	r3, #3
 800db8a:	f000 fb4c 	bl	800e226 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800db8e:	4b90      	ldr	r3, [pc, #576]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	2380      	movs	r3, #128	@ 0x80
 800db94:	029b      	lsls	r3, r3, #10
 800db96:	4013      	ands	r3, r2
 800db98:	d0ef      	beq.n	800db7a <HAL_RCC_OscConfig+0xe6>
 800db9a:	e015      	b.n	800dbc8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800db9c:	f7fd ff3e 	bl	800ba1c <HAL_GetTick>
 800dba0:	0003      	movs	r3, r0
 800dba2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dba4:	e008      	b.n	800dbb8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dba6:	f7fd ff39 	bl	800ba1c <HAL_GetTick>
 800dbaa:	0002      	movs	r2, r0
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	1ad3      	subs	r3, r2, r3
 800dbb0:	2b64      	cmp	r3, #100	@ 0x64
 800dbb2:	d901      	bls.n	800dbb8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800dbb4:	2303      	movs	r3, #3
 800dbb6:	e336      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dbb8:	4b85      	ldr	r3, [pc, #532]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	2380      	movs	r3, #128	@ 0x80
 800dbbe:	029b      	lsls	r3, r3, #10
 800dbc0:	4013      	ands	r3, r2
 800dbc2:	d1f0      	bne.n	800dba6 <HAL_RCC_OscConfig+0x112>
 800dbc4:	e000      	b.n	800dbc8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dbc6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	2202      	movs	r2, #2
 800dbce:	4013      	ands	r3, r2
 800dbd0:	d100      	bne.n	800dbd4 <HAL_RCC_OscConfig+0x140>
 800dbd2:	e099      	b.n	800dd08 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	68db      	ldr	r3, [r3, #12]
 800dbd8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800dbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbdc:	2220      	movs	r2, #32
 800dbde:	4013      	ands	r3, r2
 800dbe0:	d009      	beq.n	800dbf6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800dbe2:	4b7b      	ldr	r3, [pc, #492]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	4b7a      	ldr	r3, [pc, #488]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dbe8:	2120      	movs	r1, #32
 800dbea:	430a      	orrs	r2, r1
 800dbec:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800dbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf0:	2220      	movs	r2, #32
 800dbf2:	4393      	bics	r3, r2
 800dbf4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	2b04      	cmp	r3, #4
 800dbfa:	d005      	beq.n	800dc08 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	2b0c      	cmp	r3, #12
 800dc00:	d13e      	bne.n	800dc80 <HAL_RCC_OscConfig+0x1ec>
 800dc02:	69bb      	ldr	r3, [r7, #24]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d13b      	bne.n	800dc80 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800dc08:	4b71      	ldr	r3, [pc, #452]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2204      	movs	r2, #4
 800dc0e:	4013      	ands	r3, r2
 800dc10:	d004      	beq.n	800dc1c <HAL_RCC_OscConfig+0x188>
 800dc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d101      	bne.n	800dc1c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	e304      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc1c:	4b6c      	ldr	r3, [pc, #432]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	4a6e      	ldr	r2, [pc, #440]	@ (800dddc <HAL_RCC_OscConfig+0x348>)
 800dc22:	4013      	ands	r3, r2
 800dc24:	0019      	movs	r1, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	691b      	ldr	r3, [r3, #16]
 800dc2a:	021a      	lsls	r2, r3, #8
 800dc2c:	4b68      	ldr	r3, [pc, #416]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dc2e:	430a      	orrs	r2, r1
 800dc30:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800dc32:	4b67      	ldr	r3, [pc, #412]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	2209      	movs	r2, #9
 800dc38:	4393      	bics	r3, r2
 800dc3a:	0019      	movs	r1, r3
 800dc3c:	4b64      	ldr	r3, [pc, #400]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dc3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc40:	430a      	orrs	r2, r1
 800dc42:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dc44:	f000 fc42 	bl	800e4cc <HAL_RCC_GetSysClockFreq>
 800dc48:	0001      	movs	r1, r0
 800dc4a:	4b61      	ldr	r3, [pc, #388]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	091b      	lsrs	r3, r3, #4
 800dc50:	220f      	movs	r2, #15
 800dc52:	4013      	ands	r3, r2
 800dc54:	4a62      	ldr	r2, [pc, #392]	@ (800dde0 <HAL_RCC_OscConfig+0x34c>)
 800dc56:	5cd3      	ldrb	r3, [r2, r3]
 800dc58:	000a      	movs	r2, r1
 800dc5a:	40da      	lsrs	r2, r3
 800dc5c:	4b61      	ldr	r3, [pc, #388]	@ (800dde4 <HAL_RCC_OscConfig+0x350>)
 800dc5e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800dc60:	4b61      	ldr	r3, [pc, #388]	@ (800dde8 <HAL_RCC_OscConfig+0x354>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2513      	movs	r5, #19
 800dc66:	197c      	adds	r4, r7, r5
 800dc68:	0018      	movs	r0, r3
 800dc6a:	f7fd fe91 	bl	800b990 <HAL_InitTick>
 800dc6e:	0003      	movs	r3, r0
 800dc70:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800dc72:	197b      	adds	r3, r7, r5
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d046      	beq.n	800dd08 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800dc7a:	197b      	adds	r3, r7, r5
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	e2d2      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800dc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d027      	beq.n	800dcd6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800dc86:	4b52      	ldr	r3, [pc, #328]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2209      	movs	r2, #9
 800dc8c:	4393      	bics	r3, r2
 800dc8e:	0019      	movs	r1, r3
 800dc90:	4b4f      	ldr	r3, [pc, #316]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dc92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc94:	430a      	orrs	r2, r1
 800dc96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc98:	f7fd fec0 	bl	800ba1c <HAL_GetTick>
 800dc9c:	0003      	movs	r3, r0
 800dc9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dca0:	e008      	b.n	800dcb4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dca2:	f7fd febb 	bl	800ba1c <HAL_GetTick>
 800dca6:	0002      	movs	r2, r0
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	2b02      	cmp	r3, #2
 800dcae:	d901      	bls.n	800dcb4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	e2b8      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dcb4:	4b46      	ldr	r3, [pc, #280]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2204      	movs	r2, #4
 800dcba:	4013      	ands	r3, r2
 800dcbc:	d0f1      	beq.n	800dca2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dcbe:	4b44      	ldr	r3, [pc, #272]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	4a46      	ldr	r2, [pc, #280]	@ (800dddc <HAL_RCC_OscConfig+0x348>)
 800dcc4:	4013      	ands	r3, r2
 800dcc6:	0019      	movs	r1, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	691b      	ldr	r3, [r3, #16]
 800dccc:	021a      	lsls	r2, r3, #8
 800dcce:	4b40      	ldr	r3, [pc, #256]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dcd0:	430a      	orrs	r2, r1
 800dcd2:	605a      	str	r2, [r3, #4]
 800dcd4:	e018      	b.n	800dd08 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dcd6:	4b3e      	ldr	r3, [pc, #248]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	4b3d      	ldr	r3, [pc, #244]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dcdc:	2101      	movs	r1, #1
 800dcde:	438a      	bics	r2, r1
 800dce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dce2:	f7fd fe9b 	bl	800ba1c <HAL_GetTick>
 800dce6:	0003      	movs	r3, r0
 800dce8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dcea:	e008      	b.n	800dcfe <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dcec:	f7fd fe96 	bl	800ba1c <HAL_GetTick>
 800dcf0:	0002      	movs	r2, r0
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	1ad3      	subs	r3, r2, r3
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d901      	bls.n	800dcfe <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800dcfa:	2303      	movs	r3, #3
 800dcfc:	e293      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dcfe:	4b34      	ldr	r3, [pc, #208]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2204      	movs	r2, #4
 800dd04:	4013      	ands	r3, r2
 800dd06:	d1f1      	bne.n	800dcec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2210      	movs	r2, #16
 800dd0e:	4013      	ands	r3, r2
 800dd10:	d100      	bne.n	800dd14 <HAL_RCC_OscConfig+0x280>
 800dd12:	e0a2      	b.n	800de5a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d140      	bne.n	800dd9c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800dd1a:	4b2d      	ldr	r3, [pc, #180]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	2380      	movs	r3, #128	@ 0x80
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	4013      	ands	r3, r2
 800dd24:	d005      	beq.n	800dd32 <HAL_RCC_OscConfig+0x29e>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	69db      	ldr	r3, [r3, #28]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d101      	bne.n	800dd32 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e279      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800dd32:	4b27      	ldr	r3, [pc, #156]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	4a2d      	ldr	r2, [pc, #180]	@ (800ddec <HAL_RCC_OscConfig+0x358>)
 800dd38:	4013      	ands	r3, r2
 800dd3a:	0019      	movs	r1, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd40:	4b23      	ldr	r3, [pc, #140]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dd42:	430a      	orrs	r2, r1
 800dd44:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800dd46:	4b22      	ldr	r3, [pc, #136]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	021b      	lsls	r3, r3, #8
 800dd4c:	0a19      	lsrs	r1, r3, #8
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6a1b      	ldr	r3, [r3, #32]
 800dd52:	061a      	lsls	r2, r3, #24
 800dd54:	4b1e      	ldr	r3, [pc, #120]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dd56:	430a      	orrs	r2, r1
 800dd58:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd5e:	0b5b      	lsrs	r3, r3, #13
 800dd60:	3301      	adds	r3, #1
 800dd62:	2280      	movs	r2, #128	@ 0x80
 800dd64:	0212      	lsls	r2, r2, #8
 800dd66:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800dd68:	4b19      	ldr	r3, [pc, #100]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	091b      	lsrs	r3, r3, #4
 800dd6e:	210f      	movs	r1, #15
 800dd70:	400b      	ands	r3, r1
 800dd72:	491b      	ldr	r1, [pc, #108]	@ (800dde0 <HAL_RCC_OscConfig+0x34c>)
 800dd74:	5ccb      	ldrb	r3, [r1, r3]
 800dd76:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800dd78:	4b1a      	ldr	r3, [pc, #104]	@ (800dde4 <HAL_RCC_OscConfig+0x350>)
 800dd7a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800dd7c:	4b1a      	ldr	r3, [pc, #104]	@ (800dde8 <HAL_RCC_OscConfig+0x354>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2513      	movs	r5, #19
 800dd82:	197c      	adds	r4, r7, r5
 800dd84:	0018      	movs	r0, r3
 800dd86:	f7fd fe03 	bl	800b990 <HAL_InitTick>
 800dd8a:	0003      	movs	r3, r0
 800dd8c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800dd8e:	197b      	adds	r3, r7, r5
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d061      	beq.n	800de5a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800dd96:	197b      	adds	r3, r7, r5
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	e244      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	69db      	ldr	r3, [r3, #28]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d040      	beq.n	800de26 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800dda4:	4b0a      	ldr	r3, [pc, #40]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	4b09      	ldr	r3, [pc, #36]	@ (800ddd0 <HAL_RCC_OscConfig+0x33c>)
 800ddaa:	2180      	movs	r1, #128	@ 0x80
 800ddac:	0049      	lsls	r1, r1, #1
 800ddae:	430a      	orrs	r2, r1
 800ddb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ddb2:	f7fd fe33 	bl	800ba1c <HAL_GetTick>
 800ddb6:	0003      	movs	r3, r0
 800ddb8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ddba:	e019      	b.n	800ddf0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ddbc:	f7fd fe2e 	bl	800ba1c <HAL_GetTick>
 800ddc0:	0002      	movs	r2, r0
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	1ad3      	subs	r3, r2, r3
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	d912      	bls.n	800ddf0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800ddca:	2303      	movs	r3, #3
 800ddcc:	e22b      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
 800ddce:	46c0      	nop			@ (mov r8, r8)
 800ddd0:	40021000 	.word	0x40021000
 800ddd4:	fffeffff 	.word	0xfffeffff
 800ddd8:	fffbffff 	.word	0xfffbffff
 800dddc:	ffffe0ff 	.word	0xffffe0ff
 800dde0:	08014758 	.word	0x08014758
 800dde4:	20000000 	.word	0x20000000
 800dde8:	20000190 	.word	0x20000190
 800ddec:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ddf0:	4bca      	ldr	r3, [pc, #808]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	2380      	movs	r3, #128	@ 0x80
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	4013      	ands	r3, r2
 800ddfa:	d0df      	beq.n	800ddbc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ddfc:	4bc7      	ldr	r3, [pc, #796]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	4ac7      	ldr	r2, [pc, #796]	@ (800e120 <HAL_RCC_OscConfig+0x68c>)
 800de02:	4013      	ands	r3, r2
 800de04:	0019      	movs	r1, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800de0a:	4bc4      	ldr	r3, [pc, #784]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800de0c:	430a      	orrs	r2, r1
 800de0e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800de10:	4bc2      	ldr	r3, [pc, #776]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	021b      	lsls	r3, r3, #8
 800de16:	0a19      	lsrs	r1, r3, #8
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6a1b      	ldr	r3, [r3, #32]
 800de1c:	061a      	lsls	r2, r3, #24
 800de1e:	4bbf      	ldr	r3, [pc, #764]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800de20:	430a      	orrs	r2, r1
 800de22:	605a      	str	r2, [r3, #4]
 800de24:	e019      	b.n	800de5a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800de26:	4bbd      	ldr	r3, [pc, #756]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	4bbc      	ldr	r3, [pc, #752]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800de2c:	49bd      	ldr	r1, [pc, #756]	@ (800e124 <HAL_RCC_OscConfig+0x690>)
 800de2e:	400a      	ands	r2, r1
 800de30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800de32:	f7fd fdf3 	bl	800ba1c <HAL_GetTick>
 800de36:	0003      	movs	r3, r0
 800de38:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800de3a:	e008      	b.n	800de4e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800de3c:	f7fd fdee 	bl	800ba1c <HAL_GetTick>
 800de40:	0002      	movs	r2, r0
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	1ad3      	subs	r3, r2, r3
 800de46:	2b02      	cmp	r3, #2
 800de48:	d901      	bls.n	800de4e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800de4a:	2303      	movs	r3, #3
 800de4c:	e1eb      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800de4e:	4bb3      	ldr	r3, [pc, #716]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	2380      	movs	r3, #128	@ 0x80
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	4013      	ands	r3, r2
 800de58:	d1f0      	bne.n	800de3c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2208      	movs	r2, #8
 800de60:	4013      	ands	r3, r2
 800de62:	d036      	beq.n	800ded2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	695b      	ldr	r3, [r3, #20]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d019      	beq.n	800dea0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800de6c:	4bab      	ldr	r3, [pc, #684]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800de6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800de70:	4baa      	ldr	r3, [pc, #680]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800de72:	2101      	movs	r1, #1
 800de74:	430a      	orrs	r2, r1
 800de76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800de78:	f7fd fdd0 	bl	800ba1c <HAL_GetTick>
 800de7c:	0003      	movs	r3, r0
 800de7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800de80:	e008      	b.n	800de94 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800de82:	f7fd fdcb 	bl	800ba1c <HAL_GetTick>
 800de86:	0002      	movs	r2, r0
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	1ad3      	subs	r3, r2, r3
 800de8c:	2b02      	cmp	r3, #2
 800de8e:	d901      	bls.n	800de94 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800de90:	2303      	movs	r3, #3
 800de92:	e1c8      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800de94:	4ba1      	ldr	r3, [pc, #644]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800de96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de98:	2202      	movs	r2, #2
 800de9a:	4013      	ands	r3, r2
 800de9c:	d0f1      	beq.n	800de82 <HAL_RCC_OscConfig+0x3ee>
 800de9e:	e018      	b.n	800ded2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dea0:	4b9e      	ldr	r3, [pc, #632]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800dea2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dea4:	4b9d      	ldr	r3, [pc, #628]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800dea6:	2101      	movs	r1, #1
 800dea8:	438a      	bics	r2, r1
 800deaa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800deac:	f7fd fdb6 	bl	800ba1c <HAL_GetTick>
 800deb0:	0003      	movs	r3, r0
 800deb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800deb4:	e008      	b.n	800dec8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800deb6:	f7fd fdb1 	bl	800ba1c <HAL_GetTick>
 800deba:	0002      	movs	r2, r0
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	1ad3      	subs	r3, r2, r3
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	d901      	bls.n	800dec8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800dec4:	2303      	movs	r3, #3
 800dec6:	e1ae      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dec8:	4b94      	ldr	r3, [pc, #592]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800deca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800decc:	2202      	movs	r2, #2
 800dece:	4013      	ands	r3, r2
 800ded0:	d1f1      	bne.n	800deb6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2204      	movs	r2, #4
 800ded8:	4013      	ands	r3, r2
 800deda:	d100      	bne.n	800dede <HAL_RCC_OscConfig+0x44a>
 800dedc:	e0ae      	b.n	800e03c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dede:	2023      	movs	r0, #35	@ 0x23
 800dee0:	183b      	adds	r3, r7, r0
 800dee2:	2200      	movs	r2, #0
 800dee4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dee6:	4b8d      	ldr	r3, [pc, #564]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800dee8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800deea:	2380      	movs	r3, #128	@ 0x80
 800deec:	055b      	lsls	r3, r3, #21
 800deee:	4013      	ands	r3, r2
 800def0:	d109      	bne.n	800df06 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800def2:	4b8a      	ldr	r3, [pc, #552]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800def4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800def6:	4b89      	ldr	r3, [pc, #548]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800def8:	2180      	movs	r1, #128	@ 0x80
 800defa:	0549      	lsls	r1, r1, #21
 800defc:	430a      	orrs	r2, r1
 800defe:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800df00:	183b      	adds	r3, r7, r0
 800df02:	2201      	movs	r2, #1
 800df04:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800df06:	4b88      	ldr	r3, [pc, #544]	@ (800e128 <HAL_RCC_OscConfig+0x694>)
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	2380      	movs	r3, #128	@ 0x80
 800df0c:	005b      	lsls	r3, r3, #1
 800df0e:	4013      	ands	r3, r2
 800df10:	d11a      	bne.n	800df48 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800df12:	4b85      	ldr	r3, [pc, #532]	@ (800e128 <HAL_RCC_OscConfig+0x694>)
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	4b84      	ldr	r3, [pc, #528]	@ (800e128 <HAL_RCC_OscConfig+0x694>)
 800df18:	2180      	movs	r1, #128	@ 0x80
 800df1a:	0049      	lsls	r1, r1, #1
 800df1c:	430a      	orrs	r2, r1
 800df1e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800df20:	f7fd fd7c 	bl	800ba1c <HAL_GetTick>
 800df24:	0003      	movs	r3, r0
 800df26:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800df28:	e008      	b.n	800df3c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800df2a:	f7fd fd77 	bl	800ba1c <HAL_GetTick>
 800df2e:	0002      	movs	r2, r0
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	1ad3      	subs	r3, r2, r3
 800df34:	2b64      	cmp	r3, #100	@ 0x64
 800df36:	d901      	bls.n	800df3c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800df38:	2303      	movs	r3, #3
 800df3a:	e174      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800df3c:	4b7a      	ldr	r3, [pc, #488]	@ (800e128 <HAL_RCC_OscConfig+0x694>)
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	2380      	movs	r3, #128	@ 0x80
 800df42:	005b      	lsls	r3, r3, #1
 800df44:	4013      	ands	r3, r2
 800df46:	d0f0      	beq.n	800df2a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	689a      	ldr	r2, [r3, #8]
 800df4c:	2380      	movs	r3, #128	@ 0x80
 800df4e:	005b      	lsls	r3, r3, #1
 800df50:	429a      	cmp	r2, r3
 800df52:	d107      	bne.n	800df64 <HAL_RCC_OscConfig+0x4d0>
 800df54:	4b71      	ldr	r3, [pc, #452]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800df56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800df58:	4b70      	ldr	r3, [pc, #448]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800df5a:	2180      	movs	r1, #128	@ 0x80
 800df5c:	0049      	lsls	r1, r1, #1
 800df5e:	430a      	orrs	r2, r1
 800df60:	651a      	str	r2, [r3, #80]	@ 0x50
 800df62:	e031      	b.n	800dfc8 <HAL_RCC_OscConfig+0x534>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	689b      	ldr	r3, [r3, #8]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d10c      	bne.n	800df86 <HAL_RCC_OscConfig+0x4f2>
 800df6c:	4b6b      	ldr	r3, [pc, #428]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800df6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800df70:	4b6a      	ldr	r3, [pc, #424]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800df72:	496c      	ldr	r1, [pc, #432]	@ (800e124 <HAL_RCC_OscConfig+0x690>)
 800df74:	400a      	ands	r2, r1
 800df76:	651a      	str	r2, [r3, #80]	@ 0x50
 800df78:	4b68      	ldr	r3, [pc, #416]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800df7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800df7c:	4b67      	ldr	r3, [pc, #412]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800df7e:	496b      	ldr	r1, [pc, #428]	@ (800e12c <HAL_RCC_OscConfig+0x698>)
 800df80:	400a      	ands	r2, r1
 800df82:	651a      	str	r2, [r3, #80]	@ 0x50
 800df84:	e020      	b.n	800dfc8 <HAL_RCC_OscConfig+0x534>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	689a      	ldr	r2, [r3, #8]
 800df8a:	23a0      	movs	r3, #160	@ 0xa0
 800df8c:	00db      	lsls	r3, r3, #3
 800df8e:	429a      	cmp	r2, r3
 800df90:	d10e      	bne.n	800dfb0 <HAL_RCC_OscConfig+0x51c>
 800df92:	4b62      	ldr	r3, [pc, #392]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800df94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800df96:	4b61      	ldr	r3, [pc, #388]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800df98:	2180      	movs	r1, #128	@ 0x80
 800df9a:	00c9      	lsls	r1, r1, #3
 800df9c:	430a      	orrs	r2, r1
 800df9e:	651a      	str	r2, [r3, #80]	@ 0x50
 800dfa0:	4b5e      	ldr	r3, [pc, #376]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800dfa2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dfa4:	4b5d      	ldr	r3, [pc, #372]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800dfa6:	2180      	movs	r1, #128	@ 0x80
 800dfa8:	0049      	lsls	r1, r1, #1
 800dfaa:	430a      	orrs	r2, r1
 800dfac:	651a      	str	r2, [r3, #80]	@ 0x50
 800dfae:	e00b      	b.n	800dfc8 <HAL_RCC_OscConfig+0x534>
 800dfb0:	4b5a      	ldr	r3, [pc, #360]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800dfb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dfb4:	4b59      	ldr	r3, [pc, #356]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800dfb6:	495b      	ldr	r1, [pc, #364]	@ (800e124 <HAL_RCC_OscConfig+0x690>)
 800dfb8:	400a      	ands	r2, r1
 800dfba:	651a      	str	r2, [r3, #80]	@ 0x50
 800dfbc:	4b57      	ldr	r3, [pc, #348]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800dfbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dfc0:	4b56      	ldr	r3, [pc, #344]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800dfc2:	495a      	ldr	r1, [pc, #360]	@ (800e12c <HAL_RCC_OscConfig+0x698>)
 800dfc4:	400a      	ands	r2, r1
 800dfc6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d015      	beq.n	800dffc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dfd0:	f7fd fd24 	bl	800ba1c <HAL_GetTick>
 800dfd4:	0003      	movs	r3, r0
 800dfd6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dfd8:	e009      	b.n	800dfee <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dfda:	f7fd fd1f 	bl	800ba1c <HAL_GetTick>
 800dfde:	0002      	movs	r2, r0
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	1ad3      	subs	r3, r2, r3
 800dfe4:	4a52      	ldr	r2, [pc, #328]	@ (800e130 <HAL_RCC_OscConfig+0x69c>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d901      	bls.n	800dfee <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800dfea:	2303      	movs	r3, #3
 800dfec:	e11b      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dfee:	4b4b      	ldr	r3, [pc, #300]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800dff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dff2:	2380      	movs	r3, #128	@ 0x80
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4013      	ands	r3, r2
 800dff8:	d0ef      	beq.n	800dfda <HAL_RCC_OscConfig+0x546>
 800dffa:	e014      	b.n	800e026 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dffc:	f7fd fd0e 	bl	800ba1c <HAL_GetTick>
 800e000:	0003      	movs	r3, r0
 800e002:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e004:	e009      	b.n	800e01a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e006:	f7fd fd09 	bl	800ba1c <HAL_GetTick>
 800e00a:	0002      	movs	r2, r0
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	4a47      	ldr	r2, [pc, #284]	@ (800e130 <HAL_RCC_OscConfig+0x69c>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d901      	bls.n	800e01a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800e016:	2303      	movs	r3, #3
 800e018:	e105      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e01a:	4b40      	ldr	r3, [pc, #256]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800e01c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e01e:	2380      	movs	r3, #128	@ 0x80
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4013      	ands	r3, r2
 800e024:	d1ef      	bne.n	800e006 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800e026:	2323      	movs	r3, #35	@ 0x23
 800e028:	18fb      	adds	r3, r7, r3
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d105      	bne.n	800e03c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e030:	4b3a      	ldr	r3, [pc, #232]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800e032:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e034:	4b39      	ldr	r3, [pc, #228]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800e036:	493f      	ldr	r1, [pc, #252]	@ (800e134 <HAL_RCC_OscConfig+0x6a0>)
 800e038:	400a      	ands	r2, r1
 800e03a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2220      	movs	r2, #32
 800e042:	4013      	ands	r3, r2
 800e044:	d049      	beq.n	800e0da <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	699b      	ldr	r3, [r3, #24]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d026      	beq.n	800e09c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800e04e:	4b33      	ldr	r3, [pc, #204]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800e050:	689a      	ldr	r2, [r3, #8]
 800e052:	4b32      	ldr	r3, [pc, #200]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800e054:	2101      	movs	r1, #1
 800e056:	430a      	orrs	r2, r1
 800e058:	609a      	str	r2, [r3, #8]
 800e05a:	4b30      	ldr	r3, [pc, #192]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800e05c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e05e:	4b2f      	ldr	r3, [pc, #188]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800e060:	2101      	movs	r1, #1
 800e062:	430a      	orrs	r2, r1
 800e064:	635a      	str	r2, [r3, #52]	@ 0x34
 800e066:	4b34      	ldr	r3, [pc, #208]	@ (800e138 <HAL_RCC_OscConfig+0x6a4>)
 800e068:	6a1a      	ldr	r2, [r3, #32]
 800e06a:	4b33      	ldr	r3, [pc, #204]	@ (800e138 <HAL_RCC_OscConfig+0x6a4>)
 800e06c:	2180      	movs	r1, #128	@ 0x80
 800e06e:	0189      	lsls	r1, r1, #6
 800e070:	430a      	orrs	r2, r1
 800e072:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e074:	f7fd fcd2 	bl	800ba1c <HAL_GetTick>
 800e078:	0003      	movs	r3, r0
 800e07a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e07c:	e008      	b.n	800e090 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e07e:	f7fd fccd 	bl	800ba1c <HAL_GetTick>
 800e082:	0002      	movs	r2, r0
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	1ad3      	subs	r3, r2, r3
 800e088:	2b02      	cmp	r3, #2
 800e08a:	d901      	bls.n	800e090 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800e08c:	2303      	movs	r3, #3
 800e08e:	e0ca      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e090:	4b22      	ldr	r3, [pc, #136]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800e092:	689b      	ldr	r3, [r3, #8]
 800e094:	2202      	movs	r2, #2
 800e096:	4013      	ands	r3, r2
 800e098:	d0f1      	beq.n	800e07e <HAL_RCC_OscConfig+0x5ea>
 800e09a:	e01e      	b.n	800e0da <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800e09c:	4b1f      	ldr	r3, [pc, #124]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800e09e:	689a      	ldr	r2, [r3, #8]
 800e0a0:	4b1e      	ldr	r3, [pc, #120]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800e0a2:	2101      	movs	r1, #1
 800e0a4:	438a      	bics	r2, r1
 800e0a6:	609a      	str	r2, [r3, #8]
 800e0a8:	4b23      	ldr	r3, [pc, #140]	@ (800e138 <HAL_RCC_OscConfig+0x6a4>)
 800e0aa:	6a1a      	ldr	r2, [r3, #32]
 800e0ac:	4b22      	ldr	r3, [pc, #136]	@ (800e138 <HAL_RCC_OscConfig+0x6a4>)
 800e0ae:	4923      	ldr	r1, [pc, #140]	@ (800e13c <HAL_RCC_OscConfig+0x6a8>)
 800e0b0:	400a      	ands	r2, r1
 800e0b2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e0b4:	f7fd fcb2 	bl	800ba1c <HAL_GetTick>
 800e0b8:	0003      	movs	r3, r0
 800e0ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e0bc:	e008      	b.n	800e0d0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e0be:	f7fd fcad 	bl	800ba1c <HAL_GetTick>
 800e0c2:	0002      	movs	r2, r0
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	2b02      	cmp	r3, #2
 800e0ca:	d901      	bls.n	800e0d0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	e0aa      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e0d0:	4b12      	ldr	r3, [pc, #72]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800e0d2:	689b      	ldr	r3, [r3, #8]
 800e0d4:	2202      	movs	r2, #2
 800e0d6:	4013      	ands	r3, r2
 800e0d8:	d1f1      	bne.n	800e0be <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d100      	bne.n	800e0e4 <HAL_RCC_OscConfig+0x650>
 800e0e2:	e09f      	b.n	800e224 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	2b0c      	cmp	r3, #12
 800e0e8:	d100      	bne.n	800e0ec <HAL_RCC_OscConfig+0x658>
 800e0ea:	e078      	b.n	800e1de <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0f0:	2b02      	cmp	r3, #2
 800e0f2:	d159      	bne.n	800e1a8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e0f4:	4b09      	ldr	r3, [pc, #36]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	4b08      	ldr	r3, [pc, #32]	@ (800e11c <HAL_RCC_OscConfig+0x688>)
 800e0fa:	4911      	ldr	r1, [pc, #68]	@ (800e140 <HAL_RCC_OscConfig+0x6ac>)
 800e0fc:	400a      	ands	r2, r1
 800e0fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e100:	f7fd fc8c 	bl	800ba1c <HAL_GetTick>
 800e104:	0003      	movs	r3, r0
 800e106:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800e108:	e01c      	b.n	800e144 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e10a:	f7fd fc87 	bl	800ba1c <HAL_GetTick>
 800e10e:	0002      	movs	r2, r0
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	1ad3      	subs	r3, r2, r3
 800e114:	2b02      	cmp	r3, #2
 800e116:	d915      	bls.n	800e144 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800e118:	2303      	movs	r3, #3
 800e11a:	e084      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
 800e11c:	40021000 	.word	0x40021000
 800e120:	ffff1fff 	.word	0xffff1fff
 800e124:	fffffeff 	.word	0xfffffeff
 800e128:	40007000 	.word	0x40007000
 800e12c:	fffffbff 	.word	0xfffffbff
 800e130:	00001388 	.word	0x00001388
 800e134:	efffffff 	.word	0xefffffff
 800e138:	40010000 	.word	0x40010000
 800e13c:	ffffdfff 	.word	0xffffdfff
 800e140:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800e144:	4b3a      	ldr	r3, [pc, #232]	@ (800e230 <HAL_RCC_OscConfig+0x79c>)
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	2380      	movs	r3, #128	@ 0x80
 800e14a:	049b      	lsls	r3, r3, #18
 800e14c:	4013      	ands	r3, r2
 800e14e:	d1dc      	bne.n	800e10a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e150:	4b37      	ldr	r3, [pc, #220]	@ (800e230 <HAL_RCC_OscConfig+0x79c>)
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	4a37      	ldr	r2, [pc, #220]	@ (800e234 <HAL_RCC_OscConfig+0x7a0>)
 800e156:	4013      	ands	r3, r2
 800e158:	0019      	movs	r1, r3
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e162:	431a      	orrs	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e168:	431a      	orrs	r2, r3
 800e16a:	4b31      	ldr	r3, [pc, #196]	@ (800e230 <HAL_RCC_OscConfig+0x79c>)
 800e16c:	430a      	orrs	r2, r1
 800e16e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e170:	4b2f      	ldr	r3, [pc, #188]	@ (800e230 <HAL_RCC_OscConfig+0x79c>)
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	4b2e      	ldr	r3, [pc, #184]	@ (800e230 <HAL_RCC_OscConfig+0x79c>)
 800e176:	2180      	movs	r1, #128	@ 0x80
 800e178:	0449      	lsls	r1, r1, #17
 800e17a:	430a      	orrs	r2, r1
 800e17c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e17e:	f7fd fc4d 	bl	800ba1c <HAL_GetTick>
 800e182:	0003      	movs	r3, r0
 800e184:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800e186:	e008      	b.n	800e19a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e188:	f7fd fc48 	bl	800ba1c <HAL_GetTick>
 800e18c:	0002      	movs	r2, r0
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	1ad3      	subs	r3, r2, r3
 800e192:	2b02      	cmp	r3, #2
 800e194:	d901      	bls.n	800e19a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800e196:	2303      	movs	r3, #3
 800e198:	e045      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800e19a:	4b25      	ldr	r3, [pc, #148]	@ (800e230 <HAL_RCC_OscConfig+0x79c>)
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	2380      	movs	r3, #128	@ 0x80
 800e1a0:	049b      	lsls	r3, r3, #18
 800e1a2:	4013      	ands	r3, r2
 800e1a4:	d0f0      	beq.n	800e188 <HAL_RCC_OscConfig+0x6f4>
 800e1a6:	e03d      	b.n	800e224 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e1a8:	4b21      	ldr	r3, [pc, #132]	@ (800e230 <HAL_RCC_OscConfig+0x79c>)
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	4b20      	ldr	r3, [pc, #128]	@ (800e230 <HAL_RCC_OscConfig+0x79c>)
 800e1ae:	4922      	ldr	r1, [pc, #136]	@ (800e238 <HAL_RCC_OscConfig+0x7a4>)
 800e1b0:	400a      	ands	r2, r1
 800e1b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e1b4:	f7fd fc32 	bl	800ba1c <HAL_GetTick>
 800e1b8:	0003      	movs	r3, r0
 800e1ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800e1bc:	e008      	b.n	800e1d0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e1be:	f7fd fc2d 	bl	800ba1c <HAL_GetTick>
 800e1c2:	0002      	movs	r2, r0
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	1ad3      	subs	r3, r2, r3
 800e1c8:	2b02      	cmp	r3, #2
 800e1ca:	d901      	bls.n	800e1d0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800e1cc:	2303      	movs	r3, #3
 800e1ce:	e02a      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800e1d0:	4b17      	ldr	r3, [pc, #92]	@ (800e230 <HAL_RCC_OscConfig+0x79c>)
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	2380      	movs	r3, #128	@ 0x80
 800e1d6:	049b      	lsls	r3, r3, #18
 800e1d8:	4013      	ands	r3, r2
 800e1da:	d1f0      	bne.n	800e1be <HAL_RCC_OscConfig+0x72a>
 800e1dc:	e022      	b.n	800e224 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d101      	bne.n	800e1ea <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e01d      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800e1ea:	4b11      	ldr	r3, [pc, #68]	@ (800e230 <HAL_RCC_OscConfig+0x79c>)
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e1f0:	69ba      	ldr	r2, [r7, #24]
 800e1f2:	2380      	movs	r3, #128	@ 0x80
 800e1f4:	025b      	lsls	r3, r3, #9
 800e1f6:	401a      	ands	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d10f      	bne.n	800e220 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800e200:	69ba      	ldr	r2, [r7, #24]
 800e202:	23f0      	movs	r3, #240	@ 0xf0
 800e204:	039b      	lsls	r3, r3, #14
 800e206:	401a      	ands	r2, r3
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d107      	bne.n	800e220 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800e210:	69ba      	ldr	r2, [r7, #24]
 800e212:	23c0      	movs	r3, #192	@ 0xc0
 800e214:	041b      	lsls	r3, r3, #16
 800e216:	401a      	ands	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d001      	beq.n	800e224 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	e000      	b.n	800e226 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800e224:	2300      	movs	r3, #0
}
 800e226:	0018      	movs	r0, r3
 800e228:	46bd      	mov	sp, r7
 800e22a:	b00a      	add	sp, #40	@ 0x28
 800e22c:	bdb0      	pop	{r4, r5, r7, pc}
 800e22e:	46c0      	nop			@ (mov r8, r8)
 800e230:	40021000 	.word	0x40021000
 800e234:	ff02ffff 	.word	0xff02ffff
 800e238:	feffffff 	.word	0xfeffffff

0800e23c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e23c:	b5b0      	push	{r4, r5, r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d101      	bne.n	800e250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e24c:	2301      	movs	r3, #1
 800e24e:	e128      	b.n	800e4a2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e250:	4b96      	ldr	r3, [pc, #600]	@ (800e4ac <HAL_RCC_ClockConfig+0x270>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2201      	movs	r2, #1
 800e256:	4013      	ands	r3, r2
 800e258:	683a      	ldr	r2, [r7, #0]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d91e      	bls.n	800e29c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e25e:	4b93      	ldr	r3, [pc, #588]	@ (800e4ac <HAL_RCC_ClockConfig+0x270>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2201      	movs	r2, #1
 800e264:	4393      	bics	r3, r2
 800e266:	0019      	movs	r1, r3
 800e268:	4b90      	ldr	r3, [pc, #576]	@ (800e4ac <HAL_RCC_ClockConfig+0x270>)
 800e26a:	683a      	ldr	r2, [r7, #0]
 800e26c:	430a      	orrs	r2, r1
 800e26e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800e270:	f7fd fbd4 	bl	800ba1c <HAL_GetTick>
 800e274:	0003      	movs	r3, r0
 800e276:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e278:	e009      	b.n	800e28e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e27a:	f7fd fbcf 	bl	800ba1c <HAL_GetTick>
 800e27e:	0002      	movs	r2, r0
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	1ad3      	subs	r3, r2, r3
 800e284:	4a8a      	ldr	r2, [pc, #552]	@ (800e4b0 <HAL_RCC_ClockConfig+0x274>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d901      	bls.n	800e28e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800e28a:	2303      	movs	r3, #3
 800e28c:	e109      	b.n	800e4a2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e28e:	4b87      	ldr	r3, [pc, #540]	@ (800e4ac <HAL_RCC_ClockConfig+0x270>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	2201      	movs	r2, #1
 800e294:	4013      	ands	r3, r2
 800e296:	683a      	ldr	r2, [r7, #0]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d1ee      	bne.n	800e27a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2202      	movs	r2, #2
 800e2a2:	4013      	ands	r3, r2
 800e2a4:	d009      	beq.n	800e2ba <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e2a6:	4b83      	ldr	r3, [pc, #524]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	22f0      	movs	r2, #240	@ 0xf0
 800e2ac:	4393      	bics	r3, r2
 800e2ae:	0019      	movs	r1, r3
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	689a      	ldr	r2, [r3, #8]
 800e2b4:	4b7f      	ldr	r3, [pc, #508]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e2b6:	430a      	orrs	r2, r1
 800e2b8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2201      	movs	r2, #1
 800e2c0:	4013      	ands	r3, r2
 800e2c2:	d100      	bne.n	800e2c6 <HAL_RCC_ClockConfig+0x8a>
 800e2c4:	e089      	b.n	800e3da <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	2b02      	cmp	r3, #2
 800e2cc:	d107      	bne.n	800e2de <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e2ce:	4b79      	ldr	r3, [pc, #484]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	2380      	movs	r3, #128	@ 0x80
 800e2d4:	029b      	lsls	r3, r3, #10
 800e2d6:	4013      	ands	r3, r2
 800e2d8:	d120      	bne.n	800e31c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e0e1      	b.n	800e4a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	2b03      	cmp	r3, #3
 800e2e4:	d107      	bne.n	800e2f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e2e6:	4b73      	ldr	r3, [pc, #460]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	2380      	movs	r3, #128	@ 0x80
 800e2ec:	049b      	lsls	r3, r3, #18
 800e2ee:	4013      	ands	r3, r2
 800e2f0:	d114      	bne.n	800e31c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	e0d5      	b.n	800e4a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d106      	bne.n	800e30c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e2fe:	4b6d      	ldr	r3, [pc, #436]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	2204      	movs	r2, #4
 800e304:	4013      	ands	r3, r2
 800e306:	d109      	bne.n	800e31c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800e308:	2301      	movs	r3, #1
 800e30a:	e0ca      	b.n	800e4a2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800e30c:	4b69      	ldr	r3, [pc, #420]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	2380      	movs	r3, #128	@ 0x80
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4013      	ands	r3, r2
 800e316:	d101      	bne.n	800e31c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800e318:	2301      	movs	r3, #1
 800e31a:	e0c2      	b.n	800e4a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e31c:	4b65      	ldr	r3, [pc, #404]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	2203      	movs	r2, #3
 800e322:	4393      	bics	r3, r2
 800e324:	0019      	movs	r1, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	685a      	ldr	r2, [r3, #4]
 800e32a:	4b62      	ldr	r3, [pc, #392]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e32c:	430a      	orrs	r2, r1
 800e32e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e330:	f7fd fb74 	bl	800ba1c <HAL_GetTick>
 800e334:	0003      	movs	r3, r0
 800e336:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	2b02      	cmp	r3, #2
 800e33e:	d111      	bne.n	800e364 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800e340:	e009      	b.n	800e356 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e342:	f7fd fb6b 	bl	800ba1c <HAL_GetTick>
 800e346:	0002      	movs	r2, r0
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	1ad3      	subs	r3, r2, r3
 800e34c:	4a58      	ldr	r2, [pc, #352]	@ (800e4b0 <HAL_RCC_ClockConfig+0x274>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d901      	bls.n	800e356 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800e352:	2303      	movs	r3, #3
 800e354:	e0a5      	b.n	800e4a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800e356:	4b57      	ldr	r3, [pc, #348]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	220c      	movs	r2, #12
 800e35c:	4013      	ands	r3, r2
 800e35e:	2b08      	cmp	r3, #8
 800e360:	d1ef      	bne.n	800e342 <HAL_RCC_ClockConfig+0x106>
 800e362:	e03a      	b.n	800e3da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	2b03      	cmp	r3, #3
 800e36a:	d111      	bne.n	800e390 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e36c:	e009      	b.n	800e382 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e36e:	f7fd fb55 	bl	800ba1c <HAL_GetTick>
 800e372:	0002      	movs	r2, r0
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	1ad3      	subs	r3, r2, r3
 800e378:	4a4d      	ldr	r2, [pc, #308]	@ (800e4b0 <HAL_RCC_ClockConfig+0x274>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d901      	bls.n	800e382 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800e37e:	2303      	movs	r3, #3
 800e380:	e08f      	b.n	800e4a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e382:	4b4c      	ldr	r3, [pc, #304]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	220c      	movs	r2, #12
 800e388:	4013      	ands	r3, r2
 800e38a:	2b0c      	cmp	r3, #12
 800e38c:	d1ef      	bne.n	800e36e <HAL_RCC_ClockConfig+0x132>
 800e38e:	e024      	b.n	800e3da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	2b01      	cmp	r3, #1
 800e396:	d11b      	bne.n	800e3d0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800e398:	e009      	b.n	800e3ae <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e39a:	f7fd fb3f 	bl	800ba1c <HAL_GetTick>
 800e39e:	0002      	movs	r2, r0
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	1ad3      	subs	r3, r2, r3
 800e3a4:	4a42      	ldr	r2, [pc, #264]	@ (800e4b0 <HAL_RCC_ClockConfig+0x274>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d901      	bls.n	800e3ae <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800e3aa:	2303      	movs	r3, #3
 800e3ac:	e079      	b.n	800e4a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800e3ae:	4b41      	ldr	r3, [pc, #260]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	220c      	movs	r2, #12
 800e3b4:	4013      	ands	r3, r2
 800e3b6:	2b04      	cmp	r3, #4
 800e3b8:	d1ef      	bne.n	800e39a <HAL_RCC_ClockConfig+0x15e>
 800e3ba:	e00e      	b.n	800e3da <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e3bc:	f7fd fb2e 	bl	800ba1c <HAL_GetTick>
 800e3c0:	0002      	movs	r2, r0
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	4a3a      	ldr	r2, [pc, #232]	@ (800e4b0 <HAL_RCC_ClockConfig+0x274>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d901      	bls.n	800e3d0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800e3cc:	2303      	movs	r3, #3
 800e3ce:	e068      	b.n	800e4a2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800e3d0:	4b38      	ldr	r3, [pc, #224]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e3d2:	68db      	ldr	r3, [r3, #12]
 800e3d4:	220c      	movs	r2, #12
 800e3d6:	4013      	ands	r3, r2
 800e3d8:	d1f0      	bne.n	800e3bc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e3da:	4b34      	ldr	r3, [pc, #208]	@ (800e4ac <HAL_RCC_ClockConfig+0x270>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	683a      	ldr	r2, [r7, #0]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d21e      	bcs.n	800e426 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e3e8:	4b30      	ldr	r3, [pc, #192]	@ (800e4ac <HAL_RCC_ClockConfig+0x270>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	4393      	bics	r3, r2
 800e3f0:	0019      	movs	r1, r3
 800e3f2:	4b2e      	ldr	r3, [pc, #184]	@ (800e4ac <HAL_RCC_ClockConfig+0x270>)
 800e3f4:	683a      	ldr	r2, [r7, #0]
 800e3f6:	430a      	orrs	r2, r1
 800e3f8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800e3fa:	f7fd fb0f 	bl	800ba1c <HAL_GetTick>
 800e3fe:	0003      	movs	r3, r0
 800e400:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e402:	e009      	b.n	800e418 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e404:	f7fd fb0a 	bl	800ba1c <HAL_GetTick>
 800e408:	0002      	movs	r2, r0
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	1ad3      	subs	r3, r2, r3
 800e40e:	4a28      	ldr	r2, [pc, #160]	@ (800e4b0 <HAL_RCC_ClockConfig+0x274>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d901      	bls.n	800e418 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800e414:	2303      	movs	r3, #3
 800e416:	e044      	b.n	800e4a2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e418:	4b24      	ldr	r3, [pc, #144]	@ (800e4ac <HAL_RCC_ClockConfig+0x270>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2201      	movs	r2, #1
 800e41e:	4013      	ands	r3, r2
 800e420:	683a      	ldr	r2, [r7, #0]
 800e422:	429a      	cmp	r2, r3
 800e424:	d1ee      	bne.n	800e404 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2204      	movs	r2, #4
 800e42c:	4013      	ands	r3, r2
 800e42e:	d009      	beq.n	800e444 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e430:	4b20      	ldr	r3, [pc, #128]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	4a20      	ldr	r2, [pc, #128]	@ (800e4b8 <HAL_RCC_ClockConfig+0x27c>)
 800e436:	4013      	ands	r3, r2
 800e438:	0019      	movs	r1, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	68da      	ldr	r2, [r3, #12]
 800e43e:	4b1d      	ldr	r3, [pc, #116]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e440:	430a      	orrs	r2, r1
 800e442:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	2208      	movs	r2, #8
 800e44a:	4013      	ands	r3, r2
 800e44c:	d00a      	beq.n	800e464 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800e44e:	4b19      	ldr	r3, [pc, #100]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	4a1a      	ldr	r2, [pc, #104]	@ (800e4bc <HAL_RCC_ClockConfig+0x280>)
 800e454:	4013      	ands	r3, r2
 800e456:	0019      	movs	r1, r3
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	691b      	ldr	r3, [r3, #16]
 800e45c:	00da      	lsls	r2, r3, #3
 800e45e:	4b15      	ldr	r3, [pc, #84]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e460:	430a      	orrs	r2, r1
 800e462:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e464:	f000 f832 	bl	800e4cc <HAL_RCC_GetSysClockFreq>
 800e468:	0001      	movs	r1, r0
 800e46a:	4b12      	ldr	r3, [pc, #72]	@ (800e4b4 <HAL_RCC_ClockConfig+0x278>)
 800e46c:	68db      	ldr	r3, [r3, #12]
 800e46e:	091b      	lsrs	r3, r3, #4
 800e470:	220f      	movs	r2, #15
 800e472:	4013      	ands	r3, r2
 800e474:	4a12      	ldr	r2, [pc, #72]	@ (800e4c0 <HAL_RCC_ClockConfig+0x284>)
 800e476:	5cd3      	ldrb	r3, [r2, r3]
 800e478:	000a      	movs	r2, r1
 800e47a:	40da      	lsrs	r2, r3
 800e47c:	4b11      	ldr	r3, [pc, #68]	@ (800e4c4 <HAL_RCC_ClockConfig+0x288>)
 800e47e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800e480:	4b11      	ldr	r3, [pc, #68]	@ (800e4c8 <HAL_RCC_ClockConfig+0x28c>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	250b      	movs	r5, #11
 800e486:	197c      	adds	r4, r7, r5
 800e488:	0018      	movs	r0, r3
 800e48a:	f7fd fa81 	bl	800b990 <HAL_InitTick>
 800e48e:	0003      	movs	r3, r0
 800e490:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800e492:	197b      	adds	r3, r7, r5
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d002      	beq.n	800e4a0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800e49a:	197b      	adds	r3, r7, r5
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	e000      	b.n	800e4a2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800e4a0:	2300      	movs	r3, #0
}
 800e4a2:	0018      	movs	r0, r3
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	b004      	add	sp, #16
 800e4a8:	bdb0      	pop	{r4, r5, r7, pc}
 800e4aa:	46c0      	nop			@ (mov r8, r8)
 800e4ac:	40022000 	.word	0x40022000
 800e4b0:	00001388 	.word	0x00001388
 800e4b4:	40021000 	.word	0x40021000
 800e4b8:	fffff8ff 	.word	0xfffff8ff
 800e4bc:	ffffc7ff 	.word	0xffffc7ff
 800e4c0:	08014758 	.word	0x08014758
 800e4c4:	20000000 	.word	0x20000000
 800e4c8:	20000190 	.word	0x20000190

0800e4cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e4cc:	b5b0      	push	{r4, r5, r7, lr}
 800e4ce:	b08e      	sub	sp, #56	@ 0x38
 800e4d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800e4d2:	4b4c      	ldr	r3, [pc, #304]	@ (800e604 <HAL_RCC_GetSysClockFreq+0x138>)
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800e4d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e4da:	230c      	movs	r3, #12
 800e4dc:	4013      	ands	r3, r2
 800e4de:	2b0c      	cmp	r3, #12
 800e4e0:	d014      	beq.n	800e50c <HAL_RCC_GetSysClockFreq+0x40>
 800e4e2:	d900      	bls.n	800e4e6 <HAL_RCC_GetSysClockFreq+0x1a>
 800e4e4:	e07b      	b.n	800e5de <HAL_RCC_GetSysClockFreq+0x112>
 800e4e6:	2b04      	cmp	r3, #4
 800e4e8:	d002      	beq.n	800e4f0 <HAL_RCC_GetSysClockFreq+0x24>
 800e4ea:	2b08      	cmp	r3, #8
 800e4ec:	d00b      	beq.n	800e506 <HAL_RCC_GetSysClockFreq+0x3a>
 800e4ee:	e076      	b.n	800e5de <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800e4f0:	4b44      	ldr	r3, [pc, #272]	@ (800e604 <HAL_RCC_GetSysClockFreq+0x138>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2210      	movs	r2, #16
 800e4f6:	4013      	ands	r3, r2
 800e4f8:	d002      	beq.n	800e500 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800e4fa:	4b43      	ldr	r3, [pc, #268]	@ (800e608 <HAL_RCC_GetSysClockFreq+0x13c>)
 800e4fc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800e4fe:	e07c      	b.n	800e5fa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800e500:	4b42      	ldr	r3, [pc, #264]	@ (800e60c <HAL_RCC_GetSysClockFreq+0x140>)
 800e502:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e504:	e079      	b.n	800e5fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800e506:	4b42      	ldr	r3, [pc, #264]	@ (800e610 <HAL_RCC_GetSysClockFreq+0x144>)
 800e508:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e50a:	e076      	b.n	800e5fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800e50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e50e:	0c9a      	lsrs	r2, r3, #18
 800e510:	230f      	movs	r3, #15
 800e512:	401a      	ands	r2, r3
 800e514:	4b3f      	ldr	r3, [pc, #252]	@ (800e614 <HAL_RCC_GetSysClockFreq+0x148>)
 800e516:	5c9b      	ldrb	r3, [r3, r2]
 800e518:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800e51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e51c:	0d9a      	lsrs	r2, r3, #22
 800e51e:	2303      	movs	r3, #3
 800e520:	4013      	ands	r3, r2
 800e522:	3301      	adds	r3, #1
 800e524:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e526:	4b37      	ldr	r3, [pc, #220]	@ (800e604 <HAL_RCC_GetSysClockFreq+0x138>)
 800e528:	68da      	ldr	r2, [r3, #12]
 800e52a:	2380      	movs	r3, #128	@ 0x80
 800e52c:	025b      	lsls	r3, r3, #9
 800e52e:	4013      	ands	r3, r2
 800e530:	d01a      	beq.n	800e568 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e534:	61bb      	str	r3, [r7, #24]
 800e536:	2300      	movs	r3, #0
 800e538:	61fb      	str	r3, [r7, #28]
 800e53a:	4a35      	ldr	r2, [pc, #212]	@ (800e610 <HAL_RCC_GetSysClockFreq+0x144>)
 800e53c:	2300      	movs	r3, #0
 800e53e:	69b8      	ldr	r0, [r7, #24]
 800e540:	69f9      	ldr	r1, [r7, #28]
 800e542:	f7f1 ff19 	bl	8000378 <__aeabi_lmul>
 800e546:	0002      	movs	r2, r0
 800e548:	000b      	movs	r3, r1
 800e54a:	0010      	movs	r0, r2
 800e54c:	0019      	movs	r1, r3
 800e54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e550:	613b      	str	r3, [r7, #16]
 800e552:	2300      	movs	r3, #0
 800e554:	617b      	str	r3, [r7, #20]
 800e556:	693a      	ldr	r2, [r7, #16]
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	f7f1 feed 	bl	8000338 <__aeabi_uldivmod>
 800e55e:	0002      	movs	r2, r0
 800e560:	000b      	movs	r3, r1
 800e562:	0013      	movs	r3, r2
 800e564:	637b      	str	r3, [r7, #52]	@ 0x34
 800e566:	e037      	b.n	800e5d8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800e568:	4b26      	ldr	r3, [pc, #152]	@ (800e604 <HAL_RCC_GetSysClockFreq+0x138>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2210      	movs	r2, #16
 800e56e:	4013      	ands	r3, r2
 800e570:	d01a      	beq.n	800e5a8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800e572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e574:	60bb      	str	r3, [r7, #8]
 800e576:	2300      	movs	r3, #0
 800e578:	60fb      	str	r3, [r7, #12]
 800e57a:	4a23      	ldr	r2, [pc, #140]	@ (800e608 <HAL_RCC_GetSysClockFreq+0x13c>)
 800e57c:	2300      	movs	r3, #0
 800e57e:	68b8      	ldr	r0, [r7, #8]
 800e580:	68f9      	ldr	r1, [r7, #12]
 800e582:	f7f1 fef9 	bl	8000378 <__aeabi_lmul>
 800e586:	0002      	movs	r2, r0
 800e588:	000b      	movs	r3, r1
 800e58a:	0010      	movs	r0, r2
 800e58c:	0019      	movs	r1, r3
 800e58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e590:	603b      	str	r3, [r7, #0]
 800e592:	2300      	movs	r3, #0
 800e594:	607b      	str	r3, [r7, #4]
 800e596:	683a      	ldr	r2, [r7, #0]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f7f1 fecd 	bl	8000338 <__aeabi_uldivmod>
 800e59e:	0002      	movs	r2, r0
 800e5a0:	000b      	movs	r3, r1
 800e5a2:	0013      	movs	r3, r2
 800e5a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5a6:	e017      	b.n	800e5d8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800e5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5aa:	0018      	movs	r0, r3
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	0019      	movs	r1, r3
 800e5b0:	4a16      	ldr	r2, [pc, #88]	@ (800e60c <HAL_RCC_GetSysClockFreq+0x140>)
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	f7f1 fee0 	bl	8000378 <__aeabi_lmul>
 800e5b8:	0002      	movs	r2, r0
 800e5ba:	000b      	movs	r3, r1
 800e5bc:	0010      	movs	r0, r2
 800e5be:	0019      	movs	r1, r3
 800e5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5c2:	001c      	movs	r4, r3
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	001d      	movs	r5, r3
 800e5c8:	0022      	movs	r2, r4
 800e5ca:	002b      	movs	r3, r5
 800e5cc:	f7f1 feb4 	bl	8000338 <__aeabi_uldivmod>
 800e5d0:	0002      	movs	r2, r0
 800e5d2:	000b      	movs	r3, r1
 800e5d4:	0013      	movs	r3, r2
 800e5d6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800e5d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5da:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e5dc:	e00d      	b.n	800e5fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800e5de:	4b09      	ldr	r3, [pc, #36]	@ (800e604 <HAL_RCC_GetSysClockFreq+0x138>)
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	0b5b      	lsrs	r3, r3, #13
 800e5e4:	2207      	movs	r2, #7
 800e5e6:	4013      	ands	r3, r2
 800e5e8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800e5ea:	6a3b      	ldr	r3, [r7, #32]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	2280      	movs	r2, #128	@ 0x80
 800e5f0:	0212      	lsls	r2, r2, #8
 800e5f2:	409a      	lsls	r2, r3
 800e5f4:	0013      	movs	r3, r2
 800e5f6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800e5f8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800e5fc:	0018      	movs	r0, r3
 800e5fe:	46bd      	mov	sp, r7
 800e600:	b00e      	add	sp, #56	@ 0x38
 800e602:	bdb0      	pop	{r4, r5, r7, pc}
 800e604:	40021000 	.word	0x40021000
 800e608:	003d0900 	.word	0x003d0900
 800e60c:	00f42400 	.word	0x00f42400
 800e610:	007a1200 	.word	0x007a1200
 800e614:	08014770 	.word	0x08014770

0800e618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e61c:	4b02      	ldr	r3, [pc, #8]	@ (800e628 <HAL_RCC_GetHCLKFreq+0x10>)
 800e61e:	681b      	ldr	r3, [r3, #0]
}
 800e620:	0018      	movs	r0, r3
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	46c0      	nop			@ (mov r8, r8)
 800e628:	20000000 	.word	0x20000000

0800e62c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e630:	f7ff fff2 	bl	800e618 <HAL_RCC_GetHCLKFreq>
 800e634:	0001      	movs	r1, r0
 800e636:	4b06      	ldr	r3, [pc, #24]	@ (800e650 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	0a1b      	lsrs	r3, r3, #8
 800e63c:	2207      	movs	r2, #7
 800e63e:	4013      	ands	r3, r2
 800e640:	4a04      	ldr	r2, [pc, #16]	@ (800e654 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e642:	5cd3      	ldrb	r3, [r2, r3]
 800e644:	40d9      	lsrs	r1, r3
 800e646:	000b      	movs	r3, r1
}
 800e648:	0018      	movs	r0, r3
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	46c0      	nop			@ (mov r8, r8)
 800e650:	40021000 	.word	0x40021000
 800e654:	08014768 	.word	0x08014768

0800e658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e65c:	f7ff ffdc 	bl	800e618 <HAL_RCC_GetHCLKFreq>
 800e660:	0001      	movs	r1, r0
 800e662:	4b06      	ldr	r3, [pc, #24]	@ (800e67c <HAL_RCC_GetPCLK2Freq+0x24>)
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	0adb      	lsrs	r3, r3, #11
 800e668:	2207      	movs	r2, #7
 800e66a:	4013      	ands	r3, r2
 800e66c:	4a04      	ldr	r2, [pc, #16]	@ (800e680 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e66e:	5cd3      	ldrb	r3, [r2, r3]
 800e670:	40d9      	lsrs	r1, r3
 800e672:	000b      	movs	r3, r1
}
 800e674:	0018      	movs	r0, r3
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	46c0      	nop			@ (mov r8, r8)
 800e67c:	40021000 	.word	0x40021000
 800e680:	08014768 	.word	0x08014768

0800e684 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b086      	sub	sp, #24
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800e68c:	2317      	movs	r3, #23
 800e68e:	18fb      	adds	r3, r7, r3
 800e690:	2200      	movs	r2, #0
 800e692:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2220      	movs	r2, #32
 800e69a:	4013      	ands	r3, r2
 800e69c:	d106      	bne.n	800e6ac <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	2380      	movs	r3, #128	@ 0x80
 800e6a4:	011b      	lsls	r3, r3, #4
 800e6a6:	4013      	ands	r3, r2
 800e6a8:	d100      	bne.n	800e6ac <HAL_RCCEx_PeriphCLKConfig+0x28>
 800e6aa:	e104      	b.n	800e8b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e6ac:	4bb9      	ldr	r3, [pc, #740]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e6ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6b0:	2380      	movs	r3, #128	@ 0x80
 800e6b2:	055b      	lsls	r3, r3, #21
 800e6b4:	4013      	ands	r3, r2
 800e6b6:	d10a      	bne.n	800e6ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e6b8:	4bb6      	ldr	r3, [pc, #728]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e6ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6bc:	4bb5      	ldr	r3, [pc, #724]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e6be:	2180      	movs	r1, #128	@ 0x80
 800e6c0:	0549      	lsls	r1, r1, #21
 800e6c2:	430a      	orrs	r2, r1
 800e6c4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800e6c6:	2317      	movs	r3, #23
 800e6c8:	18fb      	adds	r3, r7, r3
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e6ce:	4bb2      	ldr	r3, [pc, #712]	@ (800e998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	2380      	movs	r3, #128	@ 0x80
 800e6d4:	005b      	lsls	r3, r3, #1
 800e6d6:	4013      	ands	r3, r2
 800e6d8:	d11a      	bne.n	800e710 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e6da:	4baf      	ldr	r3, [pc, #700]	@ (800e998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800e6dc:	681a      	ldr	r2, [r3, #0]
 800e6de:	4bae      	ldr	r3, [pc, #696]	@ (800e998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800e6e0:	2180      	movs	r1, #128	@ 0x80
 800e6e2:	0049      	lsls	r1, r1, #1
 800e6e4:	430a      	orrs	r2, r1
 800e6e6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e6e8:	f7fd f998 	bl	800ba1c <HAL_GetTick>
 800e6ec:	0003      	movs	r3, r0
 800e6ee:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e6f0:	e008      	b.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e6f2:	f7fd f993 	bl	800ba1c <HAL_GetTick>
 800e6f6:	0002      	movs	r2, r0
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	1ad3      	subs	r3, r2, r3
 800e6fc:	2b64      	cmp	r3, #100	@ 0x64
 800e6fe:	d901      	bls.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800e700:	2303      	movs	r3, #3
 800e702:	e143      	b.n	800e98c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e704:	4ba4      	ldr	r3, [pc, #656]	@ (800e998 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	2380      	movs	r3, #128	@ 0x80
 800e70a:	005b      	lsls	r3, r3, #1
 800e70c:	4013      	ands	r3, r2
 800e70e:	d0f0      	beq.n	800e6f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800e710:	4ba0      	ldr	r3, [pc, #640]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	23c0      	movs	r3, #192	@ 0xc0
 800e716:	039b      	lsls	r3, r3, #14
 800e718:	4013      	ands	r3, r2
 800e71a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	685a      	ldr	r2, [r3, #4]
 800e720:	23c0      	movs	r3, #192	@ 0xc0
 800e722:	039b      	lsls	r3, r3, #14
 800e724:	4013      	ands	r3, r2
 800e726:	68fa      	ldr	r2, [r7, #12]
 800e728:	429a      	cmp	r2, r3
 800e72a:	d107      	bne.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	689a      	ldr	r2, [r3, #8]
 800e730:	23c0      	movs	r3, #192	@ 0xc0
 800e732:	039b      	lsls	r3, r3, #14
 800e734:	4013      	ands	r3, r2
 800e736:	68fa      	ldr	r2, [r7, #12]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d013      	beq.n	800e764 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	685a      	ldr	r2, [r3, #4]
 800e740:	23c0      	movs	r3, #192	@ 0xc0
 800e742:	029b      	lsls	r3, r3, #10
 800e744:	401a      	ands	r2, r3
 800e746:	23c0      	movs	r3, #192	@ 0xc0
 800e748:	029b      	lsls	r3, r3, #10
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d10a      	bne.n	800e764 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e74e:	4b91      	ldr	r3, [pc, #580]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	2380      	movs	r3, #128	@ 0x80
 800e754:	029b      	lsls	r3, r3, #10
 800e756:	401a      	ands	r2, r3
 800e758:	2380      	movs	r3, #128	@ 0x80
 800e75a:	029b      	lsls	r3, r3, #10
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d101      	bne.n	800e764 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800e760:	2301      	movs	r3, #1
 800e762:	e113      	b.n	800e98c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800e764:	4b8b      	ldr	r3, [pc, #556]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e766:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e768:	23c0      	movs	r3, #192	@ 0xc0
 800e76a:	029b      	lsls	r3, r3, #10
 800e76c:	4013      	ands	r3, r2
 800e76e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d049      	beq.n	800e80a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	685a      	ldr	r2, [r3, #4]
 800e77a:	23c0      	movs	r3, #192	@ 0xc0
 800e77c:	029b      	lsls	r3, r3, #10
 800e77e:	4013      	ands	r3, r2
 800e780:	68fa      	ldr	r2, [r7, #12]
 800e782:	429a      	cmp	r2, r3
 800e784:	d004      	beq.n	800e790 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2220      	movs	r2, #32
 800e78c:	4013      	ands	r3, r2
 800e78e:	d10d      	bne.n	800e7ac <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	689a      	ldr	r2, [r3, #8]
 800e794:	23c0      	movs	r3, #192	@ 0xc0
 800e796:	029b      	lsls	r3, r3, #10
 800e798:	4013      	ands	r3, r2
 800e79a:	68fa      	ldr	r2, [r7, #12]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d034      	beq.n	800e80a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	2380      	movs	r3, #128	@ 0x80
 800e7a6:	011b      	lsls	r3, r3, #4
 800e7a8:	4013      	ands	r3, r2
 800e7aa:	d02e      	beq.n	800e80a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800e7ac:	4b79      	ldr	r3, [pc, #484]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e7ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7b0:	4a7a      	ldr	r2, [pc, #488]	@ (800e99c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800e7b2:	4013      	ands	r3, r2
 800e7b4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e7b6:	4b77      	ldr	r3, [pc, #476]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e7b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e7ba:	4b76      	ldr	r3, [pc, #472]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e7bc:	2180      	movs	r1, #128	@ 0x80
 800e7be:	0309      	lsls	r1, r1, #12
 800e7c0:	430a      	orrs	r2, r1
 800e7c2:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e7c4:	4b73      	ldr	r3, [pc, #460]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e7c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e7c8:	4b72      	ldr	r3, [pc, #456]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e7ca:	4975      	ldr	r1, [pc, #468]	@ (800e9a0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800e7cc:	400a      	ands	r2, r1
 800e7ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800e7d0:	4b70      	ldr	r3, [pc, #448]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e7d2:	68fa      	ldr	r2, [r7, #12]
 800e7d4:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800e7d6:	68fa      	ldr	r2, [r7, #12]
 800e7d8:	2380      	movs	r3, #128	@ 0x80
 800e7da:	005b      	lsls	r3, r3, #1
 800e7dc:	4013      	ands	r3, r2
 800e7de:	d014      	beq.n	800e80a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e7e0:	f7fd f91c 	bl	800ba1c <HAL_GetTick>
 800e7e4:	0003      	movs	r3, r0
 800e7e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e7e8:	e009      	b.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e7ea:	f7fd f917 	bl	800ba1c <HAL_GetTick>
 800e7ee:	0002      	movs	r2, r0
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	1ad3      	subs	r3, r2, r3
 800e7f4:	4a6b      	ldr	r2, [pc, #428]	@ (800e9a4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d901      	bls.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800e7fa:	2303      	movs	r3, #3
 800e7fc:	e0c6      	b.n	800e98c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e7fe:	4b65      	ldr	r3, [pc, #404]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e800:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e802:	2380      	movs	r3, #128	@ 0x80
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	4013      	ands	r3, r2
 800e808:	d0ef      	beq.n	800e7ea <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	2380      	movs	r3, #128	@ 0x80
 800e810:	011b      	lsls	r3, r3, #4
 800e812:	4013      	ands	r3, r2
 800e814:	d01f      	beq.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	689a      	ldr	r2, [r3, #8]
 800e81a:	23c0      	movs	r3, #192	@ 0xc0
 800e81c:	029b      	lsls	r3, r3, #10
 800e81e:	401a      	ands	r2, r3
 800e820:	23c0      	movs	r3, #192	@ 0xc0
 800e822:	029b      	lsls	r3, r3, #10
 800e824:	429a      	cmp	r2, r3
 800e826:	d10c      	bne.n	800e842 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800e828:	4b5a      	ldr	r3, [pc, #360]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a5e      	ldr	r2, [pc, #376]	@ (800e9a8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800e82e:	4013      	ands	r3, r2
 800e830:	0019      	movs	r1, r3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	689a      	ldr	r2, [r3, #8]
 800e836:	23c0      	movs	r3, #192	@ 0xc0
 800e838:	039b      	lsls	r3, r3, #14
 800e83a:	401a      	ands	r2, r3
 800e83c:	4b55      	ldr	r3, [pc, #340]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e83e:	430a      	orrs	r2, r1
 800e840:	601a      	str	r2, [r3, #0]
 800e842:	4b54      	ldr	r3, [pc, #336]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e844:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	689a      	ldr	r2, [r3, #8]
 800e84a:	23c0      	movs	r3, #192	@ 0xc0
 800e84c:	029b      	lsls	r3, r3, #10
 800e84e:	401a      	ands	r2, r3
 800e850:	4b50      	ldr	r3, [pc, #320]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e852:	430a      	orrs	r2, r1
 800e854:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	2220      	movs	r2, #32
 800e85c:	4013      	ands	r3, r2
 800e85e:	d01f      	beq.n	800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	685a      	ldr	r2, [r3, #4]
 800e864:	23c0      	movs	r3, #192	@ 0xc0
 800e866:	029b      	lsls	r3, r3, #10
 800e868:	401a      	ands	r2, r3
 800e86a:	23c0      	movs	r3, #192	@ 0xc0
 800e86c:	029b      	lsls	r3, r3, #10
 800e86e:	429a      	cmp	r2, r3
 800e870:	d10c      	bne.n	800e88c <HAL_RCCEx_PeriphCLKConfig+0x208>
 800e872:	4b48      	ldr	r3, [pc, #288]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4a4c      	ldr	r2, [pc, #304]	@ (800e9a8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800e878:	4013      	ands	r3, r2
 800e87a:	0019      	movs	r1, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	685a      	ldr	r2, [r3, #4]
 800e880:	23c0      	movs	r3, #192	@ 0xc0
 800e882:	039b      	lsls	r3, r3, #14
 800e884:	401a      	ands	r2, r3
 800e886:	4b43      	ldr	r3, [pc, #268]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e888:	430a      	orrs	r2, r1
 800e88a:	601a      	str	r2, [r3, #0]
 800e88c:	4b41      	ldr	r3, [pc, #260]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e88e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	685a      	ldr	r2, [r3, #4]
 800e894:	23c0      	movs	r3, #192	@ 0xc0
 800e896:	029b      	lsls	r3, r3, #10
 800e898:	401a      	ands	r2, r3
 800e89a:	4b3e      	ldr	r3, [pc, #248]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e89c:	430a      	orrs	r2, r1
 800e89e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800e8a0:	2317      	movs	r3, #23
 800e8a2:	18fb      	adds	r3, r7, r3
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d105      	bne.n	800e8b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e8aa:	4b3a      	ldr	r3, [pc, #232]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e8ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e8ae:	4b39      	ldr	r3, [pc, #228]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e8b0:	493e      	ldr	r1, [pc, #248]	@ (800e9ac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800e8b2:	400a      	ands	r2, r1
 800e8b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	4013      	ands	r3, r2
 800e8be:	d009      	beq.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e8c0:	4b34      	ldr	r3, [pc, #208]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e8c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8c4:	2203      	movs	r2, #3
 800e8c6:	4393      	bics	r3, r2
 800e8c8:	0019      	movs	r1, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	68da      	ldr	r2, [r3, #12]
 800e8ce:	4b31      	ldr	r3, [pc, #196]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e8d0:	430a      	orrs	r2, r1
 800e8d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2202      	movs	r2, #2
 800e8da:	4013      	ands	r3, r2
 800e8dc:	d009      	beq.n	800e8f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e8de:	4b2d      	ldr	r3, [pc, #180]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e8e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8e2:	220c      	movs	r2, #12
 800e8e4:	4393      	bics	r3, r2
 800e8e6:	0019      	movs	r1, r3
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	691a      	ldr	r2, [r3, #16]
 800e8ec:	4b29      	ldr	r3, [pc, #164]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e8ee:	430a      	orrs	r2, r1
 800e8f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2204      	movs	r2, #4
 800e8f8:	4013      	ands	r3, r2
 800e8fa:	d009      	beq.n	800e910 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e8fc:	4b25      	ldr	r3, [pc, #148]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e8fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e900:	4a2b      	ldr	r2, [pc, #172]	@ (800e9b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800e902:	4013      	ands	r3, r2
 800e904:	0019      	movs	r1, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	695a      	ldr	r2, [r3, #20]
 800e90a:	4b22      	ldr	r3, [pc, #136]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e90c:	430a      	orrs	r2, r1
 800e90e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2208      	movs	r2, #8
 800e916:	4013      	ands	r3, r2
 800e918:	d009      	beq.n	800e92e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e91a:	4b1e      	ldr	r3, [pc, #120]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e91c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e91e:	4a25      	ldr	r2, [pc, #148]	@ (800e9b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800e920:	4013      	ands	r3, r2
 800e922:	0019      	movs	r1, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	699a      	ldr	r2, [r3, #24]
 800e928:	4b1a      	ldr	r3, [pc, #104]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e92a:	430a      	orrs	r2, r1
 800e92c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	2380      	movs	r3, #128	@ 0x80
 800e934:	005b      	lsls	r3, r3, #1
 800e936:	4013      	ands	r3, r2
 800e938:	d009      	beq.n	800e94e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e93a:	4b16      	ldr	r3, [pc, #88]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e93c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e93e:	4a17      	ldr	r2, [pc, #92]	@ (800e99c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800e940:	4013      	ands	r3, r2
 800e942:	0019      	movs	r1, r3
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	69da      	ldr	r2, [r3, #28]
 800e948:	4b12      	ldr	r3, [pc, #72]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e94a:	430a      	orrs	r2, r1
 800e94c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2240      	movs	r2, #64	@ 0x40
 800e954:	4013      	ands	r3, r2
 800e956:	d009      	beq.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e958:	4b0e      	ldr	r3, [pc, #56]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e95a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e95c:	4a16      	ldr	r2, [pc, #88]	@ (800e9b8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800e95e:	4013      	ands	r3, r2
 800e960:	0019      	movs	r1, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e966:	4b0b      	ldr	r3, [pc, #44]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e968:	430a      	orrs	r2, r1
 800e96a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2280      	movs	r2, #128	@ 0x80
 800e972:	4013      	ands	r3, r2
 800e974:	d009      	beq.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800e976:	4b07      	ldr	r3, [pc, #28]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e97a:	4a10      	ldr	r2, [pc, #64]	@ (800e9bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e97c:	4013      	ands	r3, r2
 800e97e:	0019      	movs	r1, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6a1a      	ldr	r2, [r3, #32]
 800e984:	4b03      	ldr	r3, [pc, #12]	@ (800e994 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800e986:	430a      	orrs	r2, r1
 800e988:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e98a:	2300      	movs	r3, #0
}
 800e98c:	0018      	movs	r0, r3
 800e98e:	46bd      	mov	sp, r7
 800e990:	b006      	add	sp, #24
 800e992:	bd80      	pop	{r7, pc}
 800e994:	40021000 	.word	0x40021000
 800e998:	40007000 	.word	0x40007000
 800e99c:	fffcffff 	.word	0xfffcffff
 800e9a0:	fff7ffff 	.word	0xfff7ffff
 800e9a4:	00001388 	.word	0x00001388
 800e9a8:	ffcfffff 	.word	0xffcfffff
 800e9ac:	efffffff 	.word	0xefffffff
 800e9b0:	fffff3ff 	.word	0xfffff3ff
 800e9b4:	ffffcfff 	.word	0xffffcfff
 800e9b8:	fbffffff 	.word	0xfbffffff
 800e9bc:	fff3ffff 	.word	0xfff3ffff

0800e9c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d101      	bne.n	800e9d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	e032      	b.n	800ea38 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2239      	movs	r2, #57	@ 0x39
 800e9d6:	5c9b      	ldrb	r3, [r3, r2]
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d107      	bne.n	800e9ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2238      	movs	r2, #56	@ 0x38
 800e9e2:	2100      	movs	r1, #0
 800e9e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	0018      	movs	r0, r3
 800e9ea:	f7f5 fc33 	bl	8004254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2239      	movs	r2, #57	@ 0x39
 800e9f2:	2102      	movs	r1, #2
 800e9f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681a      	ldr	r2, [r3, #0]
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	3304      	adds	r3, #4
 800e9fe:	0019      	movs	r1, r3
 800ea00:	0010      	movs	r0, r2
 800ea02:	f000 fa79 	bl	800eef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	223e      	movs	r2, #62	@ 0x3e
 800ea0a:	2101      	movs	r1, #1
 800ea0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	223a      	movs	r2, #58	@ 0x3a
 800ea12:	2101      	movs	r1, #1
 800ea14:	5499      	strb	r1, [r3, r2]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	223b      	movs	r2, #59	@ 0x3b
 800ea1a:	2101      	movs	r1, #1
 800ea1c:	5499      	strb	r1, [r3, r2]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	223c      	movs	r2, #60	@ 0x3c
 800ea22:	2101      	movs	r1, #1
 800ea24:	5499      	strb	r1, [r3, r2]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	223d      	movs	r2, #61	@ 0x3d
 800ea2a:	2101      	movs	r1, #1
 800ea2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2239      	movs	r2, #57	@ 0x39
 800ea32:	2101      	movs	r1, #1
 800ea34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ea36:	2300      	movs	r3, #0
}
 800ea38:	0018      	movs	r0, r3
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	b002      	add	sp, #8
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2239      	movs	r2, #57	@ 0x39
 800ea4c:	5c9b      	ldrb	r3, [r3, r2]
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d001      	beq.n	800ea58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ea54:	2301      	movs	r3, #1
 800ea56:	e03b      	b.n	800ead0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2239      	movs	r2, #57	@ 0x39
 800ea5c:	2102      	movs	r1, #2
 800ea5e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	68da      	ldr	r2, [r3, #12]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2101      	movs	r1, #1
 800ea6c:	430a      	orrs	r2, r1
 800ea6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	2380      	movs	r3, #128	@ 0x80
 800ea76:	05db      	lsls	r3, r3, #23
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d00e      	beq.n	800ea9a <HAL_TIM_Base_Start_IT+0x5a>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4a15      	ldr	r2, [pc, #84]	@ (800ead8 <HAL_TIM_Base_Start_IT+0x98>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d009      	beq.n	800ea9a <HAL_TIM_Base_Start_IT+0x5a>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4a14      	ldr	r2, [pc, #80]	@ (800eadc <HAL_TIM_Base_Start_IT+0x9c>)
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d004      	beq.n	800ea9a <HAL_TIM_Base_Start_IT+0x5a>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4a12      	ldr	r2, [pc, #72]	@ (800eae0 <HAL_TIM_Base_Start_IT+0xa0>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d111      	bne.n	800eabe <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	2207      	movs	r2, #7
 800eaa2:	4013      	ands	r3, r2
 800eaa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2b06      	cmp	r3, #6
 800eaaa:	d010      	beq.n	800eace <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	2101      	movs	r1, #1
 800eab8:	430a      	orrs	r2, r1
 800eaba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eabc:	e007      	b.n	800eace <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2101      	movs	r1, #1
 800eaca:	430a      	orrs	r2, r1
 800eacc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eace:	2300      	movs	r3, #0
}
 800ead0:	0018      	movs	r0, r3
 800ead2:	46bd      	mov	sp, r7
 800ead4:	b004      	add	sp, #16
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	40000400 	.word	0x40000400
 800eadc:	40010800 	.word	0x40010800
 800eae0:	40011400 	.word	0x40011400

0800eae4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	68da      	ldr	r2, [r3, #12]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2101      	movs	r1, #1
 800eaf8:	438a      	bics	r2, r1
 800eafa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	6a1b      	ldr	r3, [r3, #32]
 800eb02:	4a0a      	ldr	r2, [pc, #40]	@ (800eb2c <HAL_TIM_Base_Stop_IT+0x48>)
 800eb04:	4013      	ands	r3, r2
 800eb06:	d107      	bne.n	800eb18 <HAL_TIM_Base_Stop_IT+0x34>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	681a      	ldr	r2, [r3, #0]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	2101      	movs	r1, #1
 800eb14:	438a      	bics	r2, r1
 800eb16:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2239      	movs	r2, #57	@ 0x39
 800eb1c:	2101      	movs	r1, #1
 800eb1e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800eb20:	2300      	movs	r3, #0
}
 800eb22:	0018      	movs	r0, r3
 800eb24:	46bd      	mov	sp, r7
 800eb26:	b002      	add	sp, #8
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	46c0      	nop			@ (mov r8, r8)
 800eb2c:	00001111 	.word	0x00001111

0800eb30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	691b      	ldr	r3, [r3, #16]
 800eb3e:	2202      	movs	r2, #2
 800eb40:	4013      	ands	r3, r2
 800eb42:	2b02      	cmp	r3, #2
 800eb44:	d124      	bne.n	800eb90 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	2202      	movs	r2, #2
 800eb4e:	4013      	ands	r3, r2
 800eb50:	2b02      	cmp	r3, #2
 800eb52:	d11d      	bne.n	800eb90 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2203      	movs	r2, #3
 800eb5a:	4252      	negs	r2, r2
 800eb5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2201      	movs	r2, #1
 800eb62:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	699b      	ldr	r3, [r3, #24]
 800eb6a:	2203      	movs	r2, #3
 800eb6c:	4013      	ands	r3, r2
 800eb6e:	d004      	beq.n	800eb7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	0018      	movs	r0, r3
 800eb74:	f000 f9a8 	bl	800eec8 <HAL_TIM_IC_CaptureCallback>
 800eb78:	e007      	b.n	800eb8a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	0018      	movs	r0, r3
 800eb7e:	f000 f99b 	bl	800eeb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	0018      	movs	r0, r3
 800eb86:	f000 f9a7 	bl	800eed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	691b      	ldr	r3, [r3, #16]
 800eb96:	2204      	movs	r2, #4
 800eb98:	4013      	ands	r3, r2
 800eb9a:	2b04      	cmp	r3, #4
 800eb9c:	d125      	bne.n	800ebea <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	68db      	ldr	r3, [r3, #12]
 800eba4:	2204      	movs	r2, #4
 800eba6:	4013      	ands	r3, r2
 800eba8:	2b04      	cmp	r3, #4
 800ebaa:	d11e      	bne.n	800ebea <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2205      	movs	r2, #5
 800ebb2:	4252      	negs	r2, r2
 800ebb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2202      	movs	r2, #2
 800ebba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	699a      	ldr	r2, [r3, #24]
 800ebc2:	23c0      	movs	r3, #192	@ 0xc0
 800ebc4:	009b      	lsls	r3, r3, #2
 800ebc6:	4013      	ands	r3, r2
 800ebc8:	d004      	beq.n	800ebd4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	0018      	movs	r0, r3
 800ebce:	f000 f97b 	bl	800eec8 <HAL_TIM_IC_CaptureCallback>
 800ebd2:	e007      	b.n	800ebe4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	0018      	movs	r0, r3
 800ebd8:	f000 f96e 	bl	800eeb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	0018      	movs	r0, r3
 800ebe0:	f000 f97a 	bl	800eed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	691b      	ldr	r3, [r3, #16]
 800ebf0:	2208      	movs	r2, #8
 800ebf2:	4013      	ands	r3, r2
 800ebf4:	2b08      	cmp	r3, #8
 800ebf6:	d124      	bne.n	800ec42 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	68db      	ldr	r3, [r3, #12]
 800ebfe:	2208      	movs	r2, #8
 800ec00:	4013      	ands	r3, r2
 800ec02:	2b08      	cmp	r3, #8
 800ec04:	d11d      	bne.n	800ec42 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	2209      	movs	r2, #9
 800ec0c:	4252      	negs	r2, r2
 800ec0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2204      	movs	r2, #4
 800ec14:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	69db      	ldr	r3, [r3, #28]
 800ec1c:	2203      	movs	r2, #3
 800ec1e:	4013      	ands	r3, r2
 800ec20:	d004      	beq.n	800ec2c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	0018      	movs	r0, r3
 800ec26:	f000 f94f 	bl	800eec8 <HAL_TIM_IC_CaptureCallback>
 800ec2a:	e007      	b.n	800ec3c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	0018      	movs	r0, r3
 800ec30:	f000 f942 	bl	800eeb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	0018      	movs	r0, r3
 800ec38:	f000 f94e 	bl	800eed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	691b      	ldr	r3, [r3, #16]
 800ec48:	2210      	movs	r2, #16
 800ec4a:	4013      	ands	r3, r2
 800ec4c:	2b10      	cmp	r3, #16
 800ec4e:	d125      	bne.n	800ec9c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	2210      	movs	r2, #16
 800ec58:	4013      	ands	r3, r2
 800ec5a:	2b10      	cmp	r3, #16
 800ec5c:	d11e      	bne.n	800ec9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	2211      	movs	r2, #17
 800ec64:	4252      	negs	r2, r2
 800ec66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2208      	movs	r2, #8
 800ec6c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	69da      	ldr	r2, [r3, #28]
 800ec74:	23c0      	movs	r3, #192	@ 0xc0
 800ec76:	009b      	lsls	r3, r3, #2
 800ec78:	4013      	ands	r3, r2
 800ec7a:	d004      	beq.n	800ec86 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	0018      	movs	r0, r3
 800ec80:	f000 f922 	bl	800eec8 <HAL_TIM_IC_CaptureCallback>
 800ec84:	e007      	b.n	800ec96 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	0018      	movs	r0, r3
 800ec8a:	f000 f915 	bl	800eeb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	0018      	movs	r0, r3
 800ec92:	f000 f921 	bl	800eed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	691b      	ldr	r3, [r3, #16]
 800eca2:	2201      	movs	r2, #1
 800eca4:	4013      	ands	r3, r2
 800eca6:	2b01      	cmp	r3, #1
 800eca8:	d10f      	bne.n	800ecca <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	68db      	ldr	r3, [r3, #12]
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	4013      	ands	r3, r2
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d108      	bne.n	800ecca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2202      	movs	r2, #2
 800ecbe:	4252      	negs	r2, r2
 800ecc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	0018      	movs	r0, r3
 800ecc6:	f000 f8ef 	bl	800eea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	691b      	ldr	r3, [r3, #16]
 800ecd0:	2240      	movs	r2, #64	@ 0x40
 800ecd2:	4013      	ands	r3, r2
 800ecd4:	2b40      	cmp	r3, #64	@ 0x40
 800ecd6:	d10f      	bne.n	800ecf8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	2240      	movs	r2, #64	@ 0x40
 800ece0:	4013      	ands	r3, r2
 800ece2:	2b40      	cmp	r3, #64	@ 0x40
 800ece4:	d108      	bne.n	800ecf8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2241      	movs	r2, #65	@ 0x41
 800ecec:	4252      	negs	r2, r2
 800ecee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	0018      	movs	r0, r3
 800ecf4:	f000 f8f8 	bl	800eee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ecf8:	46c0      	nop			@ (mov r8, r8)
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	b002      	add	sp, #8
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed0a:	230f      	movs	r3, #15
 800ed0c:	18fb      	adds	r3, r7, r3
 800ed0e:	2200      	movs	r2, #0
 800ed10:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2238      	movs	r2, #56	@ 0x38
 800ed16:	5c9b      	ldrb	r3, [r3, r2]
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	d101      	bne.n	800ed20 <HAL_TIM_ConfigClockSource+0x20>
 800ed1c:	2302      	movs	r3, #2
 800ed1e:	e0bc      	b.n	800ee9a <HAL_TIM_ConfigClockSource+0x19a>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2238      	movs	r2, #56	@ 0x38
 800ed24:	2101      	movs	r1, #1
 800ed26:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2239      	movs	r2, #57	@ 0x39
 800ed2c:	2102      	movs	r1, #2
 800ed2e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	689b      	ldr	r3, [r3, #8]
 800ed36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	2277      	movs	r2, #119	@ 0x77
 800ed3c:	4393      	bics	r3, r2
 800ed3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	4a58      	ldr	r2, [pc, #352]	@ (800eea4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800ed44:	4013      	ands	r3, r2
 800ed46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	68ba      	ldr	r2, [r7, #8]
 800ed4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2280      	movs	r2, #128	@ 0x80
 800ed56:	0192      	lsls	r2, r2, #6
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d040      	beq.n	800edde <HAL_TIM_ConfigClockSource+0xde>
 800ed5c:	2280      	movs	r2, #128	@ 0x80
 800ed5e:	0192      	lsls	r2, r2, #6
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d900      	bls.n	800ed66 <HAL_TIM_ConfigClockSource+0x66>
 800ed64:	e088      	b.n	800ee78 <HAL_TIM_ConfigClockSource+0x178>
 800ed66:	2280      	movs	r2, #128	@ 0x80
 800ed68:	0152      	lsls	r2, r2, #5
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d100      	bne.n	800ed70 <HAL_TIM_ConfigClockSource+0x70>
 800ed6e:	e088      	b.n	800ee82 <HAL_TIM_ConfigClockSource+0x182>
 800ed70:	2280      	movs	r2, #128	@ 0x80
 800ed72:	0152      	lsls	r2, r2, #5
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d900      	bls.n	800ed7a <HAL_TIM_ConfigClockSource+0x7a>
 800ed78:	e07e      	b.n	800ee78 <HAL_TIM_ConfigClockSource+0x178>
 800ed7a:	2b70      	cmp	r3, #112	@ 0x70
 800ed7c:	d018      	beq.n	800edb0 <HAL_TIM_ConfigClockSource+0xb0>
 800ed7e:	d900      	bls.n	800ed82 <HAL_TIM_ConfigClockSource+0x82>
 800ed80:	e07a      	b.n	800ee78 <HAL_TIM_ConfigClockSource+0x178>
 800ed82:	2b60      	cmp	r3, #96	@ 0x60
 800ed84:	d04f      	beq.n	800ee26 <HAL_TIM_ConfigClockSource+0x126>
 800ed86:	d900      	bls.n	800ed8a <HAL_TIM_ConfigClockSource+0x8a>
 800ed88:	e076      	b.n	800ee78 <HAL_TIM_ConfigClockSource+0x178>
 800ed8a:	2b50      	cmp	r3, #80	@ 0x50
 800ed8c:	d03b      	beq.n	800ee06 <HAL_TIM_ConfigClockSource+0x106>
 800ed8e:	d900      	bls.n	800ed92 <HAL_TIM_ConfigClockSource+0x92>
 800ed90:	e072      	b.n	800ee78 <HAL_TIM_ConfigClockSource+0x178>
 800ed92:	2b40      	cmp	r3, #64	@ 0x40
 800ed94:	d057      	beq.n	800ee46 <HAL_TIM_ConfigClockSource+0x146>
 800ed96:	d900      	bls.n	800ed9a <HAL_TIM_ConfigClockSource+0x9a>
 800ed98:	e06e      	b.n	800ee78 <HAL_TIM_ConfigClockSource+0x178>
 800ed9a:	2b30      	cmp	r3, #48	@ 0x30
 800ed9c:	d063      	beq.n	800ee66 <HAL_TIM_ConfigClockSource+0x166>
 800ed9e:	d86b      	bhi.n	800ee78 <HAL_TIM_ConfigClockSource+0x178>
 800eda0:	2b20      	cmp	r3, #32
 800eda2:	d060      	beq.n	800ee66 <HAL_TIM_ConfigClockSource+0x166>
 800eda4:	d868      	bhi.n	800ee78 <HAL_TIM_ConfigClockSource+0x178>
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d05d      	beq.n	800ee66 <HAL_TIM_ConfigClockSource+0x166>
 800edaa:	2b10      	cmp	r3, #16
 800edac:	d05b      	beq.n	800ee66 <HAL_TIM_ConfigClockSource+0x166>
 800edae:	e063      	b.n	800ee78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800edc0:	f000 f972 	bl	800f0a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	2277      	movs	r2, #119	@ 0x77
 800edd0:	4313      	orrs	r3, r2
 800edd2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	68ba      	ldr	r2, [r7, #8]
 800edda:	609a      	str	r2, [r3, #8]
      break;
 800eddc:	e052      	b.n	800ee84 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800edee:	f000 f95b 	bl	800f0a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	689a      	ldr	r2, [r3, #8]
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	2180      	movs	r1, #128	@ 0x80
 800edfe:	01c9      	lsls	r1, r1, #7
 800ee00:	430a      	orrs	r2, r1
 800ee02:	609a      	str	r2, [r3, #8]
      break;
 800ee04:	e03e      	b.n	800ee84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee12:	001a      	movs	r2, r3
 800ee14:	f000 f8ce 	bl	800efb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2150      	movs	r1, #80	@ 0x50
 800ee1e:	0018      	movs	r0, r3
 800ee20:	f000 f928 	bl	800f074 <TIM_ITRx_SetConfig>
      break;
 800ee24:	e02e      	b.n	800ee84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee32:	001a      	movs	r2, r3
 800ee34:	f000 f8ec 	bl	800f010 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	2160      	movs	r1, #96	@ 0x60
 800ee3e:	0018      	movs	r0, r3
 800ee40:	f000 f918 	bl	800f074 <TIM_ITRx_SetConfig>
      break;
 800ee44:	e01e      	b.n	800ee84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee52:	001a      	movs	r2, r3
 800ee54:	f000 f8ae 	bl	800efb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	2140      	movs	r1, #64	@ 0x40
 800ee5e:	0018      	movs	r0, r3
 800ee60:	f000 f908 	bl	800f074 <TIM_ITRx_SetConfig>
      break;
 800ee64:	e00e      	b.n	800ee84 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	0019      	movs	r1, r3
 800ee70:	0010      	movs	r0, r2
 800ee72:	f000 f8ff 	bl	800f074 <TIM_ITRx_SetConfig>
      break;
 800ee76:	e005      	b.n	800ee84 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800ee78:	230f      	movs	r3, #15
 800ee7a:	18fb      	adds	r3, r7, r3
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	701a      	strb	r2, [r3, #0]
      break;
 800ee80:	e000      	b.n	800ee84 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800ee82:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2239      	movs	r2, #57	@ 0x39
 800ee88:	2101      	movs	r1, #1
 800ee8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2238      	movs	r2, #56	@ 0x38
 800ee90:	2100      	movs	r1, #0
 800ee92:	5499      	strb	r1, [r3, r2]

  return status;
 800ee94:	230f      	movs	r3, #15
 800ee96:	18fb      	adds	r3, r7, r3
 800ee98:	781b      	ldrb	r3, [r3, #0]
}
 800ee9a:	0018      	movs	r0, r3
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	b004      	add	sp, #16
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	46c0      	nop			@ (mov r8, r8)
 800eea4:	ffff00ff 	.word	0xffff00ff

0800eea8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800eeb0:	46c0      	nop			@ (mov r8, r8)
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	b002      	add	sp, #8
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eec0:	46c0      	nop			@ (mov r8, r8)
 800eec2:	46bd      	mov	sp, r7
 800eec4:	b002      	add	sp, #8
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eed0:	46c0      	nop			@ (mov r8, r8)
 800eed2:	46bd      	mov	sp, r7
 800eed4:	b002      	add	sp, #8
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b082      	sub	sp, #8
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eee0:	46c0      	nop			@ (mov r8, r8)
 800eee2:	46bd      	mov	sp, r7
 800eee4:	b002      	add	sp, #8
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eef0:	46c0      	nop			@ (mov r8, r8)
 800eef2:	46bd      	mov	sp, r7
 800eef4:	b002      	add	sp, #8
 800eef6:	bd80      	pop	{r7, pc}

0800eef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	2380      	movs	r3, #128	@ 0x80
 800ef0c:	05db      	lsls	r3, r3, #23
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d00b      	beq.n	800ef2a <TIM_Base_SetConfig+0x32>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	4a23      	ldr	r2, [pc, #140]	@ (800efa4 <TIM_Base_SetConfig+0xac>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d007      	beq.n	800ef2a <TIM_Base_SetConfig+0x32>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4a22      	ldr	r2, [pc, #136]	@ (800efa8 <TIM_Base_SetConfig+0xb0>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d003      	beq.n	800ef2a <TIM_Base_SetConfig+0x32>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	4a21      	ldr	r2, [pc, #132]	@ (800efac <TIM_Base_SetConfig+0xb4>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d108      	bne.n	800ef3c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2270      	movs	r2, #112	@ 0x70
 800ef2e:	4393      	bics	r3, r2
 800ef30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	68fa      	ldr	r2, [r7, #12]
 800ef38:	4313      	orrs	r3, r2
 800ef3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	2380      	movs	r3, #128	@ 0x80
 800ef40:	05db      	lsls	r3, r3, #23
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d00b      	beq.n	800ef5e <TIM_Base_SetConfig+0x66>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4a16      	ldr	r2, [pc, #88]	@ (800efa4 <TIM_Base_SetConfig+0xac>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d007      	beq.n	800ef5e <TIM_Base_SetConfig+0x66>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a15      	ldr	r2, [pc, #84]	@ (800efa8 <TIM_Base_SetConfig+0xb0>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d003      	beq.n	800ef5e <TIM_Base_SetConfig+0x66>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a14      	ldr	r2, [pc, #80]	@ (800efac <TIM_Base_SetConfig+0xb4>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d108      	bne.n	800ef70 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	4a13      	ldr	r2, [pc, #76]	@ (800efb0 <TIM_Base_SetConfig+0xb8>)
 800ef62:	4013      	ands	r3, r2
 800ef64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	68db      	ldr	r3, [r3, #12]
 800ef6a:	68fa      	ldr	r2, [r7, #12]
 800ef6c:	4313      	orrs	r3, r2
 800ef6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2280      	movs	r2, #128	@ 0x80
 800ef74:	4393      	bics	r3, r2
 800ef76:	001a      	movs	r2, r3
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	691b      	ldr	r3, [r3, #16]
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	689a      	ldr	r2, [r3, #8]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	681a      	ldr	r2, [r3, #0]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2201      	movs	r2, #1
 800ef9a:	615a      	str	r2, [r3, #20]
}
 800ef9c:	46c0      	nop			@ (mov r8, r8)
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	b004      	add	sp, #16
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	40000400 	.word	0x40000400
 800efa8:	40010800 	.word	0x40010800
 800efac:	40011400 	.word	0x40011400
 800efb0:	fffffcff 	.word	0xfffffcff

0800efb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b086      	sub	sp, #24
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	60b9      	str	r1, [r7, #8]
 800efbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	6a1b      	ldr	r3, [r3, #32]
 800efc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	6a1b      	ldr	r3, [r3, #32]
 800efca:	2201      	movs	r2, #1
 800efcc:	4393      	bics	r3, r2
 800efce:	001a      	movs	r2, r3
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	699b      	ldr	r3, [r3, #24]
 800efd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	22f0      	movs	r2, #240	@ 0xf0
 800efde:	4393      	bics	r3, r2
 800efe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	011b      	lsls	r3, r3, #4
 800efe6:	693a      	ldr	r2, [r7, #16]
 800efe8:	4313      	orrs	r3, r2
 800efea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	220a      	movs	r2, #10
 800eff0:	4393      	bics	r3, r2
 800eff2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800eff4:	697a      	ldr	r2, [r7, #20]
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	4313      	orrs	r3, r2
 800effa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	693a      	ldr	r2, [r7, #16]
 800f000:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	697a      	ldr	r2, [r7, #20]
 800f006:	621a      	str	r2, [r3, #32]
}
 800f008:	46c0      	nop			@ (mov r8, r8)
 800f00a:	46bd      	mov	sp, r7
 800f00c:	b006      	add	sp, #24
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b086      	sub	sp, #24
 800f014:	af00      	add	r7, sp, #0
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	6a1b      	ldr	r3, [r3, #32]
 800f020:	2210      	movs	r2, #16
 800f022:	4393      	bics	r3, r2
 800f024:	001a      	movs	r2, r3
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	699b      	ldr	r3, [r3, #24]
 800f02e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6a1b      	ldr	r3, [r3, #32]
 800f034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	4a0d      	ldr	r2, [pc, #52]	@ (800f070 <TIM_TI2_ConfigInputStage+0x60>)
 800f03a:	4013      	ands	r3, r2
 800f03c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	031b      	lsls	r3, r3, #12
 800f042:	697a      	ldr	r2, [r7, #20]
 800f044:	4313      	orrs	r3, r2
 800f046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	22a0      	movs	r2, #160	@ 0xa0
 800f04c:	4393      	bics	r3, r2
 800f04e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	011b      	lsls	r3, r3, #4
 800f054:	693a      	ldr	r2, [r7, #16]
 800f056:	4313      	orrs	r3, r2
 800f058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	697a      	ldr	r2, [r7, #20]
 800f05e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	693a      	ldr	r2, [r7, #16]
 800f064:	621a      	str	r2, [r3, #32]
}
 800f066:	46c0      	nop			@ (mov r8, r8)
 800f068:	46bd      	mov	sp, r7
 800f06a:	b006      	add	sp, #24
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	46c0      	nop			@ (mov r8, r8)
 800f070:	ffff0fff 	.word	0xffff0fff

0800f074 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2270      	movs	r2, #112	@ 0x70
 800f088:	4393      	bics	r3, r2
 800f08a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f08c:	683a      	ldr	r2, [r7, #0]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	4313      	orrs	r3, r2
 800f092:	2207      	movs	r2, #7
 800f094:	4313      	orrs	r3, r2
 800f096:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	68fa      	ldr	r2, [r7, #12]
 800f09c:	609a      	str	r2, [r3, #8]
}
 800f09e:	46c0      	nop			@ (mov r8, r8)
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	b004      	add	sp, #16
 800f0a4:	bd80      	pop	{r7, pc}
	...

0800f0a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b086      	sub	sp, #24
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	60f8      	str	r0, [r7, #12]
 800f0b0:	60b9      	str	r1, [r7, #8]
 800f0b2:	607a      	str	r2, [r7, #4]
 800f0b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	689b      	ldr	r3, [r3, #8]
 800f0ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	4a09      	ldr	r2, [pc, #36]	@ (800f0e4 <TIM_ETR_SetConfig+0x3c>)
 800f0c0:	4013      	ands	r3, r2
 800f0c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	021a      	lsls	r2, r3, #8
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	431a      	orrs	r2, r3
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	4313      	orrs	r3, r2
 800f0d0:	697a      	ldr	r2, [r7, #20]
 800f0d2:	4313      	orrs	r3, r2
 800f0d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	697a      	ldr	r2, [r7, #20]
 800f0da:	609a      	str	r2, [r3, #8]
}
 800f0dc:	46c0      	nop			@ (mov r8, r8)
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	b006      	add	sp, #24
 800f0e2:	bd80      	pop	{r7, pc}
 800f0e4:	ffff00ff 	.word	0xffff00ff

0800f0e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2238      	movs	r2, #56	@ 0x38
 800f0f6:	5c9b      	ldrb	r3, [r3, r2]
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d101      	bne.n	800f100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f0fc:	2302      	movs	r3, #2
 800f0fe:	e047      	b.n	800f190 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2238      	movs	r2, #56	@ 0x38
 800f104:	2101      	movs	r1, #1
 800f106:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2239      	movs	r2, #57	@ 0x39
 800f10c:	2102      	movs	r1, #2
 800f10e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	685b      	ldr	r3, [r3, #4]
 800f116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	689b      	ldr	r3, [r3, #8]
 800f11e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2270      	movs	r2, #112	@ 0x70
 800f124:	4393      	bics	r3, r2
 800f126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	68fa      	ldr	r2, [r7, #12]
 800f12e:	4313      	orrs	r3, r2
 800f130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	68fa      	ldr	r2, [r7, #12]
 800f138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	2380      	movs	r3, #128	@ 0x80
 800f140:	05db      	lsls	r3, r3, #23
 800f142:	429a      	cmp	r2, r3
 800f144:	d00e      	beq.n	800f164 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4a13      	ldr	r2, [pc, #76]	@ (800f198 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d009      	beq.n	800f164 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	4a11      	ldr	r2, [pc, #68]	@ (800f19c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d004      	beq.n	800f164 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	4a10      	ldr	r2, [pc, #64]	@ (800f1a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d10c      	bne.n	800f17e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	2280      	movs	r2, #128	@ 0x80
 800f168:	4393      	bics	r3, r2
 800f16a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	68ba      	ldr	r2, [r7, #8]
 800f172:	4313      	orrs	r3, r2
 800f174:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	68ba      	ldr	r2, [r7, #8]
 800f17c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2239      	movs	r2, #57	@ 0x39
 800f182:	2101      	movs	r1, #1
 800f184:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2238      	movs	r2, #56	@ 0x38
 800f18a:	2100      	movs	r1, #0
 800f18c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f18e:	2300      	movs	r3, #0
}
 800f190:	0018      	movs	r0, r3
 800f192:	46bd      	mov	sp, r7
 800f194:	b004      	add	sp, #16
 800f196:	bd80      	pop	{r7, pc}
 800f198:	40000400 	.word	0x40000400
 800f19c:	40010800 	.word	0x40010800
 800f1a0:	40011400 	.word	0x40011400

0800f1a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d101      	bne.n	800f1b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	e044      	b.n	800f240 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d107      	bne.n	800f1ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2278      	movs	r2, #120	@ 0x78
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	0018      	movs	r0, r3
 800f1ca:	f000 f83f 	bl	800f24c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2224      	movs	r2, #36	@ 0x24
 800f1d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2101      	movs	r1, #1
 800f1e0:	438a      	bics	r2, r1
 800f1e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	0018      	movs	r0, r3
 800f1e8:	f000 fcbe 	bl	800fb68 <UART_SetConfig>
 800f1ec:	0003      	movs	r3, r0
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d101      	bne.n	800f1f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e024      	b.n	800f240 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d003      	beq.n	800f206 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	0018      	movs	r0, r3
 800f202:	f000 ff4f 	bl	80100a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	685a      	ldr	r2, [r3, #4]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	490d      	ldr	r1, [pc, #52]	@ (800f248 <HAL_UART_Init+0xa4>)
 800f212:	400a      	ands	r2, r1
 800f214:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	689a      	ldr	r2, [r3, #8]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	212a      	movs	r1, #42	@ 0x2a
 800f222:	438a      	bics	r2, r1
 800f224:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	681a      	ldr	r2, [r3, #0]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	2101      	movs	r1, #1
 800f232:	430a      	orrs	r2, r1
 800f234:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	0018      	movs	r0, r3
 800f23a:	f000 ffe7 	bl	801020c <UART_CheckIdleState>
 800f23e:	0003      	movs	r3, r0
}
 800f240:	0018      	movs	r0, r3
 800f242:	46bd      	mov	sp, r7
 800f244:	b002      	add	sp, #8
 800f246:	bd80      	pop	{r7, pc}
 800f248:	ffffb7ff 	.word	0xffffb7ff

0800f24c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800f254:	46c0      	nop			@ (mov r8, r8)
 800f256:	46bd      	mov	sp, r7
 800f258:	b002      	add	sp, #8
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b08a      	sub	sp, #40	@ 0x28
 800f260:	af02      	add	r7, sp, #8
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	603b      	str	r3, [r7, #0]
 800f268:	1dbb      	adds	r3, r7, #6
 800f26a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f270:	2b20      	cmp	r3, #32
 800f272:	d000      	beq.n	800f276 <HAL_UART_Transmit+0x1a>
 800f274:	e08c      	b.n	800f390 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d003      	beq.n	800f284 <HAL_UART_Transmit+0x28>
 800f27c:	1dbb      	adds	r3, r7, #6
 800f27e:	881b      	ldrh	r3, [r3, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d101      	bne.n	800f288 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f284:	2301      	movs	r3, #1
 800f286:	e084      	b.n	800f392 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	689a      	ldr	r2, [r3, #8]
 800f28c:	2380      	movs	r3, #128	@ 0x80
 800f28e:	015b      	lsls	r3, r3, #5
 800f290:	429a      	cmp	r2, r3
 800f292:	d109      	bne.n	800f2a8 <HAL_UART_Transmit+0x4c>
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	691b      	ldr	r3, [r3, #16]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d105      	bne.n	800f2a8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	2201      	movs	r2, #1
 800f2a0:	4013      	ands	r3, r2
 800f2a2:	d001      	beq.n	800f2a8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	e074      	b.n	800f392 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	2284      	movs	r2, #132	@ 0x84
 800f2ac:	2100      	movs	r1, #0
 800f2ae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2221      	movs	r2, #33	@ 0x21
 800f2b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f2b6:	f7fc fbb1 	bl	800ba1c <HAL_GetTick>
 800f2ba:	0003      	movs	r3, r0
 800f2bc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	1dba      	adds	r2, r7, #6
 800f2c2:	2150      	movs	r1, #80	@ 0x50
 800f2c4:	8812      	ldrh	r2, [r2, #0]
 800f2c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	1dba      	adds	r2, r7, #6
 800f2cc:	2152      	movs	r1, #82	@ 0x52
 800f2ce:	8812      	ldrh	r2, [r2, #0]
 800f2d0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	689a      	ldr	r2, [r3, #8]
 800f2d6:	2380      	movs	r3, #128	@ 0x80
 800f2d8:	015b      	lsls	r3, r3, #5
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d108      	bne.n	800f2f0 <HAL_UART_Transmit+0x94>
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d104      	bne.n	800f2f0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	61bb      	str	r3, [r7, #24]
 800f2ee:	e003      	b.n	800f2f8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f2f8:	e02f      	b.n	800f35a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f2fa:	697a      	ldr	r2, [r7, #20]
 800f2fc:	68f8      	ldr	r0, [r7, #12]
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	9300      	str	r3, [sp, #0]
 800f302:	0013      	movs	r3, r2
 800f304:	2200      	movs	r2, #0
 800f306:	2180      	movs	r1, #128	@ 0x80
 800f308:	f001 f828 	bl	801035c <UART_WaitOnFlagUntilTimeout>
 800f30c:	1e03      	subs	r3, r0, #0
 800f30e:	d004      	beq.n	800f31a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2220      	movs	r2, #32
 800f314:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800f316:	2303      	movs	r3, #3
 800f318:	e03b      	b.n	800f392 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d10b      	bne.n	800f338 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	881b      	ldrh	r3, [r3, #0]
 800f324:	001a      	movs	r2, r3
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	05d2      	lsls	r2, r2, #23
 800f32c:	0dd2      	lsrs	r2, r2, #23
 800f32e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	3302      	adds	r3, #2
 800f334:	61bb      	str	r3, [r7, #24]
 800f336:	e007      	b.n	800f348 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f338:	69fb      	ldr	r3, [r7, #28]
 800f33a:	781a      	ldrb	r2, [r3, #0]
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f342:	69fb      	ldr	r3, [r7, #28]
 800f344:	3301      	adds	r3, #1
 800f346:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2252      	movs	r2, #82	@ 0x52
 800f34c:	5a9b      	ldrh	r3, [r3, r2]
 800f34e:	b29b      	uxth	r3, r3
 800f350:	3b01      	subs	r3, #1
 800f352:	b299      	uxth	r1, r3
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2252      	movs	r2, #82	@ 0x52
 800f358:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2252      	movs	r2, #82	@ 0x52
 800f35e:	5a9b      	ldrh	r3, [r3, r2]
 800f360:	b29b      	uxth	r3, r3
 800f362:	2b00      	cmp	r3, #0
 800f364:	d1c9      	bne.n	800f2fa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f366:	697a      	ldr	r2, [r7, #20]
 800f368:	68f8      	ldr	r0, [r7, #12]
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	9300      	str	r3, [sp, #0]
 800f36e:	0013      	movs	r3, r2
 800f370:	2200      	movs	r2, #0
 800f372:	2140      	movs	r1, #64	@ 0x40
 800f374:	f000 fff2 	bl	801035c <UART_WaitOnFlagUntilTimeout>
 800f378:	1e03      	subs	r3, r0, #0
 800f37a:	d004      	beq.n	800f386 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2220      	movs	r2, #32
 800f380:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800f382:	2303      	movs	r3, #3
 800f384:	e005      	b.n	800f392 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2220      	movs	r2, #32
 800f38a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800f38c:	2300      	movs	r3, #0
 800f38e:	e000      	b.n	800f392 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800f390:	2302      	movs	r3, #2
  }
}
 800f392:	0018      	movs	r0, r3
 800f394:	46bd      	mov	sp, r7
 800f396:	b008      	add	sp, #32
 800f398:	bd80      	pop	{r7, pc}
	...

0800f39c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b088      	sub	sp, #32
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	1dbb      	adds	r3, r7, #6
 800f3a8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f3ae:	2b20      	cmp	r3, #32
 800f3b0:	d15b      	bne.n	800f46a <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d003      	beq.n	800f3c0 <HAL_UART_Transmit_IT+0x24>
 800f3b8:	1dbb      	adds	r3, r7, #6
 800f3ba:	881b      	ldrh	r3, [r3, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d101      	bne.n	800f3c4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	e053      	b.n	800f46c <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	689a      	ldr	r2, [r3, #8]
 800f3c8:	2380      	movs	r3, #128	@ 0x80
 800f3ca:	015b      	lsls	r3, r3, #5
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d109      	bne.n	800f3e4 <HAL_UART_Transmit_IT+0x48>
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	691b      	ldr	r3, [r3, #16]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d105      	bne.n	800f3e4 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	2201      	movs	r2, #1
 800f3dc:	4013      	ands	r3, r2
 800f3de:	d001      	beq.n	800f3e4 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	e043      	b.n	800f46c <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	68ba      	ldr	r2, [r7, #8]
 800f3e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	1dba      	adds	r2, r7, #6
 800f3ee:	2150      	movs	r1, #80	@ 0x50
 800f3f0:	8812      	ldrh	r2, [r2, #0]
 800f3f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	1dba      	adds	r2, r7, #6
 800f3f8:	2152      	movs	r1, #82	@ 0x52
 800f3fa:	8812      	ldrh	r2, [r2, #0]
 800f3fc:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2200      	movs	r2, #0
 800f402:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2284      	movs	r2, #132	@ 0x84
 800f408:	2100      	movs	r1, #0
 800f40a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2221      	movs	r2, #33	@ 0x21
 800f410:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	689a      	ldr	r2, [r3, #8]
 800f416:	2380      	movs	r3, #128	@ 0x80
 800f418:	015b      	lsls	r3, r3, #5
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d107      	bne.n	800f42e <HAL_UART_Transmit_IT+0x92>
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	691b      	ldr	r3, [r3, #16]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d103      	bne.n	800f42e <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	4a12      	ldr	r2, [pc, #72]	@ (800f474 <HAL_UART_Transmit_IT+0xd8>)
 800f42a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f42c:	e002      	b.n	800f434 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	4a11      	ldr	r2, [pc, #68]	@ (800f478 <HAL_UART_Transmit_IT+0xdc>)
 800f432:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f434:	f3ef 8310 	mrs	r3, PRIMASK
 800f438:	613b      	str	r3, [r7, #16]
  return(result);
 800f43a:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f43c:	61fb      	str	r3, [r7, #28]
 800f43e:	2301      	movs	r3, #1
 800f440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	f383 8810 	msr	PRIMASK, r3
}
 800f448:	46c0      	nop			@ (mov r8, r8)
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2180      	movs	r1, #128	@ 0x80
 800f456:	430a      	orrs	r2, r1
 800f458:	601a      	str	r2, [r3, #0]
 800f45a:	69fb      	ldr	r3, [r7, #28]
 800f45c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	f383 8810 	msr	PRIMASK, r3
}
 800f464:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800f466:	2300      	movs	r3, #0
 800f468:	e000      	b.n	800f46c <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800f46a:	2302      	movs	r3, #2
  }
}
 800f46c:	0018      	movs	r0, r3
 800f46e:	46bd      	mov	sp, r7
 800f470:	b008      	add	sp, #32
 800f472:	bd80      	pop	{r7, pc}
 800f474:	0801076d 	.word	0x0801076d
 800f478:	080106bb 	.word	0x080106bb

0800f47c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b088      	sub	sp, #32
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	1dbb      	adds	r3, r7, #6
 800f488:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2280      	movs	r2, #128	@ 0x80
 800f48e:	589b      	ldr	r3, [r3, r2]
 800f490:	2b20      	cmp	r3, #32
 800f492:	d14a      	bne.n	800f52a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d003      	beq.n	800f4a2 <HAL_UART_Receive_IT+0x26>
 800f49a:	1dbb      	adds	r3, r7, #6
 800f49c:	881b      	ldrh	r3, [r3, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d101      	bne.n	800f4a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e042      	b.n	800f52c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	689a      	ldr	r2, [r3, #8]
 800f4aa:	2380      	movs	r3, #128	@ 0x80
 800f4ac:	015b      	lsls	r3, r3, #5
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d109      	bne.n	800f4c6 <HAL_UART_Receive_IT+0x4a>
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	691b      	ldr	r3, [r3, #16]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d105      	bne.n	800f4c6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	2201      	movs	r2, #1
 800f4be:	4013      	ands	r3, r2
 800f4c0:	d001      	beq.n	800f4c6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	e032      	b.n	800f52c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4a18      	ldr	r2, [pc, #96]	@ (800f534 <HAL_UART_Receive_IT+0xb8>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d020      	beq.n	800f518 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	685a      	ldr	r2, [r3, #4]
 800f4dc:	2380      	movs	r3, #128	@ 0x80
 800f4de:	041b      	lsls	r3, r3, #16
 800f4e0:	4013      	ands	r3, r2
 800f4e2:	d019      	beq.n	800f518 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4e4:	f3ef 8310 	mrs	r3, PRIMASK
 800f4e8:	613b      	str	r3, [r7, #16]
  return(result);
 800f4ea:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f4ec:	61fb      	str	r3, [r7, #28]
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	f383 8810 	msr	PRIMASK, r3
}
 800f4f8:	46c0      	nop			@ (mov r8, r8)
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	681a      	ldr	r2, [r3, #0]
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2180      	movs	r1, #128	@ 0x80
 800f506:	04c9      	lsls	r1, r1, #19
 800f508:	430a      	orrs	r2, r1
 800f50a:	601a      	str	r2, [r3, #0]
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	f383 8810 	msr	PRIMASK, r3
}
 800f516:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f518:	1dbb      	adds	r3, r7, #6
 800f51a:	881a      	ldrh	r2, [r3, #0]
 800f51c:	68b9      	ldr	r1, [r7, #8]
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	0018      	movs	r0, r3
 800f522:	f000 ff85 	bl	8010430 <UART_Start_Receive_IT>
 800f526:	0003      	movs	r3, r0
 800f528:	e000      	b.n	800f52c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800f52a:	2302      	movs	r3, #2
  }
}
 800f52c:	0018      	movs	r0, r3
 800f52e:	46bd      	mov	sp, r7
 800f530:	b008      	add	sp, #32
 800f532:	bd80      	pop	{r7, pc}
 800f534:	40004800 	.word	0x40004800

0800f538 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f538:	b590      	push	{r4, r7, lr}
 800f53a:	b0ab      	sub	sp, #172	@ 0xac
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	69db      	ldr	r3, [r3, #28]
 800f546:	22a4      	movs	r2, #164	@ 0xa4
 800f548:	18b9      	adds	r1, r7, r2
 800f54a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	20a0      	movs	r0, #160	@ 0xa0
 800f554:	1839      	adds	r1, r7, r0
 800f556:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	689b      	ldr	r3, [r3, #8]
 800f55e:	219c      	movs	r1, #156	@ 0x9c
 800f560:	1879      	adds	r1, r7, r1
 800f562:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f564:	0011      	movs	r1, r2
 800f566:	18bb      	adds	r3, r7, r2
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	4a99      	ldr	r2, [pc, #612]	@ (800f7d0 <HAL_UART_IRQHandler+0x298>)
 800f56c:	4013      	ands	r3, r2
 800f56e:	2298      	movs	r2, #152	@ 0x98
 800f570:	18bc      	adds	r4, r7, r2
 800f572:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800f574:	18bb      	adds	r3, r7, r2
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d114      	bne.n	800f5a6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f57c:	187b      	adds	r3, r7, r1
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2220      	movs	r2, #32
 800f582:	4013      	ands	r3, r2
 800f584:	d00f      	beq.n	800f5a6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f586:	183b      	adds	r3, r7, r0
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	2220      	movs	r2, #32
 800f58c:	4013      	ands	r3, r2
 800f58e:	d00a      	beq.n	800f5a6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f594:	2b00      	cmp	r3, #0
 800f596:	d100      	bne.n	800f59a <HAL_UART_IRQHandler+0x62>
 800f598:	e2a0      	b.n	800fadc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	0010      	movs	r0, r2
 800f5a2:	4798      	blx	r3
      }
      return;
 800f5a4:	e29a      	b.n	800fadc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f5a6:	2398      	movs	r3, #152	@ 0x98
 800f5a8:	18fb      	adds	r3, r7, r3
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d100      	bne.n	800f5b2 <HAL_UART_IRQHandler+0x7a>
 800f5b0:	e114      	b.n	800f7dc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f5b2:	239c      	movs	r3, #156	@ 0x9c
 800f5b4:	18fb      	adds	r3, r7, r3
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	4013      	ands	r3, r2
 800f5bc:	d106      	bne.n	800f5cc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f5be:	23a0      	movs	r3, #160	@ 0xa0
 800f5c0:	18fb      	adds	r3, r7, r3
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4a83      	ldr	r2, [pc, #524]	@ (800f7d4 <HAL_UART_IRQHandler+0x29c>)
 800f5c6:	4013      	ands	r3, r2
 800f5c8:	d100      	bne.n	800f5cc <HAL_UART_IRQHandler+0x94>
 800f5ca:	e107      	b.n	800f7dc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f5cc:	23a4      	movs	r3, #164	@ 0xa4
 800f5ce:	18fb      	adds	r3, r7, r3
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	4013      	ands	r3, r2
 800f5d6:	d012      	beq.n	800f5fe <HAL_UART_IRQHandler+0xc6>
 800f5d8:	23a0      	movs	r3, #160	@ 0xa0
 800f5da:	18fb      	adds	r3, r7, r3
 800f5dc:	681a      	ldr	r2, [r3, #0]
 800f5de:	2380      	movs	r3, #128	@ 0x80
 800f5e0:	005b      	lsls	r3, r3, #1
 800f5e2:	4013      	ands	r3, r2
 800f5e4:	d00b      	beq.n	800f5fe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2284      	movs	r2, #132	@ 0x84
 800f5f2:	589b      	ldr	r3, [r3, r2]
 800f5f4:	2201      	movs	r2, #1
 800f5f6:	431a      	orrs	r2, r3
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2184      	movs	r1, #132	@ 0x84
 800f5fc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f5fe:	23a4      	movs	r3, #164	@ 0xa4
 800f600:	18fb      	adds	r3, r7, r3
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	2202      	movs	r2, #2
 800f606:	4013      	ands	r3, r2
 800f608:	d011      	beq.n	800f62e <HAL_UART_IRQHandler+0xf6>
 800f60a:	239c      	movs	r3, #156	@ 0x9c
 800f60c:	18fb      	adds	r3, r7, r3
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	2201      	movs	r2, #1
 800f612:	4013      	ands	r3, r2
 800f614:	d00b      	beq.n	800f62e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2202      	movs	r2, #2
 800f61c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2284      	movs	r2, #132	@ 0x84
 800f622:	589b      	ldr	r3, [r3, r2]
 800f624:	2204      	movs	r2, #4
 800f626:	431a      	orrs	r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2184      	movs	r1, #132	@ 0x84
 800f62c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f62e:	23a4      	movs	r3, #164	@ 0xa4
 800f630:	18fb      	adds	r3, r7, r3
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	2204      	movs	r2, #4
 800f636:	4013      	ands	r3, r2
 800f638:	d011      	beq.n	800f65e <HAL_UART_IRQHandler+0x126>
 800f63a:	239c      	movs	r3, #156	@ 0x9c
 800f63c:	18fb      	adds	r3, r7, r3
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2201      	movs	r2, #1
 800f642:	4013      	ands	r3, r2
 800f644:	d00b      	beq.n	800f65e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	2204      	movs	r2, #4
 800f64c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2284      	movs	r2, #132	@ 0x84
 800f652:	589b      	ldr	r3, [r3, r2]
 800f654:	2202      	movs	r2, #2
 800f656:	431a      	orrs	r2, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2184      	movs	r1, #132	@ 0x84
 800f65c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f65e:	23a4      	movs	r3, #164	@ 0xa4
 800f660:	18fb      	adds	r3, r7, r3
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	2208      	movs	r2, #8
 800f666:	4013      	ands	r3, r2
 800f668:	d017      	beq.n	800f69a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f66a:	23a0      	movs	r3, #160	@ 0xa0
 800f66c:	18fb      	adds	r3, r7, r3
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	2220      	movs	r2, #32
 800f672:	4013      	ands	r3, r2
 800f674:	d105      	bne.n	800f682 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f676:	239c      	movs	r3, #156	@ 0x9c
 800f678:	18fb      	adds	r3, r7, r3
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	2201      	movs	r2, #1
 800f67e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f680:	d00b      	beq.n	800f69a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	2208      	movs	r2, #8
 800f688:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2284      	movs	r2, #132	@ 0x84
 800f68e:	589b      	ldr	r3, [r3, r2]
 800f690:	2208      	movs	r2, #8
 800f692:	431a      	orrs	r2, r3
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2184      	movs	r1, #132	@ 0x84
 800f698:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f69a:	23a4      	movs	r3, #164	@ 0xa4
 800f69c:	18fb      	adds	r3, r7, r3
 800f69e:	681a      	ldr	r2, [r3, #0]
 800f6a0:	2380      	movs	r3, #128	@ 0x80
 800f6a2:	011b      	lsls	r3, r3, #4
 800f6a4:	4013      	ands	r3, r2
 800f6a6:	d013      	beq.n	800f6d0 <HAL_UART_IRQHandler+0x198>
 800f6a8:	23a0      	movs	r3, #160	@ 0xa0
 800f6aa:	18fb      	adds	r3, r7, r3
 800f6ac:	681a      	ldr	r2, [r3, #0]
 800f6ae:	2380      	movs	r3, #128	@ 0x80
 800f6b0:	04db      	lsls	r3, r3, #19
 800f6b2:	4013      	ands	r3, r2
 800f6b4:	d00c      	beq.n	800f6d0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2280      	movs	r2, #128	@ 0x80
 800f6bc:	0112      	lsls	r2, r2, #4
 800f6be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2284      	movs	r2, #132	@ 0x84
 800f6c4:	589b      	ldr	r3, [r3, r2]
 800f6c6:	2220      	movs	r2, #32
 800f6c8:	431a      	orrs	r2, r3
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2184      	movs	r1, #132	@ 0x84
 800f6ce:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2284      	movs	r2, #132	@ 0x84
 800f6d4:	589b      	ldr	r3, [r3, r2]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d100      	bne.n	800f6dc <HAL_UART_IRQHandler+0x1a4>
 800f6da:	e201      	b.n	800fae0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f6dc:	23a4      	movs	r3, #164	@ 0xa4
 800f6de:	18fb      	adds	r3, r7, r3
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	2220      	movs	r2, #32
 800f6e4:	4013      	ands	r3, r2
 800f6e6:	d00e      	beq.n	800f706 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f6e8:	23a0      	movs	r3, #160	@ 0xa0
 800f6ea:	18fb      	adds	r3, r7, r3
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	2220      	movs	r2, #32
 800f6f0:	4013      	ands	r3, r2
 800f6f2:	d008      	beq.n	800f706 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d004      	beq.n	800f706 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	0010      	movs	r0, r2
 800f704:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2284      	movs	r2, #132	@ 0x84
 800f70a:	589b      	ldr	r3, [r3, r2]
 800f70c:	2194      	movs	r1, #148	@ 0x94
 800f70e:	187a      	adds	r2, r7, r1
 800f710:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	2240      	movs	r2, #64	@ 0x40
 800f71a:	4013      	ands	r3, r2
 800f71c:	2b40      	cmp	r3, #64	@ 0x40
 800f71e:	d004      	beq.n	800f72a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f720:	187b      	adds	r3, r7, r1
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2228      	movs	r2, #40	@ 0x28
 800f726:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f728:	d047      	beq.n	800f7ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	0018      	movs	r0, r3
 800f72e:	f000 ff49 	bl	80105c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	689b      	ldr	r3, [r3, #8]
 800f738:	2240      	movs	r2, #64	@ 0x40
 800f73a:	4013      	ands	r3, r2
 800f73c:	2b40      	cmp	r3, #64	@ 0x40
 800f73e:	d137      	bne.n	800f7b0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f740:	f3ef 8310 	mrs	r3, PRIMASK
 800f744:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800f746:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f748:	2090      	movs	r0, #144	@ 0x90
 800f74a:	183a      	adds	r2, r7, r0
 800f74c:	6013      	str	r3, [r2, #0]
 800f74e:	2301      	movs	r3, #1
 800f750:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f752:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f754:	f383 8810 	msr	PRIMASK, r3
}
 800f758:	46c0      	nop			@ (mov r8, r8)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	689a      	ldr	r2, [r3, #8]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2140      	movs	r1, #64	@ 0x40
 800f766:	438a      	bics	r2, r1
 800f768:	609a      	str	r2, [r3, #8]
 800f76a:	183b      	adds	r3, r7, r0
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f770:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f772:	f383 8810 	msr	PRIMASK, r3
}
 800f776:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d012      	beq.n	800f7a6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f784:	4a14      	ldr	r2, [pc, #80]	@ (800f7d8 <HAL_UART_IRQHandler+0x2a0>)
 800f786:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f78c:	0018      	movs	r0, r3
 800f78e:	f7fc fd11 	bl	800c1b4 <HAL_DMA_Abort_IT>
 800f792:	1e03      	subs	r3, r0, #0
 800f794:	d01a      	beq.n	800f7cc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f79a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7a0:	0018      	movs	r0, r3
 800f7a2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7a4:	e012      	b.n	800f7cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	0018      	movs	r0, r3
 800f7aa:	f000 f9b7 	bl	800fb1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7ae:	e00d      	b.n	800f7cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	0018      	movs	r0, r3
 800f7b4:	f000 f9b2 	bl	800fb1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7b8:	e008      	b.n	800f7cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	0018      	movs	r0, r3
 800f7be:	f000 f9ad 	bl	800fb1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2284      	movs	r2, #132	@ 0x84
 800f7c6:	2100      	movs	r1, #0
 800f7c8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800f7ca:	e189      	b.n	800fae0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7cc:	46c0      	nop			@ (mov r8, r8)
    return;
 800f7ce:	e187      	b.n	800fae0 <HAL_UART_IRQHandler+0x5a8>
 800f7d0:	0000080f 	.word	0x0000080f
 800f7d4:	04000120 	.word	0x04000120
 800f7d8:	0801068d 	.word	0x0801068d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d000      	beq.n	800f7e6 <HAL_UART_IRQHandler+0x2ae>
 800f7e4:	e13b      	b.n	800fa5e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f7e6:	23a4      	movs	r3, #164	@ 0xa4
 800f7e8:	18fb      	adds	r3, r7, r3
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2210      	movs	r2, #16
 800f7ee:	4013      	ands	r3, r2
 800f7f0:	d100      	bne.n	800f7f4 <HAL_UART_IRQHandler+0x2bc>
 800f7f2:	e134      	b.n	800fa5e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f7f4:	23a0      	movs	r3, #160	@ 0xa0
 800f7f6:	18fb      	adds	r3, r7, r3
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	2210      	movs	r2, #16
 800f7fc:	4013      	ands	r3, r2
 800f7fe:	d100      	bne.n	800f802 <HAL_UART_IRQHandler+0x2ca>
 800f800:	e12d      	b.n	800fa5e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	2210      	movs	r2, #16
 800f808:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	689b      	ldr	r3, [r3, #8]
 800f810:	2240      	movs	r2, #64	@ 0x40
 800f812:	4013      	ands	r3, r2
 800f814:	2b40      	cmp	r3, #64	@ 0x40
 800f816:	d000      	beq.n	800f81a <HAL_UART_IRQHandler+0x2e2>
 800f818:	e0a1      	b.n	800f95e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	685a      	ldr	r2, [r3, #4]
 800f822:	217e      	movs	r1, #126	@ 0x7e
 800f824:	187b      	adds	r3, r7, r1
 800f826:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800f828:	187b      	adds	r3, r7, r1
 800f82a:	881b      	ldrh	r3, [r3, #0]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d100      	bne.n	800f832 <HAL_UART_IRQHandler+0x2fa>
 800f830:	e158      	b.n	800fae4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2258      	movs	r2, #88	@ 0x58
 800f836:	5a9b      	ldrh	r3, [r3, r2]
 800f838:	187a      	adds	r2, r7, r1
 800f83a:	8812      	ldrh	r2, [r2, #0]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d300      	bcc.n	800f842 <HAL_UART_IRQHandler+0x30a>
 800f840:	e150      	b.n	800fae4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	187a      	adds	r2, r7, r1
 800f846:	215a      	movs	r1, #90	@ 0x5a
 800f848:	8812      	ldrh	r2, [r2, #0]
 800f84a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2220      	movs	r2, #32
 800f856:	4013      	ands	r3, r2
 800f858:	d16f      	bne.n	800f93a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f85a:	f3ef 8310 	mrs	r3, PRIMASK
 800f85e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800f860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f862:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f864:	2301      	movs	r3, #1
 800f866:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f86a:	f383 8810 	msr	PRIMASK, r3
}
 800f86e:	46c0      	nop			@ (mov r8, r8)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	499e      	ldr	r1, [pc, #632]	@ (800faf4 <HAL_UART_IRQHandler+0x5bc>)
 800f87c:	400a      	ands	r2, r1
 800f87e:	601a      	str	r2, [r3, #0]
 800f880:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f882:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f886:	f383 8810 	msr	PRIMASK, r3
}
 800f88a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f88c:	f3ef 8310 	mrs	r3, PRIMASK
 800f890:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800f892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f894:	677b      	str	r3, [r7, #116]	@ 0x74
 800f896:	2301      	movs	r3, #1
 800f898:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f89a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f89c:	f383 8810 	msr	PRIMASK, r3
}
 800f8a0:	46c0      	nop			@ (mov r8, r8)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	689a      	ldr	r2, [r3, #8]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	2101      	movs	r1, #1
 800f8ae:	438a      	bics	r2, r1
 800f8b0:	609a      	str	r2, [r3, #8]
 800f8b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f8b4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8b8:	f383 8810 	msr	PRIMASK, r3
}
 800f8bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8be:	f3ef 8310 	mrs	r3, PRIMASK
 800f8c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800f8c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8c6:	673b      	str	r3, [r7, #112]	@ 0x70
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8ce:	f383 8810 	msr	PRIMASK, r3
}
 800f8d2:	46c0      	nop			@ (mov r8, r8)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	689a      	ldr	r2, [r3, #8]
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2140      	movs	r1, #64	@ 0x40
 800f8e0:	438a      	bics	r2, r1
 800f8e2:	609a      	str	r2, [r3, #8]
 800f8e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f8e6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8ea:	f383 8810 	msr	PRIMASK, r3
}
 800f8ee:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2280      	movs	r2, #128	@ 0x80
 800f8f4:	2120      	movs	r1, #32
 800f8f6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8fe:	f3ef 8310 	mrs	r3, PRIMASK
 800f902:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800f904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f906:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f908:	2301      	movs	r3, #1
 800f90a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f90c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f90e:	f383 8810 	msr	PRIMASK, r3
}
 800f912:	46c0      	nop			@ (mov r8, r8)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	2110      	movs	r1, #16
 800f920:	438a      	bics	r2, r1
 800f922:	601a      	str	r2, [r3, #0]
 800f924:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f926:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f92a:	f383 8810 	msr	PRIMASK, r3
}
 800f92e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f934:	0018      	movs	r0, r3
 800f936:	f7fc fbfd 	bl	800c134 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2202      	movs	r2, #2
 800f93e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2258      	movs	r2, #88	@ 0x58
 800f944:	5a9a      	ldrh	r2, [r3, r2]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	215a      	movs	r1, #90	@ 0x5a
 800f94a:	5a5b      	ldrh	r3, [r3, r1]
 800f94c:	b29b      	uxth	r3, r3
 800f94e:	1ad3      	subs	r3, r2, r3
 800f950:	b29a      	uxth	r2, r3
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	0011      	movs	r1, r2
 800f956:	0018      	movs	r0, r3
 800f958:	f000 f8e8 	bl	800fb2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f95c:	e0c2      	b.n	800fae4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2258      	movs	r2, #88	@ 0x58
 800f962:	5a99      	ldrh	r1, [r3, r2]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	225a      	movs	r2, #90	@ 0x5a
 800f968:	5a9b      	ldrh	r3, [r3, r2]
 800f96a:	b29a      	uxth	r2, r3
 800f96c:	208e      	movs	r0, #142	@ 0x8e
 800f96e:	183b      	adds	r3, r7, r0
 800f970:	1a8a      	subs	r2, r1, r2
 800f972:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	225a      	movs	r2, #90	@ 0x5a
 800f978:	5a9b      	ldrh	r3, [r3, r2]
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d100      	bne.n	800f982 <HAL_UART_IRQHandler+0x44a>
 800f980:	e0b2      	b.n	800fae8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800f982:	183b      	adds	r3, r7, r0
 800f984:	881b      	ldrh	r3, [r3, #0]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d100      	bne.n	800f98c <HAL_UART_IRQHandler+0x454>
 800f98a:	e0ad      	b.n	800fae8 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f98c:	f3ef 8310 	mrs	r3, PRIMASK
 800f990:	60fb      	str	r3, [r7, #12]
  return(result);
 800f992:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f994:	2488      	movs	r4, #136	@ 0x88
 800f996:	193a      	adds	r2, r7, r4
 800f998:	6013      	str	r3, [r2, #0]
 800f99a:	2301      	movs	r3, #1
 800f99c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	f383 8810 	msr	PRIMASK, r3
}
 800f9a4:	46c0      	nop			@ (mov r8, r8)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4951      	ldr	r1, [pc, #324]	@ (800faf8 <HAL_UART_IRQHandler+0x5c0>)
 800f9b2:	400a      	ands	r2, r1
 800f9b4:	601a      	str	r2, [r3, #0]
 800f9b6:	193b      	adds	r3, r7, r4
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	f383 8810 	msr	PRIMASK, r3
}
 800f9c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f9c4:	f3ef 8310 	mrs	r3, PRIMASK
 800f9c8:	61bb      	str	r3, [r7, #24]
  return(result);
 800f9ca:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9cc:	2484      	movs	r4, #132	@ 0x84
 800f9ce:	193a      	adds	r2, r7, r4
 800f9d0:	6013      	str	r3, [r2, #0]
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f9d6:	69fb      	ldr	r3, [r7, #28]
 800f9d8:	f383 8810 	msr	PRIMASK, r3
}
 800f9dc:	46c0      	nop			@ (mov r8, r8)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	689a      	ldr	r2, [r3, #8]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2101      	movs	r1, #1
 800f9ea:	438a      	bics	r2, r1
 800f9ec:	609a      	str	r2, [r3, #8]
 800f9ee:	193b      	adds	r3, r7, r4
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f9f4:	6a3b      	ldr	r3, [r7, #32]
 800f9f6:	f383 8810 	msr	PRIMASK, r3
}
 800f9fa:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2280      	movs	r2, #128	@ 0x80
 800fa00:	2120      	movs	r1, #32
 800fa02:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa10:	f3ef 8310 	mrs	r3, PRIMASK
 800fa14:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800fa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa18:	2480      	movs	r4, #128	@ 0x80
 800fa1a:	193a      	adds	r2, r7, r4
 800fa1c:	6013      	str	r3, [r2, #0]
 800fa1e:	2301      	movs	r3, #1
 800fa20:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa24:	f383 8810 	msr	PRIMASK, r3
}
 800fa28:	46c0      	nop			@ (mov r8, r8)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	681a      	ldr	r2, [r3, #0]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	2110      	movs	r1, #16
 800fa36:	438a      	bics	r2, r1
 800fa38:	601a      	str	r2, [r3, #0]
 800fa3a:	193b      	adds	r3, r7, r4
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa42:	f383 8810 	msr	PRIMASK, r3
}
 800fa46:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2202      	movs	r2, #2
 800fa4c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fa4e:	183b      	adds	r3, r7, r0
 800fa50:	881a      	ldrh	r2, [r3, #0]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	0011      	movs	r1, r2
 800fa56:	0018      	movs	r0, r3
 800fa58:	f000 f868 	bl	800fb2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fa5c:	e044      	b.n	800fae8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fa5e:	23a4      	movs	r3, #164	@ 0xa4
 800fa60:	18fb      	adds	r3, r7, r3
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	2380      	movs	r3, #128	@ 0x80
 800fa66:	035b      	lsls	r3, r3, #13
 800fa68:	4013      	ands	r3, r2
 800fa6a:	d010      	beq.n	800fa8e <HAL_UART_IRQHandler+0x556>
 800fa6c:	239c      	movs	r3, #156	@ 0x9c
 800fa6e:	18fb      	adds	r3, r7, r3
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	2380      	movs	r3, #128	@ 0x80
 800fa74:	03db      	lsls	r3, r3, #15
 800fa76:	4013      	ands	r3, r2
 800fa78:	d009      	beq.n	800fa8e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	2280      	movs	r2, #128	@ 0x80
 800fa80:	0352      	lsls	r2, r2, #13
 800fa82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	0018      	movs	r0, r3
 800fa88:	f001 f8be 	bl	8010c08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa8c:	e02f      	b.n	800faee <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800fa8e:	23a4      	movs	r3, #164	@ 0xa4
 800fa90:	18fb      	adds	r3, r7, r3
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	2280      	movs	r2, #128	@ 0x80
 800fa96:	4013      	ands	r3, r2
 800fa98:	d00f      	beq.n	800faba <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800fa9a:	23a0      	movs	r3, #160	@ 0xa0
 800fa9c:	18fb      	adds	r3, r7, r3
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2280      	movs	r2, #128	@ 0x80
 800faa2:	4013      	ands	r3, r2
 800faa4:	d009      	beq.n	800faba <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d01e      	beq.n	800faec <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fab2:	687a      	ldr	r2, [r7, #4]
 800fab4:	0010      	movs	r0, r2
 800fab6:	4798      	blx	r3
    }
    return;
 800fab8:	e018      	b.n	800faec <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800faba:	23a4      	movs	r3, #164	@ 0xa4
 800fabc:	18fb      	adds	r3, r7, r3
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	2240      	movs	r2, #64	@ 0x40
 800fac2:	4013      	ands	r3, r2
 800fac4:	d013      	beq.n	800faee <HAL_UART_IRQHandler+0x5b6>
 800fac6:	23a0      	movs	r3, #160	@ 0xa0
 800fac8:	18fb      	adds	r3, r7, r3
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	2240      	movs	r2, #64	@ 0x40
 800face:	4013      	ands	r3, r2
 800fad0:	d00d      	beq.n	800faee <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	0018      	movs	r0, r3
 800fad6:	f000 fea7 	bl	8010828 <UART_EndTransmit_IT>
    return;
 800fada:	e008      	b.n	800faee <HAL_UART_IRQHandler+0x5b6>
      return;
 800fadc:	46c0      	nop			@ (mov r8, r8)
 800fade:	e006      	b.n	800faee <HAL_UART_IRQHandler+0x5b6>
    return;
 800fae0:	46c0      	nop			@ (mov r8, r8)
 800fae2:	e004      	b.n	800faee <HAL_UART_IRQHandler+0x5b6>
      return;
 800fae4:	46c0      	nop			@ (mov r8, r8)
 800fae6:	e002      	b.n	800faee <HAL_UART_IRQHandler+0x5b6>
      return;
 800fae8:	46c0      	nop			@ (mov r8, r8)
 800faea:	e000      	b.n	800faee <HAL_UART_IRQHandler+0x5b6>
    return;
 800faec:	46c0      	nop			@ (mov r8, r8)
  }

}
 800faee:	46bd      	mov	sp, r7
 800faf0:	b02b      	add	sp, #172	@ 0xac
 800faf2:	bd90      	pop	{r4, r7, pc}
 800faf4:	fffffeff 	.word	0xfffffeff
 800faf8:	fffffedf 	.word	0xfffffedf

0800fafc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fb04:	46c0      	nop			@ (mov r8, r8)
 800fb06:	46bd      	mov	sp, r7
 800fb08:	b002      	add	sp, #8
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fb14:	46c0      	nop			@ (mov r8, r8)
 800fb16:	46bd      	mov	sp, r7
 800fb18:	b002      	add	sp, #8
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fb24:	46c0      	nop			@ (mov r8, r8)
 800fb26:	46bd      	mov	sp, r7
 800fb28:	b002      	add	sp, #8
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	000a      	movs	r2, r1
 800fb36:	1cbb      	adds	r3, r7, #2
 800fb38:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fb3a:	46c0      	nop			@ (mov r8, r8)
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	b002      	add	sp, #8
 800fb40:	bd80      	pop	{r7, pc}

0800fb42 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b084      	sub	sp, #16
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb4e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2280      	movs	r2, #128	@ 0x80
 800fb54:	589b      	ldr	r3, [r3, r2]
 800fb56:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800fb58:	68fa      	ldr	r2, [r7, #12]
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	4313      	orrs	r3, r2
}
 800fb5e:	0018      	movs	r0, r3
 800fb60:	46bd      	mov	sp, r7
 800fb62:	b004      	add	sp, #16
 800fb64:	bd80      	pop	{r7, pc}
	...

0800fb68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fb68:	b5b0      	push	{r4, r5, r7, lr}
 800fb6a:	b08e      	sub	sp, #56	@ 0x38
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fb70:	231a      	movs	r3, #26
 800fb72:	2218      	movs	r2, #24
 800fb74:	189b      	adds	r3, r3, r2
 800fb76:	19db      	adds	r3, r3, r7
 800fb78:	2200      	movs	r2, #0
 800fb7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	689a      	ldr	r2, [r3, #8]
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	691b      	ldr	r3, [r3, #16]
 800fb84:	431a      	orrs	r2, r3
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	695b      	ldr	r3, [r3, #20]
 800fb8a:	431a      	orrs	r2, r3
 800fb8c:	69fb      	ldr	r3, [r7, #28]
 800fb8e:	69db      	ldr	r3, [r3, #28]
 800fb90:	4313      	orrs	r3, r2
 800fb92:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	4ac3      	ldr	r2, [pc, #780]	@ (800fea8 <UART_SetConfig+0x340>)
 800fb9c:	4013      	ands	r3, r2
 800fb9e:	0019      	movs	r1, r3
 800fba0:	69fb      	ldr	r3, [r7, #28]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fba6:	430a      	orrs	r2, r1
 800fba8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fbaa:	69fb      	ldr	r3, [r7, #28]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	4abe      	ldr	r2, [pc, #760]	@ (800feac <UART_SetConfig+0x344>)
 800fbb2:	4013      	ands	r3, r2
 800fbb4:	0019      	movs	r1, r3
 800fbb6:	69fb      	ldr	r3, [r7, #28]
 800fbb8:	68da      	ldr	r2, [r3, #12]
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	430a      	orrs	r2, r1
 800fbc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	699b      	ldr	r3, [r3, #24]
 800fbc6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4ab8      	ldr	r2, [pc, #736]	@ (800feb0 <UART_SetConfig+0x348>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d004      	beq.n	800fbdc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fbd2:	69fb      	ldr	r3, [r7, #28]
 800fbd4:	6a1b      	ldr	r3, [r3, #32]
 800fbd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	689b      	ldr	r3, [r3, #8]
 800fbe2:	4ab4      	ldr	r2, [pc, #720]	@ (800feb4 <UART_SetConfig+0x34c>)
 800fbe4:	4013      	ands	r3, r2
 800fbe6:	0019      	movs	r1, r3
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fbee:	430a      	orrs	r2, r1
 800fbf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	4ab0      	ldr	r2, [pc, #704]	@ (800feb8 <UART_SetConfig+0x350>)
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d131      	bne.n	800fc60 <UART_SetConfig+0xf8>
 800fbfc:	4baf      	ldr	r3, [pc, #700]	@ (800febc <UART_SetConfig+0x354>)
 800fbfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc00:	2203      	movs	r2, #3
 800fc02:	4013      	ands	r3, r2
 800fc04:	2b03      	cmp	r3, #3
 800fc06:	d01d      	beq.n	800fc44 <UART_SetConfig+0xdc>
 800fc08:	d823      	bhi.n	800fc52 <UART_SetConfig+0xea>
 800fc0a:	2b02      	cmp	r3, #2
 800fc0c:	d00c      	beq.n	800fc28 <UART_SetConfig+0xc0>
 800fc0e:	d820      	bhi.n	800fc52 <UART_SetConfig+0xea>
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d002      	beq.n	800fc1a <UART_SetConfig+0xb2>
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d00e      	beq.n	800fc36 <UART_SetConfig+0xce>
 800fc18:	e01b      	b.n	800fc52 <UART_SetConfig+0xea>
 800fc1a:	231b      	movs	r3, #27
 800fc1c:	2218      	movs	r2, #24
 800fc1e:	189b      	adds	r3, r3, r2
 800fc20:	19db      	adds	r3, r3, r7
 800fc22:	2201      	movs	r2, #1
 800fc24:	701a      	strb	r2, [r3, #0]
 800fc26:	e0b4      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fc28:	231b      	movs	r3, #27
 800fc2a:	2218      	movs	r2, #24
 800fc2c:	189b      	adds	r3, r3, r2
 800fc2e:	19db      	adds	r3, r3, r7
 800fc30:	2202      	movs	r2, #2
 800fc32:	701a      	strb	r2, [r3, #0]
 800fc34:	e0ad      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fc36:	231b      	movs	r3, #27
 800fc38:	2218      	movs	r2, #24
 800fc3a:	189b      	adds	r3, r3, r2
 800fc3c:	19db      	adds	r3, r3, r7
 800fc3e:	2204      	movs	r2, #4
 800fc40:	701a      	strb	r2, [r3, #0]
 800fc42:	e0a6      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fc44:	231b      	movs	r3, #27
 800fc46:	2218      	movs	r2, #24
 800fc48:	189b      	adds	r3, r3, r2
 800fc4a:	19db      	adds	r3, r3, r7
 800fc4c:	2208      	movs	r2, #8
 800fc4e:	701a      	strb	r2, [r3, #0]
 800fc50:	e09f      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fc52:	231b      	movs	r3, #27
 800fc54:	2218      	movs	r2, #24
 800fc56:	189b      	adds	r3, r3, r2
 800fc58:	19db      	adds	r3, r3, r7
 800fc5a:	2210      	movs	r2, #16
 800fc5c:	701a      	strb	r2, [r3, #0]
 800fc5e:	e098      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fc60:	69fb      	ldr	r3, [r7, #28]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	4a96      	ldr	r2, [pc, #600]	@ (800fec0 <UART_SetConfig+0x358>)
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d131      	bne.n	800fcce <UART_SetConfig+0x166>
 800fc6a:	4b94      	ldr	r3, [pc, #592]	@ (800febc <UART_SetConfig+0x354>)
 800fc6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc6e:	220c      	movs	r2, #12
 800fc70:	4013      	ands	r3, r2
 800fc72:	2b0c      	cmp	r3, #12
 800fc74:	d01d      	beq.n	800fcb2 <UART_SetConfig+0x14a>
 800fc76:	d823      	bhi.n	800fcc0 <UART_SetConfig+0x158>
 800fc78:	2b08      	cmp	r3, #8
 800fc7a:	d00c      	beq.n	800fc96 <UART_SetConfig+0x12e>
 800fc7c:	d820      	bhi.n	800fcc0 <UART_SetConfig+0x158>
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d002      	beq.n	800fc88 <UART_SetConfig+0x120>
 800fc82:	2b04      	cmp	r3, #4
 800fc84:	d00e      	beq.n	800fca4 <UART_SetConfig+0x13c>
 800fc86:	e01b      	b.n	800fcc0 <UART_SetConfig+0x158>
 800fc88:	231b      	movs	r3, #27
 800fc8a:	2218      	movs	r2, #24
 800fc8c:	189b      	adds	r3, r3, r2
 800fc8e:	19db      	adds	r3, r3, r7
 800fc90:	2200      	movs	r2, #0
 800fc92:	701a      	strb	r2, [r3, #0]
 800fc94:	e07d      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fc96:	231b      	movs	r3, #27
 800fc98:	2218      	movs	r2, #24
 800fc9a:	189b      	adds	r3, r3, r2
 800fc9c:	19db      	adds	r3, r3, r7
 800fc9e:	2202      	movs	r2, #2
 800fca0:	701a      	strb	r2, [r3, #0]
 800fca2:	e076      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fca4:	231b      	movs	r3, #27
 800fca6:	2218      	movs	r2, #24
 800fca8:	189b      	adds	r3, r3, r2
 800fcaa:	19db      	adds	r3, r3, r7
 800fcac:	2204      	movs	r2, #4
 800fcae:	701a      	strb	r2, [r3, #0]
 800fcb0:	e06f      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fcb2:	231b      	movs	r3, #27
 800fcb4:	2218      	movs	r2, #24
 800fcb6:	189b      	adds	r3, r3, r2
 800fcb8:	19db      	adds	r3, r3, r7
 800fcba:	2208      	movs	r2, #8
 800fcbc:	701a      	strb	r2, [r3, #0]
 800fcbe:	e068      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fcc0:	231b      	movs	r3, #27
 800fcc2:	2218      	movs	r2, #24
 800fcc4:	189b      	adds	r3, r3, r2
 800fcc6:	19db      	adds	r3, r3, r7
 800fcc8:	2210      	movs	r2, #16
 800fcca:	701a      	strb	r2, [r3, #0]
 800fccc:	e061      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4a7c      	ldr	r2, [pc, #496]	@ (800fec4 <UART_SetConfig+0x35c>)
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	d106      	bne.n	800fce6 <UART_SetConfig+0x17e>
 800fcd8:	231b      	movs	r3, #27
 800fcda:	2218      	movs	r2, #24
 800fcdc:	189b      	adds	r3, r3, r2
 800fcde:	19db      	adds	r3, r3, r7
 800fce0:	2200      	movs	r2, #0
 800fce2:	701a      	strb	r2, [r3, #0]
 800fce4:	e055      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fce6:	69fb      	ldr	r3, [r7, #28]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a77      	ldr	r2, [pc, #476]	@ (800fec8 <UART_SetConfig+0x360>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d106      	bne.n	800fcfe <UART_SetConfig+0x196>
 800fcf0:	231b      	movs	r3, #27
 800fcf2:	2218      	movs	r2, #24
 800fcf4:	189b      	adds	r3, r3, r2
 800fcf6:	19db      	adds	r3, r3, r7
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	701a      	strb	r2, [r3, #0]
 800fcfc:	e049      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fcfe:	69fb      	ldr	r3, [r7, #28]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	4a6b      	ldr	r2, [pc, #428]	@ (800feb0 <UART_SetConfig+0x348>)
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d13e      	bne.n	800fd86 <UART_SetConfig+0x21e>
 800fd08:	4b6c      	ldr	r3, [pc, #432]	@ (800febc <UART_SetConfig+0x354>)
 800fd0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fd0c:	23c0      	movs	r3, #192	@ 0xc0
 800fd0e:	011b      	lsls	r3, r3, #4
 800fd10:	4013      	ands	r3, r2
 800fd12:	22c0      	movs	r2, #192	@ 0xc0
 800fd14:	0112      	lsls	r2, r2, #4
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d027      	beq.n	800fd6a <UART_SetConfig+0x202>
 800fd1a:	22c0      	movs	r2, #192	@ 0xc0
 800fd1c:	0112      	lsls	r2, r2, #4
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	d82a      	bhi.n	800fd78 <UART_SetConfig+0x210>
 800fd22:	2280      	movs	r2, #128	@ 0x80
 800fd24:	0112      	lsls	r2, r2, #4
 800fd26:	4293      	cmp	r3, r2
 800fd28:	d011      	beq.n	800fd4e <UART_SetConfig+0x1e6>
 800fd2a:	2280      	movs	r2, #128	@ 0x80
 800fd2c:	0112      	lsls	r2, r2, #4
 800fd2e:	4293      	cmp	r3, r2
 800fd30:	d822      	bhi.n	800fd78 <UART_SetConfig+0x210>
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d004      	beq.n	800fd40 <UART_SetConfig+0x1d8>
 800fd36:	2280      	movs	r2, #128	@ 0x80
 800fd38:	00d2      	lsls	r2, r2, #3
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d00e      	beq.n	800fd5c <UART_SetConfig+0x1f4>
 800fd3e:	e01b      	b.n	800fd78 <UART_SetConfig+0x210>
 800fd40:	231b      	movs	r3, #27
 800fd42:	2218      	movs	r2, #24
 800fd44:	189b      	adds	r3, r3, r2
 800fd46:	19db      	adds	r3, r3, r7
 800fd48:	2200      	movs	r2, #0
 800fd4a:	701a      	strb	r2, [r3, #0]
 800fd4c:	e021      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fd4e:	231b      	movs	r3, #27
 800fd50:	2218      	movs	r2, #24
 800fd52:	189b      	adds	r3, r3, r2
 800fd54:	19db      	adds	r3, r3, r7
 800fd56:	2202      	movs	r2, #2
 800fd58:	701a      	strb	r2, [r3, #0]
 800fd5a:	e01a      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fd5c:	231b      	movs	r3, #27
 800fd5e:	2218      	movs	r2, #24
 800fd60:	189b      	adds	r3, r3, r2
 800fd62:	19db      	adds	r3, r3, r7
 800fd64:	2204      	movs	r2, #4
 800fd66:	701a      	strb	r2, [r3, #0]
 800fd68:	e013      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fd6a:	231b      	movs	r3, #27
 800fd6c:	2218      	movs	r2, #24
 800fd6e:	189b      	adds	r3, r3, r2
 800fd70:	19db      	adds	r3, r3, r7
 800fd72:	2208      	movs	r2, #8
 800fd74:	701a      	strb	r2, [r3, #0]
 800fd76:	e00c      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fd78:	231b      	movs	r3, #27
 800fd7a:	2218      	movs	r2, #24
 800fd7c:	189b      	adds	r3, r3, r2
 800fd7e:	19db      	adds	r3, r3, r7
 800fd80:	2210      	movs	r2, #16
 800fd82:	701a      	strb	r2, [r3, #0]
 800fd84:	e005      	b.n	800fd92 <UART_SetConfig+0x22a>
 800fd86:	231b      	movs	r3, #27
 800fd88:	2218      	movs	r2, #24
 800fd8a:	189b      	adds	r3, r3, r2
 800fd8c:	19db      	adds	r3, r3, r7
 800fd8e:	2210      	movs	r2, #16
 800fd90:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fd92:	69fb      	ldr	r3, [r7, #28]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4a46      	ldr	r2, [pc, #280]	@ (800feb0 <UART_SetConfig+0x348>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d000      	beq.n	800fd9e <UART_SetConfig+0x236>
 800fd9c:	e09a      	b.n	800fed4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fd9e:	231b      	movs	r3, #27
 800fda0:	2218      	movs	r2, #24
 800fda2:	189b      	adds	r3, r3, r2
 800fda4:	19db      	adds	r3, r3, r7
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	2b08      	cmp	r3, #8
 800fdaa:	d01d      	beq.n	800fde8 <UART_SetConfig+0x280>
 800fdac:	dc20      	bgt.n	800fdf0 <UART_SetConfig+0x288>
 800fdae:	2b04      	cmp	r3, #4
 800fdb0:	d015      	beq.n	800fdde <UART_SetConfig+0x276>
 800fdb2:	dc1d      	bgt.n	800fdf0 <UART_SetConfig+0x288>
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d002      	beq.n	800fdbe <UART_SetConfig+0x256>
 800fdb8:	2b02      	cmp	r3, #2
 800fdba:	d005      	beq.n	800fdc8 <UART_SetConfig+0x260>
 800fdbc:	e018      	b.n	800fdf0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fdbe:	f7fe fc35 	bl	800e62c <HAL_RCC_GetPCLK1Freq>
 800fdc2:	0003      	movs	r3, r0
 800fdc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800fdc6:	e01c      	b.n	800fe02 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fdc8:	4b3c      	ldr	r3, [pc, #240]	@ (800febc <UART_SetConfig+0x354>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	2210      	movs	r2, #16
 800fdce:	4013      	ands	r3, r2
 800fdd0:	d002      	beq.n	800fdd8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800fdd2:	4b3e      	ldr	r3, [pc, #248]	@ (800fecc <UART_SetConfig+0x364>)
 800fdd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fdd6:	e014      	b.n	800fe02 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800fdd8:	4b3d      	ldr	r3, [pc, #244]	@ (800fed0 <UART_SetConfig+0x368>)
 800fdda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800fddc:	e011      	b.n	800fe02 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fdde:	f7fe fb75 	bl	800e4cc <HAL_RCC_GetSysClockFreq>
 800fde2:	0003      	movs	r3, r0
 800fde4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800fde6:	e00c      	b.n	800fe02 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fde8:	2380      	movs	r3, #128	@ 0x80
 800fdea:	021b      	lsls	r3, r3, #8
 800fdec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800fdee:	e008      	b.n	800fe02 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800fdf4:	231a      	movs	r3, #26
 800fdf6:	2218      	movs	r2, #24
 800fdf8:	189b      	adds	r3, r3, r2
 800fdfa:	19db      	adds	r3, r3, r7
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	701a      	strb	r2, [r3, #0]
        break;
 800fe00:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fe02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d100      	bne.n	800fe0a <UART_SetConfig+0x2a2>
 800fe08:	e133      	b.n	8010072 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800fe0a:	69fb      	ldr	r3, [r7, #28]
 800fe0c:	685a      	ldr	r2, [r3, #4]
 800fe0e:	0013      	movs	r3, r2
 800fe10:	005b      	lsls	r3, r3, #1
 800fe12:	189b      	adds	r3, r3, r2
 800fe14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d305      	bcc.n	800fe26 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800fe20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d906      	bls.n	800fe34 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800fe26:	231a      	movs	r3, #26
 800fe28:	2218      	movs	r2, #24
 800fe2a:	189b      	adds	r3, r3, r2
 800fe2c:	19db      	adds	r3, r3, r7
 800fe2e:	2201      	movs	r2, #1
 800fe30:	701a      	strb	r2, [r3, #0]
 800fe32:	e11e      	b.n	8010072 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800fe34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe36:	613b      	str	r3, [r7, #16]
 800fe38:	2300      	movs	r3, #0
 800fe3a:	617b      	str	r3, [r7, #20]
 800fe3c:	6939      	ldr	r1, [r7, #16]
 800fe3e:	697a      	ldr	r2, [r7, #20]
 800fe40:	000b      	movs	r3, r1
 800fe42:	0e1b      	lsrs	r3, r3, #24
 800fe44:	0010      	movs	r0, r2
 800fe46:	0205      	lsls	r5, r0, #8
 800fe48:	431d      	orrs	r5, r3
 800fe4a:	000b      	movs	r3, r1
 800fe4c:	021c      	lsls	r4, r3, #8
 800fe4e:	69fb      	ldr	r3, [r7, #28]
 800fe50:	685b      	ldr	r3, [r3, #4]
 800fe52:	085b      	lsrs	r3, r3, #1
 800fe54:	60bb      	str	r3, [r7, #8]
 800fe56:	2300      	movs	r3, #0
 800fe58:	60fb      	str	r3, [r7, #12]
 800fe5a:	68b8      	ldr	r0, [r7, #8]
 800fe5c:	68f9      	ldr	r1, [r7, #12]
 800fe5e:	1900      	adds	r0, r0, r4
 800fe60:	4169      	adcs	r1, r5
 800fe62:	69fb      	ldr	r3, [r7, #28]
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	603b      	str	r3, [r7, #0]
 800fe68:	2300      	movs	r3, #0
 800fe6a:	607b      	str	r3, [r7, #4]
 800fe6c:	683a      	ldr	r2, [r7, #0]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f7f0 fa62 	bl	8000338 <__aeabi_uldivmod>
 800fe74:	0002      	movs	r2, r0
 800fe76:	000b      	movs	r3, r1
 800fe78:	0013      	movs	r3, r2
 800fe7a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fe7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe7e:	23c0      	movs	r3, #192	@ 0xc0
 800fe80:	009b      	lsls	r3, r3, #2
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d309      	bcc.n	800fe9a <UART_SetConfig+0x332>
 800fe86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe88:	2380      	movs	r3, #128	@ 0x80
 800fe8a:	035b      	lsls	r3, r3, #13
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d204      	bcs.n	800fe9a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800fe90:	69fb      	ldr	r3, [r7, #28]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe96:	60da      	str	r2, [r3, #12]
 800fe98:	e0eb      	b.n	8010072 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800fe9a:	231a      	movs	r3, #26
 800fe9c:	2218      	movs	r2, #24
 800fe9e:	189b      	adds	r3, r3, r2
 800fea0:	19db      	adds	r3, r3, r7
 800fea2:	2201      	movs	r2, #1
 800fea4:	701a      	strb	r2, [r3, #0]
 800fea6:	e0e4      	b.n	8010072 <UART_SetConfig+0x50a>
 800fea8:	efff69f3 	.word	0xefff69f3
 800feac:	ffffcfff 	.word	0xffffcfff
 800feb0:	40004800 	.word	0x40004800
 800feb4:	fffff4ff 	.word	0xfffff4ff
 800feb8:	40013800 	.word	0x40013800
 800febc:	40021000 	.word	0x40021000
 800fec0:	40004400 	.word	0x40004400
 800fec4:	40004c00 	.word	0x40004c00
 800fec8:	40005000 	.word	0x40005000
 800fecc:	003d0900 	.word	0x003d0900
 800fed0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fed4:	69fb      	ldr	r3, [r7, #28]
 800fed6:	69da      	ldr	r2, [r3, #28]
 800fed8:	2380      	movs	r3, #128	@ 0x80
 800feda:	021b      	lsls	r3, r3, #8
 800fedc:	429a      	cmp	r2, r3
 800fede:	d000      	beq.n	800fee2 <UART_SetConfig+0x37a>
 800fee0:	e070      	b.n	800ffc4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800fee2:	231b      	movs	r3, #27
 800fee4:	2218      	movs	r2, #24
 800fee6:	189b      	adds	r3, r3, r2
 800fee8:	19db      	adds	r3, r3, r7
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	2b08      	cmp	r3, #8
 800feee:	d822      	bhi.n	800ff36 <UART_SetConfig+0x3ce>
 800fef0:	009a      	lsls	r2, r3, #2
 800fef2:	4b67      	ldr	r3, [pc, #412]	@ (8010090 <UART_SetConfig+0x528>)
 800fef4:	18d3      	adds	r3, r2, r3
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fefa:	f7fe fb97 	bl	800e62c <HAL_RCC_GetPCLK1Freq>
 800fefe:	0003      	movs	r3, r0
 800ff00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ff02:	e021      	b.n	800ff48 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff04:	f7fe fba8 	bl	800e658 <HAL_RCC_GetPCLK2Freq>
 800ff08:	0003      	movs	r3, r0
 800ff0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ff0c:	e01c      	b.n	800ff48 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff0e:	4b61      	ldr	r3, [pc, #388]	@ (8010094 <UART_SetConfig+0x52c>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2210      	movs	r2, #16
 800ff14:	4013      	ands	r3, r2
 800ff16:	d002      	beq.n	800ff1e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800ff18:	4b5f      	ldr	r3, [pc, #380]	@ (8010098 <UART_SetConfig+0x530>)
 800ff1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff1c:	e014      	b.n	800ff48 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800ff1e:	4b5f      	ldr	r3, [pc, #380]	@ (801009c <UART_SetConfig+0x534>)
 800ff20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ff22:	e011      	b.n	800ff48 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ff24:	f7fe fad2 	bl	800e4cc <HAL_RCC_GetSysClockFreq>
 800ff28:	0003      	movs	r3, r0
 800ff2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ff2c:	e00c      	b.n	800ff48 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff2e:	2380      	movs	r3, #128	@ 0x80
 800ff30:	021b      	lsls	r3, r3, #8
 800ff32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ff34:	e008      	b.n	800ff48 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800ff36:	2300      	movs	r3, #0
 800ff38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800ff3a:	231a      	movs	r3, #26
 800ff3c:	2218      	movs	r2, #24
 800ff3e:	189b      	adds	r3, r3, r2
 800ff40:	19db      	adds	r3, r3, r7
 800ff42:	2201      	movs	r2, #1
 800ff44:	701a      	strb	r2, [r3, #0]
        break;
 800ff46:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ff48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d100      	bne.n	800ff50 <UART_SetConfig+0x3e8>
 800ff4e:	e090      	b.n	8010072 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ff50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff52:	005a      	lsls	r2, r3, #1
 800ff54:	69fb      	ldr	r3, [r7, #28]
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	085b      	lsrs	r3, r3, #1
 800ff5a:	18d2      	adds	r2, r2, r3
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	0019      	movs	r1, r3
 800ff62:	0010      	movs	r0, r2
 800ff64:	f7f0 f8e4 	bl	8000130 <__udivsi3>
 800ff68:	0003      	movs	r3, r0
 800ff6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff6e:	2b0f      	cmp	r3, #15
 800ff70:	d921      	bls.n	800ffb6 <UART_SetConfig+0x44e>
 800ff72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff74:	2380      	movs	r3, #128	@ 0x80
 800ff76:	025b      	lsls	r3, r3, #9
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d21c      	bcs.n	800ffb6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ff7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff7e:	b29a      	uxth	r2, r3
 800ff80:	200e      	movs	r0, #14
 800ff82:	2418      	movs	r4, #24
 800ff84:	1903      	adds	r3, r0, r4
 800ff86:	19db      	adds	r3, r3, r7
 800ff88:	210f      	movs	r1, #15
 800ff8a:	438a      	bics	r2, r1
 800ff8c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ff8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff90:	085b      	lsrs	r3, r3, #1
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	2207      	movs	r2, #7
 800ff96:	4013      	ands	r3, r2
 800ff98:	b299      	uxth	r1, r3
 800ff9a:	1903      	adds	r3, r0, r4
 800ff9c:	19db      	adds	r3, r3, r7
 800ff9e:	1902      	adds	r2, r0, r4
 800ffa0:	19d2      	adds	r2, r2, r7
 800ffa2:	8812      	ldrh	r2, [r2, #0]
 800ffa4:	430a      	orrs	r2, r1
 800ffa6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	1902      	adds	r2, r0, r4
 800ffae:	19d2      	adds	r2, r2, r7
 800ffb0:	8812      	ldrh	r2, [r2, #0]
 800ffb2:	60da      	str	r2, [r3, #12]
 800ffb4:	e05d      	b.n	8010072 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800ffb6:	231a      	movs	r3, #26
 800ffb8:	2218      	movs	r2, #24
 800ffba:	189b      	adds	r3, r3, r2
 800ffbc:	19db      	adds	r3, r3, r7
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	701a      	strb	r2, [r3, #0]
 800ffc2:	e056      	b.n	8010072 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ffc4:	231b      	movs	r3, #27
 800ffc6:	2218      	movs	r2, #24
 800ffc8:	189b      	adds	r3, r3, r2
 800ffca:	19db      	adds	r3, r3, r7
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	2b08      	cmp	r3, #8
 800ffd0:	d822      	bhi.n	8010018 <UART_SetConfig+0x4b0>
 800ffd2:	009a      	lsls	r2, r3, #2
 800ffd4:	4b32      	ldr	r3, [pc, #200]	@ (80100a0 <UART_SetConfig+0x538>)
 800ffd6:	18d3      	adds	r3, r2, r3
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ffdc:	f7fe fb26 	bl	800e62c <HAL_RCC_GetPCLK1Freq>
 800ffe0:	0003      	movs	r3, r0
 800ffe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ffe4:	e021      	b.n	801002a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ffe6:	f7fe fb37 	bl	800e658 <HAL_RCC_GetPCLK2Freq>
 800ffea:	0003      	movs	r3, r0
 800ffec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ffee:	e01c      	b.n	801002a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fff0:	4b28      	ldr	r3, [pc, #160]	@ (8010094 <UART_SetConfig+0x52c>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2210      	movs	r2, #16
 800fff6:	4013      	ands	r3, r2
 800fff8:	d002      	beq.n	8010000 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800fffa:	4b27      	ldr	r3, [pc, #156]	@ (8010098 <UART_SetConfig+0x530>)
 800fffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fffe:	e014      	b.n	801002a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8010000:	4b26      	ldr	r3, [pc, #152]	@ (801009c <UART_SetConfig+0x534>)
 8010002:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010004:	e011      	b.n	801002a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010006:	f7fe fa61 	bl	800e4cc <HAL_RCC_GetSysClockFreq>
 801000a:	0003      	movs	r3, r0
 801000c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801000e:	e00c      	b.n	801002a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010010:	2380      	movs	r3, #128	@ 0x80
 8010012:	021b      	lsls	r3, r3, #8
 8010014:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010016:	e008      	b.n	801002a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8010018:	2300      	movs	r3, #0
 801001a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801001c:	231a      	movs	r3, #26
 801001e:	2218      	movs	r2, #24
 8010020:	189b      	adds	r3, r3, r2
 8010022:	19db      	adds	r3, r3, r7
 8010024:	2201      	movs	r2, #1
 8010026:	701a      	strb	r2, [r3, #0]
        break;
 8010028:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801002a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801002c:	2b00      	cmp	r3, #0
 801002e:	d020      	beq.n	8010072 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010030:	69fb      	ldr	r3, [r7, #28]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	085a      	lsrs	r2, r3, #1
 8010036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010038:	18d2      	adds	r2, r2, r3
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	0019      	movs	r1, r3
 8010040:	0010      	movs	r0, r2
 8010042:	f7f0 f875 	bl	8000130 <__udivsi3>
 8010046:	0003      	movs	r3, r0
 8010048:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801004a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801004c:	2b0f      	cmp	r3, #15
 801004e:	d90a      	bls.n	8010066 <UART_SetConfig+0x4fe>
 8010050:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010052:	2380      	movs	r3, #128	@ 0x80
 8010054:	025b      	lsls	r3, r3, #9
 8010056:	429a      	cmp	r2, r3
 8010058:	d205      	bcs.n	8010066 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801005a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801005c:	b29a      	uxth	r2, r3
 801005e:	69fb      	ldr	r3, [r7, #28]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	60da      	str	r2, [r3, #12]
 8010064:	e005      	b.n	8010072 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8010066:	231a      	movs	r3, #26
 8010068:	2218      	movs	r2, #24
 801006a:	189b      	adds	r3, r3, r2
 801006c:	19db      	adds	r3, r3, r7
 801006e:	2201      	movs	r2, #1
 8010070:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010072:	69fb      	ldr	r3, [r7, #28]
 8010074:	2200      	movs	r2, #0
 8010076:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8010078:	69fb      	ldr	r3, [r7, #28]
 801007a:	2200      	movs	r2, #0
 801007c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801007e:	231a      	movs	r3, #26
 8010080:	2218      	movs	r2, #24
 8010082:	189b      	adds	r3, r3, r2
 8010084:	19db      	adds	r3, r3, r7
 8010086:	781b      	ldrb	r3, [r3, #0]
}
 8010088:	0018      	movs	r0, r3
 801008a:	46bd      	mov	sp, r7
 801008c:	b00e      	add	sp, #56	@ 0x38
 801008e:	bdb0      	pop	{r4, r5, r7, pc}
 8010090:	08014b6c 	.word	0x08014b6c
 8010094:	40021000 	.word	0x40021000
 8010098:	003d0900 	.word	0x003d0900
 801009c:	00f42400 	.word	0x00f42400
 80100a0:	08014b90 	.word	0x08014b90

080100a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100b0:	2201      	movs	r2, #1
 80100b2:	4013      	ands	r3, r2
 80100b4:	d00b      	beq.n	80100ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	4a4a      	ldr	r2, [pc, #296]	@ (80101e8 <UART_AdvFeatureConfig+0x144>)
 80100be:	4013      	ands	r3, r2
 80100c0:	0019      	movs	r1, r3
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	430a      	orrs	r2, r1
 80100cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100d2:	2202      	movs	r2, #2
 80100d4:	4013      	ands	r3, r2
 80100d6:	d00b      	beq.n	80100f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	4a43      	ldr	r2, [pc, #268]	@ (80101ec <UART_AdvFeatureConfig+0x148>)
 80100e0:	4013      	ands	r3, r2
 80100e2:	0019      	movs	r1, r3
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	430a      	orrs	r2, r1
 80100ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100f4:	2204      	movs	r2, #4
 80100f6:	4013      	ands	r3, r2
 80100f8:	d00b      	beq.n	8010112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	4a3b      	ldr	r2, [pc, #236]	@ (80101f0 <UART_AdvFeatureConfig+0x14c>)
 8010102:	4013      	ands	r3, r2
 8010104:	0019      	movs	r1, r3
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	430a      	orrs	r2, r1
 8010110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010116:	2208      	movs	r2, #8
 8010118:	4013      	ands	r3, r2
 801011a:	d00b      	beq.n	8010134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	4a34      	ldr	r2, [pc, #208]	@ (80101f4 <UART_AdvFeatureConfig+0x150>)
 8010124:	4013      	ands	r3, r2
 8010126:	0019      	movs	r1, r3
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	430a      	orrs	r2, r1
 8010132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010138:	2210      	movs	r2, #16
 801013a:	4013      	ands	r3, r2
 801013c:	d00b      	beq.n	8010156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	689b      	ldr	r3, [r3, #8]
 8010144:	4a2c      	ldr	r2, [pc, #176]	@ (80101f8 <UART_AdvFeatureConfig+0x154>)
 8010146:	4013      	ands	r3, r2
 8010148:	0019      	movs	r1, r3
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	430a      	orrs	r2, r1
 8010154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801015a:	2220      	movs	r2, #32
 801015c:	4013      	ands	r3, r2
 801015e:	d00b      	beq.n	8010178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	689b      	ldr	r3, [r3, #8]
 8010166:	4a25      	ldr	r2, [pc, #148]	@ (80101fc <UART_AdvFeatureConfig+0x158>)
 8010168:	4013      	ands	r3, r2
 801016a:	0019      	movs	r1, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	430a      	orrs	r2, r1
 8010176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801017c:	2240      	movs	r2, #64	@ 0x40
 801017e:	4013      	ands	r3, r2
 8010180:	d01d      	beq.n	80101be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	4a1d      	ldr	r2, [pc, #116]	@ (8010200 <UART_AdvFeatureConfig+0x15c>)
 801018a:	4013      	ands	r3, r2
 801018c:	0019      	movs	r1, r3
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	430a      	orrs	r2, r1
 8010198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801019e:	2380      	movs	r3, #128	@ 0x80
 80101a0:	035b      	lsls	r3, r3, #13
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d10b      	bne.n	80101be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	4a15      	ldr	r2, [pc, #84]	@ (8010204 <UART_AdvFeatureConfig+0x160>)
 80101ae:	4013      	ands	r3, r2
 80101b0:	0019      	movs	r1, r3
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	430a      	orrs	r2, r1
 80101bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101c2:	2280      	movs	r2, #128	@ 0x80
 80101c4:	4013      	ands	r3, r2
 80101c6:	d00b      	beq.n	80101e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	4a0e      	ldr	r2, [pc, #56]	@ (8010208 <UART_AdvFeatureConfig+0x164>)
 80101d0:	4013      	ands	r3, r2
 80101d2:	0019      	movs	r1, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	430a      	orrs	r2, r1
 80101de:	605a      	str	r2, [r3, #4]
  }
}
 80101e0:	46c0      	nop			@ (mov r8, r8)
 80101e2:	46bd      	mov	sp, r7
 80101e4:	b002      	add	sp, #8
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	fffdffff 	.word	0xfffdffff
 80101ec:	fffeffff 	.word	0xfffeffff
 80101f0:	fffbffff 	.word	0xfffbffff
 80101f4:	ffff7fff 	.word	0xffff7fff
 80101f8:	ffffefff 	.word	0xffffefff
 80101fc:	ffffdfff 	.word	0xffffdfff
 8010200:	ffefffff 	.word	0xffefffff
 8010204:	ff9fffff 	.word	0xff9fffff
 8010208:	fff7ffff 	.word	0xfff7ffff

0801020c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b092      	sub	sp, #72	@ 0x48
 8010210:	af02      	add	r7, sp, #8
 8010212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2284      	movs	r2, #132	@ 0x84
 8010218:	2100      	movs	r1, #0
 801021a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801021c:	f7fb fbfe 	bl	800ba1c <HAL_GetTick>
 8010220:	0003      	movs	r3, r0
 8010222:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	2208      	movs	r2, #8
 801022c:	4013      	ands	r3, r2
 801022e:	2b08      	cmp	r3, #8
 8010230:	d12c      	bne.n	801028c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010234:	2280      	movs	r2, #128	@ 0x80
 8010236:	0391      	lsls	r1, r2, #14
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	4a46      	ldr	r2, [pc, #280]	@ (8010354 <UART_CheckIdleState+0x148>)
 801023c:	9200      	str	r2, [sp, #0]
 801023e:	2200      	movs	r2, #0
 8010240:	f000 f88c 	bl	801035c <UART_WaitOnFlagUntilTimeout>
 8010244:	1e03      	subs	r3, r0, #0
 8010246:	d021      	beq.n	801028c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010248:	f3ef 8310 	mrs	r3, PRIMASK
 801024c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801024e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8010250:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010252:	2301      	movs	r3, #1
 8010254:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010258:	f383 8810 	msr	PRIMASK, r3
}
 801025c:	46c0      	nop			@ (mov r8, r8)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	2180      	movs	r1, #128	@ 0x80
 801026a:	438a      	bics	r2, r1
 801026c:	601a      	str	r2, [r3, #0]
 801026e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010274:	f383 8810 	msr	PRIMASK, r3
}
 8010278:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2220      	movs	r2, #32
 801027e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2278      	movs	r2, #120	@ 0x78
 8010284:	2100      	movs	r1, #0
 8010286:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010288:	2303      	movs	r3, #3
 801028a:	e05f      	b.n	801034c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	2204      	movs	r2, #4
 8010294:	4013      	ands	r3, r2
 8010296:	2b04      	cmp	r3, #4
 8010298:	d146      	bne.n	8010328 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801029a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801029c:	2280      	movs	r2, #128	@ 0x80
 801029e:	03d1      	lsls	r1, r2, #15
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	4a2c      	ldr	r2, [pc, #176]	@ (8010354 <UART_CheckIdleState+0x148>)
 80102a4:	9200      	str	r2, [sp, #0]
 80102a6:	2200      	movs	r2, #0
 80102a8:	f000 f858 	bl	801035c <UART_WaitOnFlagUntilTimeout>
 80102ac:	1e03      	subs	r3, r0, #0
 80102ae:	d03b      	beq.n	8010328 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102b0:	f3ef 8310 	mrs	r3, PRIMASK
 80102b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80102b6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80102b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80102ba:	2301      	movs	r3, #1
 80102bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	f383 8810 	msr	PRIMASK, r3
}
 80102c4:	46c0      	nop			@ (mov r8, r8)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	681a      	ldr	r2, [r3, #0]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	4921      	ldr	r1, [pc, #132]	@ (8010358 <UART_CheckIdleState+0x14c>)
 80102d2:	400a      	ands	r2, r1
 80102d4:	601a      	str	r2, [r3, #0]
 80102d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	f383 8810 	msr	PRIMASK, r3
}
 80102e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102e2:	f3ef 8310 	mrs	r3, PRIMASK
 80102e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80102e8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80102ec:	2301      	movs	r3, #1
 80102ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	f383 8810 	msr	PRIMASK, r3
}
 80102f6:	46c0      	nop			@ (mov r8, r8)
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	689a      	ldr	r2, [r3, #8]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	2101      	movs	r1, #1
 8010304:	438a      	bics	r2, r1
 8010306:	609a      	str	r2, [r3, #8]
 8010308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801030a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801030c:	6a3b      	ldr	r3, [r7, #32]
 801030e:	f383 8810 	msr	PRIMASK, r3
}
 8010312:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2280      	movs	r2, #128	@ 0x80
 8010318:	2120      	movs	r1, #32
 801031a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2278      	movs	r2, #120	@ 0x78
 8010320:	2100      	movs	r1, #0
 8010322:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010324:	2303      	movs	r3, #3
 8010326:	e011      	b.n	801034c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2220      	movs	r2, #32
 801032c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2280      	movs	r2, #128	@ 0x80
 8010332:	2120      	movs	r1, #32
 8010334:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2200      	movs	r2, #0
 801033a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2200      	movs	r2, #0
 8010340:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2278      	movs	r2, #120	@ 0x78
 8010346:	2100      	movs	r1, #0
 8010348:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801034a:	2300      	movs	r3, #0
}
 801034c:	0018      	movs	r0, r3
 801034e:	46bd      	mov	sp, r7
 8010350:	b010      	add	sp, #64	@ 0x40
 8010352:	bd80      	pop	{r7, pc}
 8010354:	01ffffff 	.word	0x01ffffff
 8010358:	fffffedf 	.word	0xfffffedf

0801035c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	603b      	str	r3, [r7, #0]
 8010368:	1dfb      	adds	r3, r7, #7
 801036a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801036c:	e04b      	b.n	8010406 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	3301      	adds	r3, #1
 8010372:	d048      	beq.n	8010406 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010374:	f7fb fb52 	bl	800ba1c <HAL_GetTick>
 8010378:	0002      	movs	r2, r0
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	1ad3      	subs	r3, r2, r3
 801037e:	69ba      	ldr	r2, [r7, #24]
 8010380:	429a      	cmp	r2, r3
 8010382:	d302      	bcc.n	801038a <UART_WaitOnFlagUntilTimeout+0x2e>
 8010384:	69bb      	ldr	r3, [r7, #24]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d101      	bne.n	801038e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801038a:	2303      	movs	r3, #3
 801038c:	e04b      	b.n	8010426 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2204      	movs	r2, #4
 8010396:	4013      	ands	r3, r2
 8010398:	d035      	beq.n	8010406 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	69db      	ldr	r3, [r3, #28]
 80103a0:	2208      	movs	r2, #8
 80103a2:	4013      	ands	r3, r2
 80103a4:	2b08      	cmp	r3, #8
 80103a6:	d111      	bne.n	80103cc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	2208      	movs	r2, #8
 80103ae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	0018      	movs	r0, r3
 80103b4:	f000 f906 	bl	80105c4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2284      	movs	r2, #132	@ 0x84
 80103bc:	2108      	movs	r1, #8
 80103be:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2278      	movs	r2, #120	@ 0x78
 80103c4:	2100      	movs	r1, #0
 80103c6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80103c8:	2301      	movs	r3, #1
 80103ca:	e02c      	b.n	8010426 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	69da      	ldr	r2, [r3, #28]
 80103d2:	2380      	movs	r3, #128	@ 0x80
 80103d4:	011b      	lsls	r3, r3, #4
 80103d6:	401a      	ands	r2, r3
 80103d8:	2380      	movs	r3, #128	@ 0x80
 80103da:	011b      	lsls	r3, r3, #4
 80103dc:	429a      	cmp	r2, r3
 80103de:	d112      	bne.n	8010406 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	2280      	movs	r2, #128	@ 0x80
 80103e6:	0112      	lsls	r2, r2, #4
 80103e8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	0018      	movs	r0, r3
 80103ee:	f000 f8e9 	bl	80105c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	2284      	movs	r2, #132	@ 0x84
 80103f6:	2120      	movs	r1, #32
 80103f8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2278      	movs	r2, #120	@ 0x78
 80103fe:	2100      	movs	r1, #0
 8010400:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8010402:	2303      	movs	r3, #3
 8010404:	e00f      	b.n	8010426 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	69db      	ldr	r3, [r3, #28]
 801040c:	68ba      	ldr	r2, [r7, #8]
 801040e:	4013      	ands	r3, r2
 8010410:	68ba      	ldr	r2, [r7, #8]
 8010412:	1ad3      	subs	r3, r2, r3
 8010414:	425a      	negs	r2, r3
 8010416:	4153      	adcs	r3, r2
 8010418:	b2db      	uxtb	r3, r3
 801041a:	001a      	movs	r2, r3
 801041c:	1dfb      	adds	r3, r7, #7
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	429a      	cmp	r2, r3
 8010422:	d0a4      	beq.n	801036e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010424:	2300      	movs	r3, #0
}
 8010426:	0018      	movs	r0, r3
 8010428:	46bd      	mov	sp, r7
 801042a:	b004      	add	sp, #16
 801042c:	bd80      	pop	{r7, pc}
	...

08010430 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b090      	sub	sp, #64	@ 0x40
 8010434:	af00      	add	r7, sp, #0
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	60b9      	str	r1, [r7, #8]
 801043a:	1dbb      	adds	r3, r7, #6
 801043c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	68ba      	ldr	r2, [r7, #8]
 8010442:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	1dba      	adds	r2, r7, #6
 8010448:	2158      	movs	r1, #88	@ 0x58
 801044a:	8812      	ldrh	r2, [r2, #0]
 801044c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	1dba      	adds	r2, r7, #6
 8010452:	215a      	movs	r1, #90	@ 0x5a
 8010454:	8812      	ldrh	r2, [r2, #0]
 8010456:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2200      	movs	r2, #0
 801045c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	689a      	ldr	r2, [r3, #8]
 8010462:	2380      	movs	r3, #128	@ 0x80
 8010464:	015b      	lsls	r3, r3, #5
 8010466:	429a      	cmp	r2, r3
 8010468:	d10d      	bne.n	8010486 <UART_Start_Receive_IT+0x56>
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	691b      	ldr	r3, [r3, #16]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d104      	bne.n	801047c <UART_Start_Receive_IT+0x4c>
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	225c      	movs	r2, #92	@ 0x5c
 8010476:	4950      	ldr	r1, [pc, #320]	@ (80105b8 <UART_Start_Receive_IT+0x188>)
 8010478:	5299      	strh	r1, [r3, r2]
 801047a:	e02e      	b.n	80104da <UART_Start_Receive_IT+0xaa>
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	225c      	movs	r2, #92	@ 0x5c
 8010480:	21ff      	movs	r1, #255	@ 0xff
 8010482:	5299      	strh	r1, [r3, r2]
 8010484:	e029      	b.n	80104da <UART_Start_Receive_IT+0xaa>
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	689b      	ldr	r3, [r3, #8]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d10d      	bne.n	80104aa <UART_Start_Receive_IT+0x7a>
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	691b      	ldr	r3, [r3, #16]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d104      	bne.n	80104a0 <UART_Start_Receive_IT+0x70>
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	225c      	movs	r2, #92	@ 0x5c
 801049a:	21ff      	movs	r1, #255	@ 0xff
 801049c:	5299      	strh	r1, [r3, r2]
 801049e:	e01c      	b.n	80104da <UART_Start_Receive_IT+0xaa>
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	225c      	movs	r2, #92	@ 0x5c
 80104a4:	217f      	movs	r1, #127	@ 0x7f
 80104a6:	5299      	strh	r1, [r3, r2]
 80104a8:	e017      	b.n	80104da <UART_Start_Receive_IT+0xaa>
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	689a      	ldr	r2, [r3, #8]
 80104ae:	2380      	movs	r3, #128	@ 0x80
 80104b0:	055b      	lsls	r3, r3, #21
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d10d      	bne.n	80104d2 <UART_Start_Receive_IT+0xa2>
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	691b      	ldr	r3, [r3, #16]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d104      	bne.n	80104c8 <UART_Start_Receive_IT+0x98>
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	225c      	movs	r2, #92	@ 0x5c
 80104c2:	217f      	movs	r1, #127	@ 0x7f
 80104c4:	5299      	strh	r1, [r3, r2]
 80104c6:	e008      	b.n	80104da <UART_Start_Receive_IT+0xaa>
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	225c      	movs	r2, #92	@ 0x5c
 80104cc:	213f      	movs	r1, #63	@ 0x3f
 80104ce:	5299      	strh	r1, [r3, r2]
 80104d0:	e003      	b.n	80104da <UART_Start_Receive_IT+0xaa>
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	225c      	movs	r2, #92	@ 0x5c
 80104d6:	2100      	movs	r1, #0
 80104d8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	2284      	movs	r2, #132	@ 0x84
 80104de:	2100      	movs	r1, #0
 80104e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2280      	movs	r2, #128	@ 0x80
 80104e6:	2122      	movs	r1, #34	@ 0x22
 80104e8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104ea:	f3ef 8310 	mrs	r3, PRIMASK
 80104ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80104f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80104f4:	2301      	movs	r3, #1
 80104f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104fa:	f383 8810 	msr	PRIMASK, r3
}
 80104fe:	46c0      	nop			@ (mov r8, r8)
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	689a      	ldr	r2, [r3, #8]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2101      	movs	r1, #1
 801050c:	430a      	orrs	r2, r1
 801050e:	609a      	str	r2, [r3, #8]
 8010510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010512:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010516:	f383 8810 	msr	PRIMASK, r3
}
 801051a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	689a      	ldr	r2, [r3, #8]
 8010520:	2380      	movs	r3, #128	@ 0x80
 8010522:	015b      	lsls	r3, r3, #5
 8010524:	429a      	cmp	r2, r3
 8010526:	d107      	bne.n	8010538 <UART_Start_Receive_IT+0x108>
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	691b      	ldr	r3, [r3, #16]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d103      	bne.n	8010538 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	4a22      	ldr	r2, [pc, #136]	@ (80105bc <UART_Start_Receive_IT+0x18c>)
 8010534:	669a      	str	r2, [r3, #104]	@ 0x68
 8010536:	e002      	b.n	801053e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	4a21      	ldr	r2, [pc, #132]	@ (80105c0 <UART_Start_Receive_IT+0x190>)
 801053c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	691b      	ldr	r3, [r3, #16]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d019      	beq.n	801057a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010546:	f3ef 8310 	mrs	r3, PRIMASK
 801054a:	61fb      	str	r3, [r7, #28]
  return(result);
 801054c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801054e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010550:	2301      	movs	r3, #1
 8010552:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010554:	6a3b      	ldr	r3, [r7, #32]
 8010556:	f383 8810 	msr	PRIMASK, r3
}
 801055a:	46c0      	nop			@ (mov r8, r8)
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	681a      	ldr	r2, [r3, #0]
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	2190      	movs	r1, #144	@ 0x90
 8010568:	0049      	lsls	r1, r1, #1
 801056a:	430a      	orrs	r2, r1
 801056c:	601a      	str	r2, [r3, #0]
 801056e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010570:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010574:	f383 8810 	msr	PRIMASK, r3
}
 8010578:	e018      	b.n	80105ac <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801057a:	f3ef 8310 	mrs	r3, PRIMASK
 801057e:	613b      	str	r3, [r7, #16]
  return(result);
 8010580:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8010582:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010584:	2301      	movs	r3, #1
 8010586:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	f383 8810 	msr	PRIMASK, r3
}
 801058e:	46c0      	nop			@ (mov r8, r8)
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	2120      	movs	r1, #32
 801059c:	430a      	orrs	r2, r1
 801059e:	601a      	str	r2, [r3, #0]
 80105a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105a4:	69bb      	ldr	r3, [r7, #24]
 80105a6:	f383 8810 	msr	PRIMASK, r3
}
 80105aa:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80105ac:	2300      	movs	r3, #0
}
 80105ae:	0018      	movs	r0, r3
 80105b0:	46bd      	mov	sp, r7
 80105b2:	b010      	add	sp, #64	@ 0x40
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	46c0      	nop			@ (mov r8, r8)
 80105b8:	000001ff 	.word	0x000001ff
 80105bc:	08010a45 	.word	0x08010a45
 80105c0:	08010881 	.word	0x08010881

080105c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b08e      	sub	sp, #56	@ 0x38
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105cc:	f3ef 8310 	mrs	r3, PRIMASK
 80105d0:	617b      	str	r3, [r7, #20]
  return(result);
 80105d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80105d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80105d6:	2301      	movs	r3, #1
 80105d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105da:	69bb      	ldr	r3, [r7, #24]
 80105dc:	f383 8810 	msr	PRIMASK, r3
}
 80105e0:	46c0      	nop			@ (mov r8, r8)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4926      	ldr	r1, [pc, #152]	@ (8010688 <UART_EndRxTransfer+0xc4>)
 80105ee:	400a      	ands	r2, r1
 80105f0:	601a      	str	r2, [r3, #0]
 80105f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	f383 8810 	msr	PRIMASK, r3
}
 80105fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105fe:	f3ef 8310 	mrs	r3, PRIMASK
 8010602:	623b      	str	r3, [r7, #32]
  return(result);
 8010604:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010606:	633b      	str	r3, [r7, #48]	@ 0x30
 8010608:	2301      	movs	r3, #1
 801060a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801060c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801060e:	f383 8810 	msr	PRIMASK, r3
}
 8010612:	46c0      	nop			@ (mov r8, r8)
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	689a      	ldr	r2, [r3, #8]
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2101      	movs	r1, #1
 8010620:	438a      	bics	r2, r1
 8010622:	609a      	str	r2, [r3, #8]
 8010624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010626:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801062a:	f383 8810 	msr	PRIMASK, r3
}
 801062e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010634:	2b01      	cmp	r3, #1
 8010636:	d118      	bne.n	801066a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010638:	f3ef 8310 	mrs	r3, PRIMASK
 801063c:	60bb      	str	r3, [r7, #8]
  return(result);
 801063e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010642:	2301      	movs	r3, #1
 8010644:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	f383 8810 	msr	PRIMASK, r3
}
 801064c:	46c0      	nop			@ (mov r8, r8)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	681a      	ldr	r2, [r3, #0]
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2110      	movs	r1, #16
 801065a:	438a      	bics	r2, r1
 801065c:	601a      	str	r2, [r3, #0]
 801065e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010660:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010662:	693b      	ldr	r3, [r7, #16]
 8010664:	f383 8810 	msr	PRIMASK, r3
}
 8010668:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2280      	movs	r2, #128	@ 0x80
 801066e:	2120      	movs	r1, #32
 8010670:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2200      	movs	r2, #0
 8010676:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2200      	movs	r2, #0
 801067c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801067e:	46c0      	nop			@ (mov r8, r8)
 8010680:	46bd      	mov	sp, r7
 8010682:	b00e      	add	sp, #56	@ 0x38
 8010684:	bd80      	pop	{r7, pc}
 8010686:	46c0      	nop			@ (mov r8, r8)
 8010688:	fffffedf 	.word	0xfffffedf

0801068c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b084      	sub	sp, #16
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010698:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	225a      	movs	r2, #90	@ 0x5a
 801069e:	2100      	movs	r1, #0
 80106a0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	2252      	movs	r2, #82	@ 0x52
 80106a6:	2100      	movs	r1, #0
 80106a8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	0018      	movs	r0, r3
 80106ae:	f7ff fa35 	bl	800fb1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80106b2:	46c0      	nop			@ (mov r8, r8)
 80106b4:	46bd      	mov	sp, r7
 80106b6:	b004      	add	sp, #16
 80106b8:	bd80      	pop	{r7, pc}

080106ba <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80106ba:	b580      	push	{r7, lr}
 80106bc:	b08a      	sub	sp, #40	@ 0x28
 80106be:	af00      	add	r7, sp, #0
 80106c0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80106c6:	2b21      	cmp	r3, #33	@ 0x21
 80106c8:	d14c      	bne.n	8010764 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2252      	movs	r2, #82	@ 0x52
 80106ce:	5a9b      	ldrh	r3, [r3, r2]
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d132      	bne.n	801073c <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106d6:	f3ef 8310 	mrs	r3, PRIMASK
 80106da:	60bb      	str	r3, [r7, #8]
  return(result);
 80106dc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80106de:	627b      	str	r3, [r7, #36]	@ 0x24
 80106e0:	2301      	movs	r3, #1
 80106e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f383 8810 	msr	PRIMASK, r3
}
 80106ea:	46c0      	nop			@ (mov r8, r8)
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	2180      	movs	r1, #128	@ 0x80
 80106f8:	438a      	bics	r2, r1
 80106fa:	601a      	str	r2, [r3, #0]
 80106fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	f383 8810 	msr	PRIMASK, r3
}
 8010706:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010708:	f3ef 8310 	mrs	r3, PRIMASK
 801070c:	617b      	str	r3, [r7, #20]
  return(result);
 801070e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010710:	623b      	str	r3, [r7, #32]
 8010712:	2301      	movs	r3, #1
 8010714:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	f383 8810 	msr	PRIMASK, r3
}
 801071c:	46c0      	nop			@ (mov r8, r8)
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	681a      	ldr	r2, [r3, #0]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	2140      	movs	r1, #64	@ 0x40
 801072a:	430a      	orrs	r2, r1
 801072c:	601a      	str	r2, [r3, #0]
 801072e:	6a3b      	ldr	r3, [r7, #32]
 8010730:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	f383 8810 	msr	PRIMASK, r3
}
 8010738:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801073a:	e013      	b.n	8010764 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010740:	781a      	ldrb	r2, [r3, #0]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801074c:	1c5a      	adds	r2, r3, #1
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2252      	movs	r2, #82	@ 0x52
 8010756:	5a9b      	ldrh	r3, [r3, r2]
 8010758:	b29b      	uxth	r3, r3
 801075a:	3b01      	subs	r3, #1
 801075c:	b299      	uxth	r1, r3
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2252      	movs	r2, #82	@ 0x52
 8010762:	5299      	strh	r1, [r3, r2]
}
 8010764:	46c0      	nop			@ (mov r8, r8)
 8010766:	46bd      	mov	sp, r7
 8010768:	b00a      	add	sp, #40	@ 0x28
 801076a:	bd80      	pop	{r7, pc}

0801076c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b08c      	sub	sp, #48	@ 0x30
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010778:	2b21      	cmp	r3, #33	@ 0x21
 801077a:	d151      	bne.n	8010820 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2252      	movs	r2, #82	@ 0x52
 8010780:	5a9b      	ldrh	r3, [r3, r2]
 8010782:	b29b      	uxth	r3, r3
 8010784:	2b00      	cmp	r3, #0
 8010786:	d132      	bne.n	80107ee <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010788:	f3ef 8310 	mrs	r3, PRIMASK
 801078c:	60fb      	str	r3, [r7, #12]
  return(result);
 801078e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8010790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010792:	2301      	movs	r3, #1
 8010794:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	f383 8810 	msr	PRIMASK, r3
}
 801079c:	46c0      	nop			@ (mov r8, r8)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	681a      	ldr	r2, [r3, #0]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	2180      	movs	r1, #128	@ 0x80
 80107aa:	438a      	bics	r2, r1
 80107ac:	601a      	str	r2, [r3, #0]
 80107ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	f383 8810 	msr	PRIMASK, r3
}
 80107b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107ba:	f3ef 8310 	mrs	r3, PRIMASK
 80107be:	61bb      	str	r3, [r7, #24]
  return(result);
 80107c0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80107c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80107c4:	2301      	movs	r3, #1
 80107c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	f383 8810 	msr	PRIMASK, r3
}
 80107ce:	46c0      	nop			@ (mov r8, r8)
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	2140      	movs	r1, #64	@ 0x40
 80107dc:	430a      	orrs	r2, r1
 80107de:	601a      	str	r2, [r3, #0]
 80107e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107e4:	6a3b      	ldr	r3, [r7, #32]
 80107e6:	f383 8810 	msr	PRIMASK, r3
}
 80107ea:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80107ec:	e018      	b.n	8010820 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80107f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80107f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107f6:	881b      	ldrh	r3, [r3, #0]
 80107f8:	001a      	movs	r2, r3
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	05d2      	lsls	r2, r2, #23
 8010800:	0dd2      	lsrs	r2, r2, #23
 8010802:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010808:	1c9a      	adds	r2, r3, #2
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2252      	movs	r2, #82	@ 0x52
 8010812:	5a9b      	ldrh	r3, [r3, r2]
 8010814:	b29b      	uxth	r3, r3
 8010816:	3b01      	subs	r3, #1
 8010818:	b299      	uxth	r1, r3
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2252      	movs	r2, #82	@ 0x52
 801081e:	5299      	strh	r1, [r3, r2]
}
 8010820:	46c0      	nop			@ (mov r8, r8)
 8010822:	46bd      	mov	sp, r7
 8010824:	b00c      	add	sp, #48	@ 0x30
 8010826:	bd80      	pop	{r7, pc}

08010828 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b086      	sub	sp, #24
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010830:	f3ef 8310 	mrs	r3, PRIMASK
 8010834:	60bb      	str	r3, [r7, #8]
  return(result);
 8010836:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010838:	617b      	str	r3, [r7, #20]
 801083a:	2301      	movs	r3, #1
 801083c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	f383 8810 	msr	PRIMASK, r3
}
 8010844:	46c0      	nop			@ (mov r8, r8)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2140      	movs	r1, #64	@ 0x40
 8010852:	438a      	bics	r2, r1
 8010854:	601a      	str	r2, [r3, #0]
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	f383 8810 	msr	PRIMASK, r3
}
 8010860:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2220      	movs	r2, #32
 8010866:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2200      	movs	r2, #0
 801086c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	0018      	movs	r0, r3
 8010872:	f7ff f943 	bl	800fafc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010876:	46c0      	nop			@ (mov r8, r8)
 8010878:	46bd      	mov	sp, r7
 801087a:	b006      	add	sp, #24
 801087c:	bd80      	pop	{r7, pc}
	...

08010880 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b094      	sub	sp, #80	@ 0x50
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010888:	204e      	movs	r0, #78	@ 0x4e
 801088a:	183b      	adds	r3, r7, r0
 801088c:	687a      	ldr	r2, [r7, #4]
 801088e:	215c      	movs	r1, #92	@ 0x5c
 8010890:	5a52      	ldrh	r2, [r2, r1]
 8010892:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2280      	movs	r2, #128	@ 0x80
 8010898:	589b      	ldr	r3, [r3, r2]
 801089a:	2b22      	cmp	r3, #34	@ 0x22
 801089c:	d000      	beq.n	80108a0 <UART_RxISR_8BIT+0x20>
 801089e:	e0bf      	b.n	8010a20 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80108a6:	214c      	movs	r1, #76	@ 0x4c
 80108a8:	187b      	adds	r3, r7, r1
 80108aa:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80108ac:	187b      	adds	r3, r7, r1
 80108ae:	881b      	ldrh	r3, [r3, #0]
 80108b0:	b2da      	uxtb	r2, r3
 80108b2:	183b      	adds	r3, r7, r0
 80108b4:	881b      	ldrh	r3, [r3, #0]
 80108b6:	b2d9      	uxtb	r1, r3
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80108bc:	400a      	ands	r2, r1
 80108be:	b2d2      	uxtb	r2, r2
 80108c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80108c6:	1c5a      	adds	r2, r3, #1
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	225a      	movs	r2, #90	@ 0x5a
 80108d0:	5a9b      	ldrh	r3, [r3, r2]
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	3b01      	subs	r3, #1
 80108d6:	b299      	uxth	r1, r3
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	225a      	movs	r2, #90	@ 0x5a
 80108dc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	225a      	movs	r2, #90	@ 0x5a
 80108e2:	5a9b      	ldrh	r3, [r3, r2]
 80108e4:	b29b      	uxth	r3, r3
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d000      	beq.n	80108ec <UART_RxISR_8BIT+0x6c>
 80108ea:	e0a1      	b.n	8010a30 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108ec:	f3ef 8310 	mrs	r3, PRIMASK
 80108f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80108f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80108f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108f6:	2301      	movs	r3, #1
 80108f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108fc:	f383 8810 	msr	PRIMASK, r3
}
 8010900:	46c0      	nop			@ (mov r8, r8)
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	681a      	ldr	r2, [r3, #0]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	494a      	ldr	r1, [pc, #296]	@ (8010a38 <UART_RxISR_8BIT+0x1b8>)
 801090e:	400a      	ands	r2, r1
 8010910:	601a      	str	r2, [r3, #0]
 8010912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010918:	f383 8810 	msr	PRIMASK, r3
}
 801091c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801091e:	f3ef 8310 	mrs	r3, PRIMASK
 8010922:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8010924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010926:	647b      	str	r3, [r7, #68]	@ 0x44
 8010928:	2301      	movs	r3, #1
 801092a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801092c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801092e:	f383 8810 	msr	PRIMASK, r3
}
 8010932:	46c0      	nop			@ (mov r8, r8)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	689a      	ldr	r2, [r3, #8]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	2101      	movs	r1, #1
 8010940:	438a      	bics	r2, r1
 8010942:	609a      	str	r2, [r3, #8]
 8010944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010946:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801094a:	f383 8810 	msr	PRIMASK, r3
}
 801094e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2280      	movs	r2, #128	@ 0x80
 8010954:	2120      	movs	r1, #32
 8010956:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2200      	movs	r2, #0
 801095c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2200      	movs	r2, #0
 8010962:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	4a34      	ldr	r2, [pc, #208]	@ (8010a3c <UART_RxISR_8BIT+0x1bc>)
 801096a:	4293      	cmp	r3, r2
 801096c:	d01f      	beq.n	80109ae <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	685a      	ldr	r2, [r3, #4]
 8010974:	2380      	movs	r3, #128	@ 0x80
 8010976:	041b      	lsls	r3, r3, #16
 8010978:	4013      	ands	r3, r2
 801097a:	d018      	beq.n	80109ae <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801097c:	f3ef 8310 	mrs	r3, PRIMASK
 8010980:	61bb      	str	r3, [r7, #24]
  return(result);
 8010982:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010984:	643b      	str	r3, [r7, #64]	@ 0x40
 8010986:	2301      	movs	r3, #1
 8010988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801098a:	69fb      	ldr	r3, [r7, #28]
 801098c:	f383 8810 	msr	PRIMASK, r3
}
 8010990:	46c0      	nop			@ (mov r8, r8)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	681a      	ldr	r2, [r3, #0]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4928      	ldr	r1, [pc, #160]	@ (8010a40 <UART_RxISR_8BIT+0x1c0>)
 801099e:	400a      	ands	r2, r1
 80109a0:	601a      	str	r2, [r3, #0]
 80109a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80109a6:	6a3b      	ldr	r3, [r7, #32]
 80109a8:	f383 8810 	msr	PRIMASK, r3
}
 80109ac:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	d12f      	bne.n	8010a16 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2200      	movs	r2, #0
 80109ba:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109bc:	f3ef 8310 	mrs	r3, PRIMASK
 80109c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80109c2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80109c6:	2301      	movs	r3, #1
 80109c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	f383 8810 	msr	PRIMASK, r3
}
 80109d0:	46c0      	nop			@ (mov r8, r8)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	681a      	ldr	r2, [r3, #0]
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	2110      	movs	r1, #16
 80109de:	438a      	bics	r2, r1
 80109e0:	601a      	str	r2, [r3, #0]
 80109e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	f383 8810 	msr	PRIMASK, r3
}
 80109ec:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	69db      	ldr	r3, [r3, #28]
 80109f4:	2210      	movs	r2, #16
 80109f6:	4013      	ands	r3, r2
 80109f8:	2b10      	cmp	r3, #16
 80109fa:	d103      	bne.n	8010a04 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	2210      	movs	r2, #16
 8010a02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2258      	movs	r2, #88	@ 0x58
 8010a08:	5a9a      	ldrh	r2, [r3, r2]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	0011      	movs	r1, r2
 8010a0e:	0018      	movs	r0, r3
 8010a10:	f7ff f88c 	bl	800fb2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010a14:	e00c      	b.n	8010a30 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	0018      	movs	r0, r3
 8010a1a:	f7ff f877 	bl	800fb0c <HAL_UART_RxCpltCallback>
}
 8010a1e:	e007      	b.n	8010a30 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	699a      	ldr	r2, [r3, #24]
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	2108      	movs	r1, #8
 8010a2c:	430a      	orrs	r2, r1
 8010a2e:	619a      	str	r2, [r3, #24]
}
 8010a30:	46c0      	nop			@ (mov r8, r8)
 8010a32:	46bd      	mov	sp, r7
 8010a34:	b014      	add	sp, #80	@ 0x50
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	fffffedf 	.word	0xfffffedf
 8010a3c:	40004800 	.word	0x40004800
 8010a40:	fbffffff 	.word	0xfbffffff

08010a44 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b094      	sub	sp, #80	@ 0x50
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010a4c:	204e      	movs	r0, #78	@ 0x4e
 8010a4e:	183b      	adds	r3, r7, r0
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	215c      	movs	r1, #92	@ 0x5c
 8010a54:	5a52      	ldrh	r2, [r2, r1]
 8010a56:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2280      	movs	r2, #128	@ 0x80
 8010a5c:	589b      	ldr	r3, [r3, r2]
 8010a5e:	2b22      	cmp	r3, #34	@ 0x22
 8010a60:	d000      	beq.n	8010a64 <UART_RxISR_16BIT+0x20>
 8010a62:	e0bf      	b.n	8010be4 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a6a:	214c      	movs	r1, #76	@ 0x4c
 8010a6c:	187b      	adds	r3, r7, r1
 8010a6e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a74:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8010a76:	187b      	adds	r3, r7, r1
 8010a78:	183a      	adds	r2, r7, r0
 8010a7a:	881b      	ldrh	r3, [r3, #0]
 8010a7c:	8812      	ldrh	r2, [r2, #0]
 8010a7e:	4013      	ands	r3, r2
 8010a80:	b29a      	uxth	r2, r3
 8010a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a8a:	1c9a      	adds	r2, r3, #2
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	225a      	movs	r2, #90	@ 0x5a
 8010a94:	5a9b      	ldrh	r3, [r3, r2]
 8010a96:	b29b      	uxth	r3, r3
 8010a98:	3b01      	subs	r3, #1
 8010a9a:	b299      	uxth	r1, r3
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	225a      	movs	r2, #90	@ 0x5a
 8010aa0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	225a      	movs	r2, #90	@ 0x5a
 8010aa6:	5a9b      	ldrh	r3, [r3, r2]
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d000      	beq.n	8010ab0 <UART_RxISR_16BIT+0x6c>
 8010aae:	e0a1      	b.n	8010bf4 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8010ab4:	623b      	str	r3, [r7, #32]
  return(result);
 8010ab6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8010aba:	2301      	movs	r3, #1
 8010abc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac0:	f383 8810 	msr	PRIMASK, r3
}
 8010ac4:	46c0      	nop			@ (mov r8, r8)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	681a      	ldr	r2, [r3, #0]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	494a      	ldr	r1, [pc, #296]	@ (8010bfc <UART_RxISR_16BIT+0x1b8>)
 8010ad2:	400a      	ands	r2, r1
 8010ad4:	601a      	str	r2, [r3, #0]
 8010ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010adc:	f383 8810 	msr	PRIMASK, r3
}
 8010ae0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8010ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8010ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010aea:	643b      	str	r3, [r7, #64]	@ 0x40
 8010aec:	2301      	movs	r3, #1
 8010aee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010af2:	f383 8810 	msr	PRIMASK, r3
}
 8010af6:	46c0      	nop			@ (mov r8, r8)
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	689a      	ldr	r2, [r3, #8]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	2101      	movs	r1, #1
 8010b04:	438a      	bics	r2, r1
 8010b06:	609a      	str	r2, [r3, #8]
 8010b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b0a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b0e:	f383 8810 	msr	PRIMASK, r3
}
 8010b12:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2280      	movs	r2, #128	@ 0x80
 8010b18:	2120      	movs	r1, #32
 8010b1a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2200      	movs	r2, #0
 8010b26:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	4a34      	ldr	r2, [pc, #208]	@ (8010c00 <UART_RxISR_16BIT+0x1bc>)
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	d01f      	beq.n	8010b72 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	685a      	ldr	r2, [r3, #4]
 8010b38:	2380      	movs	r3, #128	@ 0x80
 8010b3a:	041b      	lsls	r3, r3, #16
 8010b3c:	4013      	ands	r3, r2
 8010b3e:	d018      	beq.n	8010b72 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b40:	f3ef 8310 	mrs	r3, PRIMASK
 8010b44:	617b      	str	r3, [r7, #20]
  return(result);
 8010b46:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b4e:	69bb      	ldr	r3, [r7, #24]
 8010b50:	f383 8810 	msr	PRIMASK, r3
}
 8010b54:	46c0      	nop			@ (mov r8, r8)
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4928      	ldr	r1, [pc, #160]	@ (8010c04 <UART_RxISR_16BIT+0x1c0>)
 8010b62:	400a      	ands	r2, r1
 8010b64:	601a      	str	r2, [r3, #0]
 8010b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	f383 8810 	msr	PRIMASK, r3
}
 8010b70:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	d12f      	bne.n	8010bda <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b80:	f3ef 8310 	mrs	r3, PRIMASK
 8010b84:	60bb      	str	r3, [r7, #8]
  return(result);
 8010b86:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	f383 8810 	msr	PRIMASK, r3
}
 8010b94:	46c0      	nop			@ (mov r8, r8)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	2110      	movs	r1, #16
 8010ba2:	438a      	bics	r2, r1
 8010ba4:	601a      	str	r2, [r3, #0]
 8010ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ba8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	f383 8810 	msr	PRIMASK, r3
}
 8010bb0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	69db      	ldr	r3, [r3, #28]
 8010bb8:	2210      	movs	r2, #16
 8010bba:	4013      	ands	r3, r2
 8010bbc:	2b10      	cmp	r3, #16
 8010bbe:	d103      	bne.n	8010bc8 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	2210      	movs	r2, #16
 8010bc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2258      	movs	r2, #88	@ 0x58
 8010bcc:	5a9a      	ldrh	r2, [r3, r2]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	0011      	movs	r1, r2
 8010bd2:	0018      	movs	r0, r3
 8010bd4:	f7fe ffaa 	bl	800fb2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010bd8:	e00c      	b.n	8010bf4 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	0018      	movs	r0, r3
 8010bde:	f7fe ff95 	bl	800fb0c <HAL_UART_RxCpltCallback>
}
 8010be2:	e007      	b.n	8010bf4 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	699a      	ldr	r2, [r3, #24]
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	2108      	movs	r1, #8
 8010bf0:	430a      	orrs	r2, r1
 8010bf2:	619a      	str	r2, [r3, #24]
}
 8010bf4:	46c0      	nop			@ (mov r8, r8)
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	b014      	add	sp, #80	@ 0x50
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	fffffedf 	.word	0xfffffedf
 8010c00:	40004800 	.word	0x40004800
 8010c04:	fbffffff 	.word	0xfbffffff

08010c08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010c10:	46c0      	nop			@ (mov r8, r8)
 8010c12:	46bd      	mov	sp, r7
 8010c14:	b002      	add	sp, #8
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS01A3_DataLogTerminal_Init(void);
static void MX_IKS01A3_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Init_PreTreatment */

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */
  MX_IKS01A3_DataLogTerminal_Init();
 8010c1c:	f000 f804 	bl	8010c28 <MX_IKS01A3_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8010c20:	46c0      	nop			@ (mov r8, r8)
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
	...

08010c28 <MX_IKS01A3_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Init(void)
{
 8010c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c2a:	46c6      	mov	lr, r8
 8010c2c:	b500      	push	{lr}
 8010c2e:	b088      	sub	sp, #32
 8010c30:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8010c32:	2000      	movs	r0, #0
 8010c34:	f7fa fc96 	bl	800b564 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8010c38:	2101      	movs	r1, #1
 8010c3a:	2000      	movs	r0, #0
 8010c3c:	f7fa fcea 	bl	800b614 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8010c40:	2000      	movs	r0, #0
 8010c42:	f7fa fd41 	bl	800b6c8 <BSP_PB_GetState>
 8010c46:	0003      	movs	r3, r0
 8010c48:	425a      	negs	r2, r3
 8010c4a:	4153      	adcs	r3, r2
 8010c4c:	b2db      	uxtb	r3, r3
 8010c4e:	001a      	movs	r2, r3
 8010c50:	4bcb      	ldr	r3, [pc, #812]	@ (8010f80 <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 8010c52:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8010c54:	2000      	movs	r0, #0
 8010c56:	f7fa fd97 	bl	800b788 <BSP_COM_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 8010c5a:	2103      	movs	r1, #3
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	f7fa f929 	bl	800aeb4 <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 8010c62:	2102      	movs	r1, #2
 8010c64:	2001      	movs	r0, #1
 8010c66:	f7fa f925 	bl	800aeb4 <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 8010c6a:	2104      	movs	r1, #4
 8010c6c:	2002      	movs	r0, #2
 8010c6e:	f7fa f921 	bl	800aeb4 <IKS01A3_MOTION_SENSOR_Init>

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 8010c72:	2300      	movs	r3, #0
 8010c74:	60fb      	str	r3, [r7, #12]
 8010c76:	e0ce      	b.n	8010e16 <MX_IKS01A3_DataLogTerminal_Init+0x1ee>
  {
    IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 8010c78:	68f8      	ldr	r0, [r7, #12]
 8010c7a:	68fa      	ldr	r2, [r7, #12]
 8010c7c:	0013      	movs	r3, r2
 8010c7e:	00db      	lsls	r3, r3, #3
 8010c80:	1a9b      	subs	r3, r3, r2
 8010c82:	009b      	lsls	r3, r3, #2
 8010c84:	4abf      	ldr	r2, [pc, #764]	@ (8010f84 <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 8010c86:	189b      	adds	r3, r3, r2
 8010c88:	0019      	movs	r1, r3
 8010c8a:	f7fa fa1f 	bl	800b0cc <IKS01A3_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8010c8e:	49bd      	ldr	r1, [pc, #756]	@ (8010f84 <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 8010c90:	68fa      	ldr	r2, [r7, #12]
 8010c92:	0013      	movs	r3, r2
 8010c94:	00db      	lsls	r3, r3, #3
 8010c96:	1a9b      	subs	r3, r3, r2
 8010c98:	009b      	lsls	r3, r3, #2
 8010c9a:	5c5b      	ldrb	r3, [r3, r1]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010c9c:	001c      	movs	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8010c9e:	49b9      	ldr	r1, [pc, #740]	@ (8010f84 <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 8010ca0:	68fa      	ldr	r2, [r7, #12]
 8010ca2:	0013      	movs	r3, r2
 8010ca4:	00db      	lsls	r3, r3, #3
 8010ca6:	1a9b      	subs	r3, r3, r2
 8010ca8:	009b      	lsls	r3, r3, #2
 8010caa:	18cb      	adds	r3, r1, r3
 8010cac:	3301      	adds	r3, #1
 8010cae:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010cb0:	001d      	movs	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8010cb2:	49b4      	ldr	r1, [pc, #720]	@ (8010f84 <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 8010cb4:	68fa      	ldr	r2, [r7, #12]
 8010cb6:	0013      	movs	r3, r2
 8010cb8:	00db      	lsls	r3, r3, #3
 8010cba:	1a9b      	subs	r3, r3, r2
 8010cbc:	009b      	lsls	r3, r3, #2
 8010cbe:	18cb      	adds	r3, r1, r3
 8010cc0:	3302      	adds	r3, #2
 8010cc2:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010cc4:	001e      	movs	r6, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8010cc6:	49af      	ldr	r1, [pc, #700]	@ (8010f84 <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 8010cc8:	68fa      	ldr	r2, [r7, #12]
 8010cca:	0013      	movs	r3, r2
 8010ccc:	00db      	lsls	r3, r3, #3
 8010cce:	1a9b      	subs	r3, r3, r2
 8010cd0:	009b      	lsls	r3, r3, #2
 8010cd2:	18cb      	adds	r3, r1, r3
 8010cd4:	3303      	adds	r3, #3
 8010cd6:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010cd8:	469c      	mov	ip, r3
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	4698      	mov	r8, r3
 8010cde:	4aaa      	ldr	r2, [pc, #680]	@ (8010f88 <MX_IKS01A3_DataLogTerminal_Init+0x360>)
 8010ce0:	2180      	movs	r1, #128	@ 0x80
 8010ce2:	0049      	lsls	r1, r1, #1
 8010ce4:	48a9      	ldr	r0, [pc, #676]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010ce6:	4663      	mov	r3, ip
 8010ce8:	9303      	str	r3, [sp, #12]
 8010cea:	9602      	str	r6, [sp, #8]
 8010cec:	9501      	str	r5, [sp, #4]
 8010cee:	9400      	str	r4, [sp, #0]
 8010cf0:	4643      	mov	r3, r8
 8010cf2:	f000 fbd3 	bl	801149c <sniprintf>
    printf("%s", dataOut);
 8010cf6:	4aa5      	ldr	r2, [pc, #660]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010cf8:	4ba5      	ldr	r3, [pc, #660]	@ (8010f90 <MX_IKS01A3_DataLogTerminal_Init+0x368>)
 8010cfa:	0011      	movs	r1, r2
 8010cfc:	0018      	movs	r0, r3
 8010cfe:	f000 fa97 	bl	8011230 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 8010d02:	49a0      	ldr	r1, [pc, #640]	@ (8010f84 <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 8010d04:	68fa      	ldr	r2, [r7, #12]
 8010d06:	0013      	movs	r3, r2
 8010d08:	00db      	lsls	r3, r3, #3
 8010d0a:	1a9b      	subs	r3, r3, r2
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	18cb      	adds	r3, r1, r3
 8010d10:	3314      	adds	r3, #20
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	0039      	movs	r1, r7
 8010d16:	2203      	movs	r2, #3
 8010d18:	1c18      	adds	r0, r3, #0
 8010d1a:	f000 f94b 	bl	8010fb4 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8010d1e:	003b      	movs	r3, r7
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	001e      	movs	r6, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8010d24:	003b      	movs	r3, r7
 8010d26:	689b      	ldr	r3, [r3, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8010d28:	001c      	movs	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8010d2a:	4996      	ldr	r1, [pc, #600]	@ (8010f84 <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 8010d2c:	68fa      	ldr	r2, [r7, #12]
 8010d2e:	0013      	movs	r3, r2
 8010d30:	00db      	lsls	r3, r3, #3
 8010d32:	1a9b      	subs	r3, r3, r2
 8010d34:	009b      	lsls	r3, r3, #2
 8010d36:	18cb      	adds	r3, r1, r3
 8010d38:	3308      	adds	r3, #8
 8010d3a:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8010d3c:	001d      	movs	r5, r3
 8010d3e:	4a95      	ldr	r2, [pc, #596]	@ (8010f94 <MX_IKS01A3_DataLogTerminal_Init+0x36c>)
 8010d40:	2380      	movs	r3, #128	@ 0x80
 8010d42:	0059      	lsls	r1, r3, #1
 8010d44:	4891      	ldr	r0, [pc, #580]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010d46:	9501      	str	r5, [sp, #4]
 8010d48:	9400      	str	r4, [sp, #0]
 8010d4a:	0033      	movs	r3, r6
 8010d4c:	f000 fba6 	bl	801149c <sniprintf>
    printf("%s", dataOut);
 8010d50:	4a8e      	ldr	r2, [pc, #568]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010d52:	4b8f      	ldr	r3, [pc, #572]	@ (8010f90 <MX_IKS01A3_DataLogTerminal_Init+0x368>)
 8010d54:	0011      	movs	r1, r2
 8010d56:	0018      	movs	r0, r3
 8010d58:	f000 fa6a 	bl	8011230 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 8010d5c:	4989      	ldr	r1, [pc, #548]	@ (8010f84 <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 8010d5e:	68fa      	ldr	r2, [r7, #12]
 8010d60:	0013      	movs	r3, r2
 8010d62:	00db      	lsls	r3, r3, #3
 8010d64:	1a9b      	subs	r3, r3, r2
 8010d66:	009b      	lsls	r3, r3, #2
 8010d68:	18cb      	adds	r3, r1, r3
 8010d6a:	3310      	adds	r3, #16
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	0039      	movs	r1, r7
 8010d70:	2203      	movs	r2, #3
 8010d72:	1c18      	adds	r0, r3, #0
 8010d74:	f000 f91e 	bl	8010fb4 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8010d78:	003b      	movs	r3, r7
 8010d7a:	685b      	ldr	r3, [r3, #4]
 8010d7c:	001e      	movs	r6, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8010d7e:	003b      	movs	r3, r7
 8010d80:	689b      	ldr	r3, [r3, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8010d82:	001c      	movs	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8010d84:	497f      	ldr	r1, [pc, #508]	@ (8010f84 <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 8010d86:	68fa      	ldr	r2, [r7, #12]
 8010d88:	0013      	movs	r3, r2
 8010d8a:	00db      	lsls	r3, r3, #3
 8010d8c:	1a9b      	subs	r3, r3, r2
 8010d8e:	009b      	lsls	r3, r3, #2
 8010d90:	18cb      	adds	r3, r1, r3
 8010d92:	3304      	adds	r3, #4
 8010d94:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8010d96:	001d      	movs	r5, r3
 8010d98:	4a7f      	ldr	r2, [pc, #508]	@ (8010f98 <MX_IKS01A3_DataLogTerminal_Init+0x370>)
 8010d9a:	2380      	movs	r3, #128	@ 0x80
 8010d9c:	0059      	lsls	r1, r3, #1
 8010d9e:	487b      	ldr	r0, [pc, #492]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010da0:	9501      	str	r5, [sp, #4]
 8010da2:	9400      	str	r4, [sp, #0]
 8010da4:	0033      	movs	r3, r6
 8010da6:	f000 fb79 	bl	801149c <sniprintf>
    printf("%s", dataOut);
 8010daa:	4a78      	ldr	r2, [pc, #480]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010dac:	4b78      	ldr	r3, [pc, #480]	@ (8010f90 <MX_IKS01A3_DataLogTerminal_Init+0x368>)
 8010dae:	0011      	movs	r1, r2
 8010db0:	0018      	movs	r0, r3
 8010db2:	f000 fa3d 	bl	8011230 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 8010db6:	4973      	ldr	r1, [pc, #460]	@ (8010f84 <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 8010db8:	68fa      	ldr	r2, [r7, #12]
 8010dba:	0013      	movs	r3, r2
 8010dbc:	00db      	lsls	r3, r3, #3
 8010dbe:	1a9b      	subs	r3, r3, r2
 8010dc0:	009b      	lsls	r3, r3, #2
 8010dc2:	18cb      	adds	r3, r1, r3
 8010dc4:	3318      	adds	r3, #24
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	0039      	movs	r1, r7
 8010dca:	2203      	movs	r2, #3
 8010dcc:	1c18      	adds	r0, r3, #0
 8010dce:	f000 f8f1 	bl	8010fb4 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8010dd2:	003b      	movs	r3, r7
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	001e      	movs	r6, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8010dd8:	003b      	movs	r3, r7
 8010dda:	689b      	ldr	r3, [r3, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8010ddc:	001c      	movs	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8010dde:	4969      	ldr	r1, [pc, #420]	@ (8010f84 <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 8010de0:	68fa      	ldr	r2, [r7, #12]
 8010de2:	0013      	movs	r3, r2
 8010de4:	00db      	lsls	r3, r3, #3
 8010de6:	1a9b      	subs	r3, r3, r2
 8010de8:	009b      	lsls	r3, r3, #2
 8010dea:	18cb      	adds	r3, r1, r3
 8010dec:	330c      	adds	r3, #12
 8010dee:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8010df0:	001d      	movs	r5, r3
 8010df2:	4a6a      	ldr	r2, [pc, #424]	@ (8010f9c <MX_IKS01A3_DataLogTerminal_Init+0x374>)
 8010df4:	2380      	movs	r3, #128	@ 0x80
 8010df6:	0059      	lsls	r1, r3, #1
 8010df8:	4864      	ldr	r0, [pc, #400]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010dfa:	9501      	str	r5, [sp, #4]
 8010dfc:	9400      	str	r4, [sp, #0]
 8010dfe:	0033      	movs	r3, r6
 8010e00:	f000 fb4c 	bl	801149c <sniprintf>
    printf("%s", dataOut);
 8010e04:	4a61      	ldr	r2, [pc, #388]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010e06:	4b62      	ldr	r3, [pc, #392]	@ (8010f90 <MX_IKS01A3_DataLogTerminal_Init+0x368>)
 8010e08:	0011      	movs	r1, r2
 8010e0a:	0018      	movs	r0, r3
 8010e0c:	f000 fa10 	bl	8011230 <iprintf>
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	3301      	adds	r3, #1
 8010e14:	60fb      	str	r3, [r7, #12]
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	2b02      	cmp	r3, #2
 8010e1a:	d800      	bhi.n	8010e1e <MX_IKS01A3_DataLogTerminal_Init+0x1f6>
 8010e1c:	e72c      	b.n	8010c78 <MX_IKS01A3_DataLogTerminal_Init+0x50>
  }

  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 8010e1e:	2105      	movs	r1, #5
 8010e20:	2000      	movs	r0, #0
 8010e22:	f7f9 fcd5 	bl	800a7d0 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE | ENV_PRESSURE);
 8010e26:	2103      	movs	r1, #3
 8010e28:	2001      	movs	r0, #1
 8010e2a:	f7f9 fcd1 	bl	800a7d0 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 8010e2e:	2101      	movs	r1, #1
 8010e30:	2002      	movs	r0, #2
 8010e32:	f7f9 fccd 	bl	800a7d0 <IKS01A3_ENV_SENSOR_Init>

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 8010e36:	2300      	movs	r3, #0
 8010e38:	60fb      	str	r3, [r7, #12]
 8010e3a:	e095      	b.n	8010f68 <MX_IKS01A3_DataLogTerminal_Init+0x340>
  {
    IKS01A3_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 8010e3c:	68f8      	ldr	r0, [r7, #12]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	011a      	lsls	r2, r3, #4
 8010e42:	4b57      	ldr	r3, [pc, #348]	@ (8010fa0 <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 8010e44:	18d3      	adds	r3, r2, r3
 8010e46:	0019      	movs	r1, r3
 8010e48:	f7f9 fdce 	bl	800a9e8 <IKS01A3_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010e4c:	4b54      	ldr	r3, [pc, #336]	@ (8010fa0 <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 8010e4e:	68fa      	ldr	r2, [r7, #12]
 8010e50:	0112      	lsls	r2, r2, #4
 8010e52:	5cd3      	ldrb	r3, [r2, r3]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010e54:	001c      	movs	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010e56:	4a52      	ldr	r2, [pc, #328]	@ (8010fa0 <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	011b      	lsls	r3, r3, #4
 8010e5c:	18d3      	adds	r3, r2, r3
 8010e5e:	3301      	adds	r3, #1
 8010e60:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010e62:	001d      	movs	r5, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010e64:	4a4e      	ldr	r2, [pc, #312]	@ (8010fa0 <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	011b      	lsls	r3, r3, #4
 8010e6a:	18d3      	adds	r3, r2, r3
 8010e6c:	3302      	adds	r3, #2
 8010e6e:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010e70:	001e      	movs	r6, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010e72:	4a4b      	ldr	r2, [pc, #300]	@ (8010fa0 <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	011b      	lsls	r3, r3, #4
 8010e78:	18d3      	adds	r3, r2, r3
 8010e7a:	3303      	adds	r3, #3
 8010e7c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010e7e:	469c      	mov	ip, r3
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	4698      	mov	r8, r3
 8010e84:	4a47      	ldr	r2, [pc, #284]	@ (8010fa4 <MX_IKS01A3_DataLogTerminal_Init+0x37c>)
 8010e86:	2180      	movs	r1, #128	@ 0x80
 8010e88:	0049      	lsls	r1, r1, #1
 8010e8a:	4840      	ldr	r0, [pc, #256]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010e8c:	4663      	mov	r3, ip
 8010e8e:	9303      	str	r3, [sp, #12]
 8010e90:	9602      	str	r6, [sp, #8]
 8010e92:	9501      	str	r5, [sp, #4]
 8010e94:	9400      	str	r4, [sp, #0]
 8010e96:	4643      	mov	r3, r8
 8010e98:	f000 fb00 	bl	801149c <sniprintf>
    printf("%s", dataOut);
 8010e9c:	4a3b      	ldr	r2, [pc, #236]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010e9e:	4b3c      	ldr	r3, [pc, #240]	@ (8010f90 <MX_IKS01A3_DataLogTerminal_Init+0x368>)
 8010ea0:	0011      	movs	r1, r2
 8010ea2:	0018      	movs	r0, r3
 8010ea4:	f000 f9c4 	bl	8011230 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 8010ea8:	4a3d      	ldr	r2, [pc, #244]	@ (8010fa0 <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	011b      	lsls	r3, r3, #4
 8010eae:	18d3      	adds	r3, r2, r3
 8010eb0:	3308      	adds	r3, #8
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	0039      	movs	r1, r7
 8010eb6:	2203      	movs	r2, #3
 8010eb8:	1c18      	adds	r0, r3, #0
 8010eba:	f000 f87b 	bl	8010fb4 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010ebe:	003b      	movs	r3, r7
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	001d      	movs	r5, r3
             (int)out_value_odr.out_dec);
 8010ec4:	003b      	movs	r3, r7
 8010ec6:	689b      	ldr	r3, [r3, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010ec8:	001c      	movs	r4, r3
 8010eca:	4a37      	ldr	r2, [pc, #220]	@ (8010fa8 <MX_IKS01A3_DataLogTerminal_Init+0x380>)
 8010ecc:	2380      	movs	r3, #128	@ 0x80
 8010ece:	0059      	lsls	r1, r3, #1
 8010ed0:	482e      	ldr	r0, [pc, #184]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010ed2:	9400      	str	r4, [sp, #0]
 8010ed4:	002b      	movs	r3, r5
 8010ed6:	f000 fae1 	bl	801149c <sniprintf>
    printf("%s", dataOut);
 8010eda:	4a2c      	ldr	r2, [pc, #176]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010edc:	4b2c      	ldr	r3, [pc, #176]	@ (8010f90 <MX_IKS01A3_DataLogTerminal_Init+0x368>)
 8010ede:	0011      	movs	r1, r2
 8010ee0:	0018      	movs	r0, r3
 8010ee2:	f000 f9a5 	bl	8011230 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 8010ee6:	4a2e      	ldr	r2, [pc, #184]	@ (8010fa0 <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	011b      	lsls	r3, r3, #4
 8010eec:	18d3      	adds	r3, r2, r3
 8010eee:	330c      	adds	r3, #12
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	0039      	movs	r1, r7
 8010ef4:	2203      	movs	r2, #3
 8010ef6:	1c18      	adds	r0, r3, #0
 8010ef8:	f000 f85c 	bl	8010fb4 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010efc:	003b      	movs	r3, r7
 8010efe:	685b      	ldr	r3, [r3, #4]
 8010f00:	001d      	movs	r5, r3
             (int)out_value_odr.out_dec);
 8010f02:	003b      	movs	r3, r7
 8010f04:	689b      	ldr	r3, [r3, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010f06:	001c      	movs	r4, r3
 8010f08:	4a28      	ldr	r2, [pc, #160]	@ (8010fac <MX_IKS01A3_DataLogTerminal_Init+0x384>)
 8010f0a:	2380      	movs	r3, #128	@ 0x80
 8010f0c:	0059      	lsls	r1, r3, #1
 8010f0e:	481f      	ldr	r0, [pc, #124]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010f10:	9400      	str	r4, [sp, #0]
 8010f12:	002b      	movs	r3, r5
 8010f14:	f000 fac2 	bl	801149c <sniprintf>
    printf("%s", dataOut);
 8010f18:	4a1c      	ldr	r2, [pc, #112]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8010f90 <MX_IKS01A3_DataLogTerminal_Init+0x368>)
 8010f1c:	0011      	movs	r1, r2
 8010f1e:	0018      	movs	r0, r3
 8010f20:	f000 f986 	bl	8011230 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 8010f24:	4a1e      	ldr	r2, [pc, #120]	@ (8010fa0 <MX_IKS01A3_DataLogTerminal_Init+0x378>)
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	011b      	lsls	r3, r3, #4
 8010f2a:	18d3      	adds	r3, r2, r3
 8010f2c:	3304      	adds	r3, #4
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	0039      	movs	r1, r7
 8010f32:	2203      	movs	r2, #3
 8010f34:	1c18      	adds	r0, r3, #0
 8010f36:	f000 f83d 	bl	8010fb4 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 8010f3a:	003b      	movs	r3, r7
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	001d      	movs	r5, r3
 8010f40:	003b      	movs	r3, r7
 8010f42:	689b      	ldr	r3, [r3, #8]
 8010f44:	001c      	movs	r4, r3
 8010f46:	4a1a      	ldr	r2, [pc, #104]	@ (8010fb0 <MX_IKS01A3_DataLogTerminal_Init+0x388>)
 8010f48:	2380      	movs	r3, #128	@ 0x80
 8010f4a:	0059      	lsls	r1, r3, #1
 8010f4c:	480f      	ldr	r0, [pc, #60]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010f4e:	9400      	str	r4, [sp, #0]
 8010f50:	002b      	movs	r3, r5
 8010f52:	f000 faa3 	bl	801149c <sniprintf>
    printf("%s", dataOut);
 8010f56:	4a0d      	ldr	r2, [pc, #52]	@ (8010f8c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 8010f58:	4b0d      	ldr	r3, [pc, #52]	@ (8010f90 <MX_IKS01A3_DataLogTerminal_Init+0x368>)
 8010f5a:	0011      	movs	r1, r2
 8010f5c:	0018      	movs	r0, r3
 8010f5e:	f000 f967 	bl	8011230 <iprintf>
  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	3301      	adds	r3, #1
 8010f66:	60fb      	str	r3, [r7, #12]
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	2b02      	cmp	r3, #2
 8010f6c:	d800      	bhi.n	8010f70 <MX_IKS01A3_DataLogTerminal_Init+0x348>
 8010f6e:	e765      	b.n	8010e3c <MX_IKS01A3_DataLogTerminal_Init+0x214>
  }
}
 8010f70:	46c0      	nop			@ (mov r8, r8)
 8010f72:	46c0      	nop			@ (mov r8, r8)
 8010f74:	46bd      	mov	sp, r7
 8010f76:	b004      	add	sp, #16
 8010f78:	bc80      	pop	{r7}
 8010f7a:	46b8      	mov	r8, r7
 8010f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f7e:	46c0      	nop			@ (mov r8, r8)
 8010f80:	200008dc 	.word	0x200008dc
 8010f84:	20000758 	.word	0x20000758
 8010f88:	080142b4 	.word	0x080142b4
 8010f8c:	200007dc 	.word	0x200007dc
 8010f90:	08014328 	.word	0x08014328
 8010f94:	0801432c 	.word	0x0801432c
 8010f98:	08014358 	.word	0x08014358
 8010f9c:	08014388 	.word	0x08014388
 8010fa0:	200007ac 	.word	0x200007ac
 8010fa4:	080143b4 	.word	0x080143b4
 8010fa8:	08014428 	.word	0x08014428
 8010fac:	08014444 	.word	0x08014444
 8010fb0:	08014464 	.word	0x08014464

08010fb4 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8010fb4:	b5b0      	push	{r4, r5, r7, lr}
 8010fb6:	b084      	sub	sp, #16
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	607a      	str	r2, [r7, #4]
  if(in >= 0.0f)
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	68f8      	ldr	r0, [r7, #12]
 8010fc4:	f7ef f9ae 	bl	8000324 <__aeabi_fcmpge>
 8010fc8:	1e03      	subs	r3, r0, #0
 8010fca:	d003      	beq.n	8010fd4 <floatToInt+0x20>
  {
    out_value->sign = 0;
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	701a      	strb	r2, [r3, #0]
 8010fd2:	e007      	b.n	8010fe4 <floatToInt+0x30>
  }else
  {
    out_value->sign = 1;
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	701a      	strb	r2, [r3, #0]
    in = -in;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2280      	movs	r2, #128	@ 0x80
 8010fde:	0612      	lsls	r2, r2, #24
 8010fe0:	4053      	eors	r3, r2
 8010fe2:	60fb      	str	r3, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 8010fe4:	68f8      	ldr	r0, [r7, #12]
 8010fe6:	f7f2 f87d 	bl	80030e4 <__aeabi_f2d>
 8010fea:	0004      	movs	r4, r0
 8010fec:	000d      	movs	r5, r1
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f7f2 f826 	bl	8003040 <__aeabi_i2d>
 8010ff4:	0002      	movs	r2, r0
 8010ff6:	000b      	movs	r3, r1
 8010ff8:	2000      	movs	r0, #0
 8010ffa:	4929      	ldr	r1, [pc, #164]	@ (80110a0 <floatToInt+0xec>)
 8010ffc:	f002 f87a 	bl	80130f4 <pow>
 8011000:	0002      	movs	r2, r0
 8011002:	000b      	movs	r3, r1
 8011004:	2000      	movs	r0, #0
 8011006:	4927      	ldr	r1, [pc, #156]	@ (80110a4 <floatToInt+0xf0>)
 8011008:	f7f0 fd14 	bl	8001a34 <__aeabi_ddiv>
 801100c:	0002      	movs	r2, r0
 801100e:	000b      	movs	r3, r1
 8011010:	0020      	movs	r0, r4
 8011012:	0029      	movs	r1, r5
 8011014:	f7f0 f9aa 	bl	800136c <__aeabi_dadd>
 8011018:	0002      	movs	r2, r0
 801101a:	000b      	movs	r3, r1
 801101c:	0010      	movs	r0, r2
 801101e:	0019      	movs	r1, r3
 8011020:	f7f2 f8a8 	bl	8003174 <__aeabi_d2f>
 8011024:	1c03      	adds	r3, r0, #0
 8011026:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 8011028:	68f8      	ldr	r0, [r7, #12]
 801102a:	f7f0 f8f1 	bl	8001210 <__aeabi_f2iz>
 801102e:	0003      	movs	r3, r0
 8011030:	001a      	movs	r2, r3
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	685b      	ldr	r3, [r3, #4]
 801103a:	0018      	movs	r0, r3
 801103c:	f7f0 f954 	bl	80012e8 <__aeabi_ui2f>
 8011040:	1c03      	adds	r3, r0, #0
 8011042:	1c19      	adds	r1, r3, #0
 8011044:	68f8      	ldr	r0, [r7, #12]
 8011046:	f7ef ff3f 	bl	8000ec8 <__aeabi_fsub>
 801104a:	1c03      	adds	r3, r0, #0
 801104c:	60fb      	str	r3, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 801104e:	68f8      	ldr	r0, [r7, #12]
 8011050:	f7f2 f848 	bl	80030e4 <__aeabi_f2d>
 8011054:	0004      	movs	r4, r0
 8011056:	000d      	movs	r5, r1
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f7f1 fff1 	bl	8003040 <__aeabi_i2d>
 801105e:	0002      	movs	r2, r0
 8011060:	000b      	movs	r3, r1
 8011062:	2000      	movs	r0, #0
 8011064:	490e      	ldr	r1, [pc, #56]	@ (80110a0 <floatToInt+0xec>)
 8011066:	f002 f845 	bl	80130f4 <pow>
 801106a:	0002      	movs	r2, r0
 801106c:	000b      	movs	r3, r1
 801106e:	0020      	movs	r0, r4
 8011070:	0029      	movs	r1, r5
 8011072:	f7f1 f923 	bl	80022bc <__aeabi_dmul>
 8011076:	0002      	movs	r2, r0
 8011078:	000b      	movs	r3, r1
 801107a:	0010      	movs	r0, r2
 801107c:	0019      	movs	r1, r3
 801107e:	f002 f8af 	bl	80131e0 <trunc>
 8011082:	0002      	movs	r2, r0
 8011084:	000b      	movs	r3, r1
 8011086:	0010      	movs	r0, r2
 8011088:	0019      	movs	r1, r3
 801108a:	f7f1 ff9d 	bl	8002fc8 <__aeabi_d2iz>
 801108e:	0003      	movs	r3, r0
 8011090:	001a      	movs	r2, r3
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	609a      	str	r2, [r3, #8]
}
 8011096:	46c0      	nop			@ (mov r8, r8)
 8011098:	46bd      	mov	sp, r7
 801109a:	b004      	add	sp, #16
 801109c:	bdb0      	pop	{r4, r5, r7, pc}
 801109e:	46c0      	nop			@ (mov r8, r8)
 80110a0:	40240000 	.word	0x40240000
 80110a4:	3fe00000 	.word	0x3fe00000

080110a8 <std>:
 80110a8:	2300      	movs	r3, #0
 80110aa:	b510      	push	{r4, lr}
 80110ac:	0004      	movs	r4, r0
 80110ae:	6003      	str	r3, [r0, #0]
 80110b0:	6043      	str	r3, [r0, #4]
 80110b2:	6083      	str	r3, [r0, #8]
 80110b4:	8181      	strh	r1, [r0, #12]
 80110b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80110b8:	81c2      	strh	r2, [r0, #14]
 80110ba:	6103      	str	r3, [r0, #16]
 80110bc:	6143      	str	r3, [r0, #20]
 80110be:	6183      	str	r3, [r0, #24]
 80110c0:	0019      	movs	r1, r3
 80110c2:	2208      	movs	r2, #8
 80110c4:	305c      	adds	r0, #92	@ 0x5c
 80110c6:	f000 fb29 	bl	801171c <memset>
 80110ca:	4b0b      	ldr	r3, [pc, #44]	@ (80110f8 <std+0x50>)
 80110cc:	6224      	str	r4, [r4, #32]
 80110ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80110d0:	4b0a      	ldr	r3, [pc, #40]	@ (80110fc <std+0x54>)
 80110d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80110d4:	4b0a      	ldr	r3, [pc, #40]	@ (8011100 <std+0x58>)
 80110d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80110d8:	4b0a      	ldr	r3, [pc, #40]	@ (8011104 <std+0x5c>)
 80110da:	6323      	str	r3, [r4, #48]	@ 0x30
 80110dc:	4b0a      	ldr	r3, [pc, #40]	@ (8011108 <std+0x60>)
 80110de:	429c      	cmp	r4, r3
 80110e0:	d005      	beq.n	80110ee <std+0x46>
 80110e2:	4b0a      	ldr	r3, [pc, #40]	@ (801110c <std+0x64>)
 80110e4:	429c      	cmp	r4, r3
 80110e6:	d002      	beq.n	80110ee <std+0x46>
 80110e8:	4b09      	ldr	r3, [pc, #36]	@ (8011110 <std+0x68>)
 80110ea:	429c      	cmp	r4, r3
 80110ec:	d103      	bne.n	80110f6 <std+0x4e>
 80110ee:	0020      	movs	r0, r4
 80110f0:	3058      	adds	r0, #88	@ 0x58
 80110f2:	f000 fb93 	bl	801181c <__retarget_lock_init_recursive>
 80110f6:	bd10      	pop	{r4, pc}
 80110f8:	08011545 	.word	0x08011545
 80110fc:	0801156d 	.word	0x0801156d
 8011100:	080115a5 	.word	0x080115a5
 8011104:	080115d1 	.word	0x080115d1
 8011108:	200008e0 	.word	0x200008e0
 801110c:	20000948 	.word	0x20000948
 8011110:	200009b0 	.word	0x200009b0

08011114 <stdio_exit_handler>:
 8011114:	b510      	push	{r4, lr}
 8011116:	4a03      	ldr	r2, [pc, #12]	@ (8011124 <stdio_exit_handler+0x10>)
 8011118:	4903      	ldr	r1, [pc, #12]	@ (8011128 <stdio_exit_handler+0x14>)
 801111a:	4804      	ldr	r0, [pc, #16]	@ (801112c <stdio_exit_handler+0x18>)
 801111c:	f000 f86c 	bl	80111f8 <_fwalk_sglue>
 8011120:	bd10      	pop	{r4, pc}
 8011122:	46c0      	nop			@ (mov r8, r8)
 8011124:	20000198 	.word	0x20000198
 8011128:	08012989 	.word	0x08012989
 801112c:	200001a8 	.word	0x200001a8

08011130 <cleanup_stdio>:
 8011130:	6841      	ldr	r1, [r0, #4]
 8011132:	4b0b      	ldr	r3, [pc, #44]	@ (8011160 <cleanup_stdio+0x30>)
 8011134:	b510      	push	{r4, lr}
 8011136:	0004      	movs	r4, r0
 8011138:	4299      	cmp	r1, r3
 801113a:	d001      	beq.n	8011140 <cleanup_stdio+0x10>
 801113c:	f001 fc24 	bl	8012988 <_fflush_r>
 8011140:	68a1      	ldr	r1, [r4, #8]
 8011142:	4b08      	ldr	r3, [pc, #32]	@ (8011164 <cleanup_stdio+0x34>)
 8011144:	4299      	cmp	r1, r3
 8011146:	d002      	beq.n	801114e <cleanup_stdio+0x1e>
 8011148:	0020      	movs	r0, r4
 801114a:	f001 fc1d 	bl	8012988 <_fflush_r>
 801114e:	68e1      	ldr	r1, [r4, #12]
 8011150:	4b05      	ldr	r3, [pc, #20]	@ (8011168 <cleanup_stdio+0x38>)
 8011152:	4299      	cmp	r1, r3
 8011154:	d002      	beq.n	801115c <cleanup_stdio+0x2c>
 8011156:	0020      	movs	r0, r4
 8011158:	f001 fc16 	bl	8012988 <_fflush_r>
 801115c:	bd10      	pop	{r4, pc}
 801115e:	46c0      	nop			@ (mov r8, r8)
 8011160:	200008e0 	.word	0x200008e0
 8011164:	20000948 	.word	0x20000948
 8011168:	200009b0 	.word	0x200009b0

0801116c <global_stdio_init.part.0>:
 801116c:	b510      	push	{r4, lr}
 801116e:	4b09      	ldr	r3, [pc, #36]	@ (8011194 <global_stdio_init.part.0+0x28>)
 8011170:	4a09      	ldr	r2, [pc, #36]	@ (8011198 <global_stdio_init.part.0+0x2c>)
 8011172:	2104      	movs	r1, #4
 8011174:	601a      	str	r2, [r3, #0]
 8011176:	4809      	ldr	r0, [pc, #36]	@ (801119c <global_stdio_init.part.0+0x30>)
 8011178:	2200      	movs	r2, #0
 801117a:	f7ff ff95 	bl	80110a8 <std>
 801117e:	2201      	movs	r2, #1
 8011180:	2109      	movs	r1, #9
 8011182:	4807      	ldr	r0, [pc, #28]	@ (80111a0 <global_stdio_init.part.0+0x34>)
 8011184:	f7ff ff90 	bl	80110a8 <std>
 8011188:	2202      	movs	r2, #2
 801118a:	2112      	movs	r1, #18
 801118c:	4805      	ldr	r0, [pc, #20]	@ (80111a4 <global_stdio_init.part.0+0x38>)
 801118e:	f7ff ff8b 	bl	80110a8 <std>
 8011192:	bd10      	pop	{r4, pc}
 8011194:	20000a18 	.word	0x20000a18
 8011198:	08011115 	.word	0x08011115
 801119c:	200008e0 	.word	0x200008e0
 80111a0:	20000948 	.word	0x20000948
 80111a4:	200009b0 	.word	0x200009b0

080111a8 <__sfp_lock_acquire>:
 80111a8:	b510      	push	{r4, lr}
 80111aa:	4802      	ldr	r0, [pc, #8]	@ (80111b4 <__sfp_lock_acquire+0xc>)
 80111ac:	f000 fb37 	bl	801181e <__retarget_lock_acquire_recursive>
 80111b0:	bd10      	pop	{r4, pc}
 80111b2:	46c0      	nop			@ (mov r8, r8)
 80111b4:	20000a21 	.word	0x20000a21

080111b8 <__sfp_lock_release>:
 80111b8:	b510      	push	{r4, lr}
 80111ba:	4802      	ldr	r0, [pc, #8]	@ (80111c4 <__sfp_lock_release+0xc>)
 80111bc:	f000 fb30 	bl	8011820 <__retarget_lock_release_recursive>
 80111c0:	bd10      	pop	{r4, pc}
 80111c2:	46c0      	nop			@ (mov r8, r8)
 80111c4:	20000a21 	.word	0x20000a21

080111c8 <__sinit>:
 80111c8:	b510      	push	{r4, lr}
 80111ca:	0004      	movs	r4, r0
 80111cc:	f7ff ffec 	bl	80111a8 <__sfp_lock_acquire>
 80111d0:	6a23      	ldr	r3, [r4, #32]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d002      	beq.n	80111dc <__sinit+0x14>
 80111d6:	f7ff ffef 	bl	80111b8 <__sfp_lock_release>
 80111da:	bd10      	pop	{r4, pc}
 80111dc:	4b04      	ldr	r3, [pc, #16]	@ (80111f0 <__sinit+0x28>)
 80111de:	6223      	str	r3, [r4, #32]
 80111e0:	4b04      	ldr	r3, [pc, #16]	@ (80111f4 <__sinit+0x2c>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d1f6      	bne.n	80111d6 <__sinit+0xe>
 80111e8:	f7ff ffc0 	bl	801116c <global_stdio_init.part.0>
 80111ec:	e7f3      	b.n	80111d6 <__sinit+0xe>
 80111ee:	46c0      	nop			@ (mov r8, r8)
 80111f0:	08011131 	.word	0x08011131
 80111f4:	20000a18 	.word	0x20000a18

080111f8 <_fwalk_sglue>:
 80111f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111fa:	0014      	movs	r4, r2
 80111fc:	2600      	movs	r6, #0
 80111fe:	9000      	str	r0, [sp, #0]
 8011200:	9101      	str	r1, [sp, #4]
 8011202:	68a5      	ldr	r5, [r4, #8]
 8011204:	6867      	ldr	r7, [r4, #4]
 8011206:	3f01      	subs	r7, #1
 8011208:	d504      	bpl.n	8011214 <_fwalk_sglue+0x1c>
 801120a:	6824      	ldr	r4, [r4, #0]
 801120c:	2c00      	cmp	r4, #0
 801120e:	d1f8      	bne.n	8011202 <_fwalk_sglue+0xa>
 8011210:	0030      	movs	r0, r6
 8011212:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011214:	89ab      	ldrh	r3, [r5, #12]
 8011216:	2b01      	cmp	r3, #1
 8011218:	d908      	bls.n	801122c <_fwalk_sglue+0x34>
 801121a:	220e      	movs	r2, #14
 801121c:	5eab      	ldrsh	r3, [r5, r2]
 801121e:	3301      	adds	r3, #1
 8011220:	d004      	beq.n	801122c <_fwalk_sglue+0x34>
 8011222:	0029      	movs	r1, r5
 8011224:	9800      	ldr	r0, [sp, #0]
 8011226:	9b01      	ldr	r3, [sp, #4]
 8011228:	4798      	blx	r3
 801122a:	4306      	orrs	r6, r0
 801122c:	3568      	adds	r5, #104	@ 0x68
 801122e:	e7ea      	b.n	8011206 <_fwalk_sglue+0xe>

08011230 <iprintf>:
 8011230:	b40f      	push	{r0, r1, r2, r3}
 8011232:	b507      	push	{r0, r1, r2, lr}
 8011234:	4905      	ldr	r1, [pc, #20]	@ (801124c <iprintf+0x1c>)
 8011236:	ab04      	add	r3, sp, #16
 8011238:	6808      	ldr	r0, [r1, #0]
 801123a:	cb04      	ldmia	r3!, {r2}
 801123c:	6881      	ldr	r1, [r0, #8]
 801123e:	9301      	str	r3, [sp, #4]
 8011240:	f000 fd84 	bl	8011d4c <_vfiprintf_r>
 8011244:	b003      	add	sp, #12
 8011246:	bc08      	pop	{r3}
 8011248:	b004      	add	sp, #16
 801124a:	4718      	bx	r3
 801124c:	200001a4 	.word	0x200001a4

08011250 <_puts_r>:
 8011250:	6a03      	ldr	r3, [r0, #32]
 8011252:	b570      	push	{r4, r5, r6, lr}
 8011254:	0005      	movs	r5, r0
 8011256:	000e      	movs	r6, r1
 8011258:	6884      	ldr	r4, [r0, #8]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d101      	bne.n	8011262 <_puts_r+0x12>
 801125e:	f7ff ffb3 	bl	80111c8 <__sinit>
 8011262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011264:	07db      	lsls	r3, r3, #31
 8011266:	d405      	bmi.n	8011274 <_puts_r+0x24>
 8011268:	89a3      	ldrh	r3, [r4, #12]
 801126a:	059b      	lsls	r3, r3, #22
 801126c:	d402      	bmi.n	8011274 <_puts_r+0x24>
 801126e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011270:	f000 fad5 	bl	801181e <__retarget_lock_acquire_recursive>
 8011274:	89a3      	ldrh	r3, [r4, #12]
 8011276:	071b      	lsls	r3, r3, #28
 8011278:	d502      	bpl.n	8011280 <_puts_r+0x30>
 801127a:	6923      	ldr	r3, [r4, #16]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d11f      	bne.n	80112c0 <_puts_r+0x70>
 8011280:	0021      	movs	r1, r4
 8011282:	0028      	movs	r0, r5
 8011284:	f000 f9ec 	bl	8011660 <__swsetup_r>
 8011288:	2800      	cmp	r0, #0
 801128a:	d019      	beq.n	80112c0 <_puts_r+0x70>
 801128c:	2501      	movs	r5, #1
 801128e:	426d      	negs	r5, r5
 8011290:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011292:	07db      	lsls	r3, r3, #31
 8011294:	d405      	bmi.n	80112a2 <_puts_r+0x52>
 8011296:	89a3      	ldrh	r3, [r4, #12]
 8011298:	059b      	lsls	r3, r3, #22
 801129a:	d402      	bmi.n	80112a2 <_puts_r+0x52>
 801129c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801129e:	f000 fabf 	bl	8011820 <__retarget_lock_release_recursive>
 80112a2:	0028      	movs	r0, r5
 80112a4:	bd70      	pop	{r4, r5, r6, pc}
 80112a6:	3601      	adds	r6, #1
 80112a8:	60a3      	str	r3, [r4, #8]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	da04      	bge.n	80112b8 <_puts_r+0x68>
 80112ae:	69a2      	ldr	r2, [r4, #24]
 80112b0:	429a      	cmp	r2, r3
 80112b2:	dc16      	bgt.n	80112e2 <_puts_r+0x92>
 80112b4:	290a      	cmp	r1, #10
 80112b6:	d014      	beq.n	80112e2 <_puts_r+0x92>
 80112b8:	6823      	ldr	r3, [r4, #0]
 80112ba:	1c5a      	adds	r2, r3, #1
 80112bc:	6022      	str	r2, [r4, #0]
 80112be:	7019      	strb	r1, [r3, #0]
 80112c0:	68a3      	ldr	r3, [r4, #8]
 80112c2:	7831      	ldrb	r1, [r6, #0]
 80112c4:	3b01      	subs	r3, #1
 80112c6:	2900      	cmp	r1, #0
 80112c8:	d1ed      	bne.n	80112a6 <_puts_r+0x56>
 80112ca:	60a3      	str	r3, [r4, #8]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	da0f      	bge.n	80112f0 <_puts_r+0xa0>
 80112d0:	0022      	movs	r2, r4
 80112d2:	0028      	movs	r0, r5
 80112d4:	310a      	adds	r1, #10
 80112d6:	f000 f981 	bl	80115dc <__swbuf_r>
 80112da:	3001      	adds	r0, #1
 80112dc:	d0d6      	beq.n	801128c <_puts_r+0x3c>
 80112de:	250a      	movs	r5, #10
 80112e0:	e7d6      	b.n	8011290 <_puts_r+0x40>
 80112e2:	0022      	movs	r2, r4
 80112e4:	0028      	movs	r0, r5
 80112e6:	f000 f979 	bl	80115dc <__swbuf_r>
 80112ea:	3001      	adds	r0, #1
 80112ec:	d1e8      	bne.n	80112c0 <_puts_r+0x70>
 80112ee:	e7cd      	b.n	801128c <_puts_r+0x3c>
 80112f0:	6823      	ldr	r3, [r4, #0]
 80112f2:	1c5a      	adds	r2, r3, #1
 80112f4:	6022      	str	r2, [r4, #0]
 80112f6:	220a      	movs	r2, #10
 80112f8:	701a      	strb	r2, [r3, #0]
 80112fa:	e7f0      	b.n	80112de <_puts_r+0x8e>

080112fc <puts>:
 80112fc:	b510      	push	{r4, lr}
 80112fe:	4b03      	ldr	r3, [pc, #12]	@ (801130c <puts+0x10>)
 8011300:	0001      	movs	r1, r0
 8011302:	6818      	ldr	r0, [r3, #0]
 8011304:	f7ff ffa4 	bl	8011250 <_puts_r>
 8011308:	bd10      	pop	{r4, pc}
 801130a:	46c0      	nop			@ (mov r8, r8)
 801130c:	200001a4 	.word	0x200001a4

08011310 <iscanf>:
 8011310:	b40f      	push	{r0, r1, r2, r3}
 8011312:	b507      	push	{r0, r1, r2, lr}
 8011314:	4905      	ldr	r1, [pc, #20]	@ (801132c <iscanf+0x1c>)
 8011316:	ab04      	add	r3, sp, #16
 8011318:	6808      	ldr	r0, [r1, #0]
 801131a:	cb04      	ldmia	r3!, {r2}
 801131c:	6841      	ldr	r1, [r0, #4]
 801131e:	9301      	str	r3, [sp, #4]
 8011320:	f001 f938 	bl	8012594 <_vfiscanf_r>
 8011324:	b003      	add	sp, #12
 8011326:	bc08      	pop	{r3}
 8011328:	b004      	add	sp, #16
 801132a:	4718      	bx	r3
 801132c:	200001a4 	.word	0x200001a4

08011330 <setvbuf>:
 8011330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011332:	001d      	movs	r5, r3
 8011334:	4b57      	ldr	r3, [pc, #348]	@ (8011494 <setvbuf+0x164>)
 8011336:	b085      	sub	sp, #20
 8011338:	681e      	ldr	r6, [r3, #0]
 801133a:	0004      	movs	r4, r0
 801133c:	000f      	movs	r7, r1
 801133e:	9200      	str	r2, [sp, #0]
 8011340:	2e00      	cmp	r6, #0
 8011342:	d005      	beq.n	8011350 <setvbuf+0x20>
 8011344:	6a33      	ldr	r3, [r6, #32]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d102      	bne.n	8011350 <setvbuf+0x20>
 801134a:	0030      	movs	r0, r6
 801134c:	f7ff ff3c 	bl	80111c8 <__sinit>
 8011350:	9b00      	ldr	r3, [sp, #0]
 8011352:	2b02      	cmp	r3, #2
 8011354:	d005      	beq.n	8011362 <setvbuf+0x32>
 8011356:	2b01      	cmp	r3, #1
 8011358:	d900      	bls.n	801135c <setvbuf+0x2c>
 801135a:	e097      	b.n	801148c <setvbuf+0x15c>
 801135c:	2d00      	cmp	r5, #0
 801135e:	da00      	bge.n	8011362 <setvbuf+0x32>
 8011360:	e094      	b.n	801148c <setvbuf+0x15c>
 8011362:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011364:	07db      	lsls	r3, r3, #31
 8011366:	d405      	bmi.n	8011374 <setvbuf+0x44>
 8011368:	89a3      	ldrh	r3, [r4, #12]
 801136a:	059b      	lsls	r3, r3, #22
 801136c:	d402      	bmi.n	8011374 <setvbuf+0x44>
 801136e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011370:	f000 fa55 	bl	801181e <__retarget_lock_acquire_recursive>
 8011374:	0021      	movs	r1, r4
 8011376:	0030      	movs	r0, r6
 8011378:	f001 fb06 	bl	8012988 <_fflush_r>
 801137c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801137e:	2900      	cmp	r1, #0
 8011380:	d008      	beq.n	8011394 <setvbuf+0x64>
 8011382:	0023      	movs	r3, r4
 8011384:	3344      	adds	r3, #68	@ 0x44
 8011386:	4299      	cmp	r1, r3
 8011388:	d002      	beq.n	8011390 <setvbuf+0x60>
 801138a:	0030      	movs	r0, r6
 801138c:	f000 fa52 	bl	8011834 <_free_r>
 8011390:	2300      	movs	r3, #0
 8011392:	6363      	str	r3, [r4, #52]	@ 0x34
 8011394:	2300      	movs	r3, #0
 8011396:	61a3      	str	r3, [r4, #24]
 8011398:	6063      	str	r3, [r4, #4]
 801139a:	89a3      	ldrh	r3, [r4, #12]
 801139c:	061b      	lsls	r3, r3, #24
 801139e:	d503      	bpl.n	80113a8 <setvbuf+0x78>
 80113a0:	0030      	movs	r0, r6
 80113a2:	6921      	ldr	r1, [r4, #16]
 80113a4:	f000 fa46 	bl	8011834 <_free_r>
 80113a8:	89a3      	ldrh	r3, [r4, #12]
 80113aa:	4a3b      	ldr	r2, [pc, #236]	@ (8011498 <setvbuf+0x168>)
 80113ac:	4013      	ands	r3, r2
 80113ae:	81a3      	strh	r3, [r4, #12]
 80113b0:	9b00      	ldr	r3, [sp, #0]
 80113b2:	2b02      	cmp	r3, #2
 80113b4:	d060      	beq.n	8011478 <setvbuf+0x148>
 80113b6:	ab03      	add	r3, sp, #12
 80113b8:	0021      	movs	r1, r4
 80113ba:	0030      	movs	r0, r6
 80113bc:	aa02      	add	r2, sp, #8
 80113be:	f001 fb0f 	bl	80129e0 <__swhatbuf_r>
 80113c2:	89a3      	ldrh	r3, [r4, #12]
 80113c4:	4303      	orrs	r3, r0
 80113c6:	81a3      	strh	r3, [r4, #12]
 80113c8:	2d00      	cmp	r5, #0
 80113ca:	d124      	bne.n	8011416 <setvbuf+0xe6>
 80113cc:	9d02      	ldr	r5, [sp, #8]
 80113ce:	0028      	movs	r0, r5
 80113d0:	f000 fa7a 	bl	80118c8 <malloc>
 80113d4:	9501      	str	r5, [sp, #4]
 80113d6:	1e07      	subs	r7, r0, #0
 80113d8:	d148      	bne.n	801146c <setvbuf+0x13c>
 80113da:	9b02      	ldr	r3, [sp, #8]
 80113dc:	9301      	str	r3, [sp, #4]
 80113de:	42ab      	cmp	r3, r5
 80113e0:	d13f      	bne.n	8011462 <setvbuf+0x132>
 80113e2:	2501      	movs	r5, #1
 80113e4:	426d      	negs	r5, r5
 80113e6:	220c      	movs	r2, #12
 80113e8:	5ea3      	ldrsh	r3, [r4, r2]
 80113ea:	2202      	movs	r2, #2
 80113ec:	431a      	orrs	r2, r3
 80113ee:	81a2      	strh	r2, [r4, #12]
 80113f0:	2200      	movs	r2, #0
 80113f2:	60a2      	str	r2, [r4, #8]
 80113f4:	0022      	movs	r2, r4
 80113f6:	3247      	adds	r2, #71	@ 0x47
 80113f8:	6022      	str	r2, [r4, #0]
 80113fa:	6122      	str	r2, [r4, #16]
 80113fc:	2201      	movs	r2, #1
 80113fe:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8011400:	6162      	str	r2, [r4, #20]
 8011402:	4211      	tst	r1, r2
 8011404:	d104      	bne.n	8011410 <setvbuf+0xe0>
 8011406:	059b      	lsls	r3, r3, #22
 8011408:	d402      	bmi.n	8011410 <setvbuf+0xe0>
 801140a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801140c:	f000 fa08 	bl	8011820 <__retarget_lock_release_recursive>
 8011410:	0028      	movs	r0, r5
 8011412:	b005      	add	sp, #20
 8011414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011416:	2f00      	cmp	r7, #0
 8011418:	d0d9      	beq.n	80113ce <setvbuf+0x9e>
 801141a:	6a33      	ldr	r3, [r6, #32]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d102      	bne.n	8011426 <setvbuf+0xf6>
 8011420:	0030      	movs	r0, r6
 8011422:	f7ff fed1 	bl	80111c8 <__sinit>
 8011426:	9b00      	ldr	r3, [sp, #0]
 8011428:	2b01      	cmp	r3, #1
 801142a:	d103      	bne.n	8011434 <setvbuf+0x104>
 801142c:	89a3      	ldrh	r3, [r4, #12]
 801142e:	9a00      	ldr	r2, [sp, #0]
 8011430:	431a      	orrs	r2, r3
 8011432:	81a2      	strh	r2, [r4, #12]
 8011434:	220c      	movs	r2, #12
 8011436:	5ea3      	ldrsh	r3, [r4, r2]
 8011438:	2208      	movs	r2, #8
 801143a:	0019      	movs	r1, r3
 801143c:	6027      	str	r7, [r4, #0]
 801143e:	6127      	str	r7, [r4, #16]
 8011440:	6165      	str	r5, [r4, #20]
 8011442:	4011      	ands	r1, r2
 8011444:	4213      	tst	r3, r2
 8011446:	d01b      	beq.n	8011480 <setvbuf+0x150>
 8011448:	07da      	lsls	r2, r3, #31
 801144a:	d517      	bpl.n	801147c <setvbuf+0x14c>
 801144c:	2200      	movs	r2, #0
 801144e:	426d      	negs	r5, r5
 8011450:	60a2      	str	r2, [r4, #8]
 8011452:	61a5      	str	r5, [r4, #24]
 8011454:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011456:	07d2      	lsls	r2, r2, #31
 8011458:	d401      	bmi.n	801145e <setvbuf+0x12e>
 801145a:	059b      	lsls	r3, r3, #22
 801145c:	d512      	bpl.n	8011484 <setvbuf+0x154>
 801145e:	2500      	movs	r5, #0
 8011460:	e7d6      	b.n	8011410 <setvbuf+0xe0>
 8011462:	9801      	ldr	r0, [sp, #4]
 8011464:	f000 fa30 	bl	80118c8 <malloc>
 8011468:	1e07      	subs	r7, r0, #0
 801146a:	d0ba      	beq.n	80113e2 <setvbuf+0xb2>
 801146c:	2380      	movs	r3, #128	@ 0x80
 801146e:	89a2      	ldrh	r2, [r4, #12]
 8011470:	9d01      	ldr	r5, [sp, #4]
 8011472:	4313      	orrs	r3, r2
 8011474:	81a3      	strh	r3, [r4, #12]
 8011476:	e7d0      	b.n	801141a <setvbuf+0xea>
 8011478:	2500      	movs	r5, #0
 801147a:	e7b4      	b.n	80113e6 <setvbuf+0xb6>
 801147c:	60a5      	str	r5, [r4, #8]
 801147e:	e7e9      	b.n	8011454 <setvbuf+0x124>
 8011480:	60a1      	str	r1, [r4, #8]
 8011482:	e7e7      	b.n	8011454 <setvbuf+0x124>
 8011484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011486:	f000 f9cb 	bl	8011820 <__retarget_lock_release_recursive>
 801148a:	e7e8      	b.n	801145e <setvbuf+0x12e>
 801148c:	2501      	movs	r5, #1
 801148e:	426d      	negs	r5, r5
 8011490:	e7be      	b.n	8011410 <setvbuf+0xe0>
 8011492:	46c0      	nop			@ (mov r8, r8)
 8011494:	200001a4 	.word	0x200001a4
 8011498:	fffff35c 	.word	0xfffff35c

0801149c <sniprintf>:
 801149c:	b40c      	push	{r2, r3}
 801149e:	b530      	push	{r4, r5, lr}
 80114a0:	4b17      	ldr	r3, [pc, #92]	@ (8011500 <sniprintf+0x64>)
 80114a2:	000c      	movs	r4, r1
 80114a4:	681d      	ldr	r5, [r3, #0]
 80114a6:	b09d      	sub	sp, #116	@ 0x74
 80114a8:	2900      	cmp	r1, #0
 80114aa:	da08      	bge.n	80114be <sniprintf+0x22>
 80114ac:	238b      	movs	r3, #139	@ 0x8b
 80114ae:	2001      	movs	r0, #1
 80114b0:	602b      	str	r3, [r5, #0]
 80114b2:	4240      	negs	r0, r0
 80114b4:	b01d      	add	sp, #116	@ 0x74
 80114b6:	bc30      	pop	{r4, r5}
 80114b8:	bc08      	pop	{r3}
 80114ba:	b002      	add	sp, #8
 80114bc:	4718      	bx	r3
 80114be:	2382      	movs	r3, #130	@ 0x82
 80114c0:	466a      	mov	r2, sp
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	8293      	strh	r3, [r2, #20]
 80114c6:	2300      	movs	r3, #0
 80114c8:	9002      	str	r0, [sp, #8]
 80114ca:	9006      	str	r0, [sp, #24]
 80114cc:	4299      	cmp	r1, r3
 80114ce:	d000      	beq.n	80114d2 <sniprintf+0x36>
 80114d0:	1e4b      	subs	r3, r1, #1
 80114d2:	9304      	str	r3, [sp, #16]
 80114d4:	9307      	str	r3, [sp, #28]
 80114d6:	2301      	movs	r3, #1
 80114d8:	466a      	mov	r2, sp
 80114da:	425b      	negs	r3, r3
 80114dc:	82d3      	strh	r3, [r2, #22]
 80114de:	0028      	movs	r0, r5
 80114e0:	ab21      	add	r3, sp, #132	@ 0x84
 80114e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80114e4:	a902      	add	r1, sp, #8
 80114e6:	9301      	str	r3, [sp, #4]
 80114e8:	f000 fb0a 	bl	8011b00 <_svfiprintf_r>
 80114ec:	1c43      	adds	r3, r0, #1
 80114ee:	da01      	bge.n	80114f4 <sniprintf+0x58>
 80114f0:	238b      	movs	r3, #139	@ 0x8b
 80114f2:	602b      	str	r3, [r5, #0]
 80114f4:	2c00      	cmp	r4, #0
 80114f6:	d0dd      	beq.n	80114b4 <sniprintf+0x18>
 80114f8:	2200      	movs	r2, #0
 80114fa:	9b02      	ldr	r3, [sp, #8]
 80114fc:	701a      	strb	r2, [r3, #0]
 80114fe:	e7d9      	b.n	80114b4 <sniprintf+0x18>
 8011500:	200001a4 	.word	0x200001a4

08011504 <siprintf>:
 8011504:	b40e      	push	{r1, r2, r3}
 8011506:	b500      	push	{lr}
 8011508:	490b      	ldr	r1, [pc, #44]	@ (8011538 <siprintf+0x34>)
 801150a:	b09c      	sub	sp, #112	@ 0x70
 801150c:	ab1d      	add	r3, sp, #116	@ 0x74
 801150e:	9002      	str	r0, [sp, #8]
 8011510:	9006      	str	r0, [sp, #24]
 8011512:	9107      	str	r1, [sp, #28]
 8011514:	9104      	str	r1, [sp, #16]
 8011516:	4809      	ldr	r0, [pc, #36]	@ (801153c <siprintf+0x38>)
 8011518:	4909      	ldr	r1, [pc, #36]	@ (8011540 <siprintf+0x3c>)
 801151a:	cb04      	ldmia	r3!, {r2}
 801151c:	9105      	str	r1, [sp, #20]
 801151e:	6800      	ldr	r0, [r0, #0]
 8011520:	a902      	add	r1, sp, #8
 8011522:	9301      	str	r3, [sp, #4]
 8011524:	f000 faec 	bl	8011b00 <_svfiprintf_r>
 8011528:	2200      	movs	r2, #0
 801152a:	9b02      	ldr	r3, [sp, #8]
 801152c:	701a      	strb	r2, [r3, #0]
 801152e:	b01c      	add	sp, #112	@ 0x70
 8011530:	bc08      	pop	{r3}
 8011532:	b003      	add	sp, #12
 8011534:	4718      	bx	r3
 8011536:	46c0      	nop			@ (mov r8, r8)
 8011538:	7fffffff 	.word	0x7fffffff
 801153c:	200001a4 	.word	0x200001a4
 8011540:	ffff0208 	.word	0xffff0208

08011544 <__sread>:
 8011544:	b570      	push	{r4, r5, r6, lr}
 8011546:	000c      	movs	r4, r1
 8011548:	250e      	movs	r5, #14
 801154a:	5f49      	ldrsh	r1, [r1, r5]
 801154c:	f000 f914 	bl	8011778 <_read_r>
 8011550:	2800      	cmp	r0, #0
 8011552:	db03      	blt.n	801155c <__sread+0x18>
 8011554:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8011556:	181b      	adds	r3, r3, r0
 8011558:	6563      	str	r3, [r4, #84]	@ 0x54
 801155a:	bd70      	pop	{r4, r5, r6, pc}
 801155c:	89a3      	ldrh	r3, [r4, #12]
 801155e:	4a02      	ldr	r2, [pc, #8]	@ (8011568 <__sread+0x24>)
 8011560:	4013      	ands	r3, r2
 8011562:	81a3      	strh	r3, [r4, #12]
 8011564:	e7f9      	b.n	801155a <__sread+0x16>
 8011566:	46c0      	nop			@ (mov r8, r8)
 8011568:	ffffefff 	.word	0xffffefff

0801156c <__swrite>:
 801156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801156e:	001f      	movs	r7, r3
 8011570:	898b      	ldrh	r3, [r1, #12]
 8011572:	0005      	movs	r5, r0
 8011574:	000c      	movs	r4, r1
 8011576:	0016      	movs	r6, r2
 8011578:	05db      	lsls	r3, r3, #23
 801157a:	d505      	bpl.n	8011588 <__swrite+0x1c>
 801157c:	230e      	movs	r3, #14
 801157e:	5ec9      	ldrsh	r1, [r1, r3]
 8011580:	2200      	movs	r2, #0
 8011582:	2302      	movs	r3, #2
 8011584:	f000 f8e4 	bl	8011750 <_lseek_r>
 8011588:	89a3      	ldrh	r3, [r4, #12]
 801158a:	4a05      	ldr	r2, [pc, #20]	@ (80115a0 <__swrite+0x34>)
 801158c:	0028      	movs	r0, r5
 801158e:	4013      	ands	r3, r2
 8011590:	81a3      	strh	r3, [r4, #12]
 8011592:	0032      	movs	r2, r6
 8011594:	230e      	movs	r3, #14
 8011596:	5ee1      	ldrsh	r1, [r4, r3]
 8011598:	003b      	movs	r3, r7
 801159a:	f000 f901 	bl	80117a0 <_write_r>
 801159e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115a0:	ffffefff 	.word	0xffffefff

080115a4 <__sseek>:
 80115a4:	b570      	push	{r4, r5, r6, lr}
 80115a6:	000c      	movs	r4, r1
 80115a8:	250e      	movs	r5, #14
 80115aa:	5f49      	ldrsh	r1, [r1, r5]
 80115ac:	f000 f8d0 	bl	8011750 <_lseek_r>
 80115b0:	89a3      	ldrh	r3, [r4, #12]
 80115b2:	1c42      	adds	r2, r0, #1
 80115b4:	d103      	bne.n	80115be <__sseek+0x1a>
 80115b6:	4a05      	ldr	r2, [pc, #20]	@ (80115cc <__sseek+0x28>)
 80115b8:	4013      	ands	r3, r2
 80115ba:	81a3      	strh	r3, [r4, #12]
 80115bc:	bd70      	pop	{r4, r5, r6, pc}
 80115be:	2280      	movs	r2, #128	@ 0x80
 80115c0:	0152      	lsls	r2, r2, #5
 80115c2:	4313      	orrs	r3, r2
 80115c4:	81a3      	strh	r3, [r4, #12]
 80115c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80115c8:	e7f8      	b.n	80115bc <__sseek+0x18>
 80115ca:	46c0      	nop			@ (mov r8, r8)
 80115cc:	ffffefff 	.word	0xffffefff

080115d0 <__sclose>:
 80115d0:	b510      	push	{r4, lr}
 80115d2:	230e      	movs	r3, #14
 80115d4:	5ec9      	ldrsh	r1, [r1, r3]
 80115d6:	f000 f8a9 	bl	801172c <_close_r>
 80115da:	bd10      	pop	{r4, pc}

080115dc <__swbuf_r>:
 80115dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115de:	0006      	movs	r6, r0
 80115e0:	000d      	movs	r5, r1
 80115e2:	0014      	movs	r4, r2
 80115e4:	2800      	cmp	r0, #0
 80115e6:	d004      	beq.n	80115f2 <__swbuf_r+0x16>
 80115e8:	6a03      	ldr	r3, [r0, #32]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d101      	bne.n	80115f2 <__swbuf_r+0x16>
 80115ee:	f7ff fdeb 	bl	80111c8 <__sinit>
 80115f2:	69a3      	ldr	r3, [r4, #24]
 80115f4:	60a3      	str	r3, [r4, #8]
 80115f6:	89a3      	ldrh	r3, [r4, #12]
 80115f8:	071b      	lsls	r3, r3, #28
 80115fa:	d502      	bpl.n	8011602 <__swbuf_r+0x26>
 80115fc:	6923      	ldr	r3, [r4, #16]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d109      	bne.n	8011616 <__swbuf_r+0x3a>
 8011602:	0021      	movs	r1, r4
 8011604:	0030      	movs	r0, r6
 8011606:	f000 f82b 	bl	8011660 <__swsetup_r>
 801160a:	2800      	cmp	r0, #0
 801160c:	d003      	beq.n	8011616 <__swbuf_r+0x3a>
 801160e:	2501      	movs	r5, #1
 8011610:	426d      	negs	r5, r5
 8011612:	0028      	movs	r0, r5
 8011614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011616:	6923      	ldr	r3, [r4, #16]
 8011618:	6820      	ldr	r0, [r4, #0]
 801161a:	b2ef      	uxtb	r7, r5
 801161c:	1ac0      	subs	r0, r0, r3
 801161e:	6963      	ldr	r3, [r4, #20]
 8011620:	b2ed      	uxtb	r5, r5
 8011622:	4283      	cmp	r3, r0
 8011624:	dc05      	bgt.n	8011632 <__swbuf_r+0x56>
 8011626:	0021      	movs	r1, r4
 8011628:	0030      	movs	r0, r6
 801162a:	f001 f9ad 	bl	8012988 <_fflush_r>
 801162e:	2800      	cmp	r0, #0
 8011630:	d1ed      	bne.n	801160e <__swbuf_r+0x32>
 8011632:	68a3      	ldr	r3, [r4, #8]
 8011634:	3001      	adds	r0, #1
 8011636:	3b01      	subs	r3, #1
 8011638:	60a3      	str	r3, [r4, #8]
 801163a:	6823      	ldr	r3, [r4, #0]
 801163c:	1c5a      	adds	r2, r3, #1
 801163e:	6022      	str	r2, [r4, #0]
 8011640:	701f      	strb	r7, [r3, #0]
 8011642:	6963      	ldr	r3, [r4, #20]
 8011644:	4283      	cmp	r3, r0
 8011646:	d004      	beq.n	8011652 <__swbuf_r+0x76>
 8011648:	89a3      	ldrh	r3, [r4, #12]
 801164a:	07db      	lsls	r3, r3, #31
 801164c:	d5e1      	bpl.n	8011612 <__swbuf_r+0x36>
 801164e:	2d0a      	cmp	r5, #10
 8011650:	d1df      	bne.n	8011612 <__swbuf_r+0x36>
 8011652:	0021      	movs	r1, r4
 8011654:	0030      	movs	r0, r6
 8011656:	f001 f997 	bl	8012988 <_fflush_r>
 801165a:	2800      	cmp	r0, #0
 801165c:	d0d9      	beq.n	8011612 <__swbuf_r+0x36>
 801165e:	e7d6      	b.n	801160e <__swbuf_r+0x32>

08011660 <__swsetup_r>:
 8011660:	4b2d      	ldr	r3, [pc, #180]	@ (8011718 <__swsetup_r+0xb8>)
 8011662:	b570      	push	{r4, r5, r6, lr}
 8011664:	0005      	movs	r5, r0
 8011666:	6818      	ldr	r0, [r3, #0]
 8011668:	000c      	movs	r4, r1
 801166a:	2800      	cmp	r0, #0
 801166c:	d004      	beq.n	8011678 <__swsetup_r+0x18>
 801166e:	6a03      	ldr	r3, [r0, #32]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d101      	bne.n	8011678 <__swsetup_r+0x18>
 8011674:	f7ff fda8 	bl	80111c8 <__sinit>
 8011678:	230c      	movs	r3, #12
 801167a:	5ee2      	ldrsh	r2, [r4, r3]
 801167c:	0713      	lsls	r3, r2, #28
 801167e:	d423      	bmi.n	80116c8 <__swsetup_r+0x68>
 8011680:	06d3      	lsls	r3, r2, #27
 8011682:	d407      	bmi.n	8011694 <__swsetup_r+0x34>
 8011684:	2309      	movs	r3, #9
 8011686:	602b      	str	r3, [r5, #0]
 8011688:	2340      	movs	r3, #64	@ 0x40
 801168a:	2001      	movs	r0, #1
 801168c:	4313      	orrs	r3, r2
 801168e:	81a3      	strh	r3, [r4, #12]
 8011690:	4240      	negs	r0, r0
 8011692:	e03a      	b.n	801170a <__swsetup_r+0xaa>
 8011694:	0752      	lsls	r2, r2, #29
 8011696:	d513      	bpl.n	80116c0 <__swsetup_r+0x60>
 8011698:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801169a:	2900      	cmp	r1, #0
 801169c:	d008      	beq.n	80116b0 <__swsetup_r+0x50>
 801169e:	0023      	movs	r3, r4
 80116a0:	3344      	adds	r3, #68	@ 0x44
 80116a2:	4299      	cmp	r1, r3
 80116a4:	d002      	beq.n	80116ac <__swsetup_r+0x4c>
 80116a6:	0028      	movs	r0, r5
 80116a8:	f000 f8c4 	bl	8011834 <_free_r>
 80116ac:	2300      	movs	r3, #0
 80116ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80116b0:	2224      	movs	r2, #36	@ 0x24
 80116b2:	89a3      	ldrh	r3, [r4, #12]
 80116b4:	4393      	bics	r3, r2
 80116b6:	81a3      	strh	r3, [r4, #12]
 80116b8:	2300      	movs	r3, #0
 80116ba:	6063      	str	r3, [r4, #4]
 80116bc:	6923      	ldr	r3, [r4, #16]
 80116be:	6023      	str	r3, [r4, #0]
 80116c0:	2308      	movs	r3, #8
 80116c2:	89a2      	ldrh	r2, [r4, #12]
 80116c4:	4313      	orrs	r3, r2
 80116c6:	81a3      	strh	r3, [r4, #12]
 80116c8:	6923      	ldr	r3, [r4, #16]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d10b      	bne.n	80116e6 <__swsetup_r+0x86>
 80116ce:	21a0      	movs	r1, #160	@ 0xa0
 80116d0:	2280      	movs	r2, #128	@ 0x80
 80116d2:	89a3      	ldrh	r3, [r4, #12]
 80116d4:	0089      	lsls	r1, r1, #2
 80116d6:	0092      	lsls	r2, r2, #2
 80116d8:	400b      	ands	r3, r1
 80116da:	4293      	cmp	r3, r2
 80116dc:	d003      	beq.n	80116e6 <__swsetup_r+0x86>
 80116de:	0021      	movs	r1, r4
 80116e0:	0028      	movs	r0, r5
 80116e2:	f001 f9a7 	bl	8012a34 <__smakebuf_r>
 80116e6:	230c      	movs	r3, #12
 80116e8:	5ee2      	ldrsh	r2, [r4, r3]
 80116ea:	2101      	movs	r1, #1
 80116ec:	0013      	movs	r3, r2
 80116ee:	400b      	ands	r3, r1
 80116f0:	420a      	tst	r2, r1
 80116f2:	d00b      	beq.n	801170c <__swsetup_r+0xac>
 80116f4:	2300      	movs	r3, #0
 80116f6:	60a3      	str	r3, [r4, #8]
 80116f8:	6963      	ldr	r3, [r4, #20]
 80116fa:	425b      	negs	r3, r3
 80116fc:	61a3      	str	r3, [r4, #24]
 80116fe:	2000      	movs	r0, #0
 8011700:	6923      	ldr	r3, [r4, #16]
 8011702:	4283      	cmp	r3, r0
 8011704:	d101      	bne.n	801170a <__swsetup_r+0xaa>
 8011706:	0613      	lsls	r3, r2, #24
 8011708:	d4be      	bmi.n	8011688 <__swsetup_r+0x28>
 801170a:	bd70      	pop	{r4, r5, r6, pc}
 801170c:	0791      	lsls	r1, r2, #30
 801170e:	d400      	bmi.n	8011712 <__swsetup_r+0xb2>
 8011710:	6963      	ldr	r3, [r4, #20]
 8011712:	60a3      	str	r3, [r4, #8]
 8011714:	e7f3      	b.n	80116fe <__swsetup_r+0x9e>
 8011716:	46c0      	nop			@ (mov r8, r8)
 8011718:	200001a4 	.word	0x200001a4

0801171c <memset>:
 801171c:	0003      	movs	r3, r0
 801171e:	1882      	adds	r2, r0, r2
 8011720:	4293      	cmp	r3, r2
 8011722:	d100      	bne.n	8011726 <memset+0xa>
 8011724:	4770      	bx	lr
 8011726:	7019      	strb	r1, [r3, #0]
 8011728:	3301      	adds	r3, #1
 801172a:	e7f9      	b.n	8011720 <memset+0x4>

0801172c <_close_r>:
 801172c:	2300      	movs	r3, #0
 801172e:	b570      	push	{r4, r5, r6, lr}
 8011730:	4d06      	ldr	r5, [pc, #24]	@ (801174c <_close_r+0x20>)
 8011732:	0004      	movs	r4, r0
 8011734:	0008      	movs	r0, r1
 8011736:	602b      	str	r3, [r5, #0]
 8011738:	f7f2 fff0 	bl	800471c <_close>
 801173c:	1c43      	adds	r3, r0, #1
 801173e:	d103      	bne.n	8011748 <_close_r+0x1c>
 8011740:	682b      	ldr	r3, [r5, #0]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d000      	beq.n	8011748 <_close_r+0x1c>
 8011746:	6023      	str	r3, [r4, #0]
 8011748:	bd70      	pop	{r4, r5, r6, pc}
 801174a:	46c0      	nop			@ (mov r8, r8)
 801174c:	20000a1c 	.word	0x20000a1c

08011750 <_lseek_r>:
 8011750:	b570      	push	{r4, r5, r6, lr}
 8011752:	0004      	movs	r4, r0
 8011754:	0008      	movs	r0, r1
 8011756:	0011      	movs	r1, r2
 8011758:	001a      	movs	r2, r3
 801175a:	2300      	movs	r3, #0
 801175c:	4d05      	ldr	r5, [pc, #20]	@ (8011774 <_lseek_r+0x24>)
 801175e:	602b      	str	r3, [r5, #0]
 8011760:	f7f2 fffd 	bl	800475e <_lseek>
 8011764:	1c43      	adds	r3, r0, #1
 8011766:	d103      	bne.n	8011770 <_lseek_r+0x20>
 8011768:	682b      	ldr	r3, [r5, #0]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d000      	beq.n	8011770 <_lseek_r+0x20>
 801176e:	6023      	str	r3, [r4, #0]
 8011770:	bd70      	pop	{r4, r5, r6, pc}
 8011772:	46c0      	nop			@ (mov r8, r8)
 8011774:	20000a1c 	.word	0x20000a1c

08011778 <_read_r>:
 8011778:	b570      	push	{r4, r5, r6, lr}
 801177a:	0004      	movs	r4, r0
 801177c:	0008      	movs	r0, r1
 801177e:	0011      	movs	r1, r2
 8011780:	001a      	movs	r2, r3
 8011782:	2300      	movs	r3, #0
 8011784:	4d05      	ldr	r5, [pc, #20]	@ (801179c <_read_r+0x24>)
 8011786:	602b      	str	r3, [r5, #0]
 8011788:	f7f2 fc74 	bl	8004074 <_read>
 801178c:	1c43      	adds	r3, r0, #1
 801178e:	d103      	bne.n	8011798 <_read_r+0x20>
 8011790:	682b      	ldr	r3, [r5, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d000      	beq.n	8011798 <_read_r+0x20>
 8011796:	6023      	str	r3, [r4, #0]
 8011798:	bd70      	pop	{r4, r5, r6, pc}
 801179a:	46c0      	nop			@ (mov r8, r8)
 801179c:	20000a1c 	.word	0x20000a1c

080117a0 <_write_r>:
 80117a0:	b570      	push	{r4, r5, r6, lr}
 80117a2:	0004      	movs	r4, r0
 80117a4:	0008      	movs	r0, r1
 80117a6:	0011      	movs	r1, r2
 80117a8:	001a      	movs	r2, r3
 80117aa:	2300      	movs	r3, #0
 80117ac:	4d05      	ldr	r5, [pc, #20]	@ (80117c4 <_write_r+0x24>)
 80117ae:	602b      	str	r3, [r5, #0]
 80117b0:	f7f2 ff98 	bl	80046e4 <_write>
 80117b4:	1c43      	adds	r3, r0, #1
 80117b6:	d103      	bne.n	80117c0 <_write_r+0x20>
 80117b8:	682b      	ldr	r3, [r5, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d000      	beq.n	80117c0 <_write_r+0x20>
 80117be:	6023      	str	r3, [r4, #0]
 80117c0:	bd70      	pop	{r4, r5, r6, pc}
 80117c2:	46c0      	nop			@ (mov r8, r8)
 80117c4:	20000a1c 	.word	0x20000a1c

080117c8 <__errno>:
 80117c8:	4b01      	ldr	r3, [pc, #4]	@ (80117d0 <__errno+0x8>)
 80117ca:	6818      	ldr	r0, [r3, #0]
 80117cc:	4770      	bx	lr
 80117ce:	46c0      	nop			@ (mov r8, r8)
 80117d0:	200001a4 	.word	0x200001a4

080117d4 <__libc_init_array>:
 80117d4:	b570      	push	{r4, r5, r6, lr}
 80117d6:	2600      	movs	r6, #0
 80117d8:	4c0c      	ldr	r4, [pc, #48]	@ (801180c <__libc_init_array+0x38>)
 80117da:	4d0d      	ldr	r5, [pc, #52]	@ (8011810 <__libc_init_array+0x3c>)
 80117dc:	1b64      	subs	r4, r4, r5
 80117de:	10a4      	asrs	r4, r4, #2
 80117e0:	42a6      	cmp	r6, r4
 80117e2:	d109      	bne.n	80117f8 <__libc_init_array+0x24>
 80117e4:	2600      	movs	r6, #0
 80117e6:	f002 fbe1 	bl	8013fac <_init>
 80117ea:	4c0a      	ldr	r4, [pc, #40]	@ (8011814 <__libc_init_array+0x40>)
 80117ec:	4d0a      	ldr	r5, [pc, #40]	@ (8011818 <__libc_init_array+0x44>)
 80117ee:	1b64      	subs	r4, r4, r5
 80117f0:	10a4      	asrs	r4, r4, #2
 80117f2:	42a6      	cmp	r6, r4
 80117f4:	d105      	bne.n	8011802 <__libc_init_array+0x2e>
 80117f6:	bd70      	pop	{r4, r5, r6, pc}
 80117f8:	00b3      	lsls	r3, r6, #2
 80117fa:	58eb      	ldr	r3, [r5, r3]
 80117fc:	4798      	blx	r3
 80117fe:	3601      	adds	r6, #1
 8011800:	e7ee      	b.n	80117e0 <__libc_init_array+0xc>
 8011802:	00b3      	lsls	r3, r6, #2
 8011804:	58eb      	ldr	r3, [r5, r3]
 8011806:	4798      	blx	r3
 8011808:	3601      	adds	r6, #1
 801180a:	e7f2      	b.n	80117f2 <__libc_init_array+0x1e>
 801180c:	08014d40 	.word	0x08014d40
 8011810:	08014d40 	.word	0x08014d40
 8011814:	08014d44 	.word	0x08014d44
 8011818:	08014d40 	.word	0x08014d40

0801181c <__retarget_lock_init_recursive>:
 801181c:	4770      	bx	lr

0801181e <__retarget_lock_acquire_recursive>:
 801181e:	4770      	bx	lr

08011820 <__retarget_lock_release_recursive>:
 8011820:	4770      	bx	lr

08011822 <memcpy>:
 8011822:	2300      	movs	r3, #0
 8011824:	b510      	push	{r4, lr}
 8011826:	429a      	cmp	r2, r3
 8011828:	d100      	bne.n	801182c <memcpy+0xa>
 801182a:	bd10      	pop	{r4, pc}
 801182c:	5ccc      	ldrb	r4, [r1, r3]
 801182e:	54c4      	strb	r4, [r0, r3]
 8011830:	3301      	adds	r3, #1
 8011832:	e7f8      	b.n	8011826 <memcpy+0x4>

08011834 <_free_r>:
 8011834:	b570      	push	{r4, r5, r6, lr}
 8011836:	0005      	movs	r5, r0
 8011838:	1e0c      	subs	r4, r1, #0
 801183a:	d010      	beq.n	801185e <_free_r+0x2a>
 801183c:	3c04      	subs	r4, #4
 801183e:	6823      	ldr	r3, [r4, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	da00      	bge.n	8011846 <_free_r+0x12>
 8011844:	18e4      	adds	r4, r4, r3
 8011846:	0028      	movs	r0, r5
 8011848:	f000 f8ea 	bl	8011a20 <__malloc_lock>
 801184c:	4a1d      	ldr	r2, [pc, #116]	@ (80118c4 <_free_r+0x90>)
 801184e:	6813      	ldr	r3, [r2, #0]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d105      	bne.n	8011860 <_free_r+0x2c>
 8011854:	6063      	str	r3, [r4, #4]
 8011856:	6014      	str	r4, [r2, #0]
 8011858:	0028      	movs	r0, r5
 801185a:	f000 f8e9 	bl	8011a30 <__malloc_unlock>
 801185e:	bd70      	pop	{r4, r5, r6, pc}
 8011860:	42a3      	cmp	r3, r4
 8011862:	d908      	bls.n	8011876 <_free_r+0x42>
 8011864:	6820      	ldr	r0, [r4, #0]
 8011866:	1821      	adds	r1, r4, r0
 8011868:	428b      	cmp	r3, r1
 801186a:	d1f3      	bne.n	8011854 <_free_r+0x20>
 801186c:	6819      	ldr	r1, [r3, #0]
 801186e:	685b      	ldr	r3, [r3, #4]
 8011870:	1809      	adds	r1, r1, r0
 8011872:	6021      	str	r1, [r4, #0]
 8011874:	e7ee      	b.n	8011854 <_free_r+0x20>
 8011876:	001a      	movs	r2, r3
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d001      	beq.n	8011882 <_free_r+0x4e>
 801187e:	42a3      	cmp	r3, r4
 8011880:	d9f9      	bls.n	8011876 <_free_r+0x42>
 8011882:	6811      	ldr	r1, [r2, #0]
 8011884:	1850      	adds	r0, r2, r1
 8011886:	42a0      	cmp	r0, r4
 8011888:	d10b      	bne.n	80118a2 <_free_r+0x6e>
 801188a:	6820      	ldr	r0, [r4, #0]
 801188c:	1809      	adds	r1, r1, r0
 801188e:	1850      	adds	r0, r2, r1
 8011890:	6011      	str	r1, [r2, #0]
 8011892:	4283      	cmp	r3, r0
 8011894:	d1e0      	bne.n	8011858 <_free_r+0x24>
 8011896:	6818      	ldr	r0, [r3, #0]
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	1841      	adds	r1, r0, r1
 801189c:	6011      	str	r1, [r2, #0]
 801189e:	6053      	str	r3, [r2, #4]
 80118a0:	e7da      	b.n	8011858 <_free_r+0x24>
 80118a2:	42a0      	cmp	r0, r4
 80118a4:	d902      	bls.n	80118ac <_free_r+0x78>
 80118a6:	230c      	movs	r3, #12
 80118a8:	602b      	str	r3, [r5, #0]
 80118aa:	e7d5      	b.n	8011858 <_free_r+0x24>
 80118ac:	6820      	ldr	r0, [r4, #0]
 80118ae:	1821      	adds	r1, r4, r0
 80118b0:	428b      	cmp	r3, r1
 80118b2:	d103      	bne.n	80118bc <_free_r+0x88>
 80118b4:	6819      	ldr	r1, [r3, #0]
 80118b6:	685b      	ldr	r3, [r3, #4]
 80118b8:	1809      	adds	r1, r1, r0
 80118ba:	6021      	str	r1, [r4, #0]
 80118bc:	6063      	str	r3, [r4, #4]
 80118be:	6054      	str	r4, [r2, #4]
 80118c0:	e7ca      	b.n	8011858 <_free_r+0x24>
 80118c2:	46c0      	nop			@ (mov r8, r8)
 80118c4:	20000a28 	.word	0x20000a28

080118c8 <malloc>:
 80118c8:	b510      	push	{r4, lr}
 80118ca:	4b03      	ldr	r3, [pc, #12]	@ (80118d8 <malloc+0x10>)
 80118cc:	0001      	movs	r1, r0
 80118ce:	6818      	ldr	r0, [r3, #0]
 80118d0:	f000 f826 	bl	8011920 <_malloc_r>
 80118d4:	bd10      	pop	{r4, pc}
 80118d6:	46c0      	nop			@ (mov r8, r8)
 80118d8:	200001a4 	.word	0x200001a4

080118dc <sbrk_aligned>:
 80118dc:	b570      	push	{r4, r5, r6, lr}
 80118de:	4e0f      	ldr	r6, [pc, #60]	@ (801191c <sbrk_aligned+0x40>)
 80118e0:	000d      	movs	r5, r1
 80118e2:	6831      	ldr	r1, [r6, #0]
 80118e4:	0004      	movs	r4, r0
 80118e6:	2900      	cmp	r1, #0
 80118e8:	d102      	bne.n	80118f0 <sbrk_aligned+0x14>
 80118ea:	f001 fa9b 	bl	8012e24 <_sbrk_r>
 80118ee:	6030      	str	r0, [r6, #0]
 80118f0:	0029      	movs	r1, r5
 80118f2:	0020      	movs	r0, r4
 80118f4:	f001 fa96 	bl	8012e24 <_sbrk_r>
 80118f8:	1c43      	adds	r3, r0, #1
 80118fa:	d103      	bne.n	8011904 <sbrk_aligned+0x28>
 80118fc:	2501      	movs	r5, #1
 80118fe:	426d      	negs	r5, r5
 8011900:	0028      	movs	r0, r5
 8011902:	bd70      	pop	{r4, r5, r6, pc}
 8011904:	2303      	movs	r3, #3
 8011906:	1cc5      	adds	r5, r0, #3
 8011908:	439d      	bics	r5, r3
 801190a:	42a8      	cmp	r0, r5
 801190c:	d0f8      	beq.n	8011900 <sbrk_aligned+0x24>
 801190e:	1a29      	subs	r1, r5, r0
 8011910:	0020      	movs	r0, r4
 8011912:	f001 fa87 	bl	8012e24 <_sbrk_r>
 8011916:	3001      	adds	r0, #1
 8011918:	d1f2      	bne.n	8011900 <sbrk_aligned+0x24>
 801191a:	e7ef      	b.n	80118fc <sbrk_aligned+0x20>
 801191c:	20000a24 	.word	0x20000a24

08011920 <_malloc_r>:
 8011920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011922:	2203      	movs	r2, #3
 8011924:	1ccb      	adds	r3, r1, #3
 8011926:	4393      	bics	r3, r2
 8011928:	3308      	adds	r3, #8
 801192a:	0005      	movs	r5, r0
 801192c:	001f      	movs	r7, r3
 801192e:	2b0c      	cmp	r3, #12
 8011930:	d234      	bcs.n	801199c <_malloc_r+0x7c>
 8011932:	270c      	movs	r7, #12
 8011934:	42b9      	cmp	r1, r7
 8011936:	d833      	bhi.n	80119a0 <_malloc_r+0x80>
 8011938:	0028      	movs	r0, r5
 801193a:	f000 f871 	bl	8011a20 <__malloc_lock>
 801193e:	4e37      	ldr	r6, [pc, #220]	@ (8011a1c <_malloc_r+0xfc>)
 8011940:	6833      	ldr	r3, [r6, #0]
 8011942:	001c      	movs	r4, r3
 8011944:	2c00      	cmp	r4, #0
 8011946:	d12f      	bne.n	80119a8 <_malloc_r+0x88>
 8011948:	0039      	movs	r1, r7
 801194a:	0028      	movs	r0, r5
 801194c:	f7ff ffc6 	bl	80118dc <sbrk_aligned>
 8011950:	0004      	movs	r4, r0
 8011952:	1c43      	adds	r3, r0, #1
 8011954:	d15f      	bne.n	8011a16 <_malloc_r+0xf6>
 8011956:	6834      	ldr	r4, [r6, #0]
 8011958:	9400      	str	r4, [sp, #0]
 801195a:	9b00      	ldr	r3, [sp, #0]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d14a      	bne.n	80119f6 <_malloc_r+0xd6>
 8011960:	2c00      	cmp	r4, #0
 8011962:	d052      	beq.n	8011a0a <_malloc_r+0xea>
 8011964:	6823      	ldr	r3, [r4, #0]
 8011966:	0028      	movs	r0, r5
 8011968:	18e3      	adds	r3, r4, r3
 801196a:	9900      	ldr	r1, [sp, #0]
 801196c:	9301      	str	r3, [sp, #4]
 801196e:	f001 fa59 	bl	8012e24 <_sbrk_r>
 8011972:	9b01      	ldr	r3, [sp, #4]
 8011974:	4283      	cmp	r3, r0
 8011976:	d148      	bne.n	8011a0a <_malloc_r+0xea>
 8011978:	6823      	ldr	r3, [r4, #0]
 801197a:	0028      	movs	r0, r5
 801197c:	1aff      	subs	r7, r7, r3
 801197e:	0039      	movs	r1, r7
 8011980:	f7ff ffac 	bl	80118dc <sbrk_aligned>
 8011984:	3001      	adds	r0, #1
 8011986:	d040      	beq.n	8011a0a <_malloc_r+0xea>
 8011988:	6823      	ldr	r3, [r4, #0]
 801198a:	19db      	adds	r3, r3, r7
 801198c:	6023      	str	r3, [r4, #0]
 801198e:	6833      	ldr	r3, [r6, #0]
 8011990:	685a      	ldr	r2, [r3, #4]
 8011992:	2a00      	cmp	r2, #0
 8011994:	d133      	bne.n	80119fe <_malloc_r+0xde>
 8011996:	9b00      	ldr	r3, [sp, #0]
 8011998:	6033      	str	r3, [r6, #0]
 801199a:	e019      	b.n	80119d0 <_malloc_r+0xb0>
 801199c:	2b00      	cmp	r3, #0
 801199e:	dac9      	bge.n	8011934 <_malloc_r+0x14>
 80119a0:	230c      	movs	r3, #12
 80119a2:	602b      	str	r3, [r5, #0]
 80119a4:	2000      	movs	r0, #0
 80119a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80119a8:	6821      	ldr	r1, [r4, #0]
 80119aa:	1bc9      	subs	r1, r1, r7
 80119ac:	d420      	bmi.n	80119f0 <_malloc_r+0xd0>
 80119ae:	290b      	cmp	r1, #11
 80119b0:	d90a      	bls.n	80119c8 <_malloc_r+0xa8>
 80119b2:	19e2      	adds	r2, r4, r7
 80119b4:	6027      	str	r7, [r4, #0]
 80119b6:	42a3      	cmp	r3, r4
 80119b8:	d104      	bne.n	80119c4 <_malloc_r+0xa4>
 80119ba:	6032      	str	r2, [r6, #0]
 80119bc:	6863      	ldr	r3, [r4, #4]
 80119be:	6011      	str	r1, [r2, #0]
 80119c0:	6053      	str	r3, [r2, #4]
 80119c2:	e005      	b.n	80119d0 <_malloc_r+0xb0>
 80119c4:	605a      	str	r2, [r3, #4]
 80119c6:	e7f9      	b.n	80119bc <_malloc_r+0x9c>
 80119c8:	6862      	ldr	r2, [r4, #4]
 80119ca:	42a3      	cmp	r3, r4
 80119cc:	d10e      	bne.n	80119ec <_malloc_r+0xcc>
 80119ce:	6032      	str	r2, [r6, #0]
 80119d0:	0028      	movs	r0, r5
 80119d2:	f000 f82d 	bl	8011a30 <__malloc_unlock>
 80119d6:	0020      	movs	r0, r4
 80119d8:	2207      	movs	r2, #7
 80119da:	300b      	adds	r0, #11
 80119dc:	1d23      	adds	r3, r4, #4
 80119de:	4390      	bics	r0, r2
 80119e0:	1ac2      	subs	r2, r0, r3
 80119e2:	4298      	cmp	r0, r3
 80119e4:	d0df      	beq.n	80119a6 <_malloc_r+0x86>
 80119e6:	1a1b      	subs	r3, r3, r0
 80119e8:	50a3      	str	r3, [r4, r2]
 80119ea:	e7dc      	b.n	80119a6 <_malloc_r+0x86>
 80119ec:	605a      	str	r2, [r3, #4]
 80119ee:	e7ef      	b.n	80119d0 <_malloc_r+0xb0>
 80119f0:	0023      	movs	r3, r4
 80119f2:	6864      	ldr	r4, [r4, #4]
 80119f4:	e7a6      	b.n	8011944 <_malloc_r+0x24>
 80119f6:	9c00      	ldr	r4, [sp, #0]
 80119f8:	6863      	ldr	r3, [r4, #4]
 80119fa:	9300      	str	r3, [sp, #0]
 80119fc:	e7ad      	b.n	801195a <_malloc_r+0x3a>
 80119fe:	001a      	movs	r2, r3
 8011a00:	685b      	ldr	r3, [r3, #4]
 8011a02:	42a3      	cmp	r3, r4
 8011a04:	d1fb      	bne.n	80119fe <_malloc_r+0xde>
 8011a06:	2300      	movs	r3, #0
 8011a08:	e7da      	b.n	80119c0 <_malloc_r+0xa0>
 8011a0a:	230c      	movs	r3, #12
 8011a0c:	0028      	movs	r0, r5
 8011a0e:	602b      	str	r3, [r5, #0]
 8011a10:	f000 f80e 	bl	8011a30 <__malloc_unlock>
 8011a14:	e7c6      	b.n	80119a4 <_malloc_r+0x84>
 8011a16:	6007      	str	r7, [r0, #0]
 8011a18:	e7da      	b.n	80119d0 <_malloc_r+0xb0>
 8011a1a:	46c0      	nop			@ (mov r8, r8)
 8011a1c:	20000a28 	.word	0x20000a28

08011a20 <__malloc_lock>:
 8011a20:	b510      	push	{r4, lr}
 8011a22:	4802      	ldr	r0, [pc, #8]	@ (8011a2c <__malloc_lock+0xc>)
 8011a24:	f7ff fefb 	bl	801181e <__retarget_lock_acquire_recursive>
 8011a28:	bd10      	pop	{r4, pc}
 8011a2a:	46c0      	nop			@ (mov r8, r8)
 8011a2c:	20000a20 	.word	0x20000a20

08011a30 <__malloc_unlock>:
 8011a30:	b510      	push	{r4, lr}
 8011a32:	4802      	ldr	r0, [pc, #8]	@ (8011a3c <__malloc_unlock+0xc>)
 8011a34:	f7ff fef4 	bl	8011820 <__retarget_lock_release_recursive>
 8011a38:	bd10      	pop	{r4, pc}
 8011a3a:	46c0      	nop			@ (mov r8, r8)
 8011a3c:	20000a20 	.word	0x20000a20

08011a40 <__ssputs_r>:
 8011a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a42:	688e      	ldr	r6, [r1, #8]
 8011a44:	b085      	sub	sp, #20
 8011a46:	001f      	movs	r7, r3
 8011a48:	000c      	movs	r4, r1
 8011a4a:	680b      	ldr	r3, [r1, #0]
 8011a4c:	9002      	str	r0, [sp, #8]
 8011a4e:	9203      	str	r2, [sp, #12]
 8011a50:	42be      	cmp	r6, r7
 8011a52:	d830      	bhi.n	8011ab6 <__ssputs_r+0x76>
 8011a54:	210c      	movs	r1, #12
 8011a56:	5e62      	ldrsh	r2, [r4, r1]
 8011a58:	2190      	movs	r1, #144	@ 0x90
 8011a5a:	00c9      	lsls	r1, r1, #3
 8011a5c:	420a      	tst	r2, r1
 8011a5e:	d028      	beq.n	8011ab2 <__ssputs_r+0x72>
 8011a60:	2003      	movs	r0, #3
 8011a62:	6921      	ldr	r1, [r4, #16]
 8011a64:	1a5b      	subs	r3, r3, r1
 8011a66:	9301      	str	r3, [sp, #4]
 8011a68:	6963      	ldr	r3, [r4, #20]
 8011a6a:	4343      	muls	r3, r0
 8011a6c:	9801      	ldr	r0, [sp, #4]
 8011a6e:	0fdd      	lsrs	r5, r3, #31
 8011a70:	18ed      	adds	r5, r5, r3
 8011a72:	1c7b      	adds	r3, r7, #1
 8011a74:	181b      	adds	r3, r3, r0
 8011a76:	106d      	asrs	r5, r5, #1
 8011a78:	42ab      	cmp	r3, r5
 8011a7a:	d900      	bls.n	8011a7e <__ssputs_r+0x3e>
 8011a7c:	001d      	movs	r5, r3
 8011a7e:	0552      	lsls	r2, r2, #21
 8011a80:	d528      	bpl.n	8011ad4 <__ssputs_r+0x94>
 8011a82:	0029      	movs	r1, r5
 8011a84:	9802      	ldr	r0, [sp, #8]
 8011a86:	f7ff ff4b 	bl	8011920 <_malloc_r>
 8011a8a:	1e06      	subs	r6, r0, #0
 8011a8c:	d02c      	beq.n	8011ae8 <__ssputs_r+0xa8>
 8011a8e:	9a01      	ldr	r2, [sp, #4]
 8011a90:	6921      	ldr	r1, [r4, #16]
 8011a92:	f7ff fec6 	bl	8011822 <memcpy>
 8011a96:	89a2      	ldrh	r2, [r4, #12]
 8011a98:	4b18      	ldr	r3, [pc, #96]	@ (8011afc <__ssputs_r+0xbc>)
 8011a9a:	401a      	ands	r2, r3
 8011a9c:	2380      	movs	r3, #128	@ 0x80
 8011a9e:	4313      	orrs	r3, r2
 8011aa0:	81a3      	strh	r3, [r4, #12]
 8011aa2:	9b01      	ldr	r3, [sp, #4]
 8011aa4:	6126      	str	r6, [r4, #16]
 8011aa6:	18f6      	adds	r6, r6, r3
 8011aa8:	6026      	str	r6, [r4, #0]
 8011aaa:	003e      	movs	r6, r7
 8011aac:	6165      	str	r5, [r4, #20]
 8011aae:	1aed      	subs	r5, r5, r3
 8011ab0:	60a5      	str	r5, [r4, #8]
 8011ab2:	42be      	cmp	r6, r7
 8011ab4:	d900      	bls.n	8011ab8 <__ssputs_r+0x78>
 8011ab6:	003e      	movs	r6, r7
 8011ab8:	0032      	movs	r2, r6
 8011aba:	9903      	ldr	r1, [sp, #12]
 8011abc:	6820      	ldr	r0, [r4, #0]
 8011abe:	f001 f97a 	bl	8012db6 <memmove>
 8011ac2:	2000      	movs	r0, #0
 8011ac4:	68a3      	ldr	r3, [r4, #8]
 8011ac6:	1b9b      	subs	r3, r3, r6
 8011ac8:	60a3      	str	r3, [r4, #8]
 8011aca:	6823      	ldr	r3, [r4, #0]
 8011acc:	199b      	adds	r3, r3, r6
 8011ace:	6023      	str	r3, [r4, #0]
 8011ad0:	b005      	add	sp, #20
 8011ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ad4:	002a      	movs	r2, r5
 8011ad6:	9802      	ldr	r0, [sp, #8]
 8011ad8:	f001 f9c1 	bl	8012e5e <_realloc_r>
 8011adc:	1e06      	subs	r6, r0, #0
 8011ade:	d1e0      	bne.n	8011aa2 <__ssputs_r+0x62>
 8011ae0:	6921      	ldr	r1, [r4, #16]
 8011ae2:	9802      	ldr	r0, [sp, #8]
 8011ae4:	f7ff fea6 	bl	8011834 <_free_r>
 8011ae8:	230c      	movs	r3, #12
 8011aea:	2001      	movs	r0, #1
 8011aec:	9a02      	ldr	r2, [sp, #8]
 8011aee:	4240      	negs	r0, r0
 8011af0:	6013      	str	r3, [r2, #0]
 8011af2:	89a2      	ldrh	r2, [r4, #12]
 8011af4:	3334      	adds	r3, #52	@ 0x34
 8011af6:	4313      	orrs	r3, r2
 8011af8:	81a3      	strh	r3, [r4, #12]
 8011afa:	e7e9      	b.n	8011ad0 <__ssputs_r+0x90>
 8011afc:	fffffb7f 	.word	0xfffffb7f

08011b00 <_svfiprintf_r>:
 8011b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b02:	b0a1      	sub	sp, #132	@ 0x84
 8011b04:	9003      	str	r0, [sp, #12]
 8011b06:	001d      	movs	r5, r3
 8011b08:	898b      	ldrh	r3, [r1, #12]
 8011b0a:	000f      	movs	r7, r1
 8011b0c:	0016      	movs	r6, r2
 8011b0e:	061b      	lsls	r3, r3, #24
 8011b10:	d511      	bpl.n	8011b36 <_svfiprintf_r+0x36>
 8011b12:	690b      	ldr	r3, [r1, #16]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d10e      	bne.n	8011b36 <_svfiprintf_r+0x36>
 8011b18:	2140      	movs	r1, #64	@ 0x40
 8011b1a:	f7ff ff01 	bl	8011920 <_malloc_r>
 8011b1e:	6038      	str	r0, [r7, #0]
 8011b20:	6138      	str	r0, [r7, #16]
 8011b22:	2800      	cmp	r0, #0
 8011b24:	d105      	bne.n	8011b32 <_svfiprintf_r+0x32>
 8011b26:	230c      	movs	r3, #12
 8011b28:	9a03      	ldr	r2, [sp, #12]
 8011b2a:	6013      	str	r3, [r2, #0]
 8011b2c:	2001      	movs	r0, #1
 8011b2e:	4240      	negs	r0, r0
 8011b30:	e0cf      	b.n	8011cd2 <_svfiprintf_r+0x1d2>
 8011b32:	2340      	movs	r3, #64	@ 0x40
 8011b34:	617b      	str	r3, [r7, #20]
 8011b36:	2300      	movs	r3, #0
 8011b38:	ac08      	add	r4, sp, #32
 8011b3a:	6163      	str	r3, [r4, #20]
 8011b3c:	3320      	adds	r3, #32
 8011b3e:	7663      	strb	r3, [r4, #25]
 8011b40:	3310      	adds	r3, #16
 8011b42:	76a3      	strb	r3, [r4, #26]
 8011b44:	9507      	str	r5, [sp, #28]
 8011b46:	0035      	movs	r5, r6
 8011b48:	782b      	ldrb	r3, [r5, #0]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d001      	beq.n	8011b52 <_svfiprintf_r+0x52>
 8011b4e:	2b25      	cmp	r3, #37	@ 0x25
 8011b50:	d148      	bne.n	8011be4 <_svfiprintf_r+0xe4>
 8011b52:	1bab      	subs	r3, r5, r6
 8011b54:	9305      	str	r3, [sp, #20]
 8011b56:	42b5      	cmp	r5, r6
 8011b58:	d00b      	beq.n	8011b72 <_svfiprintf_r+0x72>
 8011b5a:	0032      	movs	r2, r6
 8011b5c:	0039      	movs	r1, r7
 8011b5e:	9803      	ldr	r0, [sp, #12]
 8011b60:	f7ff ff6e 	bl	8011a40 <__ssputs_r>
 8011b64:	3001      	adds	r0, #1
 8011b66:	d100      	bne.n	8011b6a <_svfiprintf_r+0x6a>
 8011b68:	e0ae      	b.n	8011cc8 <_svfiprintf_r+0x1c8>
 8011b6a:	6963      	ldr	r3, [r4, #20]
 8011b6c:	9a05      	ldr	r2, [sp, #20]
 8011b6e:	189b      	adds	r3, r3, r2
 8011b70:	6163      	str	r3, [r4, #20]
 8011b72:	782b      	ldrb	r3, [r5, #0]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d100      	bne.n	8011b7a <_svfiprintf_r+0x7a>
 8011b78:	e0a6      	b.n	8011cc8 <_svfiprintf_r+0x1c8>
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	4252      	negs	r2, r2
 8011b80:	6062      	str	r2, [r4, #4]
 8011b82:	a904      	add	r1, sp, #16
 8011b84:	3254      	adds	r2, #84	@ 0x54
 8011b86:	1852      	adds	r2, r2, r1
 8011b88:	1c6e      	adds	r6, r5, #1
 8011b8a:	6023      	str	r3, [r4, #0]
 8011b8c:	60e3      	str	r3, [r4, #12]
 8011b8e:	60a3      	str	r3, [r4, #8]
 8011b90:	7013      	strb	r3, [r2, #0]
 8011b92:	65a3      	str	r3, [r4, #88]	@ 0x58
 8011b94:	4b54      	ldr	r3, [pc, #336]	@ (8011ce8 <_svfiprintf_r+0x1e8>)
 8011b96:	2205      	movs	r2, #5
 8011b98:	0018      	movs	r0, r3
 8011b9a:	7831      	ldrb	r1, [r6, #0]
 8011b9c:	9305      	str	r3, [sp, #20]
 8011b9e:	f001 f953 	bl	8012e48 <memchr>
 8011ba2:	1c75      	adds	r5, r6, #1
 8011ba4:	2800      	cmp	r0, #0
 8011ba6:	d11f      	bne.n	8011be8 <_svfiprintf_r+0xe8>
 8011ba8:	6822      	ldr	r2, [r4, #0]
 8011baa:	06d3      	lsls	r3, r2, #27
 8011bac:	d504      	bpl.n	8011bb8 <_svfiprintf_r+0xb8>
 8011bae:	2353      	movs	r3, #83	@ 0x53
 8011bb0:	a904      	add	r1, sp, #16
 8011bb2:	185b      	adds	r3, r3, r1
 8011bb4:	2120      	movs	r1, #32
 8011bb6:	7019      	strb	r1, [r3, #0]
 8011bb8:	0713      	lsls	r3, r2, #28
 8011bba:	d504      	bpl.n	8011bc6 <_svfiprintf_r+0xc6>
 8011bbc:	2353      	movs	r3, #83	@ 0x53
 8011bbe:	a904      	add	r1, sp, #16
 8011bc0:	185b      	adds	r3, r3, r1
 8011bc2:	212b      	movs	r1, #43	@ 0x2b
 8011bc4:	7019      	strb	r1, [r3, #0]
 8011bc6:	7833      	ldrb	r3, [r6, #0]
 8011bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bca:	d016      	beq.n	8011bfa <_svfiprintf_r+0xfa>
 8011bcc:	0035      	movs	r5, r6
 8011bce:	2100      	movs	r1, #0
 8011bd0:	200a      	movs	r0, #10
 8011bd2:	68e3      	ldr	r3, [r4, #12]
 8011bd4:	782a      	ldrb	r2, [r5, #0]
 8011bd6:	1c6e      	adds	r6, r5, #1
 8011bd8:	3a30      	subs	r2, #48	@ 0x30
 8011bda:	2a09      	cmp	r2, #9
 8011bdc:	d950      	bls.n	8011c80 <_svfiprintf_r+0x180>
 8011bde:	2900      	cmp	r1, #0
 8011be0:	d111      	bne.n	8011c06 <_svfiprintf_r+0x106>
 8011be2:	e017      	b.n	8011c14 <_svfiprintf_r+0x114>
 8011be4:	3501      	adds	r5, #1
 8011be6:	e7af      	b.n	8011b48 <_svfiprintf_r+0x48>
 8011be8:	9b05      	ldr	r3, [sp, #20]
 8011bea:	6822      	ldr	r2, [r4, #0]
 8011bec:	1ac0      	subs	r0, r0, r3
 8011bee:	2301      	movs	r3, #1
 8011bf0:	4083      	lsls	r3, r0
 8011bf2:	4313      	orrs	r3, r2
 8011bf4:	002e      	movs	r6, r5
 8011bf6:	6023      	str	r3, [r4, #0]
 8011bf8:	e7cc      	b.n	8011b94 <_svfiprintf_r+0x94>
 8011bfa:	9b07      	ldr	r3, [sp, #28]
 8011bfc:	1d19      	adds	r1, r3, #4
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	9107      	str	r1, [sp, #28]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	db01      	blt.n	8011c0a <_svfiprintf_r+0x10a>
 8011c06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c08:	e004      	b.n	8011c14 <_svfiprintf_r+0x114>
 8011c0a:	425b      	negs	r3, r3
 8011c0c:	60e3      	str	r3, [r4, #12]
 8011c0e:	2302      	movs	r3, #2
 8011c10:	4313      	orrs	r3, r2
 8011c12:	6023      	str	r3, [r4, #0]
 8011c14:	782b      	ldrb	r3, [r5, #0]
 8011c16:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c18:	d10c      	bne.n	8011c34 <_svfiprintf_r+0x134>
 8011c1a:	786b      	ldrb	r3, [r5, #1]
 8011c1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c1e:	d134      	bne.n	8011c8a <_svfiprintf_r+0x18a>
 8011c20:	9b07      	ldr	r3, [sp, #28]
 8011c22:	3502      	adds	r5, #2
 8011c24:	1d1a      	adds	r2, r3, #4
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	9207      	str	r2, [sp, #28]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	da01      	bge.n	8011c32 <_svfiprintf_r+0x132>
 8011c2e:	2301      	movs	r3, #1
 8011c30:	425b      	negs	r3, r3
 8011c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c34:	4e2d      	ldr	r6, [pc, #180]	@ (8011cec <_svfiprintf_r+0x1ec>)
 8011c36:	2203      	movs	r2, #3
 8011c38:	0030      	movs	r0, r6
 8011c3a:	7829      	ldrb	r1, [r5, #0]
 8011c3c:	f001 f904 	bl	8012e48 <memchr>
 8011c40:	2800      	cmp	r0, #0
 8011c42:	d006      	beq.n	8011c52 <_svfiprintf_r+0x152>
 8011c44:	2340      	movs	r3, #64	@ 0x40
 8011c46:	1b80      	subs	r0, r0, r6
 8011c48:	4083      	lsls	r3, r0
 8011c4a:	6822      	ldr	r2, [r4, #0]
 8011c4c:	3501      	adds	r5, #1
 8011c4e:	4313      	orrs	r3, r2
 8011c50:	6023      	str	r3, [r4, #0]
 8011c52:	7829      	ldrb	r1, [r5, #0]
 8011c54:	2206      	movs	r2, #6
 8011c56:	4826      	ldr	r0, [pc, #152]	@ (8011cf0 <_svfiprintf_r+0x1f0>)
 8011c58:	1c6e      	adds	r6, r5, #1
 8011c5a:	7621      	strb	r1, [r4, #24]
 8011c5c:	f001 f8f4 	bl	8012e48 <memchr>
 8011c60:	2800      	cmp	r0, #0
 8011c62:	d038      	beq.n	8011cd6 <_svfiprintf_r+0x1d6>
 8011c64:	4b23      	ldr	r3, [pc, #140]	@ (8011cf4 <_svfiprintf_r+0x1f4>)
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d122      	bne.n	8011cb0 <_svfiprintf_r+0x1b0>
 8011c6a:	2207      	movs	r2, #7
 8011c6c:	9b07      	ldr	r3, [sp, #28]
 8011c6e:	3307      	adds	r3, #7
 8011c70:	4393      	bics	r3, r2
 8011c72:	3308      	adds	r3, #8
 8011c74:	9307      	str	r3, [sp, #28]
 8011c76:	6963      	ldr	r3, [r4, #20]
 8011c78:	9a04      	ldr	r2, [sp, #16]
 8011c7a:	189b      	adds	r3, r3, r2
 8011c7c:	6163      	str	r3, [r4, #20]
 8011c7e:	e762      	b.n	8011b46 <_svfiprintf_r+0x46>
 8011c80:	4343      	muls	r3, r0
 8011c82:	0035      	movs	r5, r6
 8011c84:	2101      	movs	r1, #1
 8011c86:	189b      	adds	r3, r3, r2
 8011c88:	e7a4      	b.n	8011bd4 <_svfiprintf_r+0xd4>
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	200a      	movs	r0, #10
 8011c8e:	0019      	movs	r1, r3
 8011c90:	3501      	adds	r5, #1
 8011c92:	6063      	str	r3, [r4, #4]
 8011c94:	782a      	ldrb	r2, [r5, #0]
 8011c96:	1c6e      	adds	r6, r5, #1
 8011c98:	3a30      	subs	r2, #48	@ 0x30
 8011c9a:	2a09      	cmp	r2, #9
 8011c9c:	d903      	bls.n	8011ca6 <_svfiprintf_r+0x1a6>
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d0c8      	beq.n	8011c34 <_svfiprintf_r+0x134>
 8011ca2:	9109      	str	r1, [sp, #36]	@ 0x24
 8011ca4:	e7c6      	b.n	8011c34 <_svfiprintf_r+0x134>
 8011ca6:	4341      	muls	r1, r0
 8011ca8:	0035      	movs	r5, r6
 8011caa:	2301      	movs	r3, #1
 8011cac:	1889      	adds	r1, r1, r2
 8011cae:	e7f1      	b.n	8011c94 <_svfiprintf_r+0x194>
 8011cb0:	aa07      	add	r2, sp, #28
 8011cb2:	9200      	str	r2, [sp, #0]
 8011cb4:	0021      	movs	r1, r4
 8011cb6:	003a      	movs	r2, r7
 8011cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8011cf8 <_svfiprintf_r+0x1f8>)
 8011cba:	9803      	ldr	r0, [sp, #12]
 8011cbc:	e000      	b.n	8011cc0 <_svfiprintf_r+0x1c0>
 8011cbe:	bf00      	nop
 8011cc0:	9004      	str	r0, [sp, #16]
 8011cc2:	9b04      	ldr	r3, [sp, #16]
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	d1d6      	bne.n	8011c76 <_svfiprintf_r+0x176>
 8011cc8:	89bb      	ldrh	r3, [r7, #12]
 8011cca:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8011ccc:	065b      	lsls	r3, r3, #25
 8011cce:	d500      	bpl.n	8011cd2 <_svfiprintf_r+0x1d2>
 8011cd0:	e72c      	b.n	8011b2c <_svfiprintf_r+0x2c>
 8011cd2:	b021      	add	sp, #132	@ 0x84
 8011cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cd6:	aa07      	add	r2, sp, #28
 8011cd8:	9200      	str	r2, [sp, #0]
 8011cda:	0021      	movs	r1, r4
 8011cdc:	003a      	movs	r2, r7
 8011cde:	4b06      	ldr	r3, [pc, #24]	@ (8011cf8 <_svfiprintf_r+0x1f8>)
 8011ce0:	9803      	ldr	r0, [sp, #12]
 8011ce2:	f000 f9bf 	bl	8012064 <_printf_i>
 8011ce6:	e7eb      	b.n	8011cc0 <_svfiprintf_r+0x1c0>
 8011ce8:	08014bb4 	.word	0x08014bb4
 8011cec:	08014bba 	.word	0x08014bba
 8011cf0:	08014bbe 	.word	0x08014bbe
 8011cf4:	00000000 	.word	0x00000000
 8011cf8:	08011a41 	.word	0x08011a41

08011cfc <__sfputc_r>:
 8011cfc:	6893      	ldr	r3, [r2, #8]
 8011cfe:	b510      	push	{r4, lr}
 8011d00:	3b01      	subs	r3, #1
 8011d02:	6093      	str	r3, [r2, #8]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	da04      	bge.n	8011d12 <__sfputc_r+0x16>
 8011d08:	6994      	ldr	r4, [r2, #24]
 8011d0a:	42a3      	cmp	r3, r4
 8011d0c:	db07      	blt.n	8011d1e <__sfputc_r+0x22>
 8011d0e:	290a      	cmp	r1, #10
 8011d10:	d005      	beq.n	8011d1e <__sfputc_r+0x22>
 8011d12:	6813      	ldr	r3, [r2, #0]
 8011d14:	1c58      	adds	r0, r3, #1
 8011d16:	6010      	str	r0, [r2, #0]
 8011d18:	7019      	strb	r1, [r3, #0]
 8011d1a:	0008      	movs	r0, r1
 8011d1c:	bd10      	pop	{r4, pc}
 8011d1e:	f7ff fc5d 	bl	80115dc <__swbuf_r>
 8011d22:	0001      	movs	r1, r0
 8011d24:	e7f9      	b.n	8011d1a <__sfputc_r+0x1e>

08011d26 <__sfputs_r>:
 8011d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d28:	0006      	movs	r6, r0
 8011d2a:	000f      	movs	r7, r1
 8011d2c:	0014      	movs	r4, r2
 8011d2e:	18d5      	adds	r5, r2, r3
 8011d30:	42ac      	cmp	r4, r5
 8011d32:	d101      	bne.n	8011d38 <__sfputs_r+0x12>
 8011d34:	2000      	movs	r0, #0
 8011d36:	e007      	b.n	8011d48 <__sfputs_r+0x22>
 8011d38:	7821      	ldrb	r1, [r4, #0]
 8011d3a:	003a      	movs	r2, r7
 8011d3c:	0030      	movs	r0, r6
 8011d3e:	f7ff ffdd 	bl	8011cfc <__sfputc_r>
 8011d42:	3401      	adds	r4, #1
 8011d44:	1c43      	adds	r3, r0, #1
 8011d46:	d1f3      	bne.n	8011d30 <__sfputs_r+0xa>
 8011d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d4c <_vfiprintf_r>:
 8011d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d4e:	b0a1      	sub	sp, #132	@ 0x84
 8011d50:	000f      	movs	r7, r1
 8011d52:	0015      	movs	r5, r2
 8011d54:	001e      	movs	r6, r3
 8011d56:	9003      	str	r0, [sp, #12]
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	d004      	beq.n	8011d66 <_vfiprintf_r+0x1a>
 8011d5c:	6a03      	ldr	r3, [r0, #32]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d101      	bne.n	8011d66 <_vfiprintf_r+0x1a>
 8011d62:	f7ff fa31 	bl	80111c8 <__sinit>
 8011d66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011d68:	07db      	lsls	r3, r3, #31
 8011d6a:	d405      	bmi.n	8011d78 <_vfiprintf_r+0x2c>
 8011d6c:	89bb      	ldrh	r3, [r7, #12]
 8011d6e:	059b      	lsls	r3, r3, #22
 8011d70:	d402      	bmi.n	8011d78 <_vfiprintf_r+0x2c>
 8011d72:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011d74:	f7ff fd53 	bl	801181e <__retarget_lock_acquire_recursive>
 8011d78:	89bb      	ldrh	r3, [r7, #12]
 8011d7a:	071b      	lsls	r3, r3, #28
 8011d7c:	d502      	bpl.n	8011d84 <_vfiprintf_r+0x38>
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d113      	bne.n	8011dac <_vfiprintf_r+0x60>
 8011d84:	0039      	movs	r1, r7
 8011d86:	9803      	ldr	r0, [sp, #12]
 8011d88:	f7ff fc6a 	bl	8011660 <__swsetup_r>
 8011d8c:	2800      	cmp	r0, #0
 8011d8e:	d00d      	beq.n	8011dac <_vfiprintf_r+0x60>
 8011d90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011d92:	07db      	lsls	r3, r3, #31
 8011d94:	d503      	bpl.n	8011d9e <_vfiprintf_r+0x52>
 8011d96:	2001      	movs	r0, #1
 8011d98:	4240      	negs	r0, r0
 8011d9a:	b021      	add	sp, #132	@ 0x84
 8011d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d9e:	89bb      	ldrh	r3, [r7, #12]
 8011da0:	059b      	lsls	r3, r3, #22
 8011da2:	d4f8      	bmi.n	8011d96 <_vfiprintf_r+0x4a>
 8011da4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011da6:	f7ff fd3b 	bl	8011820 <__retarget_lock_release_recursive>
 8011daa:	e7f4      	b.n	8011d96 <_vfiprintf_r+0x4a>
 8011dac:	2300      	movs	r3, #0
 8011dae:	ac08      	add	r4, sp, #32
 8011db0:	6163      	str	r3, [r4, #20]
 8011db2:	3320      	adds	r3, #32
 8011db4:	7663      	strb	r3, [r4, #25]
 8011db6:	3310      	adds	r3, #16
 8011db8:	76a3      	strb	r3, [r4, #26]
 8011dba:	9607      	str	r6, [sp, #28]
 8011dbc:	002e      	movs	r6, r5
 8011dbe:	7833      	ldrb	r3, [r6, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d001      	beq.n	8011dc8 <_vfiprintf_r+0x7c>
 8011dc4:	2b25      	cmp	r3, #37	@ 0x25
 8011dc6:	d148      	bne.n	8011e5a <_vfiprintf_r+0x10e>
 8011dc8:	1b73      	subs	r3, r6, r5
 8011dca:	9305      	str	r3, [sp, #20]
 8011dcc:	42ae      	cmp	r6, r5
 8011dce:	d00b      	beq.n	8011de8 <_vfiprintf_r+0x9c>
 8011dd0:	002a      	movs	r2, r5
 8011dd2:	0039      	movs	r1, r7
 8011dd4:	9803      	ldr	r0, [sp, #12]
 8011dd6:	f7ff ffa6 	bl	8011d26 <__sfputs_r>
 8011dda:	3001      	adds	r0, #1
 8011ddc:	d100      	bne.n	8011de0 <_vfiprintf_r+0x94>
 8011dde:	e0ae      	b.n	8011f3e <_vfiprintf_r+0x1f2>
 8011de0:	6963      	ldr	r3, [r4, #20]
 8011de2:	9a05      	ldr	r2, [sp, #20]
 8011de4:	189b      	adds	r3, r3, r2
 8011de6:	6163      	str	r3, [r4, #20]
 8011de8:	7833      	ldrb	r3, [r6, #0]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d100      	bne.n	8011df0 <_vfiprintf_r+0xa4>
 8011dee:	e0a6      	b.n	8011f3e <_vfiprintf_r+0x1f2>
 8011df0:	2201      	movs	r2, #1
 8011df2:	2300      	movs	r3, #0
 8011df4:	4252      	negs	r2, r2
 8011df6:	6062      	str	r2, [r4, #4]
 8011df8:	a904      	add	r1, sp, #16
 8011dfa:	3254      	adds	r2, #84	@ 0x54
 8011dfc:	1852      	adds	r2, r2, r1
 8011dfe:	1c75      	adds	r5, r6, #1
 8011e00:	6023      	str	r3, [r4, #0]
 8011e02:	60e3      	str	r3, [r4, #12]
 8011e04:	60a3      	str	r3, [r4, #8]
 8011e06:	7013      	strb	r3, [r2, #0]
 8011e08:	65a3      	str	r3, [r4, #88]	@ 0x58
 8011e0a:	4b59      	ldr	r3, [pc, #356]	@ (8011f70 <_vfiprintf_r+0x224>)
 8011e0c:	2205      	movs	r2, #5
 8011e0e:	0018      	movs	r0, r3
 8011e10:	7829      	ldrb	r1, [r5, #0]
 8011e12:	9305      	str	r3, [sp, #20]
 8011e14:	f001 f818 	bl	8012e48 <memchr>
 8011e18:	1c6e      	adds	r6, r5, #1
 8011e1a:	2800      	cmp	r0, #0
 8011e1c:	d11f      	bne.n	8011e5e <_vfiprintf_r+0x112>
 8011e1e:	6822      	ldr	r2, [r4, #0]
 8011e20:	06d3      	lsls	r3, r2, #27
 8011e22:	d504      	bpl.n	8011e2e <_vfiprintf_r+0xe2>
 8011e24:	2353      	movs	r3, #83	@ 0x53
 8011e26:	a904      	add	r1, sp, #16
 8011e28:	185b      	adds	r3, r3, r1
 8011e2a:	2120      	movs	r1, #32
 8011e2c:	7019      	strb	r1, [r3, #0]
 8011e2e:	0713      	lsls	r3, r2, #28
 8011e30:	d504      	bpl.n	8011e3c <_vfiprintf_r+0xf0>
 8011e32:	2353      	movs	r3, #83	@ 0x53
 8011e34:	a904      	add	r1, sp, #16
 8011e36:	185b      	adds	r3, r3, r1
 8011e38:	212b      	movs	r1, #43	@ 0x2b
 8011e3a:	7019      	strb	r1, [r3, #0]
 8011e3c:	782b      	ldrb	r3, [r5, #0]
 8011e3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e40:	d016      	beq.n	8011e70 <_vfiprintf_r+0x124>
 8011e42:	002e      	movs	r6, r5
 8011e44:	2100      	movs	r1, #0
 8011e46:	200a      	movs	r0, #10
 8011e48:	68e3      	ldr	r3, [r4, #12]
 8011e4a:	7832      	ldrb	r2, [r6, #0]
 8011e4c:	1c75      	adds	r5, r6, #1
 8011e4e:	3a30      	subs	r2, #48	@ 0x30
 8011e50:	2a09      	cmp	r2, #9
 8011e52:	d950      	bls.n	8011ef6 <_vfiprintf_r+0x1aa>
 8011e54:	2900      	cmp	r1, #0
 8011e56:	d111      	bne.n	8011e7c <_vfiprintf_r+0x130>
 8011e58:	e017      	b.n	8011e8a <_vfiprintf_r+0x13e>
 8011e5a:	3601      	adds	r6, #1
 8011e5c:	e7af      	b.n	8011dbe <_vfiprintf_r+0x72>
 8011e5e:	9b05      	ldr	r3, [sp, #20]
 8011e60:	6822      	ldr	r2, [r4, #0]
 8011e62:	1ac0      	subs	r0, r0, r3
 8011e64:	2301      	movs	r3, #1
 8011e66:	4083      	lsls	r3, r0
 8011e68:	4313      	orrs	r3, r2
 8011e6a:	0035      	movs	r5, r6
 8011e6c:	6023      	str	r3, [r4, #0]
 8011e6e:	e7cc      	b.n	8011e0a <_vfiprintf_r+0xbe>
 8011e70:	9b07      	ldr	r3, [sp, #28]
 8011e72:	1d19      	adds	r1, r3, #4
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	9107      	str	r1, [sp, #28]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	db01      	blt.n	8011e80 <_vfiprintf_r+0x134>
 8011e7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011e7e:	e004      	b.n	8011e8a <_vfiprintf_r+0x13e>
 8011e80:	425b      	negs	r3, r3
 8011e82:	60e3      	str	r3, [r4, #12]
 8011e84:	2302      	movs	r3, #2
 8011e86:	4313      	orrs	r3, r2
 8011e88:	6023      	str	r3, [r4, #0]
 8011e8a:	7833      	ldrb	r3, [r6, #0]
 8011e8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e8e:	d10c      	bne.n	8011eaa <_vfiprintf_r+0x15e>
 8011e90:	7873      	ldrb	r3, [r6, #1]
 8011e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e94:	d134      	bne.n	8011f00 <_vfiprintf_r+0x1b4>
 8011e96:	9b07      	ldr	r3, [sp, #28]
 8011e98:	3602      	adds	r6, #2
 8011e9a:	1d1a      	adds	r2, r3, #4
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	9207      	str	r2, [sp, #28]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	da01      	bge.n	8011ea8 <_vfiprintf_r+0x15c>
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	425b      	negs	r3, r3
 8011ea8:	9309      	str	r3, [sp, #36]	@ 0x24
 8011eaa:	4d32      	ldr	r5, [pc, #200]	@ (8011f74 <_vfiprintf_r+0x228>)
 8011eac:	2203      	movs	r2, #3
 8011eae:	0028      	movs	r0, r5
 8011eb0:	7831      	ldrb	r1, [r6, #0]
 8011eb2:	f000 ffc9 	bl	8012e48 <memchr>
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	d006      	beq.n	8011ec8 <_vfiprintf_r+0x17c>
 8011eba:	2340      	movs	r3, #64	@ 0x40
 8011ebc:	1b40      	subs	r0, r0, r5
 8011ebe:	4083      	lsls	r3, r0
 8011ec0:	6822      	ldr	r2, [r4, #0]
 8011ec2:	3601      	adds	r6, #1
 8011ec4:	4313      	orrs	r3, r2
 8011ec6:	6023      	str	r3, [r4, #0]
 8011ec8:	7831      	ldrb	r1, [r6, #0]
 8011eca:	2206      	movs	r2, #6
 8011ecc:	482a      	ldr	r0, [pc, #168]	@ (8011f78 <_vfiprintf_r+0x22c>)
 8011ece:	1c75      	adds	r5, r6, #1
 8011ed0:	7621      	strb	r1, [r4, #24]
 8011ed2:	f000 ffb9 	bl	8012e48 <memchr>
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	d040      	beq.n	8011f5c <_vfiprintf_r+0x210>
 8011eda:	4b28      	ldr	r3, [pc, #160]	@ (8011f7c <_vfiprintf_r+0x230>)
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d122      	bne.n	8011f26 <_vfiprintf_r+0x1da>
 8011ee0:	2207      	movs	r2, #7
 8011ee2:	9b07      	ldr	r3, [sp, #28]
 8011ee4:	3307      	adds	r3, #7
 8011ee6:	4393      	bics	r3, r2
 8011ee8:	3308      	adds	r3, #8
 8011eea:	9307      	str	r3, [sp, #28]
 8011eec:	6963      	ldr	r3, [r4, #20]
 8011eee:	9a04      	ldr	r2, [sp, #16]
 8011ef0:	189b      	adds	r3, r3, r2
 8011ef2:	6163      	str	r3, [r4, #20]
 8011ef4:	e762      	b.n	8011dbc <_vfiprintf_r+0x70>
 8011ef6:	4343      	muls	r3, r0
 8011ef8:	002e      	movs	r6, r5
 8011efa:	2101      	movs	r1, #1
 8011efc:	189b      	adds	r3, r3, r2
 8011efe:	e7a4      	b.n	8011e4a <_vfiprintf_r+0xfe>
 8011f00:	2300      	movs	r3, #0
 8011f02:	200a      	movs	r0, #10
 8011f04:	0019      	movs	r1, r3
 8011f06:	3601      	adds	r6, #1
 8011f08:	6063      	str	r3, [r4, #4]
 8011f0a:	7832      	ldrb	r2, [r6, #0]
 8011f0c:	1c75      	adds	r5, r6, #1
 8011f0e:	3a30      	subs	r2, #48	@ 0x30
 8011f10:	2a09      	cmp	r2, #9
 8011f12:	d903      	bls.n	8011f1c <_vfiprintf_r+0x1d0>
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d0c8      	beq.n	8011eaa <_vfiprintf_r+0x15e>
 8011f18:	9109      	str	r1, [sp, #36]	@ 0x24
 8011f1a:	e7c6      	b.n	8011eaa <_vfiprintf_r+0x15e>
 8011f1c:	4341      	muls	r1, r0
 8011f1e:	002e      	movs	r6, r5
 8011f20:	2301      	movs	r3, #1
 8011f22:	1889      	adds	r1, r1, r2
 8011f24:	e7f1      	b.n	8011f0a <_vfiprintf_r+0x1be>
 8011f26:	aa07      	add	r2, sp, #28
 8011f28:	9200      	str	r2, [sp, #0]
 8011f2a:	0021      	movs	r1, r4
 8011f2c:	003a      	movs	r2, r7
 8011f2e:	4b14      	ldr	r3, [pc, #80]	@ (8011f80 <_vfiprintf_r+0x234>)
 8011f30:	9803      	ldr	r0, [sp, #12]
 8011f32:	e000      	b.n	8011f36 <_vfiprintf_r+0x1ea>
 8011f34:	bf00      	nop
 8011f36:	9004      	str	r0, [sp, #16]
 8011f38:	9b04      	ldr	r3, [sp, #16]
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	d1d6      	bne.n	8011eec <_vfiprintf_r+0x1a0>
 8011f3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011f40:	07db      	lsls	r3, r3, #31
 8011f42:	d405      	bmi.n	8011f50 <_vfiprintf_r+0x204>
 8011f44:	89bb      	ldrh	r3, [r7, #12]
 8011f46:	059b      	lsls	r3, r3, #22
 8011f48:	d402      	bmi.n	8011f50 <_vfiprintf_r+0x204>
 8011f4a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011f4c:	f7ff fc68 	bl	8011820 <__retarget_lock_release_recursive>
 8011f50:	89bb      	ldrh	r3, [r7, #12]
 8011f52:	065b      	lsls	r3, r3, #25
 8011f54:	d500      	bpl.n	8011f58 <_vfiprintf_r+0x20c>
 8011f56:	e71e      	b.n	8011d96 <_vfiprintf_r+0x4a>
 8011f58:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8011f5a:	e71e      	b.n	8011d9a <_vfiprintf_r+0x4e>
 8011f5c:	aa07      	add	r2, sp, #28
 8011f5e:	9200      	str	r2, [sp, #0]
 8011f60:	0021      	movs	r1, r4
 8011f62:	003a      	movs	r2, r7
 8011f64:	4b06      	ldr	r3, [pc, #24]	@ (8011f80 <_vfiprintf_r+0x234>)
 8011f66:	9803      	ldr	r0, [sp, #12]
 8011f68:	f000 f87c 	bl	8012064 <_printf_i>
 8011f6c:	e7e3      	b.n	8011f36 <_vfiprintf_r+0x1ea>
 8011f6e:	46c0      	nop			@ (mov r8, r8)
 8011f70:	08014bb4 	.word	0x08014bb4
 8011f74:	08014bba 	.word	0x08014bba
 8011f78:	08014bbe 	.word	0x08014bbe
 8011f7c:	00000000 	.word	0x00000000
 8011f80:	08011d27 	.word	0x08011d27

08011f84 <_printf_common>:
 8011f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f86:	0016      	movs	r6, r2
 8011f88:	9301      	str	r3, [sp, #4]
 8011f8a:	688a      	ldr	r2, [r1, #8]
 8011f8c:	690b      	ldr	r3, [r1, #16]
 8011f8e:	000c      	movs	r4, r1
 8011f90:	9000      	str	r0, [sp, #0]
 8011f92:	4293      	cmp	r3, r2
 8011f94:	da00      	bge.n	8011f98 <_printf_common+0x14>
 8011f96:	0013      	movs	r3, r2
 8011f98:	0022      	movs	r2, r4
 8011f9a:	6033      	str	r3, [r6, #0]
 8011f9c:	3243      	adds	r2, #67	@ 0x43
 8011f9e:	7812      	ldrb	r2, [r2, #0]
 8011fa0:	2a00      	cmp	r2, #0
 8011fa2:	d001      	beq.n	8011fa8 <_printf_common+0x24>
 8011fa4:	3301      	adds	r3, #1
 8011fa6:	6033      	str	r3, [r6, #0]
 8011fa8:	6823      	ldr	r3, [r4, #0]
 8011faa:	069b      	lsls	r3, r3, #26
 8011fac:	d502      	bpl.n	8011fb4 <_printf_common+0x30>
 8011fae:	6833      	ldr	r3, [r6, #0]
 8011fb0:	3302      	adds	r3, #2
 8011fb2:	6033      	str	r3, [r6, #0]
 8011fb4:	6822      	ldr	r2, [r4, #0]
 8011fb6:	2306      	movs	r3, #6
 8011fb8:	0015      	movs	r5, r2
 8011fba:	401d      	ands	r5, r3
 8011fbc:	421a      	tst	r2, r3
 8011fbe:	d027      	beq.n	8012010 <_printf_common+0x8c>
 8011fc0:	0023      	movs	r3, r4
 8011fc2:	3343      	adds	r3, #67	@ 0x43
 8011fc4:	781b      	ldrb	r3, [r3, #0]
 8011fc6:	1e5a      	subs	r2, r3, #1
 8011fc8:	4193      	sbcs	r3, r2
 8011fca:	6822      	ldr	r2, [r4, #0]
 8011fcc:	0692      	lsls	r2, r2, #26
 8011fce:	d430      	bmi.n	8012032 <_printf_common+0xae>
 8011fd0:	0022      	movs	r2, r4
 8011fd2:	9901      	ldr	r1, [sp, #4]
 8011fd4:	9800      	ldr	r0, [sp, #0]
 8011fd6:	9d08      	ldr	r5, [sp, #32]
 8011fd8:	3243      	adds	r2, #67	@ 0x43
 8011fda:	47a8      	blx	r5
 8011fdc:	3001      	adds	r0, #1
 8011fde:	d025      	beq.n	801202c <_printf_common+0xa8>
 8011fe0:	2206      	movs	r2, #6
 8011fe2:	6823      	ldr	r3, [r4, #0]
 8011fe4:	2500      	movs	r5, #0
 8011fe6:	4013      	ands	r3, r2
 8011fe8:	2b04      	cmp	r3, #4
 8011fea:	d105      	bne.n	8011ff8 <_printf_common+0x74>
 8011fec:	6833      	ldr	r3, [r6, #0]
 8011fee:	68e5      	ldr	r5, [r4, #12]
 8011ff0:	1aed      	subs	r5, r5, r3
 8011ff2:	43eb      	mvns	r3, r5
 8011ff4:	17db      	asrs	r3, r3, #31
 8011ff6:	401d      	ands	r5, r3
 8011ff8:	68a3      	ldr	r3, [r4, #8]
 8011ffa:	6922      	ldr	r2, [r4, #16]
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	dd01      	ble.n	8012004 <_printf_common+0x80>
 8012000:	1a9b      	subs	r3, r3, r2
 8012002:	18ed      	adds	r5, r5, r3
 8012004:	2600      	movs	r6, #0
 8012006:	42b5      	cmp	r5, r6
 8012008:	d120      	bne.n	801204c <_printf_common+0xc8>
 801200a:	2000      	movs	r0, #0
 801200c:	e010      	b.n	8012030 <_printf_common+0xac>
 801200e:	3501      	adds	r5, #1
 8012010:	68e3      	ldr	r3, [r4, #12]
 8012012:	6832      	ldr	r2, [r6, #0]
 8012014:	1a9b      	subs	r3, r3, r2
 8012016:	42ab      	cmp	r3, r5
 8012018:	ddd2      	ble.n	8011fc0 <_printf_common+0x3c>
 801201a:	0022      	movs	r2, r4
 801201c:	2301      	movs	r3, #1
 801201e:	9901      	ldr	r1, [sp, #4]
 8012020:	9800      	ldr	r0, [sp, #0]
 8012022:	9f08      	ldr	r7, [sp, #32]
 8012024:	3219      	adds	r2, #25
 8012026:	47b8      	blx	r7
 8012028:	3001      	adds	r0, #1
 801202a:	d1f0      	bne.n	801200e <_printf_common+0x8a>
 801202c:	2001      	movs	r0, #1
 801202e:	4240      	negs	r0, r0
 8012030:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012032:	2030      	movs	r0, #48	@ 0x30
 8012034:	18e1      	adds	r1, r4, r3
 8012036:	3143      	adds	r1, #67	@ 0x43
 8012038:	7008      	strb	r0, [r1, #0]
 801203a:	0021      	movs	r1, r4
 801203c:	1c5a      	adds	r2, r3, #1
 801203e:	3145      	adds	r1, #69	@ 0x45
 8012040:	7809      	ldrb	r1, [r1, #0]
 8012042:	18a2      	adds	r2, r4, r2
 8012044:	3243      	adds	r2, #67	@ 0x43
 8012046:	3302      	adds	r3, #2
 8012048:	7011      	strb	r1, [r2, #0]
 801204a:	e7c1      	b.n	8011fd0 <_printf_common+0x4c>
 801204c:	0022      	movs	r2, r4
 801204e:	2301      	movs	r3, #1
 8012050:	9901      	ldr	r1, [sp, #4]
 8012052:	9800      	ldr	r0, [sp, #0]
 8012054:	9f08      	ldr	r7, [sp, #32]
 8012056:	321a      	adds	r2, #26
 8012058:	47b8      	blx	r7
 801205a:	3001      	adds	r0, #1
 801205c:	d0e6      	beq.n	801202c <_printf_common+0xa8>
 801205e:	3601      	adds	r6, #1
 8012060:	e7d1      	b.n	8012006 <_printf_common+0x82>
	...

08012064 <_printf_i>:
 8012064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012066:	b08b      	sub	sp, #44	@ 0x2c
 8012068:	9206      	str	r2, [sp, #24]
 801206a:	000a      	movs	r2, r1
 801206c:	3243      	adds	r2, #67	@ 0x43
 801206e:	9307      	str	r3, [sp, #28]
 8012070:	9005      	str	r0, [sp, #20]
 8012072:	9203      	str	r2, [sp, #12]
 8012074:	7e0a      	ldrb	r2, [r1, #24]
 8012076:	000c      	movs	r4, r1
 8012078:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801207a:	2a78      	cmp	r2, #120	@ 0x78
 801207c:	d809      	bhi.n	8012092 <_printf_i+0x2e>
 801207e:	2a62      	cmp	r2, #98	@ 0x62
 8012080:	d80b      	bhi.n	801209a <_printf_i+0x36>
 8012082:	2a00      	cmp	r2, #0
 8012084:	d100      	bne.n	8012088 <_printf_i+0x24>
 8012086:	e0bc      	b.n	8012202 <_printf_i+0x19e>
 8012088:	497b      	ldr	r1, [pc, #492]	@ (8012278 <_printf_i+0x214>)
 801208a:	9104      	str	r1, [sp, #16]
 801208c:	2a58      	cmp	r2, #88	@ 0x58
 801208e:	d100      	bne.n	8012092 <_printf_i+0x2e>
 8012090:	e090      	b.n	80121b4 <_printf_i+0x150>
 8012092:	0025      	movs	r5, r4
 8012094:	3542      	adds	r5, #66	@ 0x42
 8012096:	702a      	strb	r2, [r5, #0]
 8012098:	e022      	b.n	80120e0 <_printf_i+0x7c>
 801209a:	0010      	movs	r0, r2
 801209c:	3863      	subs	r0, #99	@ 0x63
 801209e:	2815      	cmp	r0, #21
 80120a0:	d8f7      	bhi.n	8012092 <_printf_i+0x2e>
 80120a2:	f7ee f83b 	bl	800011c <__gnu_thumb1_case_shi>
 80120a6:	0016      	.short	0x0016
 80120a8:	fff6001f 	.word	0xfff6001f
 80120ac:	fff6fff6 	.word	0xfff6fff6
 80120b0:	001ffff6 	.word	0x001ffff6
 80120b4:	fff6fff6 	.word	0xfff6fff6
 80120b8:	fff6fff6 	.word	0xfff6fff6
 80120bc:	003600a1 	.word	0x003600a1
 80120c0:	fff60080 	.word	0xfff60080
 80120c4:	00b2fff6 	.word	0x00b2fff6
 80120c8:	0036fff6 	.word	0x0036fff6
 80120cc:	fff6fff6 	.word	0xfff6fff6
 80120d0:	0084      	.short	0x0084
 80120d2:	0025      	movs	r5, r4
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	3542      	adds	r5, #66	@ 0x42
 80120d8:	1d11      	adds	r1, r2, #4
 80120da:	6019      	str	r1, [r3, #0]
 80120dc:	6813      	ldr	r3, [r2, #0]
 80120de:	702b      	strb	r3, [r5, #0]
 80120e0:	2301      	movs	r3, #1
 80120e2:	e0a0      	b.n	8012226 <_printf_i+0x1c2>
 80120e4:	6818      	ldr	r0, [r3, #0]
 80120e6:	6809      	ldr	r1, [r1, #0]
 80120e8:	1d02      	adds	r2, r0, #4
 80120ea:	060d      	lsls	r5, r1, #24
 80120ec:	d50b      	bpl.n	8012106 <_printf_i+0xa2>
 80120ee:	6806      	ldr	r6, [r0, #0]
 80120f0:	601a      	str	r2, [r3, #0]
 80120f2:	2e00      	cmp	r6, #0
 80120f4:	da03      	bge.n	80120fe <_printf_i+0x9a>
 80120f6:	232d      	movs	r3, #45	@ 0x2d
 80120f8:	9a03      	ldr	r2, [sp, #12]
 80120fa:	4276      	negs	r6, r6
 80120fc:	7013      	strb	r3, [r2, #0]
 80120fe:	4b5e      	ldr	r3, [pc, #376]	@ (8012278 <_printf_i+0x214>)
 8012100:	270a      	movs	r7, #10
 8012102:	9304      	str	r3, [sp, #16]
 8012104:	e018      	b.n	8012138 <_printf_i+0xd4>
 8012106:	6806      	ldr	r6, [r0, #0]
 8012108:	601a      	str	r2, [r3, #0]
 801210a:	0649      	lsls	r1, r1, #25
 801210c:	d5f1      	bpl.n	80120f2 <_printf_i+0x8e>
 801210e:	b236      	sxth	r6, r6
 8012110:	e7ef      	b.n	80120f2 <_printf_i+0x8e>
 8012112:	6808      	ldr	r0, [r1, #0]
 8012114:	6819      	ldr	r1, [r3, #0]
 8012116:	c940      	ldmia	r1!, {r6}
 8012118:	0605      	lsls	r5, r0, #24
 801211a:	d402      	bmi.n	8012122 <_printf_i+0xbe>
 801211c:	0640      	lsls	r0, r0, #25
 801211e:	d500      	bpl.n	8012122 <_printf_i+0xbe>
 8012120:	b2b6      	uxth	r6, r6
 8012122:	6019      	str	r1, [r3, #0]
 8012124:	4b54      	ldr	r3, [pc, #336]	@ (8012278 <_printf_i+0x214>)
 8012126:	270a      	movs	r7, #10
 8012128:	9304      	str	r3, [sp, #16]
 801212a:	2a6f      	cmp	r2, #111	@ 0x6f
 801212c:	d100      	bne.n	8012130 <_printf_i+0xcc>
 801212e:	3f02      	subs	r7, #2
 8012130:	0023      	movs	r3, r4
 8012132:	2200      	movs	r2, #0
 8012134:	3343      	adds	r3, #67	@ 0x43
 8012136:	701a      	strb	r2, [r3, #0]
 8012138:	6863      	ldr	r3, [r4, #4]
 801213a:	60a3      	str	r3, [r4, #8]
 801213c:	2b00      	cmp	r3, #0
 801213e:	db03      	blt.n	8012148 <_printf_i+0xe4>
 8012140:	2104      	movs	r1, #4
 8012142:	6822      	ldr	r2, [r4, #0]
 8012144:	438a      	bics	r2, r1
 8012146:	6022      	str	r2, [r4, #0]
 8012148:	2e00      	cmp	r6, #0
 801214a:	d102      	bne.n	8012152 <_printf_i+0xee>
 801214c:	9d03      	ldr	r5, [sp, #12]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d00c      	beq.n	801216c <_printf_i+0x108>
 8012152:	9d03      	ldr	r5, [sp, #12]
 8012154:	0030      	movs	r0, r6
 8012156:	0039      	movs	r1, r7
 8012158:	f7ee f870 	bl	800023c <__aeabi_uidivmod>
 801215c:	9b04      	ldr	r3, [sp, #16]
 801215e:	3d01      	subs	r5, #1
 8012160:	5c5b      	ldrb	r3, [r3, r1]
 8012162:	702b      	strb	r3, [r5, #0]
 8012164:	0033      	movs	r3, r6
 8012166:	0006      	movs	r6, r0
 8012168:	429f      	cmp	r7, r3
 801216a:	d9f3      	bls.n	8012154 <_printf_i+0xf0>
 801216c:	2f08      	cmp	r7, #8
 801216e:	d109      	bne.n	8012184 <_printf_i+0x120>
 8012170:	6823      	ldr	r3, [r4, #0]
 8012172:	07db      	lsls	r3, r3, #31
 8012174:	d506      	bpl.n	8012184 <_printf_i+0x120>
 8012176:	6862      	ldr	r2, [r4, #4]
 8012178:	6923      	ldr	r3, [r4, #16]
 801217a:	429a      	cmp	r2, r3
 801217c:	dc02      	bgt.n	8012184 <_printf_i+0x120>
 801217e:	2330      	movs	r3, #48	@ 0x30
 8012180:	3d01      	subs	r5, #1
 8012182:	702b      	strb	r3, [r5, #0]
 8012184:	9b03      	ldr	r3, [sp, #12]
 8012186:	1b5b      	subs	r3, r3, r5
 8012188:	6123      	str	r3, [r4, #16]
 801218a:	9b07      	ldr	r3, [sp, #28]
 801218c:	0021      	movs	r1, r4
 801218e:	9300      	str	r3, [sp, #0]
 8012190:	9805      	ldr	r0, [sp, #20]
 8012192:	9b06      	ldr	r3, [sp, #24]
 8012194:	aa09      	add	r2, sp, #36	@ 0x24
 8012196:	f7ff fef5 	bl	8011f84 <_printf_common>
 801219a:	3001      	adds	r0, #1
 801219c:	d148      	bne.n	8012230 <_printf_i+0x1cc>
 801219e:	2001      	movs	r0, #1
 80121a0:	4240      	negs	r0, r0
 80121a2:	b00b      	add	sp, #44	@ 0x2c
 80121a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121a6:	2220      	movs	r2, #32
 80121a8:	6809      	ldr	r1, [r1, #0]
 80121aa:	430a      	orrs	r2, r1
 80121ac:	6022      	str	r2, [r4, #0]
 80121ae:	2278      	movs	r2, #120	@ 0x78
 80121b0:	4932      	ldr	r1, [pc, #200]	@ (801227c <_printf_i+0x218>)
 80121b2:	9104      	str	r1, [sp, #16]
 80121b4:	0021      	movs	r1, r4
 80121b6:	3145      	adds	r1, #69	@ 0x45
 80121b8:	700a      	strb	r2, [r1, #0]
 80121ba:	6819      	ldr	r1, [r3, #0]
 80121bc:	6822      	ldr	r2, [r4, #0]
 80121be:	c940      	ldmia	r1!, {r6}
 80121c0:	0610      	lsls	r0, r2, #24
 80121c2:	d402      	bmi.n	80121ca <_printf_i+0x166>
 80121c4:	0650      	lsls	r0, r2, #25
 80121c6:	d500      	bpl.n	80121ca <_printf_i+0x166>
 80121c8:	b2b6      	uxth	r6, r6
 80121ca:	6019      	str	r1, [r3, #0]
 80121cc:	07d3      	lsls	r3, r2, #31
 80121ce:	d502      	bpl.n	80121d6 <_printf_i+0x172>
 80121d0:	2320      	movs	r3, #32
 80121d2:	4313      	orrs	r3, r2
 80121d4:	6023      	str	r3, [r4, #0]
 80121d6:	2e00      	cmp	r6, #0
 80121d8:	d001      	beq.n	80121de <_printf_i+0x17a>
 80121da:	2710      	movs	r7, #16
 80121dc:	e7a8      	b.n	8012130 <_printf_i+0xcc>
 80121de:	2220      	movs	r2, #32
 80121e0:	6823      	ldr	r3, [r4, #0]
 80121e2:	4393      	bics	r3, r2
 80121e4:	6023      	str	r3, [r4, #0]
 80121e6:	e7f8      	b.n	80121da <_printf_i+0x176>
 80121e8:	681a      	ldr	r2, [r3, #0]
 80121ea:	680d      	ldr	r5, [r1, #0]
 80121ec:	1d10      	adds	r0, r2, #4
 80121ee:	6949      	ldr	r1, [r1, #20]
 80121f0:	6018      	str	r0, [r3, #0]
 80121f2:	6813      	ldr	r3, [r2, #0]
 80121f4:	062e      	lsls	r6, r5, #24
 80121f6:	d501      	bpl.n	80121fc <_printf_i+0x198>
 80121f8:	6019      	str	r1, [r3, #0]
 80121fa:	e002      	b.n	8012202 <_printf_i+0x19e>
 80121fc:	066d      	lsls	r5, r5, #25
 80121fe:	d5fb      	bpl.n	80121f8 <_printf_i+0x194>
 8012200:	8019      	strh	r1, [r3, #0]
 8012202:	2300      	movs	r3, #0
 8012204:	9d03      	ldr	r5, [sp, #12]
 8012206:	6123      	str	r3, [r4, #16]
 8012208:	e7bf      	b.n	801218a <_printf_i+0x126>
 801220a:	681a      	ldr	r2, [r3, #0]
 801220c:	1d11      	adds	r1, r2, #4
 801220e:	6019      	str	r1, [r3, #0]
 8012210:	6815      	ldr	r5, [r2, #0]
 8012212:	2100      	movs	r1, #0
 8012214:	0028      	movs	r0, r5
 8012216:	6862      	ldr	r2, [r4, #4]
 8012218:	f000 fe16 	bl	8012e48 <memchr>
 801221c:	2800      	cmp	r0, #0
 801221e:	d001      	beq.n	8012224 <_printf_i+0x1c0>
 8012220:	1b40      	subs	r0, r0, r5
 8012222:	6060      	str	r0, [r4, #4]
 8012224:	6863      	ldr	r3, [r4, #4]
 8012226:	6123      	str	r3, [r4, #16]
 8012228:	2300      	movs	r3, #0
 801222a:	9a03      	ldr	r2, [sp, #12]
 801222c:	7013      	strb	r3, [r2, #0]
 801222e:	e7ac      	b.n	801218a <_printf_i+0x126>
 8012230:	002a      	movs	r2, r5
 8012232:	6923      	ldr	r3, [r4, #16]
 8012234:	9906      	ldr	r1, [sp, #24]
 8012236:	9805      	ldr	r0, [sp, #20]
 8012238:	9d07      	ldr	r5, [sp, #28]
 801223a:	47a8      	blx	r5
 801223c:	3001      	adds	r0, #1
 801223e:	d0ae      	beq.n	801219e <_printf_i+0x13a>
 8012240:	6823      	ldr	r3, [r4, #0]
 8012242:	079b      	lsls	r3, r3, #30
 8012244:	d415      	bmi.n	8012272 <_printf_i+0x20e>
 8012246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012248:	68e0      	ldr	r0, [r4, #12]
 801224a:	4298      	cmp	r0, r3
 801224c:	daa9      	bge.n	80121a2 <_printf_i+0x13e>
 801224e:	0018      	movs	r0, r3
 8012250:	e7a7      	b.n	80121a2 <_printf_i+0x13e>
 8012252:	0022      	movs	r2, r4
 8012254:	2301      	movs	r3, #1
 8012256:	9906      	ldr	r1, [sp, #24]
 8012258:	9805      	ldr	r0, [sp, #20]
 801225a:	9e07      	ldr	r6, [sp, #28]
 801225c:	3219      	adds	r2, #25
 801225e:	47b0      	blx	r6
 8012260:	3001      	adds	r0, #1
 8012262:	d09c      	beq.n	801219e <_printf_i+0x13a>
 8012264:	3501      	adds	r5, #1
 8012266:	68e3      	ldr	r3, [r4, #12]
 8012268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801226a:	1a9b      	subs	r3, r3, r2
 801226c:	42ab      	cmp	r3, r5
 801226e:	dcf0      	bgt.n	8012252 <_printf_i+0x1ee>
 8012270:	e7e9      	b.n	8012246 <_printf_i+0x1e2>
 8012272:	2500      	movs	r5, #0
 8012274:	e7f7      	b.n	8012266 <_printf_i+0x202>
 8012276:	46c0      	nop			@ (mov r8, r8)
 8012278:	08014bc5 	.word	0x08014bc5
 801227c:	08014bd6 	.word	0x08014bd6

08012280 <__svfiscanf_r>:
 8012280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012282:	4caf      	ldr	r4, [pc, #700]	@ (8012540 <__svfiscanf_r+0x2c0>)
 8012284:	001d      	movs	r5, r3
 8012286:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8012288:	44a5      	add	sp, r4
 801228a:	0016      	movs	r6, r2
 801228c:	000c      	movs	r4, r1
 801228e:	9001      	str	r0, [sp, #4]
 8012290:	07db      	lsls	r3, r3, #31
 8012292:	d405      	bmi.n	80122a0 <__svfiscanf_r+0x20>
 8012294:	898b      	ldrh	r3, [r1, #12]
 8012296:	059b      	lsls	r3, r3, #22
 8012298:	d402      	bmi.n	80122a0 <__svfiscanf_r+0x20>
 801229a:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 801229c:	f7ff fabf 	bl	801181e <__retarget_lock_acquire_recursive>
 80122a0:	2300      	movs	r3, #0
 80122a2:	22be      	movs	r2, #190	@ 0xbe
 80122a4:	9346      	str	r3, [sp, #280]	@ 0x118
 80122a6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80122a8:	ab03      	add	r3, sp, #12
 80122aa:	9348      	str	r3, [sp, #288]	@ 0x120
 80122ac:	4ba5      	ldr	r3, [pc, #660]	@ (8012544 <__svfiscanf_r+0x2c4>)
 80122ae:	0052      	lsls	r2, r2, #1
 80122b0:	a943      	add	r1, sp, #268	@ 0x10c
 80122b2:	508b      	str	r3, [r1, r2]
 80122b4:	4ba4      	ldr	r3, [pc, #656]	@ (8012548 <__svfiscanf_r+0x2c8>)
 80122b6:	3204      	adds	r2, #4
 80122b8:	a943      	add	r1, sp, #268	@ 0x10c
 80122ba:	508b      	str	r3, [r1, r2]
 80122bc:	9502      	str	r5, [sp, #8]
 80122be:	7833      	ldrb	r3, [r6, #0]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d100      	bne.n	80122c6 <__svfiscanf_r+0x46>
 80122c4:	e159      	b.n	801257a <__svfiscanf_r+0x2fa>
 80122c6:	2208      	movs	r2, #8
 80122c8:	2008      	movs	r0, #8
 80122ca:	4fa0      	ldr	r7, [pc, #640]	@ (801254c <__svfiscanf_r+0x2cc>)
 80122cc:	1c75      	adds	r5, r6, #1
 80122ce:	5cf9      	ldrb	r1, [r7, r3]
 80122d0:	400a      	ands	r2, r1
 80122d2:	4201      	tst	r1, r0
 80122d4:	d01d      	beq.n	8012312 <__svfiscanf_r+0x92>
 80122d6:	0006      	movs	r6, r0
 80122d8:	6863      	ldr	r3, [r4, #4]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	dd0f      	ble.n	80122fe <__svfiscanf_r+0x7e>
 80122de:	6823      	ldr	r3, [r4, #0]
 80122e0:	781a      	ldrb	r2, [r3, #0]
 80122e2:	5cba      	ldrb	r2, [r7, r2]
 80122e4:	4232      	tst	r2, r6
 80122e6:	d101      	bne.n	80122ec <__svfiscanf_r+0x6c>
 80122e8:	002e      	movs	r6, r5
 80122ea:	e7e8      	b.n	80122be <__svfiscanf_r+0x3e>
 80122ec:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 80122ee:	3301      	adds	r3, #1
 80122f0:	3201      	adds	r2, #1
 80122f2:	9247      	str	r2, [sp, #284]	@ 0x11c
 80122f4:	6862      	ldr	r2, [r4, #4]
 80122f6:	6023      	str	r3, [r4, #0]
 80122f8:	3a01      	subs	r2, #1
 80122fa:	6062      	str	r2, [r4, #4]
 80122fc:	e7ec      	b.n	80122d8 <__svfiscanf_r+0x58>
 80122fe:	22c0      	movs	r2, #192	@ 0xc0
 8012300:	ab43      	add	r3, sp, #268	@ 0x10c
 8012302:	0052      	lsls	r2, r2, #1
 8012304:	0021      	movs	r1, r4
 8012306:	589b      	ldr	r3, [r3, r2]
 8012308:	9801      	ldr	r0, [sp, #4]
 801230a:	4798      	blx	r3
 801230c:	2800      	cmp	r0, #0
 801230e:	d0e6      	beq.n	80122de <__svfiscanf_r+0x5e>
 8012310:	e7ea      	b.n	80122e8 <__svfiscanf_r+0x68>
 8012312:	2b25      	cmp	r3, #37	@ 0x25
 8012314:	d011      	beq.n	801233a <__svfiscanf_r+0xba>
 8012316:	001e      	movs	r6, r3
 8012318:	6863      	ldr	r3, [r4, #4]
 801231a:	2b00      	cmp	r3, #0
 801231c:	dd6f      	ble.n	80123fe <__svfiscanf_r+0x17e>
 801231e:	6823      	ldr	r3, [r4, #0]
 8012320:	781a      	ldrb	r2, [r3, #0]
 8012322:	42b2      	cmp	r2, r6
 8012324:	d000      	beq.n	8012328 <__svfiscanf_r+0xa8>
 8012326:	e128      	b.n	801257a <__svfiscanf_r+0x2fa>
 8012328:	3301      	adds	r3, #1
 801232a:	6862      	ldr	r2, [r4, #4]
 801232c:	6023      	str	r3, [r4, #0]
 801232e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012330:	3a01      	subs	r2, #1
 8012332:	3301      	adds	r3, #1
 8012334:	6062      	str	r2, [r4, #4]
 8012336:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012338:	e7d6      	b.n	80122e8 <__svfiscanf_r+0x68>
 801233a:	9245      	str	r2, [sp, #276]	@ 0x114
 801233c:	9243      	str	r2, [sp, #268]	@ 0x10c
 801233e:	7873      	ldrb	r3, [r6, #1]
 8012340:	2b2a      	cmp	r3, #42	@ 0x2a
 8012342:	d102      	bne.n	801234a <__svfiscanf_r+0xca>
 8012344:	3b1a      	subs	r3, #26
 8012346:	9343      	str	r3, [sp, #268]	@ 0x10c
 8012348:	1cb5      	adds	r5, r6, #2
 801234a:	002e      	movs	r6, r5
 801234c:	220a      	movs	r2, #10
 801234e:	7831      	ldrb	r1, [r6, #0]
 8012350:	1c75      	adds	r5, r6, #1
 8012352:	000b      	movs	r3, r1
 8012354:	3b30      	subs	r3, #48	@ 0x30
 8012356:	2b09      	cmp	r3, #9
 8012358:	d91e      	bls.n	8012398 <__svfiscanf_r+0x118>
 801235a:	4f7d      	ldr	r7, [pc, #500]	@ (8012550 <__svfiscanf_r+0x2d0>)
 801235c:	2203      	movs	r2, #3
 801235e:	0038      	movs	r0, r7
 8012360:	f000 fd72 	bl	8012e48 <memchr>
 8012364:	2800      	cmp	r0, #0
 8012366:	d006      	beq.n	8012376 <__svfiscanf_r+0xf6>
 8012368:	2301      	movs	r3, #1
 801236a:	1bc0      	subs	r0, r0, r7
 801236c:	4083      	lsls	r3, r0
 801236e:	002e      	movs	r6, r5
 8012370:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8012372:	4313      	orrs	r3, r2
 8012374:	9343      	str	r3, [sp, #268]	@ 0x10c
 8012376:	1c75      	adds	r5, r6, #1
 8012378:	7836      	ldrb	r6, [r6, #0]
 801237a:	2e78      	cmp	r6, #120	@ 0x78
 801237c:	d807      	bhi.n	801238e <__svfiscanf_r+0x10e>
 801237e:	2e57      	cmp	r6, #87	@ 0x57
 8012380:	d811      	bhi.n	80123a6 <__svfiscanf_r+0x126>
 8012382:	2e25      	cmp	r6, #37	@ 0x25
 8012384:	d0c8      	beq.n	8012318 <__svfiscanf_r+0x98>
 8012386:	d835      	bhi.n	80123f4 <__svfiscanf_r+0x174>
 8012388:	2e00      	cmp	r6, #0
 801238a:	d100      	bne.n	801238e <__svfiscanf_r+0x10e>
 801238c:	e0a6      	b.n	80124dc <__svfiscanf_r+0x25c>
 801238e:	2303      	movs	r3, #3
 8012390:	9349      	str	r3, [sp, #292]	@ 0x124
 8012392:	3307      	adds	r3, #7
 8012394:	9344      	str	r3, [sp, #272]	@ 0x110
 8012396:	e05f      	b.n	8012458 <__svfiscanf_r+0x1d8>
 8012398:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801239a:	002e      	movs	r6, r5
 801239c:	4353      	muls	r3, r2
 801239e:	3b30      	subs	r3, #48	@ 0x30
 80123a0:	185b      	adds	r3, r3, r1
 80123a2:	9345      	str	r3, [sp, #276]	@ 0x114
 80123a4:	e7d3      	b.n	801234e <__svfiscanf_r+0xce>
 80123a6:	0030      	movs	r0, r6
 80123a8:	3858      	subs	r0, #88	@ 0x58
 80123aa:	2820      	cmp	r0, #32
 80123ac:	d8ef      	bhi.n	801238e <__svfiscanf_r+0x10e>
 80123ae:	f7ed feb5 	bl	800011c <__gnu_thumb1_case_shi>
 80123b2:	0041      	.short	0x0041
 80123b4:	ffeeffee 	.word	0xffeeffee
 80123b8:	ffee0073 	.word	0xffee0073
 80123bc:	ffeeffee 	.word	0xffeeffee
 80123c0:	ffeeffee 	.word	0xffeeffee
 80123c4:	ffeeffee 	.word	0xffeeffee
 80123c8:	0071007e 	.word	0x0071007e
 80123cc:	00240024 	.word	0x00240024
 80123d0:	ffee0024 	.word	0xffee0024
 80123d4:	ffee004b 	.word	0xffee004b
 80123d8:	ffeeffee 	.word	0xffeeffee
 80123dc:	0086ffee 	.word	0x0086ffee
 80123e0:	003d004f 	.word	0x003d004f
 80123e4:	ffeeffee 	.word	0xffeeffee
 80123e8:	ffee0084 	.word	0xffee0084
 80123ec:	ffee0071 	.word	0xffee0071
 80123f0:	0041ffee 	.word	0x0041ffee
 80123f4:	3e45      	subs	r6, #69	@ 0x45
 80123f6:	2e02      	cmp	r6, #2
 80123f8:	d8c9      	bhi.n	801238e <__svfiscanf_r+0x10e>
 80123fa:	2305      	movs	r3, #5
 80123fc:	e02b      	b.n	8012456 <__svfiscanf_r+0x1d6>
 80123fe:	23c0      	movs	r3, #192	@ 0xc0
 8012400:	aa43      	add	r2, sp, #268	@ 0x10c
 8012402:	005b      	lsls	r3, r3, #1
 8012404:	0021      	movs	r1, r4
 8012406:	58d3      	ldr	r3, [r2, r3]
 8012408:	9801      	ldr	r0, [sp, #4]
 801240a:	4798      	blx	r3
 801240c:	2800      	cmp	r0, #0
 801240e:	d086      	beq.n	801231e <__svfiscanf_r+0x9e>
 8012410:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012412:	07db      	lsls	r3, r3, #31
 8012414:	d400      	bmi.n	8012418 <__svfiscanf_r+0x198>
 8012416:	e0a8      	b.n	801256a <__svfiscanf_r+0x2ea>
 8012418:	9846      	ldr	r0, [sp, #280]	@ 0x118
 801241a:	2800      	cmp	r0, #0
 801241c:	d067      	beq.n	80124ee <__svfiscanf_r+0x26e>
 801241e:	89a3      	ldrh	r3, [r4, #12]
 8012420:	065b      	lsls	r3, r3, #25
 8012422:	d464      	bmi.n	80124ee <__svfiscanf_r+0x26e>
 8012424:	23a5      	movs	r3, #165	@ 0xa5
 8012426:	009b      	lsls	r3, r3, #2
 8012428:	449d      	add	sp, r3
 801242a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801242c:	2320      	movs	r3, #32
 801242e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8012430:	4313      	orrs	r3, r2
 8012432:	9343      	str	r3, [sp, #268]	@ 0x10c
 8012434:	2380      	movs	r3, #128	@ 0x80
 8012436:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8012438:	009b      	lsls	r3, r3, #2
 801243a:	4313      	orrs	r3, r2
 801243c:	9343      	str	r3, [sp, #268]	@ 0x10c
 801243e:	2310      	movs	r3, #16
 8012440:	9344      	str	r3, [sp, #272]	@ 0x110
 8012442:	2e6e      	cmp	r6, #110	@ 0x6e
 8012444:	d902      	bls.n	801244c <__svfiscanf_r+0x1cc>
 8012446:	e005      	b.n	8012454 <__svfiscanf_r+0x1d4>
 8012448:	2300      	movs	r3, #0
 801244a:	9344      	str	r3, [sp, #272]	@ 0x110
 801244c:	2303      	movs	r3, #3
 801244e:	e002      	b.n	8012456 <__svfiscanf_r+0x1d6>
 8012450:	2308      	movs	r3, #8
 8012452:	9344      	str	r3, [sp, #272]	@ 0x110
 8012454:	2304      	movs	r3, #4
 8012456:	9349      	str	r3, [sp, #292]	@ 0x124
 8012458:	6863      	ldr	r3, [r4, #4]
 801245a:	2b00      	cmp	r3, #0
 801245c:	dd4a      	ble.n	80124f4 <__svfiscanf_r+0x274>
 801245e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012460:	065b      	lsls	r3, r3, #25
 8012462:	d408      	bmi.n	8012476 <__svfiscanf_r+0x1f6>
 8012464:	27c0      	movs	r7, #192	@ 0xc0
 8012466:	2608      	movs	r6, #8
 8012468:	007f      	lsls	r7, r7, #1
 801246a:	6823      	ldr	r3, [r4, #0]
 801246c:	4937      	ldr	r1, [pc, #220]	@ (801254c <__svfiscanf_r+0x2cc>)
 801246e:	781a      	ldrb	r2, [r3, #0]
 8012470:	5c8a      	ldrb	r2, [r1, r2]
 8012472:	4232      	tst	r2, r6
 8012474:	d148      	bne.n	8012508 <__svfiscanf_r+0x288>
 8012476:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8012478:	2b02      	cmp	r3, #2
 801247a:	dc58      	bgt.n	801252e <__svfiscanf_r+0x2ae>
 801247c:	0022      	movs	r2, r4
 801247e:	9801      	ldr	r0, [sp, #4]
 8012480:	ab02      	add	r3, sp, #8
 8012482:	a943      	add	r1, sp, #268	@ 0x10c
 8012484:	f000 f89a 	bl	80125bc <_scanf_chars>
 8012488:	2801      	cmp	r0, #1
 801248a:	d076      	beq.n	801257a <__svfiscanf_r+0x2fa>
 801248c:	2802      	cmp	r0, #2
 801248e:	d000      	beq.n	8012492 <__svfiscanf_r+0x212>
 8012490:	e72a      	b.n	80122e8 <__svfiscanf_r+0x68>
 8012492:	e7bd      	b.n	8012410 <__svfiscanf_r+0x190>
 8012494:	230a      	movs	r3, #10
 8012496:	e7d3      	b.n	8012440 <__svfiscanf_r+0x1c0>
 8012498:	0029      	movs	r1, r5
 801249a:	a803      	add	r0, sp, #12
 801249c:	f000 fb90 	bl	8012bc0 <__sccl>
 80124a0:	2340      	movs	r3, #64	@ 0x40
 80124a2:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80124a4:	0005      	movs	r5, r0
 80124a6:	4313      	orrs	r3, r2
 80124a8:	9343      	str	r3, [sp, #268]	@ 0x10c
 80124aa:	2301      	movs	r3, #1
 80124ac:	e7d3      	b.n	8012456 <__svfiscanf_r+0x1d6>
 80124ae:	2340      	movs	r3, #64	@ 0x40
 80124b0:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80124b2:	4313      	orrs	r3, r2
 80124b4:	9343      	str	r3, [sp, #268]	@ 0x10c
 80124b6:	2300      	movs	r3, #0
 80124b8:	e7cd      	b.n	8012456 <__svfiscanf_r+0x1d6>
 80124ba:	2302      	movs	r3, #2
 80124bc:	e7cb      	b.n	8012456 <__svfiscanf_r+0x1d6>
 80124be:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80124c0:	06d3      	lsls	r3, r2, #27
 80124c2:	d500      	bpl.n	80124c6 <__svfiscanf_r+0x246>
 80124c4:	e710      	b.n	80122e8 <__svfiscanf_r+0x68>
 80124c6:	9b02      	ldr	r3, [sp, #8]
 80124c8:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 80124ca:	1d18      	adds	r0, r3, #4
 80124cc:	9002      	str	r0, [sp, #8]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	07d6      	lsls	r6, r2, #31
 80124d2:	d501      	bpl.n	80124d8 <__svfiscanf_r+0x258>
 80124d4:	8019      	strh	r1, [r3, #0]
 80124d6:	e707      	b.n	80122e8 <__svfiscanf_r+0x68>
 80124d8:	6019      	str	r1, [r3, #0]
 80124da:	e705      	b.n	80122e8 <__svfiscanf_r+0x68>
 80124dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80124de:	07db      	lsls	r3, r3, #31
 80124e0:	d405      	bmi.n	80124ee <__svfiscanf_r+0x26e>
 80124e2:	89a3      	ldrh	r3, [r4, #12]
 80124e4:	059b      	lsls	r3, r3, #22
 80124e6:	d402      	bmi.n	80124ee <__svfiscanf_r+0x26e>
 80124e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80124ea:	f7ff f999 	bl	8011820 <__retarget_lock_release_recursive>
 80124ee:	2001      	movs	r0, #1
 80124f0:	4240      	negs	r0, r0
 80124f2:	e797      	b.n	8012424 <__svfiscanf_r+0x1a4>
 80124f4:	23c0      	movs	r3, #192	@ 0xc0
 80124f6:	aa43      	add	r2, sp, #268	@ 0x10c
 80124f8:	005b      	lsls	r3, r3, #1
 80124fa:	0021      	movs	r1, r4
 80124fc:	58d3      	ldr	r3, [r2, r3]
 80124fe:	9801      	ldr	r0, [sp, #4]
 8012500:	4798      	blx	r3
 8012502:	2800      	cmp	r0, #0
 8012504:	d0ab      	beq.n	801245e <__svfiscanf_r+0x1de>
 8012506:	e783      	b.n	8012410 <__svfiscanf_r+0x190>
 8012508:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 801250a:	3201      	adds	r2, #1
 801250c:	9247      	str	r2, [sp, #284]	@ 0x11c
 801250e:	6862      	ldr	r2, [r4, #4]
 8012510:	3a01      	subs	r2, #1
 8012512:	6062      	str	r2, [r4, #4]
 8012514:	2a00      	cmp	r2, #0
 8012516:	dd02      	ble.n	801251e <__svfiscanf_r+0x29e>
 8012518:	3301      	adds	r3, #1
 801251a:	6023      	str	r3, [r4, #0]
 801251c:	e7a5      	b.n	801246a <__svfiscanf_r+0x1ea>
 801251e:	ab43      	add	r3, sp, #268	@ 0x10c
 8012520:	0021      	movs	r1, r4
 8012522:	59db      	ldr	r3, [r3, r7]
 8012524:	9801      	ldr	r0, [sp, #4]
 8012526:	4798      	blx	r3
 8012528:	2800      	cmp	r0, #0
 801252a:	d09e      	beq.n	801246a <__svfiscanf_r+0x1ea>
 801252c:	e770      	b.n	8012410 <__svfiscanf_r+0x190>
 801252e:	2b04      	cmp	r3, #4
 8012530:	dc10      	bgt.n	8012554 <__svfiscanf_r+0x2d4>
 8012532:	0022      	movs	r2, r4
 8012534:	9801      	ldr	r0, [sp, #4]
 8012536:	ab02      	add	r3, sp, #8
 8012538:	a943      	add	r1, sp, #268	@ 0x10c
 801253a:	f000 f89f 	bl	801267c <_scanf_i>
 801253e:	e7a3      	b.n	8012488 <__svfiscanf_r+0x208>
 8012540:	fffffd6c 	.word	0xfffffd6c
 8012544:	08012cb1 	.word	0x08012cb1
 8012548:	08012ad5 	.word	0x08012ad5
 801254c:	08014c03 	.word	0x08014c03
 8012550:	08014bba 	.word	0x08014bba
 8012554:	4b0e      	ldr	r3, [pc, #56]	@ (8012590 <__svfiscanf_r+0x310>)
 8012556:	2b00      	cmp	r3, #0
 8012558:	d100      	bne.n	801255c <__svfiscanf_r+0x2dc>
 801255a:	e6c5      	b.n	80122e8 <__svfiscanf_r+0x68>
 801255c:	0022      	movs	r2, r4
 801255e:	9801      	ldr	r0, [sp, #4]
 8012560:	ab02      	add	r3, sp, #8
 8012562:	a943      	add	r1, sp, #268	@ 0x10c
 8012564:	e000      	b.n	8012568 <__svfiscanf_r+0x2e8>
 8012566:	bf00      	nop
 8012568:	e78e      	b.n	8012488 <__svfiscanf_r+0x208>
 801256a:	89a3      	ldrh	r3, [r4, #12]
 801256c:	059b      	lsls	r3, r3, #22
 801256e:	d500      	bpl.n	8012572 <__svfiscanf_r+0x2f2>
 8012570:	e752      	b.n	8012418 <__svfiscanf_r+0x198>
 8012572:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012574:	f7ff f954 	bl	8011820 <__retarget_lock_release_recursive>
 8012578:	e74e      	b.n	8012418 <__svfiscanf_r+0x198>
 801257a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801257c:	07db      	lsls	r3, r3, #31
 801257e:	d405      	bmi.n	801258c <__svfiscanf_r+0x30c>
 8012580:	89a3      	ldrh	r3, [r4, #12]
 8012582:	059b      	lsls	r3, r3, #22
 8012584:	d402      	bmi.n	801258c <__svfiscanf_r+0x30c>
 8012586:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012588:	f7ff f94a 	bl	8011820 <__retarget_lock_release_recursive>
 801258c:	9846      	ldr	r0, [sp, #280]	@ 0x118
 801258e:	e749      	b.n	8012424 <__svfiscanf_r+0x1a4>
 8012590:	00000000 	.word	0x00000000

08012594 <_vfiscanf_r>:
 8012594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012596:	0004      	movs	r4, r0
 8012598:	000d      	movs	r5, r1
 801259a:	0016      	movs	r6, r2
 801259c:	001f      	movs	r7, r3
 801259e:	2800      	cmp	r0, #0
 80125a0:	d004      	beq.n	80125ac <_vfiscanf_r+0x18>
 80125a2:	6a03      	ldr	r3, [r0, #32]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d101      	bne.n	80125ac <_vfiscanf_r+0x18>
 80125a8:	f7fe fe0e 	bl	80111c8 <__sinit>
 80125ac:	003b      	movs	r3, r7
 80125ae:	0032      	movs	r2, r6
 80125b0:	0029      	movs	r1, r5
 80125b2:	0020      	movs	r0, r4
 80125b4:	f7ff fe64 	bl	8012280 <__svfiscanf_r>
 80125b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080125bc <_scanf_chars>:
 80125bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125be:	0015      	movs	r5, r2
 80125c0:	688a      	ldr	r2, [r1, #8]
 80125c2:	000c      	movs	r4, r1
 80125c4:	9001      	str	r0, [sp, #4]
 80125c6:	2a00      	cmp	r2, #0
 80125c8:	d104      	bne.n	80125d4 <_scanf_chars+0x18>
 80125ca:	698a      	ldr	r2, [r1, #24]
 80125cc:	2a00      	cmp	r2, #0
 80125ce:	d117      	bne.n	8012600 <_scanf_chars+0x44>
 80125d0:	3201      	adds	r2, #1
 80125d2:	60a2      	str	r2, [r4, #8]
 80125d4:	6822      	ldr	r2, [r4, #0]
 80125d6:	06d2      	lsls	r2, r2, #27
 80125d8:	d403      	bmi.n	80125e2 <_scanf_chars+0x26>
 80125da:	681a      	ldr	r2, [r3, #0]
 80125dc:	1d11      	adds	r1, r2, #4
 80125de:	6019      	str	r1, [r3, #0]
 80125e0:	6817      	ldr	r7, [r2, #0]
 80125e2:	2600      	movs	r6, #0
 80125e4:	69a0      	ldr	r0, [r4, #24]
 80125e6:	2800      	cmp	r0, #0
 80125e8:	d016      	beq.n	8012618 <_scanf_chars+0x5c>
 80125ea:	2801      	cmp	r0, #1
 80125ec:	d10b      	bne.n	8012606 <_scanf_chars+0x4a>
 80125ee:	682b      	ldr	r3, [r5, #0]
 80125f0:	6962      	ldr	r2, [r4, #20]
 80125f2:	781b      	ldrb	r3, [r3, #0]
 80125f4:	5cd3      	ldrb	r3, [r2, r3]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d10e      	bne.n	8012618 <_scanf_chars+0x5c>
 80125fa:	2e00      	cmp	r6, #0
 80125fc:	d03b      	beq.n	8012676 <_scanf_chars+0xba>
 80125fe:	e029      	b.n	8012654 <_scanf_chars+0x98>
 8012600:	2201      	movs	r2, #1
 8012602:	4252      	negs	r2, r2
 8012604:	e7e5      	b.n	80125d2 <_scanf_chars+0x16>
 8012606:	2802      	cmp	r0, #2
 8012608:	d124      	bne.n	8012654 <_scanf_chars+0x98>
 801260a:	682b      	ldr	r3, [r5, #0]
 801260c:	4a1a      	ldr	r2, [pc, #104]	@ (8012678 <_scanf_chars+0xbc>)
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	5cd3      	ldrb	r3, [r2, r3]
 8012612:	2208      	movs	r2, #8
 8012614:	4213      	tst	r3, r2
 8012616:	d11d      	bne.n	8012654 <_scanf_chars+0x98>
 8012618:	2210      	movs	r2, #16
 801261a:	6823      	ldr	r3, [r4, #0]
 801261c:	3601      	adds	r6, #1
 801261e:	4213      	tst	r3, r2
 8012620:	d103      	bne.n	801262a <_scanf_chars+0x6e>
 8012622:	682b      	ldr	r3, [r5, #0]
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	703b      	strb	r3, [r7, #0]
 8012628:	3701      	adds	r7, #1
 801262a:	682a      	ldr	r2, [r5, #0]
 801262c:	686b      	ldr	r3, [r5, #4]
 801262e:	3201      	adds	r2, #1
 8012630:	602a      	str	r2, [r5, #0]
 8012632:	68a2      	ldr	r2, [r4, #8]
 8012634:	3b01      	subs	r3, #1
 8012636:	3a01      	subs	r2, #1
 8012638:	606b      	str	r3, [r5, #4]
 801263a:	60a2      	str	r2, [r4, #8]
 801263c:	2a00      	cmp	r2, #0
 801263e:	d009      	beq.n	8012654 <_scanf_chars+0x98>
 8012640:	2b00      	cmp	r3, #0
 8012642:	dccf      	bgt.n	80125e4 <_scanf_chars+0x28>
 8012644:	23c0      	movs	r3, #192	@ 0xc0
 8012646:	005b      	lsls	r3, r3, #1
 8012648:	0029      	movs	r1, r5
 801264a:	58e3      	ldr	r3, [r4, r3]
 801264c:	9801      	ldr	r0, [sp, #4]
 801264e:	4798      	blx	r3
 8012650:	2800      	cmp	r0, #0
 8012652:	d0c7      	beq.n	80125e4 <_scanf_chars+0x28>
 8012654:	6822      	ldr	r2, [r4, #0]
 8012656:	2310      	movs	r3, #16
 8012658:	0011      	movs	r1, r2
 801265a:	4019      	ands	r1, r3
 801265c:	421a      	tst	r2, r3
 801265e:	d106      	bne.n	801266e <_scanf_chars+0xb2>
 8012660:	68e3      	ldr	r3, [r4, #12]
 8012662:	3301      	adds	r3, #1
 8012664:	60e3      	str	r3, [r4, #12]
 8012666:	69a3      	ldr	r3, [r4, #24]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d000      	beq.n	801266e <_scanf_chars+0xb2>
 801266c:	7039      	strb	r1, [r7, #0]
 801266e:	2000      	movs	r0, #0
 8012670:	6923      	ldr	r3, [r4, #16]
 8012672:	199b      	adds	r3, r3, r6
 8012674:	6123      	str	r3, [r4, #16]
 8012676:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012678:	08014c03 	.word	0x08014c03

0801267c <_scanf_i>:
 801267c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801267e:	b08b      	sub	sp, #44	@ 0x2c
 8012680:	9301      	str	r3, [sp, #4]
 8012682:	4b78      	ldr	r3, [pc, #480]	@ (8012864 <_scanf_i+0x1e8>)
 8012684:	0016      	movs	r6, r2
 8012686:	9004      	str	r0, [sp, #16]
 8012688:	aa07      	add	r2, sp, #28
 801268a:	cba1      	ldmia	r3!, {r0, r5, r7}
 801268c:	c2a1      	stmia	r2!, {r0, r5, r7}
 801268e:	4a76      	ldr	r2, [pc, #472]	@ (8012868 <_scanf_i+0x1ec>)
 8012690:	698b      	ldr	r3, [r1, #24]
 8012692:	000c      	movs	r4, r1
 8012694:	9205      	str	r2, [sp, #20]
 8012696:	2b03      	cmp	r3, #3
 8012698:	d101      	bne.n	801269e <_scanf_i+0x22>
 801269a:	4b74      	ldr	r3, [pc, #464]	@ (801286c <_scanf_i+0x1f0>)
 801269c:	9305      	str	r3, [sp, #20]
 801269e:	22ae      	movs	r2, #174	@ 0xae
 80126a0:	2000      	movs	r0, #0
 80126a2:	68a3      	ldr	r3, [r4, #8]
 80126a4:	0052      	lsls	r2, r2, #1
 80126a6:	1e59      	subs	r1, r3, #1
 80126a8:	9003      	str	r0, [sp, #12]
 80126aa:	4291      	cmp	r1, r2
 80126ac:	d905      	bls.n	80126ba <_scanf_i+0x3e>
 80126ae:	3b5e      	subs	r3, #94	@ 0x5e
 80126b0:	3bff      	subs	r3, #255	@ 0xff
 80126b2:	9303      	str	r3, [sp, #12]
 80126b4:	235e      	movs	r3, #94	@ 0x5e
 80126b6:	33ff      	adds	r3, #255	@ 0xff
 80126b8:	60a3      	str	r3, [r4, #8]
 80126ba:	0023      	movs	r3, r4
 80126bc:	331c      	adds	r3, #28
 80126be:	9300      	str	r3, [sp, #0]
 80126c0:	23d0      	movs	r3, #208	@ 0xd0
 80126c2:	2700      	movs	r7, #0
 80126c4:	6822      	ldr	r2, [r4, #0]
 80126c6:	011b      	lsls	r3, r3, #4
 80126c8:	4313      	orrs	r3, r2
 80126ca:	6023      	str	r3, [r4, #0]
 80126cc:	9b00      	ldr	r3, [sp, #0]
 80126ce:	9302      	str	r3, [sp, #8]
 80126d0:	6833      	ldr	r3, [r6, #0]
 80126d2:	a807      	add	r0, sp, #28
 80126d4:	7819      	ldrb	r1, [r3, #0]
 80126d6:	00bb      	lsls	r3, r7, #2
 80126d8:	2202      	movs	r2, #2
 80126da:	5818      	ldr	r0, [r3, r0]
 80126dc:	f000 fbb4 	bl	8012e48 <memchr>
 80126e0:	2800      	cmp	r0, #0
 80126e2:	d029      	beq.n	8012738 <_scanf_i+0xbc>
 80126e4:	2f01      	cmp	r7, #1
 80126e6:	d15e      	bne.n	80127a6 <_scanf_i+0x12a>
 80126e8:	6863      	ldr	r3, [r4, #4]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d106      	bne.n	80126fc <_scanf_i+0x80>
 80126ee:	3308      	adds	r3, #8
 80126f0:	6822      	ldr	r2, [r4, #0]
 80126f2:	6063      	str	r3, [r4, #4]
 80126f4:	33f9      	adds	r3, #249	@ 0xf9
 80126f6:	33ff      	adds	r3, #255	@ 0xff
 80126f8:	4313      	orrs	r3, r2
 80126fa:	6023      	str	r3, [r4, #0]
 80126fc:	6823      	ldr	r3, [r4, #0]
 80126fe:	4a5c      	ldr	r2, [pc, #368]	@ (8012870 <_scanf_i+0x1f4>)
 8012700:	4013      	ands	r3, r2
 8012702:	6023      	str	r3, [r4, #0]
 8012704:	68a3      	ldr	r3, [r4, #8]
 8012706:	1e5a      	subs	r2, r3, #1
 8012708:	60a2      	str	r2, [r4, #8]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d014      	beq.n	8012738 <_scanf_i+0xbc>
 801270e:	6833      	ldr	r3, [r6, #0]
 8012710:	1c5a      	adds	r2, r3, #1
 8012712:	6032      	str	r2, [r6, #0]
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	9a02      	ldr	r2, [sp, #8]
 8012718:	7013      	strb	r3, [r2, #0]
 801271a:	6873      	ldr	r3, [r6, #4]
 801271c:	1c55      	adds	r5, r2, #1
 801271e:	3b01      	subs	r3, #1
 8012720:	6073      	str	r3, [r6, #4]
 8012722:	2b00      	cmp	r3, #0
 8012724:	dc07      	bgt.n	8012736 <_scanf_i+0xba>
 8012726:	23c0      	movs	r3, #192	@ 0xc0
 8012728:	005b      	lsls	r3, r3, #1
 801272a:	0031      	movs	r1, r6
 801272c:	58e3      	ldr	r3, [r4, r3]
 801272e:	9804      	ldr	r0, [sp, #16]
 8012730:	4798      	blx	r3
 8012732:	2800      	cmp	r0, #0
 8012734:	d17e      	bne.n	8012834 <_scanf_i+0x1b8>
 8012736:	9502      	str	r5, [sp, #8]
 8012738:	3701      	adds	r7, #1
 801273a:	2f03      	cmp	r7, #3
 801273c:	d1c8      	bne.n	80126d0 <_scanf_i+0x54>
 801273e:	6863      	ldr	r3, [r4, #4]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d101      	bne.n	8012748 <_scanf_i+0xcc>
 8012744:	330a      	adds	r3, #10
 8012746:	6063      	str	r3, [r4, #4]
 8012748:	2700      	movs	r7, #0
 801274a:	6863      	ldr	r3, [r4, #4]
 801274c:	4949      	ldr	r1, [pc, #292]	@ (8012874 <_scanf_i+0x1f8>)
 801274e:	6960      	ldr	r0, [r4, #20]
 8012750:	1ac9      	subs	r1, r1, r3
 8012752:	f000 fa35 	bl	8012bc0 <__sccl>
 8012756:	9d02      	ldr	r5, [sp, #8]
 8012758:	68a3      	ldr	r3, [r4, #8]
 801275a:	6820      	ldr	r0, [r4, #0]
 801275c:	9302      	str	r3, [sp, #8]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d03f      	beq.n	80127e2 <_scanf_i+0x166>
 8012762:	6831      	ldr	r1, [r6, #0]
 8012764:	6963      	ldr	r3, [r4, #20]
 8012766:	780a      	ldrb	r2, [r1, #0]
 8012768:	5c9b      	ldrb	r3, [r3, r2]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d039      	beq.n	80127e2 <_scanf_i+0x166>
 801276e:	2a30      	cmp	r2, #48	@ 0x30
 8012770:	d128      	bne.n	80127c4 <_scanf_i+0x148>
 8012772:	2380      	movs	r3, #128	@ 0x80
 8012774:	011b      	lsls	r3, r3, #4
 8012776:	4218      	tst	r0, r3
 8012778:	d024      	beq.n	80127c4 <_scanf_i+0x148>
 801277a:	9b03      	ldr	r3, [sp, #12]
 801277c:	3701      	adds	r7, #1
 801277e:	2b00      	cmp	r3, #0
 8012780:	d005      	beq.n	801278e <_scanf_i+0x112>
 8012782:	001a      	movs	r2, r3
 8012784:	9b02      	ldr	r3, [sp, #8]
 8012786:	3a01      	subs	r2, #1
 8012788:	3301      	adds	r3, #1
 801278a:	9203      	str	r2, [sp, #12]
 801278c:	60a3      	str	r3, [r4, #8]
 801278e:	6873      	ldr	r3, [r6, #4]
 8012790:	3b01      	subs	r3, #1
 8012792:	6073      	str	r3, [r6, #4]
 8012794:	2b00      	cmp	r3, #0
 8012796:	dd1c      	ble.n	80127d2 <_scanf_i+0x156>
 8012798:	6833      	ldr	r3, [r6, #0]
 801279a:	3301      	adds	r3, #1
 801279c:	6033      	str	r3, [r6, #0]
 801279e:	68a3      	ldr	r3, [r4, #8]
 80127a0:	3b01      	subs	r3, #1
 80127a2:	60a3      	str	r3, [r4, #8]
 80127a4:	e7d8      	b.n	8012758 <_scanf_i+0xdc>
 80127a6:	2f02      	cmp	r7, #2
 80127a8:	d1ac      	bne.n	8012704 <_scanf_i+0x88>
 80127aa:	23c0      	movs	r3, #192	@ 0xc0
 80127ac:	2180      	movs	r1, #128	@ 0x80
 80127ae:	6822      	ldr	r2, [r4, #0]
 80127b0:	00db      	lsls	r3, r3, #3
 80127b2:	4013      	ands	r3, r2
 80127b4:	0089      	lsls	r1, r1, #2
 80127b6:	428b      	cmp	r3, r1
 80127b8:	d1c1      	bne.n	801273e <_scanf_i+0xc2>
 80127ba:	2310      	movs	r3, #16
 80127bc:	6063      	str	r3, [r4, #4]
 80127be:	33f0      	adds	r3, #240	@ 0xf0
 80127c0:	4313      	orrs	r3, r2
 80127c2:	e79e      	b.n	8012702 <_scanf_i+0x86>
 80127c4:	4b2c      	ldr	r3, [pc, #176]	@ (8012878 <_scanf_i+0x1fc>)
 80127c6:	4003      	ands	r3, r0
 80127c8:	6023      	str	r3, [r4, #0]
 80127ca:	780b      	ldrb	r3, [r1, #0]
 80127cc:	702b      	strb	r3, [r5, #0]
 80127ce:	3501      	adds	r5, #1
 80127d0:	e7dd      	b.n	801278e <_scanf_i+0x112>
 80127d2:	23c0      	movs	r3, #192	@ 0xc0
 80127d4:	005b      	lsls	r3, r3, #1
 80127d6:	0031      	movs	r1, r6
 80127d8:	58e3      	ldr	r3, [r4, r3]
 80127da:	9804      	ldr	r0, [sp, #16]
 80127dc:	4798      	blx	r3
 80127de:	2800      	cmp	r0, #0
 80127e0:	d0dd      	beq.n	801279e <_scanf_i+0x122>
 80127e2:	6823      	ldr	r3, [r4, #0]
 80127e4:	05db      	lsls	r3, r3, #23
 80127e6:	d50e      	bpl.n	8012806 <_scanf_i+0x18a>
 80127e8:	9b00      	ldr	r3, [sp, #0]
 80127ea:	429d      	cmp	r5, r3
 80127ec:	d907      	bls.n	80127fe <_scanf_i+0x182>
 80127ee:	23be      	movs	r3, #190	@ 0xbe
 80127f0:	3d01      	subs	r5, #1
 80127f2:	005b      	lsls	r3, r3, #1
 80127f4:	0032      	movs	r2, r6
 80127f6:	7829      	ldrb	r1, [r5, #0]
 80127f8:	58e3      	ldr	r3, [r4, r3]
 80127fa:	9804      	ldr	r0, [sp, #16]
 80127fc:	4798      	blx	r3
 80127fe:	9b00      	ldr	r3, [sp, #0]
 8012800:	2001      	movs	r0, #1
 8012802:	429d      	cmp	r5, r3
 8012804:	d029      	beq.n	801285a <_scanf_i+0x1de>
 8012806:	6821      	ldr	r1, [r4, #0]
 8012808:	2310      	movs	r3, #16
 801280a:	000a      	movs	r2, r1
 801280c:	401a      	ands	r2, r3
 801280e:	4219      	tst	r1, r3
 8012810:	d11c      	bne.n	801284c <_scanf_i+0x1d0>
 8012812:	702a      	strb	r2, [r5, #0]
 8012814:	6863      	ldr	r3, [r4, #4]
 8012816:	9900      	ldr	r1, [sp, #0]
 8012818:	9804      	ldr	r0, [sp, #16]
 801281a:	9e05      	ldr	r6, [sp, #20]
 801281c:	47b0      	blx	r6
 801281e:	9b01      	ldr	r3, [sp, #4]
 8012820:	6822      	ldr	r2, [r4, #0]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	0691      	lsls	r1, r2, #26
 8012826:	d507      	bpl.n	8012838 <_scanf_i+0x1bc>
 8012828:	9901      	ldr	r1, [sp, #4]
 801282a:	1d1a      	adds	r2, r3, #4
 801282c:	600a      	str	r2, [r1, #0]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	6018      	str	r0, [r3, #0]
 8012832:	e008      	b.n	8012846 <_scanf_i+0x1ca>
 8012834:	2700      	movs	r7, #0
 8012836:	e7d4      	b.n	80127e2 <_scanf_i+0x166>
 8012838:	1d19      	adds	r1, r3, #4
 801283a:	07d6      	lsls	r6, r2, #31
 801283c:	d50f      	bpl.n	801285e <_scanf_i+0x1e2>
 801283e:	9a01      	ldr	r2, [sp, #4]
 8012840:	6011      	str	r1, [r2, #0]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	8018      	strh	r0, [r3, #0]
 8012846:	68e3      	ldr	r3, [r4, #12]
 8012848:	3301      	adds	r3, #1
 801284a:	60e3      	str	r3, [r4, #12]
 801284c:	2000      	movs	r0, #0
 801284e:	9b00      	ldr	r3, [sp, #0]
 8012850:	1aed      	subs	r5, r5, r3
 8012852:	6923      	ldr	r3, [r4, #16]
 8012854:	19ed      	adds	r5, r5, r7
 8012856:	195b      	adds	r3, r3, r5
 8012858:	6123      	str	r3, [r4, #16]
 801285a:	b00b      	add	sp, #44	@ 0x2c
 801285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801285e:	9a01      	ldr	r2, [sp, #4]
 8012860:	6011      	str	r1, [r2, #0]
 8012862:	e7e4      	b.n	801282e <_scanf_i+0x1b2>
 8012864:	08014690 	.word	0x08014690
 8012868:	080130dd 	.word	0x080130dd
 801286c:	08012fd1 	.word	0x08012fd1
 8012870:	fffffaff 	.word	0xfffffaff
 8012874:	08014bf7 	.word	0x08014bf7
 8012878:	fffff6ff 	.word	0xfffff6ff

0801287c <__sflush_r>:
 801287c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801287e:	220c      	movs	r2, #12
 8012880:	5e8b      	ldrsh	r3, [r1, r2]
 8012882:	0005      	movs	r5, r0
 8012884:	000c      	movs	r4, r1
 8012886:	071a      	lsls	r2, r3, #28
 8012888:	d456      	bmi.n	8012938 <__sflush_r+0xbc>
 801288a:	684a      	ldr	r2, [r1, #4]
 801288c:	2a00      	cmp	r2, #0
 801288e:	dc02      	bgt.n	8012896 <__sflush_r+0x1a>
 8012890:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8012892:	2a00      	cmp	r2, #0
 8012894:	dd4e      	ble.n	8012934 <__sflush_r+0xb8>
 8012896:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8012898:	2f00      	cmp	r7, #0
 801289a:	d04b      	beq.n	8012934 <__sflush_r+0xb8>
 801289c:	2200      	movs	r2, #0
 801289e:	2080      	movs	r0, #128	@ 0x80
 80128a0:	682e      	ldr	r6, [r5, #0]
 80128a2:	602a      	str	r2, [r5, #0]
 80128a4:	001a      	movs	r2, r3
 80128a6:	0140      	lsls	r0, r0, #5
 80128a8:	6a21      	ldr	r1, [r4, #32]
 80128aa:	4002      	ands	r2, r0
 80128ac:	4203      	tst	r3, r0
 80128ae:	d033      	beq.n	8012918 <__sflush_r+0x9c>
 80128b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80128b2:	89a3      	ldrh	r3, [r4, #12]
 80128b4:	075b      	lsls	r3, r3, #29
 80128b6:	d506      	bpl.n	80128c6 <__sflush_r+0x4a>
 80128b8:	6863      	ldr	r3, [r4, #4]
 80128ba:	1ad2      	subs	r2, r2, r3
 80128bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d001      	beq.n	80128c6 <__sflush_r+0x4a>
 80128c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80128c4:	1ad2      	subs	r2, r2, r3
 80128c6:	2300      	movs	r3, #0
 80128c8:	0028      	movs	r0, r5
 80128ca:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80128cc:	6a21      	ldr	r1, [r4, #32]
 80128ce:	47b8      	blx	r7
 80128d0:	89a2      	ldrh	r2, [r4, #12]
 80128d2:	1c43      	adds	r3, r0, #1
 80128d4:	d106      	bne.n	80128e4 <__sflush_r+0x68>
 80128d6:	6829      	ldr	r1, [r5, #0]
 80128d8:	291d      	cmp	r1, #29
 80128da:	d846      	bhi.n	801296a <__sflush_r+0xee>
 80128dc:	4b29      	ldr	r3, [pc, #164]	@ (8012984 <__sflush_r+0x108>)
 80128de:	410b      	asrs	r3, r1
 80128e0:	07db      	lsls	r3, r3, #31
 80128e2:	d442      	bmi.n	801296a <__sflush_r+0xee>
 80128e4:	2300      	movs	r3, #0
 80128e6:	6063      	str	r3, [r4, #4]
 80128e8:	6923      	ldr	r3, [r4, #16]
 80128ea:	6023      	str	r3, [r4, #0]
 80128ec:	04d2      	lsls	r2, r2, #19
 80128ee:	d505      	bpl.n	80128fc <__sflush_r+0x80>
 80128f0:	1c43      	adds	r3, r0, #1
 80128f2:	d102      	bne.n	80128fa <__sflush_r+0x7e>
 80128f4:	682b      	ldr	r3, [r5, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d100      	bne.n	80128fc <__sflush_r+0x80>
 80128fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80128fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80128fe:	602e      	str	r6, [r5, #0]
 8012900:	2900      	cmp	r1, #0
 8012902:	d017      	beq.n	8012934 <__sflush_r+0xb8>
 8012904:	0023      	movs	r3, r4
 8012906:	3344      	adds	r3, #68	@ 0x44
 8012908:	4299      	cmp	r1, r3
 801290a:	d002      	beq.n	8012912 <__sflush_r+0x96>
 801290c:	0028      	movs	r0, r5
 801290e:	f7fe ff91 	bl	8011834 <_free_r>
 8012912:	2300      	movs	r3, #0
 8012914:	6363      	str	r3, [r4, #52]	@ 0x34
 8012916:	e00d      	b.n	8012934 <__sflush_r+0xb8>
 8012918:	2301      	movs	r3, #1
 801291a:	0028      	movs	r0, r5
 801291c:	47b8      	blx	r7
 801291e:	0002      	movs	r2, r0
 8012920:	1c43      	adds	r3, r0, #1
 8012922:	d1c6      	bne.n	80128b2 <__sflush_r+0x36>
 8012924:	682b      	ldr	r3, [r5, #0]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d0c3      	beq.n	80128b2 <__sflush_r+0x36>
 801292a:	2b1d      	cmp	r3, #29
 801292c:	d001      	beq.n	8012932 <__sflush_r+0xb6>
 801292e:	2b16      	cmp	r3, #22
 8012930:	d11a      	bne.n	8012968 <__sflush_r+0xec>
 8012932:	602e      	str	r6, [r5, #0]
 8012934:	2000      	movs	r0, #0
 8012936:	e01e      	b.n	8012976 <__sflush_r+0xfa>
 8012938:	690e      	ldr	r6, [r1, #16]
 801293a:	2e00      	cmp	r6, #0
 801293c:	d0fa      	beq.n	8012934 <__sflush_r+0xb8>
 801293e:	680f      	ldr	r7, [r1, #0]
 8012940:	600e      	str	r6, [r1, #0]
 8012942:	1bba      	subs	r2, r7, r6
 8012944:	9201      	str	r2, [sp, #4]
 8012946:	2200      	movs	r2, #0
 8012948:	079b      	lsls	r3, r3, #30
 801294a:	d100      	bne.n	801294e <__sflush_r+0xd2>
 801294c:	694a      	ldr	r2, [r1, #20]
 801294e:	60a2      	str	r2, [r4, #8]
 8012950:	9b01      	ldr	r3, [sp, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	ddee      	ble.n	8012934 <__sflush_r+0xb8>
 8012956:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8012958:	0032      	movs	r2, r6
 801295a:	001f      	movs	r7, r3
 801295c:	0028      	movs	r0, r5
 801295e:	9b01      	ldr	r3, [sp, #4]
 8012960:	6a21      	ldr	r1, [r4, #32]
 8012962:	47b8      	blx	r7
 8012964:	2800      	cmp	r0, #0
 8012966:	dc07      	bgt.n	8012978 <__sflush_r+0xfc>
 8012968:	89a2      	ldrh	r2, [r4, #12]
 801296a:	2340      	movs	r3, #64	@ 0x40
 801296c:	2001      	movs	r0, #1
 801296e:	4313      	orrs	r3, r2
 8012970:	b21b      	sxth	r3, r3
 8012972:	81a3      	strh	r3, [r4, #12]
 8012974:	4240      	negs	r0, r0
 8012976:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012978:	9b01      	ldr	r3, [sp, #4]
 801297a:	1836      	adds	r6, r6, r0
 801297c:	1a1b      	subs	r3, r3, r0
 801297e:	9301      	str	r3, [sp, #4]
 8012980:	e7e6      	b.n	8012950 <__sflush_r+0xd4>
 8012982:	46c0      	nop			@ (mov r8, r8)
 8012984:	dfbffffe 	.word	0xdfbffffe

08012988 <_fflush_r>:
 8012988:	690b      	ldr	r3, [r1, #16]
 801298a:	b570      	push	{r4, r5, r6, lr}
 801298c:	0005      	movs	r5, r0
 801298e:	000c      	movs	r4, r1
 8012990:	2b00      	cmp	r3, #0
 8012992:	d102      	bne.n	801299a <_fflush_r+0x12>
 8012994:	2500      	movs	r5, #0
 8012996:	0028      	movs	r0, r5
 8012998:	bd70      	pop	{r4, r5, r6, pc}
 801299a:	2800      	cmp	r0, #0
 801299c:	d004      	beq.n	80129a8 <_fflush_r+0x20>
 801299e:	6a03      	ldr	r3, [r0, #32]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d101      	bne.n	80129a8 <_fflush_r+0x20>
 80129a4:	f7fe fc10 	bl	80111c8 <__sinit>
 80129a8:	220c      	movs	r2, #12
 80129aa:	5ea3      	ldrsh	r3, [r4, r2]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d0f1      	beq.n	8012994 <_fflush_r+0xc>
 80129b0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80129b2:	07d2      	lsls	r2, r2, #31
 80129b4:	d404      	bmi.n	80129c0 <_fflush_r+0x38>
 80129b6:	059b      	lsls	r3, r3, #22
 80129b8:	d402      	bmi.n	80129c0 <_fflush_r+0x38>
 80129ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80129bc:	f7fe ff2f 	bl	801181e <__retarget_lock_acquire_recursive>
 80129c0:	0028      	movs	r0, r5
 80129c2:	0021      	movs	r1, r4
 80129c4:	f7ff ff5a 	bl	801287c <__sflush_r>
 80129c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80129ca:	0005      	movs	r5, r0
 80129cc:	07db      	lsls	r3, r3, #31
 80129ce:	d4e2      	bmi.n	8012996 <_fflush_r+0xe>
 80129d0:	89a3      	ldrh	r3, [r4, #12]
 80129d2:	059b      	lsls	r3, r3, #22
 80129d4:	d4df      	bmi.n	8012996 <_fflush_r+0xe>
 80129d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80129d8:	f7fe ff22 	bl	8011820 <__retarget_lock_release_recursive>
 80129dc:	e7db      	b.n	8012996 <_fflush_r+0xe>
	...

080129e0 <__swhatbuf_r>:
 80129e0:	b570      	push	{r4, r5, r6, lr}
 80129e2:	000e      	movs	r6, r1
 80129e4:	001d      	movs	r5, r3
 80129e6:	230e      	movs	r3, #14
 80129e8:	5ec9      	ldrsh	r1, [r1, r3]
 80129ea:	0014      	movs	r4, r2
 80129ec:	b096      	sub	sp, #88	@ 0x58
 80129ee:	2900      	cmp	r1, #0
 80129f0:	da0c      	bge.n	8012a0c <__swhatbuf_r+0x2c>
 80129f2:	89b2      	ldrh	r2, [r6, #12]
 80129f4:	2380      	movs	r3, #128	@ 0x80
 80129f6:	0011      	movs	r1, r2
 80129f8:	4019      	ands	r1, r3
 80129fa:	421a      	tst	r2, r3
 80129fc:	d114      	bne.n	8012a28 <__swhatbuf_r+0x48>
 80129fe:	2380      	movs	r3, #128	@ 0x80
 8012a00:	00db      	lsls	r3, r3, #3
 8012a02:	2000      	movs	r0, #0
 8012a04:	6029      	str	r1, [r5, #0]
 8012a06:	6023      	str	r3, [r4, #0]
 8012a08:	b016      	add	sp, #88	@ 0x58
 8012a0a:	bd70      	pop	{r4, r5, r6, pc}
 8012a0c:	466a      	mov	r2, sp
 8012a0e:	f000 f9e5 	bl	8012ddc <_fstat_r>
 8012a12:	2800      	cmp	r0, #0
 8012a14:	dbed      	blt.n	80129f2 <__swhatbuf_r+0x12>
 8012a16:	23f0      	movs	r3, #240	@ 0xf0
 8012a18:	9901      	ldr	r1, [sp, #4]
 8012a1a:	021b      	lsls	r3, r3, #8
 8012a1c:	4019      	ands	r1, r3
 8012a1e:	4b04      	ldr	r3, [pc, #16]	@ (8012a30 <__swhatbuf_r+0x50>)
 8012a20:	18c9      	adds	r1, r1, r3
 8012a22:	424b      	negs	r3, r1
 8012a24:	4159      	adcs	r1, r3
 8012a26:	e7ea      	b.n	80129fe <__swhatbuf_r+0x1e>
 8012a28:	2100      	movs	r1, #0
 8012a2a:	2340      	movs	r3, #64	@ 0x40
 8012a2c:	e7e9      	b.n	8012a02 <__swhatbuf_r+0x22>
 8012a2e:	46c0      	nop			@ (mov r8, r8)
 8012a30:	ffffe000 	.word	0xffffe000

08012a34 <__smakebuf_r>:
 8012a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a36:	2602      	movs	r6, #2
 8012a38:	898b      	ldrh	r3, [r1, #12]
 8012a3a:	0005      	movs	r5, r0
 8012a3c:	000c      	movs	r4, r1
 8012a3e:	b085      	sub	sp, #20
 8012a40:	4233      	tst	r3, r6
 8012a42:	d007      	beq.n	8012a54 <__smakebuf_r+0x20>
 8012a44:	0023      	movs	r3, r4
 8012a46:	3347      	adds	r3, #71	@ 0x47
 8012a48:	6023      	str	r3, [r4, #0]
 8012a4a:	6123      	str	r3, [r4, #16]
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	6163      	str	r3, [r4, #20]
 8012a50:	b005      	add	sp, #20
 8012a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a54:	ab03      	add	r3, sp, #12
 8012a56:	aa02      	add	r2, sp, #8
 8012a58:	f7ff ffc2 	bl	80129e0 <__swhatbuf_r>
 8012a5c:	9f02      	ldr	r7, [sp, #8]
 8012a5e:	9001      	str	r0, [sp, #4]
 8012a60:	0039      	movs	r1, r7
 8012a62:	0028      	movs	r0, r5
 8012a64:	f7fe ff5c 	bl	8011920 <_malloc_r>
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	d108      	bne.n	8012a7e <__smakebuf_r+0x4a>
 8012a6c:	220c      	movs	r2, #12
 8012a6e:	5ea3      	ldrsh	r3, [r4, r2]
 8012a70:	059a      	lsls	r2, r3, #22
 8012a72:	d4ed      	bmi.n	8012a50 <__smakebuf_r+0x1c>
 8012a74:	2203      	movs	r2, #3
 8012a76:	4393      	bics	r3, r2
 8012a78:	431e      	orrs	r6, r3
 8012a7a:	81a6      	strh	r6, [r4, #12]
 8012a7c:	e7e2      	b.n	8012a44 <__smakebuf_r+0x10>
 8012a7e:	2380      	movs	r3, #128	@ 0x80
 8012a80:	89a2      	ldrh	r2, [r4, #12]
 8012a82:	6020      	str	r0, [r4, #0]
 8012a84:	4313      	orrs	r3, r2
 8012a86:	81a3      	strh	r3, [r4, #12]
 8012a88:	9b03      	ldr	r3, [sp, #12]
 8012a8a:	6120      	str	r0, [r4, #16]
 8012a8c:	6167      	str	r7, [r4, #20]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d00c      	beq.n	8012aac <__smakebuf_r+0x78>
 8012a92:	0028      	movs	r0, r5
 8012a94:	230e      	movs	r3, #14
 8012a96:	5ee1      	ldrsh	r1, [r4, r3]
 8012a98:	f000 f9b2 	bl	8012e00 <_isatty_r>
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	d005      	beq.n	8012aac <__smakebuf_r+0x78>
 8012aa0:	2303      	movs	r3, #3
 8012aa2:	89a2      	ldrh	r2, [r4, #12]
 8012aa4:	439a      	bics	r2, r3
 8012aa6:	3b02      	subs	r3, #2
 8012aa8:	4313      	orrs	r3, r2
 8012aaa:	81a3      	strh	r3, [r4, #12]
 8012aac:	89a3      	ldrh	r3, [r4, #12]
 8012aae:	9a01      	ldr	r2, [sp, #4]
 8012ab0:	4313      	orrs	r3, r2
 8012ab2:	81a3      	strh	r3, [r4, #12]
 8012ab4:	e7cc      	b.n	8012a50 <__smakebuf_r+0x1c>
	...

08012ab8 <lflush>:
 8012ab8:	2209      	movs	r2, #9
 8012aba:	898b      	ldrh	r3, [r1, #12]
 8012abc:	2000      	movs	r0, #0
 8012abe:	b510      	push	{r4, lr}
 8012ac0:	4013      	ands	r3, r2
 8012ac2:	4293      	cmp	r3, r2
 8012ac4:	d103      	bne.n	8012ace <lflush+0x16>
 8012ac6:	4b02      	ldr	r3, [pc, #8]	@ (8012ad0 <lflush+0x18>)
 8012ac8:	6818      	ldr	r0, [r3, #0]
 8012aca:	f7ff ff5d 	bl	8012988 <_fflush_r>
 8012ace:	bd10      	pop	{r4, pc}
 8012ad0:	200001a4 	.word	0x200001a4

08012ad4 <__srefill_r>:
 8012ad4:	b570      	push	{r4, r5, r6, lr}
 8012ad6:	0005      	movs	r5, r0
 8012ad8:	000c      	movs	r4, r1
 8012ada:	2800      	cmp	r0, #0
 8012adc:	d004      	beq.n	8012ae8 <__srefill_r+0x14>
 8012ade:	6a03      	ldr	r3, [r0, #32]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d101      	bne.n	8012ae8 <__srefill_r+0x14>
 8012ae4:	f7fe fb70 	bl	80111c8 <__sinit>
 8012ae8:	2300      	movs	r3, #0
 8012aea:	6063      	str	r3, [r4, #4]
 8012aec:	220c      	movs	r2, #12
 8012aee:	5ea3      	ldrsh	r3, [r4, r2]
 8012af0:	069a      	lsls	r2, r3, #26
 8012af2:	d408      	bmi.n	8012b06 <__srefill_r+0x32>
 8012af4:	075a      	lsls	r2, r3, #29
 8012af6:	d449      	bmi.n	8012b8c <__srefill_r+0xb8>
 8012af8:	06da      	lsls	r2, r3, #27
 8012afa:	d407      	bmi.n	8012b0c <__srefill_r+0x38>
 8012afc:	2209      	movs	r2, #9
 8012afe:	602a      	str	r2, [r5, #0]
 8012b00:	3237      	adds	r2, #55	@ 0x37
 8012b02:	4313      	orrs	r3, r2
 8012b04:	81a3      	strh	r3, [r4, #12]
 8012b06:	2001      	movs	r0, #1
 8012b08:	4240      	negs	r0, r0
 8012b0a:	bd70      	pop	{r4, r5, r6, pc}
 8012b0c:	2608      	movs	r6, #8
 8012b0e:	4233      	tst	r3, r6
 8012b10:	d00a      	beq.n	8012b28 <__srefill_r+0x54>
 8012b12:	0021      	movs	r1, r4
 8012b14:	0028      	movs	r0, r5
 8012b16:	f7ff ff37 	bl	8012988 <_fflush_r>
 8012b1a:	2800      	cmp	r0, #0
 8012b1c:	d1f3      	bne.n	8012b06 <__srefill_r+0x32>
 8012b1e:	89a3      	ldrh	r3, [r4, #12]
 8012b20:	60a0      	str	r0, [r4, #8]
 8012b22:	43b3      	bics	r3, r6
 8012b24:	81a3      	strh	r3, [r4, #12]
 8012b26:	61a0      	str	r0, [r4, #24]
 8012b28:	2304      	movs	r3, #4
 8012b2a:	89a2      	ldrh	r2, [r4, #12]
 8012b2c:	4313      	orrs	r3, r2
 8012b2e:	81a3      	strh	r3, [r4, #12]
 8012b30:	6923      	ldr	r3, [r4, #16]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d103      	bne.n	8012b3e <__srefill_r+0x6a>
 8012b36:	0021      	movs	r1, r4
 8012b38:	0028      	movs	r0, r5
 8012b3a:	f7ff ff7b 	bl	8012a34 <__smakebuf_r>
 8012b3e:	230c      	movs	r3, #12
 8012b40:	5ee6      	ldrsh	r6, [r4, r3]
 8012b42:	07b3      	lsls	r3, r6, #30
 8012b44:	d00f      	beq.n	8012b66 <__srefill_r+0x92>
 8012b46:	2301      	movs	r3, #1
 8012b48:	4a1a      	ldr	r2, [pc, #104]	@ (8012bb4 <__srefill_r+0xe0>)
 8012b4a:	81a3      	strh	r3, [r4, #12]
 8012b4c:	491a      	ldr	r1, [pc, #104]	@ (8012bb8 <__srefill_r+0xe4>)
 8012b4e:	481b      	ldr	r0, [pc, #108]	@ (8012bbc <__srefill_r+0xe8>)
 8012b50:	f7fe fb52 	bl	80111f8 <_fwalk_sglue>
 8012b54:	2309      	movs	r3, #9
 8012b56:	81a6      	strh	r6, [r4, #12]
 8012b58:	401e      	ands	r6, r3
 8012b5a:	429e      	cmp	r6, r3
 8012b5c:	d103      	bne.n	8012b66 <__srefill_r+0x92>
 8012b5e:	0021      	movs	r1, r4
 8012b60:	0028      	movs	r0, r5
 8012b62:	f7ff fe8b 	bl	801287c <__sflush_r>
 8012b66:	6922      	ldr	r2, [r4, #16]
 8012b68:	0028      	movs	r0, r5
 8012b6a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8012b6c:	6963      	ldr	r3, [r4, #20]
 8012b6e:	6a21      	ldr	r1, [r4, #32]
 8012b70:	6022      	str	r2, [r4, #0]
 8012b72:	47b0      	blx	r6
 8012b74:	6060      	str	r0, [r4, #4]
 8012b76:	2800      	cmp	r0, #0
 8012b78:	dc1a      	bgt.n	8012bb0 <__srefill_r+0xdc>
 8012b7a:	230c      	movs	r3, #12
 8012b7c:	5ee2      	ldrsh	r2, [r4, r3]
 8012b7e:	2320      	movs	r3, #32
 8012b80:	2800      	cmp	r0, #0
 8012b82:	d0be      	beq.n	8012b02 <__srefill_r+0x2e>
 8012b84:	2300      	movs	r3, #0
 8012b86:	6063      	str	r3, [r4, #4]
 8012b88:	3340      	adds	r3, #64	@ 0x40
 8012b8a:	e7ba      	b.n	8012b02 <__srefill_r+0x2e>
 8012b8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012b8e:	2900      	cmp	r1, #0
 8012b90:	d0ce      	beq.n	8012b30 <__srefill_r+0x5c>
 8012b92:	0023      	movs	r3, r4
 8012b94:	3344      	adds	r3, #68	@ 0x44
 8012b96:	4299      	cmp	r1, r3
 8012b98:	d002      	beq.n	8012ba0 <__srefill_r+0xcc>
 8012b9a:	0028      	movs	r0, r5
 8012b9c:	f7fe fe4a 	bl	8011834 <_free_r>
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	6363      	str	r3, [r4, #52]	@ 0x34
 8012ba4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012ba6:	6063      	str	r3, [r4, #4]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d0c1      	beq.n	8012b30 <__srefill_r+0x5c>
 8012bac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012bae:	6023      	str	r3, [r4, #0]
 8012bb0:	2000      	movs	r0, #0
 8012bb2:	e7aa      	b.n	8012b0a <__srefill_r+0x36>
 8012bb4:	20000198 	.word	0x20000198
 8012bb8:	08012ab9 	.word	0x08012ab9
 8012bbc:	200001a8 	.word	0x200001a8

08012bc0 <__sccl>:
 8012bc0:	b570      	push	{r4, r5, r6, lr}
 8012bc2:	780b      	ldrb	r3, [r1, #0]
 8012bc4:	0004      	movs	r4, r0
 8012bc6:	2b5e      	cmp	r3, #94	@ 0x5e
 8012bc8:	d018      	beq.n	8012bfc <__sccl+0x3c>
 8012bca:	2200      	movs	r2, #0
 8012bcc:	1c4d      	adds	r5, r1, #1
 8012bce:	0021      	movs	r1, r4
 8012bd0:	1c60      	adds	r0, r4, #1
 8012bd2:	30ff      	adds	r0, #255	@ 0xff
 8012bd4:	700a      	strb	r2, [r1, #0]
 8012bd6:	3101      	adds	r1, #1
 8012bd8:	4281      	cmp	r1, r0
 8012bda:	d1fb      	bne.n	8012bd4 <__sccl+0x14>
 8012bdc:	1e68      	subs	r0, r5, #1
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d00b      	beq.n	8012bfa <__sccl+0x3a>
 8012be2:	2101      	movs	r1, #1
 8012be4:	404a      	eors	r2, r1
 8012be6:	0028      	movs	r0, r5
 8012be8:	54e2      	strb	r2, [r4, r3]
 8012bea:	7801      	ldrb	r1, [r0, #0]
 8012bec:	1c45      	adds	r5, r0, #1
 8012bee:	292d      	cmp	r1, #45	@ 0x2d
 8012bf0:	d00a      	beq.n	8012c08 <__sccl+0x48>
 8012bf2:	295d      	cmp	r1, #93	@ 0x5d
 8012bf4:	d01b      	beq.n	8012c2e <__sccl+0x6e>
 8012bf6:	2900      	cmp	r1, #0
 8012bf8:	d104      	bne.n	8012c04 <__sccl+0x44>
 8012bfa:	bd70      	pop	{r4, r5, r6, pc}
 8012bfc:	2201      	movs	r2, #1
 8012bfe:	784b      	ldrb	r3, [r1, #1]
 8012c00:	1c8d      	adds	r5, r1, #2
 8012c02:	e7e4      	b.n	8012bce <__sccl+0xe>
 8012c04:	000b      	movs	r3, r1
 8012c06:	e7ee      	b.n	8012be6 <__sccl+0x26>
 8012c08:	7846      	ldrb	r6, [r0, #1]
 8012c0a:	2e5d      	cmp	r6, #93	@ 0x5d
 8012c0c:	d0fa      	beq.n	8012c04 <__sccl+0x44>
 8012c0e:	42b3      	cmp	r3, r6
 8012c10:	dcf8      	bgt.n	8012c04 <__sccl+0x44>
 8012c12:	0019      	movs	r1, r3
 8012c14:	3002      	adds	r0, #2
 8012c16:	3101      	adds	r1, #1
 8012c18:	5462      	strb	r2, [r4, r1]
 8012c1a:	428e      	cmp	r6, r1
 8012c1c:	dcfb      	bgt.n	8012c16 <__sccl+0x56>
 8012c1e:	2100      	movs	r1, #0
 8012c20:	1c5d      	adds	r5, r3, #1
 8012c22:	42b3      	cmp	r3, r6
 8012c24:	da01      	bge.n	8012c2a <__sccl+0x6a>
 8012c26:	1af1      	subs	r1, r6, r3
 8012c28:	3901      	subs	r1, #1
 8012c2a:	186b      	adds	r3, r5, r1
 8012c2c:	e7dd      	b.n	8012bea <__sccl+0x2a>
 8012c2e:	0028      	movs	r0, r5
 8012c30:	e7e3      	b.n	8012bfa <__sccl+0x3a>
	...

08012c34 <__submore>:
 8012c34:	000b      	movs	r3, r1
 8012c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c38:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8012c3a:	3344      	adds	r3, #68	@ 0x44
 8012c3c:	000c      	movs	r4, r1
 8012c3e:	429d      	cmp	r5, r3
 8012c40:	d11c      	bne.n	8012c7c <__submore+0x48>
 8012c42:	2680      	movs	r6, #128	@ 0x80
 8012c44:	00f6      	lsls	r6, r6, #3
 8012c46:	0031      	movs	r1, r6
 8012c48:	f7fe fe6a 	bl	8011920 <_malloc_r>
 8012c4c:	2800      	cmp	r0, #0
 8012c4e:	d102      	bne.n	8012c56 <__submore+0x22>
 8012c50:	2001      	movs	r0, #1
 8012c52:	4240      	negs	r0, r0
 8012c54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012c56:	0023      	movs	r3, r4
 8012c58:	6360      	str	r0, [r4, #52]	@ 0x34
 8012c5a:	63a6      	str	r6, [r4, #56]	@ 0x38
 8012c5c:	3346      	adds	r3, #70	@ 0x46
 8012c5e:	781a      	ldrb	r2, [r3, #0]
 8012c60:	4b10      	ldr	r3, [pc, #64]	@ (8012ca4 <__submore+0x70>)
 8012c62:	54c2      	strb	r2, [r0, r3]
 8012c64:	0023      	movs	r3, r4
 8012c66:	3345      	adds	r3, #69	@ 0x45
 8012c68:	781a      	ldrb	r2, [r3, #0]
 8012c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8012ca8 <__submore+0x74>)
 8012c6c:	54c2      	strb	r2, [r0, r3]
 8012c6e:	782a      	ldrb	r2, [r5, #0]
 8012c70:	4b0e      	ldr	r3, [pc, #56]	@ (8012cac <__submore+0x78>)
 8012c72:	54c2      	strb	r2, [r0, r3]
 8012c74:	18c0      	adds	r0, r0, r3
 8012c76:	6020      	str	r0, [r4, #0]
 8012c78:	2000      	movs	r0, #0
 8012c7a:	e7eb      	b.n	8012c54 <__submore+0x20>
 8012c7c:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 8012c7e:	0029      	movs	r1, r5
 8012c80:	0073      	lsls	r3, r6, #1
 8012c82:	001a      	movs	r2, r3
 8012c84:	9301      	str	r3, [sp, #4]
 8012c86:	f000 f8ea 	bl	8012e5e <_realloc_r>
 8012c8a:	1e05      	subs	r5, r0, #0
 8012c8c:	d0e0      	beq.n	8012c50 <__submore+0x1c>
 8012c8e:	1987      	adds	r7, r0, r6
 8012c90:	0001      	movs	r1, r0
 8012c92:	0032      	movs	r2, r6
 8012c94:	0038      	movs	r0, r7
 8012c96:	f7fe fdc4 	bl	8011822 <memcpy>
 8012c9a:	9b01      	ldr	r3, [sp, #4]
 8012c9c:	6027      	str	r7, [r4, #0]
 8012c9e:	6365      	str	r5, [r4, #52]	@ 0x34
 8012ca0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012ca2:	e7e9      	b.n	8012c78 <__submore+0x44>
 8012ca4:	000003ff 	.word	0x000003ff
 8012ca8:	000003fe 	.word	0x000003fe
 8012cac:	000003fd 	.word	0x000003fd

08012cb0 <_ungetc_r>:
 8012cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cb2:	0006      	movs	r6, r0
 8012cb4:	000d      	movs	r5, r1
 8012cb6:	0014      	movs	r4, r2
 8012cb8:	1c4b      	adds	r3, r1, #1
 8012cba:	d021      	beq.n	8012d00 <_ungetc_r+0x50>
 8012cbc:	2800      	cmp	r0, #0
 8012cbe:	d004      	beq.n	8012cca <_ungetc_r+0x1a>
 8012cc0:	6a03      	ldr	r3, [r0, #32]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d101      	bne.n	8012cca <_ungetc_r+0x1a>
 8012cc6:	f7fe fa7f 	bl	80111c8 <__sinit>
 8012cca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012ccc:	07db      	lsls	r3, r3, #31
 8012cce:	d405      	bmi.n	8012cdc <_ungetc_r+0x2c>
 8012cd0:	89a3      	ldrh	r3, [r4, #12]
 8012cd2:	059b      	lsls	r3, r3, #22
 8012cd4:	d402      	bmi.n	8012cdc <_ungetc_r+0x2c>
 8012cd6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012cd8:	f7fe fda1 	bl	801181e <__retarget_lock_acquire_recursive>
 8012cdc:	220c      	movs	r2, #12
 8012cde:	5ea3      	ldrsh	r3, [r4, r2]
 8012ce0:	2220      	movs	r2, #32
 8012ce2:	0019      	movs	r1, r3
 8012ce4:	4391      	bics	r1, r2
 8012ce6:	81a1      	strh	r1, [r4, #12]
 8012ce8:	075a      	lsls	r2, r3, #29
 8012cea:	d423      	bmi.n	8012d34 <_ungetc_r+0x84>
 8012cec:	06da      	lsls	r2, r3, #27
 8012cee:	d40a      	bmi.n	8012d06 <_ungetc_r+0x56>
 8012cf0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012cf2:	07d2      	lsls	r2, r2, #31
 8012cf4:	d404      	bmi.n	8012d00 <_ungetc_r+0x50>
 8012cf6:	059b      	lsls	r3, r3, #22
 8012cf8:	d402      	bmi.n	8012d00 <_ungetc_r+0x50>
 8012cfa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012cfc:	f7fe fd90 	bl	8011820 <__retarget_lock_release_recursive>
 8012d00:	2501      	movs	r5, #1
 8012d02:	426d      	negs	r5, r5
 8012d04:	e048      	b.n	8012d98 <_ungetc_r+0xe8>
 8012d06:	2708      	movs	r7, #8
 8012d08:	423b      	tst	r3, r7
 8012d0a:	d00f      	beq.n	8012d2c <_ungetc_r+0x7c>
 8012d0c:	0021      	movs	r1, r4
 8012d0e:	0030      	movs	r0, r6
 8012d10:	f7ff fe3a 	bl	8012988 <_fflush_r>
 8012d14:	2800      	cmp	r0, #0
 8012d16:	d004      	beq.n	8012d22 <_ungetc_r+0x72>
 8012d18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012d1a:	07db      	lsls	r3, r3, #31
 8012d1c:	d4f0      	bmi.n	8012d00 <_ungetc_r+0x50>
 8012d1e:	89a3      	ldrh	r3, [r4, #12]
 8012d20:	e7e9      	b.n	8012cf6 <_ungetc_r+0x46>
 8012d22:	89a3      	ldrh	r3, [r4, #12]
 8012d24:	60a0      	str	r0, [r4, #8]
 8012d26:	43bb      	bics	r3, r7
 8012d28:	81a3      	strh	r3, [r4, #12]
 8012d2a:	61a0      	str	r0, [r4, #24]
 8012d2c:	2304      	movs	r3, #4
 8012d2e:	89a2      	ldrh	r2, [r4, #12]
 8012d30:	4313      	orrs	r3, r2
 8012d32:	81a3      	strh	r3, [r4, #12]
 8012d34:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8012d36:	b2ef      	uxtb	r7, r5
 8012d38:	6863      	ldr	r3, [r4, #4]
 8012d3a:	b2ed      	uxtb	r5, r5
 8012d3c:	2a00      	cmp	r2, #0
 8012d3e:	d019      	beq.n	8012d74 <_ungetc_r+0xc4>
 8012d40:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8012d42:	429a      	cmp	r2, r3
 8012d44:	dc05      	bgt.n	8012d52 <_ungetc_r+0xa2>
 8012d46:	0021      	movs	r1, r4
 8012d48:	0030      	movs	r0, r6
 8012d4a:	f7ff ff73 	bl	8012c34 <__submore>
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	d1e2      	bne.n	8012d18 <_ungetc_r+0x68>
 8012d52:	6823      	ldr	r3, [r4, #0]
 8012d54:	3b01      	subs	r3, #1
 8012d56:	6023      	str	r3, [r4, #0]
 8012d58:	701f      	strb	r7, [r3, #0]
 8012d5a:	6863      	ldr	r3, [r4, #4]
 8012d5c:	3301      	adds	r3, #1
 8012d5e:	6063      	str	r3, [r4, #4]
 8012d60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012d62:	07db      	lsls	r3, r3, #31
 8012d64:	d418      	bmi.n	8012d98 <_ungetc_r+0xe8>
 8012d66:	89a3      	ldrh	r3, [r4, #12]
 8012d68:	059b      	lsls	r3, r3, #22
 8012d6a:	d415      	bmi.n	8012d98 <_ungetc_r+0xe8>
 8012d6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d6e:	f7fe fd57 	bl	8011820 <__retarget_lock_release_recursive>
 8012d72:	e011      	b.n	8012d98 <_ungetc_r+0xe8>
 8012d74:	2601      	movs	r6, #1
 8012d76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012d78:	6920      	ldr	r0, [r4, #16]
 8012d7a:	6821      	ldr	r1, [r4, #0]
 8012d7c:	4032      	ands	r2, r6
 8012d7e:	2800      	cmp	r0, #0
 8012d80:	d00c      	beq.n	8012d9c <_ungetc_r+0xec>
 8012d82:	4288      	cmp	r0, r1
 8012d84:	d20a      	bcs.n	8012d9c <_ungetc_r+0xec>
 8012d86:	1e48      	subs	r0, r1, #1
 8012d88:	7806      	ldrb	r6, [r0, #0]
 8012d8a:	42ae      	cmp	r6, r5
 8012d8c:	d106      	bne.n	8012d9c <_ungetc_r+0xec>
 8012d8e:	6020      	str	r0, [r4, #0]
 8012d90:	3301      	adds	r3, #1
 8012d92:	6063      	str	r3, [r4, #4]
 8012d94:	2a00      	cmp	r2, #0
 8012d96:	d0e6      	beq.n	8012d66 <_ungetc_r+0xb6>
 8012d98:	0028      	movs	r0, r5
 8012d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d9c:	6423      	str	r3, [r4, #64]	@ 0x40
 8012d9e:	0023      	movs	r3, r4
 8012da0:	3344      	adds	r3, #68	@ 0x44
 8012da2:	6363      	str	r3, [r4, #52]	@ 0x34
 8012da4:	2303      	movs	r3, #3
 8012da6:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012da8:	0023      	movs	r3, r4
 8012daa:	3346      	adds	r3, #70	@ 0x46
 8012dac:	63e1      	str	r1, [r4, #60]	@ 0x3c
 8012dae:	701f      	strb	r7, [r3, #0]
 8012db0:	6023      	str	r3, [r4, #0]
 8012db2:	2301      	movs	r3, #1
 8012db4:	e7ed      	b.n	8012d92 <_ungetc_r+0xe2>

08012db6 <memmove>:
 8012db6:	b510      	push	{r4, lr}
 8012db8:	4288      	cmp	r0, r1
 8012dba:	d806      	bhi.n	8012dca <memmove+0x14>
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d008      	beq.n	8012dd4 <memmove+0x1e>
 8012dc2:	5ccc      	ldrb	r4, [r1, r3]
 8012dc4:	54c4      	strb	r4, [r0, r3]
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	e7f9      	b.n	8012dbe <memmove+0x8>
 8012dca:	188b      	adds	r3, r1, r2
 8012dcc:	4298      	cmp	r0, r3
 8012dce:	d2f5      	bcs.n	8012dbc <memmove+0x6>
 8012dd0:	3a01      	subs	r2, #1
 8012dd2:	d200      	bcs.n	8012dd6 <memmove+0x20>
 8012dd4:	bd10      	pop	{r4, pc}
 8012dd6:	5c8b      	ldrb	r3, [r1, r2]
 8012dd8:	5483      	strb	r3, [r0, r2]
 8012dda:	e7f9      	b.n	8012dd0 <memmove+0x1a>

08012ddc <_fstat_r>:
 8012ddc:	2300      	movs	r3, #0
 8012dde:	b570      	push	{r4, r5, r6, lr}
 8012de0:	4d06      	ldr	r5, [pc, #24]	@ (8012dfc <_fstat_r+0x20>)
 8012de2:	0004      	movs	r4, r0
 8012de4:	0008      	movs	r0, r1
 8012de6:	0011      	movs	r1, r2
 8012de8:	602b      	str	r3, [r5, #0]
 8012dea:	f7f1 fca1 	bl	8004730 <_fstat>
 8012dee:	1c43      	adds	r3, r0, #1
 8012df0:	d103      	bne.n	8012dfa <_fstat_r+0x1e>
 8012df2:	682b      	ldr	r3, [r5, #0]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d000      	beq.n	8012dfa <_fstat_r+0x1e>
 8012df8:	6023      	str	r3, [r4, #0]
 8012dfa:	bd70      	pop	{r4, r5, r6, pc}
 8012dfc:	20000a1c 	.word	0x20000a1c

08012e00 <_isatty_r>:
 8012e00:	2300      	movs	r3, #0
 8012e02:	b570      	push	{r4, r5, r6, lr}
 8012e04:	4d06      	ldr	r5, [pc, #24]	@ (8012e20 <_isatty_r+0x20>)
 8012e06:	0004      	movs	r4, r0
 8012e08:	0008      	movs	r0, r1
 8012e0a:	602b      	str	r3, [r5, #0]
 8012e0c:	f7f1 fc9e 	bl	800474c <_isatty>
 8012e10:	1c43      	adds	r3, r0, #1
 8012e12:	d103      	bne.n	8012e1c <_isatty_r+0x1c>
 8012e14:	682b      	ldr	r3, [r5, #0]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d000      	beq.n	8012e1c <_isatty_r+0x1c>
 8012e1a:	6023      	str	r3, [r4, #0]
 8012e1c:	bd70      	pop	{r4, r5, r6, pc}
 8012e1e:	46c0      	nop			@ (mov r8, r8)
 8012e20:	20000a1c 	.word	0x20000a1c

08012e24 <_sbrk_r>:
 8012e24:	2300      	movs	r3, #0
 8012e26:	b570      	push	{r4, r5, r6, lr}
 8012e28:	4d06      	ldr	r5, [pc, #24]	@ (8012e44 <_sbrk_r+0x20>)
 8012e2a:	0004      	movs	r4, r0
 8012e2c:	0008      	movs	r0, r1
 8012e2e:	602b      	str	r3, [r5, #0]
 8012e30:	f7f1 fca0 	bl	8004774 <_sbrk>
 8012e34:	1c43      	adds	r3, r0, #1
 8012e36:	d103      	bne.n	8012e40 <_sbrk_r+0x1c>
 8012e38:	682b      	ldr	r3, [r5, #0]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d000      	beq.n	8012e40 <_sbrk_r+0x1c>
 8012e3e:	6023      	str	r3, [r4, #0]
 8012e40:	bd70      	pop	{r4, r5, r6, pc}
 8012e42:	46c0      	nop			@ (mov r8, r8)
 8012e44:	20000a1c 	.word	0x20000a1c

08012e48 <memchr>:
 8012e48:	b2c9      	uxtb	r1, r1
 8012e4a:	1882      	adds	r2, r0, r2
 8012e4c:	4290      	cmp	r0, r2
 8012e4e:	d101      	bne.n	8012e54 <memchr+0xc>
 8012e50:	2000      	movs	r0, #0
 8012e52:	4770      	bx	lr
 8012e54:	7803      	ldrb	r3, [r0, #0]
 8012e56:	428b      	cmp	r3, r1
 8012e58:	d0fb      	beq.n	8012e52 <memchr+0xa>
 8012e5a:	3001      	adds	r0, #1
 8012e5c:	e7f6      	b.n	8012e4c <memchr+0x4>

08012e5e <_realloc_r>:
 8012e5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e60:	0006      	movs	r6, r0
 8012e62:	000c      	movs	r4, r1
 8012e64:	0015      	movs	r5, r2
 8012e66:	2900      	cmp	r1, #0
 8012e68:	d105      	bne.n	8012e76 <_realloc_r+0x18>
 8012e6a:	0011      	movs	r1, r2
 8012e6c:	f7fe fd58 	bl	8011920 <_malloc_r>
 8012e70:	0004      	movs	r4, r0
 8012e72:	0020      	movs	r0, r4
 8012e74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012e76:	2a00      	cmp	r2, #0
 8012e78:	d103      	bne.n	8012e82 <_realloc_r+0x24>
 8012e7a:	f7fe fcdb 	bl	8011834 <_free_r>
 8012e7e:	2400      	movs	r4, #0
 8012e80:	e7f7      	b.n	8012e72 <_realloc_r+0x14>
 8012e82:	f000 f92f 	bl	80130e4 <_malloc_usable_size_r>
 8012e86:	0007      	movs	r7, r0
 8012e88:	4285      	cmp	r5, r0
 8012e8a:	d802      	bhi.n	8012e92 <_realloc_r+0x34>
 8012e8c:	0843      	lsrs	r3, r0, #1
 8012e8e:	42ab      	cmp	r3, r5
 8012e90:	d3ef      	bcc.n	8012e72 <_realloc_r+0x14>
 8012e92:	0029      	movs	r1, r5
 8012e94:	0030      	movs	r0, r6
 8012e96:	f7fe fd43 	bl	8011920 <_malloc_r>
 8012e9a:	9001      	str	r0, [sp, #4]
 8012e9c:	2800      	cmp	r0, #0
 8012e9e:	d0ee      	beq.n	8012e7e <_realloc_r+0x20>
 8012ea0:	002a      	movs	r2, r5
 8012ea2:	42bd      	cmp	r5, r7
 8012ea4:	d900      	bls.n	8012ea8 <_realloc_r+0x4a>
 8012ea6:	003a      	movs	r2, r7
 8012ea8:	0021      	movs	r1, r4
 8012eaa:	9801      	ldr	r0, [sp, #4]
 8012eac:	f7fe fcb9 	bl	8011822 <memcpy>
 8012eb0:	0021      	movs	r1, r4
 8012eb2:	0030      	movs	r0, r6
 8012eb4:	f7fe fcbe 	bl	8011834 <_free_r>
 8012eb8:	9c01      	ldr	r4, [sp, #4]
 8012eba:	e7da      	b.n	8012e72 <_realloc_r+0x14>

08012ebc <_strtol_l.constprop.0>:
 8012ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ebe:	b085      	sub	sp, #20
 8012ec0:	0017      	movs	r7, r2
 8012ec2:	001e      	movs	r6, r3
 8012ec4:	9003      	str	r0, [sp, #12]
 8012ec6:	9101      	str	r1, [sp, #4]
 8012ec8:	2b24      	cmp	r3, #36	@ 0x24
 8012eca:	d844      	bhi.n	8012f56 <_strtol_l.constprop.0+0x9a>
 8012ecc:	000c      	movs	r4, r1
 8012ece:	2b01      	cmp	r3, #1
 8012ed0:	d041      	beq.n	8012f56 <_strtol_l.constprop.0+0x9a>
 8012ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8012fc8 <_strtol_l.constprop.0+0x10c>)
 8012ed4:	2208      	movs	r2, #8
 8012ed6:	469c      	mov	ip, r3
 8012ed8:	0023      	movs	r3, r4
 8012eda:	4661      	mov	r1, ip
 8012edc:	781d      	ldrb	r5, [r3, #0]
 8012ede:	3401      	adds	r4, #1
 8012ee0:	5d48      	ldrb	r0, [r1, r5]
 8012ee2:	0001      	movs	r1, r0
 8012ee4:	4011      	ands	r1, r2
 8012ee6:	4210      	tst	r0, r2
 8012ee8:	d1f6      	bne.n	8012ed8 <_strtol_l.constprop.0+0x1c>
 8012eea:	2d2d      	cmp	r5, #45	@ 0x2d
 8012eec:	d13a      	bne.n	8012f64 <_strtol_l.constprop.0+0xa8>
 8012eee:	7825      	ldrb	r5, [r4, #0]
 8012ef0:	1c9c      	adds	r4, r3, #2
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	9300      	str	r3, [sp, #0]
 8012ef6:	2210      	movs	r2, #16
 8012ef8:	0033      	movs	r3, r6
 8012efa:	4393      	bics	r3, r2
 8012efc:	d109      	bne.n	8012f12 <_strtol_l.constprop.0+0x56>
 8012efe:	2d30      	cmp	r5, #48	@ 0x30
 8012f00:	d136      	bne.n	8012f70 <_strtol_l.constprop.0+0xb4>
 8012f02:	2120      	movs	r1, #32
 8012f04:	7823      	ldrb	r3, [r4, #0]
 8012f06:	438b      	bics	r3, r1
 8012f08:	2b58      	cmp	r3, #88	@ 0x58
 8012f0a:	d131      	bne.n	8012f70 <_strtol_l.constprop.0+0xb4>
 8012f0c:	0016      	movs	r6, r2
 8012f0e:	7865      	ldrb	r5, [r4, #1]
 8012f10:	3402      	adds	r4, #2
 8012f12:	4a2e      	ldr	r2, [pc, #184]	@ (8012fcc <_strtol_l.constprop.0+0x110>)
 8012f14:	9b00      	ldr	r3, [sp, #0]
 8012f16:	4694      	mov	ip, r2
 8012f18:	4463      	add	r3, ip
 8012f1a:	0031      	movs	r1, r6
 8012f1c:	0018      	movs	r0, r3
 8012f1e:	9302      	str	r3, [sp, #8]
 8012f20:	f7ed f98c 	bl	800023c <__aeabi_uidivmod>
 8012f24:	2200      	movs	r2, #0
 8012f26:	4684      	mov	ip, r0
 8012f28:	0010      	movs	r0, r2
 8012f2a:	002b      	movs	r3, r5
 8012f2c:	3b30      	subs	r3, #48	@ 0x30
 8012f2e:	2b09      	cmp	r3, #9
 8012f30:	d825      	bhi.n	8012f7e <_strtol_l.constprop.0+0xc2>
 8012f32:	001d      	movs	r5, r3
 8012f34:	42ae      	cmp	r6, r5
 8012f36:	dd31      	ble.n	8012f9c <_strtol_l.constprop.0+0xe0>
 8012f38:	1c53      	adds	r3, r2, #1
 8012f3a:	d009      	beq.n	8012f50 <_strtol_l.constprop.0+0x94>
 8012f3c:	2201      	movs	r2, #1
 8012f3e:	4252      	negs	r2, r2
 8012f40:	4584      	cmp	ip, r0
 8012f42:	d305      	bcc.n	8012f50 <_strtol_l.constprop.0+0x94>
 8012f44:	d101      	bne.n	8012f4a <_strtol_l.constprop.0+0x8e>
 8012f46:	42a9      	cmp	r1, r5
 8012f48:	db25      	blt.n	8012f96 <_strtol_l.constprop.0+0xda>
 8012f4a:	2201      	movs	r2, #1
 8012f4c:	4370      	muls	r0, r6
 8012f4e:	1828      	adds	r0, r5, r0
 8012f50:	7825      	ldrb	r5, [r4, #0]
 8012f52:	3401      	adds	r4, #1
 8012f54:	e7e9      	b.n	8012f2a <_strtol_l.constprop.0+0x6e>
 8012f56:	f7fe fc37 	bl	80117c8 <__errno>
 8012f5a:	2316      	movs	r3, #22
 8012f5c:	6003      	str	r3, [r0, #0]
 8012f5e:	2000      	movs	r0, #0
 8012f60:	b005      	add	sp, #20
 8012f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f64:	9100      	str	r1, [sp, #0]
 8012f66:	2d2b      	cmp	r5, #43	@ 0x2b
 8012f68:	d1c5      	bne.n	8012ef6 <_strtol_l.constprop.0+0x3a>
 8012f6a:	7825      	ldrb	r5, [r4, #0]
 8012f6c:	1c9c      	adds	r4, r3, #2
 8012f6e:	e7c2      	b.n	8012ef6 <_strtol_l.constprop.0+0x3a>
 8012f70:	2e00      	cmp	r6, #0
 8012f72:	d1ce      	bne.n	8012f12 <_strtol_l.constprop.0+0x56>
 8012f74:	3608      	adds	r6, #8
 8012f76:	2d30      	cmp	r5, #48	@ 0x30
 8012f78:	d0cb      	beq.n	8012f12 <_strtol_l.constprop.0+0x56>
 8012f7a:	3602      	adds	r6, #2
 8012f7c:	e7c9      	b.n	8012f12 <_strtol_l.constprop.0+0x56>
 8012f7e:	002b      	movs	r3, r5
 8012f80:	3b41      	subs	r3, #65	@ 0x41
 8012f82:	2b19      	cmp	r3, #25
 8012f84:	d801      	bhi.n	8012f8a <_strtol_l.constprop.0+0xce>
 8012f86:	3d37      	subs	r5, #55	@ 0x37
 8012f88:	e7d4      	b.n	8012f34 <_strtol_l.constprop.0+0x78>
 8012f8a:	002b      	movs	r3, r5
 8012f8c:	3b61      	subs	r3, #97	@ 0x61
 8012f8e:	2b19      	cmp	r3, #25
 8012f90:	d804      	bhi.n	8012f9c <_strtol_l.constprop.0+0xe0>
 8012f92:	3d57      	subs	r5, #87	@ 0x57
 8012f94:	e7ce      	b.n	8012f34 <_strtol_l.constprop.0+0x78>
 8012f96:	2201      	movs	r2, #1
 8012f98:	4252      	negs	r2, r2
 8012f9a:	e7d9      	b.n	8012f50 <_strtol_l.constprop.0+0x94>
 8012f9c:	1c53      	adds	r3, r2, #1
 8012f9e:	d108      	bne.n	8012fb2 <_strtol_l.constprop.0+0xf6>
 8012fa0:	2322      	movs	r3, #34	@ 0x22
 8012fa2:	9a03      	ldr	r2, [sp, #12]
 8012fa4:	9802      	ldr	r0, [sp, #8]
 8012fa6:	6013      	str	r3, [r2, #0]
 8012fa8:	2f00      	cmp	r7, #0
 8012faa:	d0d9      	beq.n	8012f60 <_strtol_l.constprop.0+0xa4>
 8012fac:	1e63      	subs	r3, r4, #1
 8012fae:	9301      	str	r3, [sp, #4]
 8012fb0:	e007      	b.n	8012fc2 <_strtol_l.constprop.0+0x106>
 8012fb2:	9b00      	ldr	r3, [sp, #0]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d000      	beq.n	8012fba <_strtol_l.constprop.0+0xfe>
 8012fb8:	4240      	negs	r0, r0
 8012fba:	2f00      	cmp	r7, #0
 8012fbc:	d0d0      	beq.n	8012f60 <_strtol_l.constprop.0+0xa4>
 8012fbe:	2a00      	cmp	r2, #0
 8012fc0:	d1f4      	bne.n	8012fac <_strtol_l.constprop.0+0xf0>
 8012fc2:	9b01      	ldr	r3, [sp, #4]
 8012fc4:	603b      	str	r3, [r7, #0]
 8012fc6:	e7cb      	b.n	8012f60 <_strtol_l.constprop.0+0xa4>
 8012fc8:	08014c03 	.word	0x08014c03
 8012fcc:	7fffffff 	.word	0x7fffffff

08012fd0 <_strtol_r>:
 8012fd0:	b510      	push	{r4, lr}
 8012fd2:	f7ff ff73 	bl	8012ebc <_strtol_l.constprop.0>
 8012fd6:	bd10      	pop	{r4, pc}

08012fd8 <_strtoul_l.constprop.0>:
 8012fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fda:	001e      	movs	r6, r3
 8012fdc:	4b3e      	ldr	r3, [pc, #248]	@ (80130d8 <_strtoul_l.constprop.0+0x100>)
 8012fde:	0017      	movs	r7, r2
 8012fe0:	000c      	movs	r4, r1
 8012fe2:	469c      	mov	ip, r3
 8012fe4:	2208      	movs	r2, #8
 8012fe6:	b085      	sub	sp, #20
 8012fe8:	9003      	str	r0, [sp, #12]
 8012fea:	9100      	str	r1, [sp, #0]
 8012fec:	0023      	movs	r3, r4
 8012fee:	4661      	mov	r1, ip
 8012ff0:	781d      	ldrb	r5, [r3, #0]
 8012ff2:	3401      	adds	r4, #1
 8012ff4:	5d48      	ldrb	r0, [r1, r5]
 8012ff6:	0001      	movs	r1, r0
 8012ff8:	4011      	ands	r1, r2
 8012ffa:	4210      	tst	r0, r2
 8012ffc:	d1f6      	bne.n	8012fec <_strtoul_l.constprop.0+0x14>
 8012ffe:	2d2d      	cmp	r5, #45	@ 0x2d
 8013000:	d137      	bne.n	8013072 <_strtoul_l.constprop.0+0x9a>
 8013002:	7825      	ldrb	r5, [r4, #0]
 8013004:	1c9c      	adds	r4, r3, #2
 8013006:	2301      	movs	r3, #1
 8013008:	9302      	str	r3, [sp, #8]
 801300a:	2210      	movs	r2, #16
 801300c:	0033      	movs	r3, r6
 801300e:	4393      	bics	r3, r2
 8013010:	d109      	bne.n	8013026 <_strtoul_l.constprop.0+0x4e>
 8013012:	2d30      	cmp	r5, #48	@ 0x30
 8013014:	d133      	bne.n	801307e <_strtoul_l.constprop.0+0xa6>
 8013016:	2120      	movs	r1, #32
 8013018:	7823      	ldrb	r3, [r4, #0]
 801301a:	438b      	bics	r3, r1
 801301c:	2b58      	cmp	r3, #88	@ 0x58
 801301e:	d12e      	bne.n	801307e <_strtoul_l.constprop.0+0xa6>
 8013020:	0016      	movs	r6, r2
 8013022:	7865      	ldrb	r5, [r4, #1]
 8013024:	3402      	adds	r4, #2
 8013026:	2001      	movs	r0, #1
 8013028:	0031      	movs	r1, r6
 801302a:	4240      	negs	r0, r0
 801302c:	f7ed f880 	bl	8000130 <__udivsi3>
 8013030:	9001      	str	r0, [sp, #4]
 8013032:	2001      	movs	r0, #1
 8013034:	0031      	movs	r1, r6
 8013036:	4240      	negs	r0, r0
 8013038:	f7ed f900 	bl	800023c <__aeabi_uidivmod>
 801303c:	2300      	movs	r3, #0
 801303e:	2201      	movs	r2, #1
 8013040:	0018      	movs	r0, r3
 8013042:	4694      	mov	ip, r2
 8013044:	002a      	movs	r2, r5
 8013046:	3a30      	subs	r2, #48	@ 0x30
 8013048:	2a09      	cmp	r2, #9
 801304a:	d81f      	bhi.n	801308c <_strtoul_l.constprop.0+0xb4>
 801304c:	0015      	movs	r5, r2
 801304e:	42ae      	cmp	r6, r5
 8013050:	dd2b      	ble.n	80130aa <_strtoul_l.constprop.0+0xd2>
 8013052:	1c5a      	adds	r2, r3, #1
 8013054:	d00a      	beq.n	801306c <_strtoul_l.constprop.0+0x94>
 8013056:	2301      	movs	r3, #1
 8013058:	9a01      	ldr	r2, [sp, #4]
 801305a:	425b      	negs	r3, r3
 801305c:	4282      	cmp	r2, r0
 801305e:	d305      	bcc.n	801306c <_strtoul_l.constprop.0+0x94>
 8013060:	d101      	bne.n	8013066 <_strtoul_l.constprop.0+0x8e>
 8013062:	42a9      	cmp	r1, r5
 8013064:	db1e      	blt.n	80130a4 <_strtoul_l.constprop.0+0xcc>
 8013066:	4663      	mov	r3, ip
 8013068:	4370      	muls	r0, r6
 801306a:	1828      	adds	r0, r5, r0
 801306c:	7825      	ldrb	r5, [r4, #0]
 801306e:	3401      	adds	r4, #1
 8013070:	e7e8      	b.n	8013044 <_strtoul_l.constprop.0+0x6c>
 8013072:	9102      	str	r1, [sp, #8]
 8013074:	2d2b      	cmp	r5, #43	@ 0x2b
 8013076:	d1c8      	bne.n	801300a <_strtoul_l.constprop.0+0x32>
 8013078:	7825      	ldrb	r5, [r4, #0]
 801307a:	1c9c      	adds	r4, r3, #2
 801307c:	e7c5      	b.n	801300a <_strtoul_l.constprop.0+0x32>
 801307e:	2e00      	cmp	r6, #0
 8013080:	d1d1      	bne.n	8013026 <_strtoul_l.constprop.0+0x4e>
 8013082:	3608      	adds	r6, #8
 8013084:	2d30      	cmp	r5, #48	@ 0x30
 8013086:	d0ce      	beq.n	8013026 <_strtoul_l.constprop.0+0x4e>
 8013088:	3602      	adds	r6, #2
 801308a:	e7cc      	b.n	8013026 <_strtoul_l.constprop.0+0x4e>
 801308c:	002a      	movs	r2, r5
 801308e:	3a41      	subs	r2, #65	@ 0x41
 8013090:	2a19      	cmp	r2, #25
 8013092:	d801      	bhi.n	8013098 <_strtoul_l.constprop.0+0xc0>
 8013094:	3d37      	subs	r5, #55	@ 0x37
 8013096:	e7da      	b.n	801304e <_strtoul_l.constprop.0+0x76>
 8013098:	002a      	movs	r2, r5
 801309a:	3a61      	subs	r2, #97	@ 0x61
 801309c:	2a19      	cmp	r2, #25
 801309e:	d804      	bhi.n	80130aa <_strtoul_l.constprop.0+0xd2>
 80130a0:	3d57      	subs	r5, #87	@ 0x57
 80130a2:	e7d4      	b.n	801304e <_strtoul_l.constprop.0+0x76>
 80130a4:	2301      	movs	r3, #1
 80130a6:	425b      	negs	r3, r3
 80130a8:	e7e0      	b.n	801306c <_strtoul_l.constprop.0+0x94>
 80130aa:	1c5a      	adds	r2, r3, #1
 80130ac:	d107      	bne.n	80130be <_strtoul_l.constprop.0+0xe6>
 80130ae:	2222      	movs	r2, #34	@ 0x22
 80130b0:	9903      	ldr	r1, [sp, #12]
 80130b2:	0018      	movs	r0, r3
 80130b4:	600a      	str	r2, [r1, #0]
 80130b6:	2f00      	cmp	r7, #0
 80130b8:	d109      	bne.n	80130ce <_strtoul_l.constprop.0+0xf6>
 80130ba:	b005      	add	sp, #20
 80130bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130be:	9a02      	ldr	r2, [sp, #8]
 80130c0:	2a00      	cmp	r2, #0
 80130c2:	d000      	beq.n	80130c6 <_strtoul_l.constprop.0+0xee>
 80130c4:	4240      	negs	r0, r0
 80130c6:	2f00      	cmp	r7, #0
 80130c8:	d0f7      	beq.n	80130ba <_strtoul_l.constprop.0+0xe2>
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d001      	beq.n	80130d2 <_strtoul_l.constprop.0+0xfa>
 80130ce:	1e63      	subs	r3, r4, #1
 80130d0:	9300      	str	r3, [sp, #0]
 80130d2:	9b00      	ldr	r3, [sp, #0]
 80130d4:	603b      	str	r3, [r7, #0]
 80130d6:	e7f0      	b.n	80130ba <_strtoul_l.constprop.0+0xe2>
 80130d8:	08014c03 	.word	0x08014c03

080130dc <_strtoul_r>:
 80130dc:	b510      	push	{r4, lr}
 80130de:	f7ff ff7b 	bl	8012fd8 <_strtoul_l.constprop.0>
 80130e2:	bd10      	pop	{r4, pc}

080130e4 <_malloc_usable_size_r>:
 80130e4:	1f0b      	subs	r3, r1, #4
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	1f18      	subs	r0, r3, #4
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	da01      	bge.n	80130f2 <_malloc_usable_size_r+0xe>
 80130ee:	580b      	ldr	r3, [r1, r0]
 80130f0:	18c0      	adds	r0, r0, r3
 80130f2:	4770      	bx	lr

080130f4 <pow>:
 80130f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130f6:	0014      	movs	r4, r2
 80130f8:	001d      	movs	r5, r3
 80130fa:	9000      	str	r0, [sp, #0]
 80130fc:	9101      	str	r1, [sp, #4]
 80130fe:	f000 f8a3 	bl	8013248 <__ieee754_pow>
 8013102:	0022      	movs	r2, r4
 8013104:	0006      	movs	r6, r0
 8013106:	000f      	movs	r7, r1
 8013108:	002b      	movs	r3, r5
 801310a:	0020      	movs	r0, r4
 801310c:	0029      	movs	r1, r5
 801310e:	f7ef ff39 	bl	8002f84 <__aeabi_dcmpun>
 8013112:	2800      	cmp	r0, #0
 8013114:	d13f      	bne.n	8013196 <pow+0xa2>
 8013116:	9800      	ldr	r0, [sp, #0]
 8013118:	9901      	ldr	r1, [sp, #4]
 801311a:	2200      	movs	r2, #0
 801311c:	2300      	movs	r3, #0
 801311e:	f7ed f8a3 	bl	8000268 <__aeabi_dcmpeq>
 8013122:	2800      	cmp	r0, #0
 8013124:	d019      	beq.n	801315a <pow+0x66>
 8013126:	2200      	movs	r2, #0
 8013128:	2300      	movs	r3, #0
 801312a:	0020      	movs	r0, r4
 801312c:	0029      	movs	r1, r5
 801312e:	f7ed f89b 	bl	8000268 <__aeabi_dcmpeq>
 8013132:	2800      	cmp	r0, #0
 8013134:	d146      	bne.n	80131c4 <pow+0xd0>
 8013136:	0020      	movs	r0, r4
 8013138:	0029      	movs	r1, r5
 801313a:	f000 f849 	bl	80131d0 <finite>
 801313e:	2800      	cmp	r0, #0
 8013140:	d029      	beq.n	8013196 <pow+0xa2>
 8013142:	2200      	movs	r2, #0
 8013144:	2300      	movs	r3, #0
 8013146:	0020      	movs	r0, r4
 8013148:	0029      	movs	r1, r5
 801314a:	f7ed f893 	bl	8000274 <__aeabi_dcmplt>
 801314e:	2800      	cmp	r0, #0
 8013150:	d021      	beq.n	8013196 <pow+0xa2>
 8013152:	f7fe fb39 	bl	80117c8 <__errno>
 8013156:	2322      	movs	r3, #34	@ 0x22
 8013158:	e01c      	b.n	8013194 <pow+0xa0>
 801315a:	0030      	movs	r0, r6
 801315c:	0039      	movs	r1, r7
 801315e:	f000 f837 	bl	80131d0 <finite>
 8013162:	2800      	cmp	r0, #0
 8013164:	d11b      	bne.n	801319e <pow+0xaa>
 8013166:	9800      	ldr	r0, [sp, #0]
 8013168:	9901      	ldr	r1, [sp, #4]
 801316a:	f000 f831 	bl	80131d0 <finite>
 801316e:	2800      	cmp	r0, #0
 8013170:	d015      	beq.n	801319e <pow+0xaa>
 8013172:	0020      	movs	r0, r4
 8013174:	0029      	movs	r1, r5
 8013176:	f000 f82b 	bl	80131d0 <finite>
 801317a:	2800      	cmp	r0, #0
 801317c:	d00f      	beq.n	801319e <pow+0xaa>
 801317e:	0032      	movs	r2, r6
 8013180:	003b      	movs	r3, r7
 8013182:	0030      	movs	r0, r6
 8013184:	0039      	movs	r1, r7
 8013186:	f7ef fefd 	bl	8002f84 <__aeabi_dcmpun>
 801318a:	2800      	cmp	r0, #0
 801318c:	d0e1      	beq.n	8013152 <pow+0x5e>
 801318e:	f7fe fb1b 	bl	80117c8 <__errno>
 8013192:	2321      	movs	r3, #33	@ 0x21
 8013194:	6003      	str	r3, [r0, #0]
 8013196:	0030      	movs	r0, r6
 8013198:	0039      	movs	r1, r7
 801319a:	b003      	add	sp, #12
 801319c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801319e:	2200      	movs	r2, #0
 80131a0:	2300      	movs	r3, #0
 80131a2:	0030      	movs	r0, r6
 80131a4:	0039      	movs	r1, r7
 80131a6:	f7ed f85f 	bl	8000268 <__aeabi_dcmpeq>
 80131aa:	2800      	cmp	r0, #0
 80131ac:	d0f3      	beq.n	8013196 <pow+0xa2>
 80131ae:	9800      	ldr	r0, [sp, #0]
 80131b0:	9901      	ldr	r1, [sp, #4]
 80131b2:	f000 f80d 	bl	80131d0 <finite>
 80131b6:	2800      	cmp	r0, #0
 80131b8:	d0ed      	beq.n	8013196 <pow+0xa2>
 80131ba:	0020      	movs	r0, r4
 80131bc:	0029      	movs	r1, r5
 80131be:	f000 f807 	bl	80131d0 <finite>
 80131c2:	e7c4      	b.n	801314e <pow+0x5a>
 80131c4:	2600      	movs	r6, #0
 80131c6:	4f01      	ldr	r7, [pc, #4]	@ (80131cc <pow+0xd8>)
 80131c8:	e7e5      	b.n	8013196 <pow+0xa2>
 80131ca:	46c0      	nop			@ (mov r8, r8)
 80131cc:	3ff00000 	.word	0x3ff00000

080131d0 <finite>:
 80131d0:	4b02      	ldr	r3, [pc, #8]	@ (80131dc <finite+0xc>)
 80131d2:	0048      	lsls	r0, r1, #1
 80131d4:	0840      	lsrs	r0, r0, #1
 80131d6:	18c0      	adds	r0, r0, r3
 80131d8:	0fc0      	lsrs	r0, r0, #31
 80131da:	4770      	bx	lr
 80131dc:	80100000 	.word	0x80100000

080131e0 <trunc>:
 80131e0:	4a16      	ldr	r2, [pc, #88]	@ (801323c <trunc+0x5c>)
 80131e2:	004b      	lsls	r3, r1, #1
 80131e4:	0d5b      	lsrs	r3, r3, #21
 80131e6:	189a      	adds	r2, r3, r2
 80131e8:	b570      	push	{r4, r5, r6, lr}
 80131ea:	000e      	movs	r6, r1
 80131ec:	2a13      	cmp	r2, #19
 80131ee:	dc0f      	bgt.n	8013210 <trunc+0x30>
 80131f0:	0fc9      	lsrs	r1, r1, #31
 80131f2:	07c9      	lsls	r1, r1, #31
 80131f4:	2a00      	cmp	r2, #0
 80131f6:	da02      	bge.n	80131fe <trunc+0x1e>
 80131f8:	2200      	movs	r2, #0
 80131fa:	0010      	movs	r0, r2
 80131fc:	bd70      	pop	{r4, r5, r6, pc}
 80131fe:	4b10      	ldr	r3, [pc, #64]	@ (8013240 <trunc+0x60>)
 8013200:	2400      	movs	r4, #0
 8013202:	4113      	asrs	r3, r2
 8013204:	4033      	ands	r3, r6
 8013206:	430b      	orrs	r3, r1
 8013208:	001d      	movs	r5, r3
 801320a:	0020      	movs	r0, r4
 801320c:	0029      	movs	r1, r5
 801320e:	e7f5      	b.n	80131fc <trunc+0x1c>
 8013210:	2a33      	cmp	r2, #51	@ 0x33
 8013212:	dd08      	ble.n	8013226 <trunc+0x46>
 8013214:	2380      	movs	r3, #128	@ 0x80
 8013216:	00db      	lsls	r3, r3, #3
 8013218:	429a      	cmp	r2, r3
 801321a:	d1ef      	bne.n	80131fc <trunc+0x1c>
 801321c:	0002      	movs	r2, r0
 801321e:	000b      	movs	r3, r1
 8013220:	f7ee f8a4 	bl	800136c <__aeabi_dadd>
 8013224:	e7ea      	b.n	80131fc <trunc+0x1c>
 8013226:	4a07      	ldr	r2, [pc, #28]	@ (8013244 <trunc+0x64>)
 8013228:	000d      	movs	r5, r1
 801322a:	189b      	adds	r3, r3, r2
 801322c:	2201      	movs	r2, #1
 801322e:	4252      	negs	r2, r2
 8013230:	40da      	lsrs	r2, r3
 8013232:	0003      	movs	r3, r0
 8013234:	4393      	bics	r3, r2
 8013236:	001c      	movs	r4, r3
 8013238:	e7e7      	b.n	801320a <trunc+0x2a>
 801323a:	46c0      	nop			@ (mov r8, r8)
 801323c:	fffffc01 	.word	0xfffffc01
 8013240:	fff00000 	.word	0xfff00000
 8013244:	fffffbed 	.word	0xfffffbed

08013248 <__ieee754_pow>:
 8013248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801324a:	b095      	sub	sp, #84	@ 0x54
 801324c:	9202      	str	r2, [sp, #8]
 801324e:	9303      	str	r3, [sp, #12]
 8013250:	9b03      	ldr	r3, [sp, #12]
 8013252:	9a03      	ldr	r2, [sp, #12]
 8013254:	9306      	str	r3, [sp, #24]
 8013256:	0052      	lsls	r2, r2, #1
 8013258:	9b02      	ldr	r3, [sp, #8]
 801325a:	0852      	lsrs	r2, r2, #1
 801325c:	9204      	str	r2, [sp, #16]
 801325e:	001a      	movs	r2, r3
 8013260:	000f      	movs	r7, r1
 8013262:	9904      	ldr	r1, [sp, #16]
 8013264:	0006      	movs	r6, r0
 8013266:	430a      	orrs	r2, r1
 8013268:	d119      	bne.n	801329e <__ieee754_pow+0x56>
 801326a:	2180      	movs	r1, #128	@ 0x80
 801326c:	0309      	lsls	r1, r1, #12
 801326e:	4079      	eors	r1, r7
 8013270:	0002      	movs	r2, r0
 8013272:	000b      	movs	r3, r1
 8013274:	1892      	adds	r2, r2, r2
 8013276:	415b      	adcs	r3, r3
 8013278:	499b      	ldr	r1, [pc, #620]	@ (80134e8 <__ieee754_pow+0x2a0>)
 801327a:	428b      	cmp	r3, r1
 801327c:	d806      	bhi.n	801328c <__ieee754_pow+0x44>
 801327e:	d001      	beq.n	8013284 <__ieee754_pow+0x3c>
 8013280:	f000 fcde 	bl	8013c40 <__ieee754_pow+0x9f8>
 8013284:	2a00      	cmp	r2, #0
 8013286:	d101      	bne.n	801328c <__ieee754_pow+0x44>
 8013288:	f000 fcda 	bl	8013c40 <__ieee754_pow+0x9f8>
 801328c:	9a02      	ldr	r2, [sp, #8]
 801328e:	9b03      	ldr	r3, [sp, #12]
 8013290:	0030      	movs	r0, r6
 8013292:	0039      	movs	r1, r7
 8013294:	f7ee f86a 	bl	800136c <__aeabi_dadd>
 8013298:	9000      	str	r0, [sp, #0]
 801329a:	9101      	str	r1, [sp, #4]
 801329c:	e0af      	b.n	80133fe <__ieee754_pow+0x1b6>
 801329e:	4a93      	ldr	r2, [pc, #588]	@ (80134ec <__ieee754_pow+0x2a4>)
 80132a0:	007c      	lsls	r4, r7, #1
 80132a2:	9708      	str	r7, [sp, #32]
 80132a4:	900e      	str	r0, [sp, #56]	@ 0x38
 80132a6:	0864      	lsrs	r4, r4, #1
 80132a8:	4294      	cmp	r4, r2
 80132aa:	d809      	bhi.n	80132c0 <__ieee754_pow+0x78>
 80132ac:	d101      	bne.n	80132b2 <__ieee754_pow+0x6a>
 80132ae:	2800      	cmp	r0, #0
 80132b0:	d1ec      	bne.n	801328c <__ieee754_pow+0x44>
 80132b2:	9904      	ldr	r1, [sp, #16]
 80132b4:	4a8d      	ldr	r2, [pc, #564]	@ (80134ec <__ieee754_pow+0x2a4>)
 80132b6:	4291      	cmp	r1, r2
 80132b8:	d802      	bhi.n	80132c0 <__ieee754_pow+0x78>
 80132ba:	d10c      	bne.n	80132d6 <__ieee754_pow+0x8e>
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d00a      	beq.n	80132d6 <__ieee754_pow+0x8e>
 80132c0:	4b8b      	ldr	r3, [pc, #556]	@ (80134f0 <__ieee754_pow+0x2a8>)
 80132c2:	18fb      	adds	r3, r7, r3
 80132c4:	4333      	orrs	r3, r6
 80132c6:	d1e1      	bne.n	801328c <__ieee754_pow+0x44>
 80132c8:	2180      	movs	r1, #128	@ 0x80
 80132ca:	9803      	ldr	r0, [sp, #12]
 80132cc:	0309      	lsls	r1, r1, #12
 80132ce:	4048      	eors	r0, r1
 80132d0:	0003      	movs	r3, r0
 80132d2:	9a02      	ldr	r2, [sp, #8]
 80132d4:	e7ce      	b.n	8013274 <__ieee754_pow+0x2c>
 80132d6:	2500      	movs	r5, #0
 80132d8:	9a08      	ldr	r2, [sp, #32]
 80132da:	940a      	str	r4, [sp, #40]	@ 0x28
 80132dc:	42aa      	cmp	r2, r5
 80132de:	da68      	bge.n	80133b2 <__ieee754_pow+0x16a>
 80132e0:	4a84      	ldr	r2, [pc, #528]	@ (80134f4 <__ieee754_pow+0x2ac>)
 80132e2:	9904      	ldr	r1, [sp, #16]
 80132e4:	4291      	cmp	r1, r2
 80132e6:	d863      	bhi.n	80133b0 <__ieee754_pow+0x168>
 80132e8:	4a83      	ldr	r2, [pc, #524]	@ (80134f8 <__ieee754_pow+0x2b0>)
 80132ea:	4291      	cmp	r1, r2
 80132ec:	d910      	bls.n	8013310 <__ieee754_pow+0xc8>
 80132ee:	150a      	asrs	r2, r1, #20
 80132f0:	4982      	ldr	r1, [pc, #520]	@ (80134fc <__ieee754_pow+0x2b4>)
 80132f2:	1852      	adds	r2, r2, r1
 80132f4:	2a14      	cmp	r2, #20
 80132f6:	dd3b      	ble.n	8013370 <__ieee754_pow+0x128>
 80132f8:	2134      	movs	r1, #52	@ 0x34
 80132fa:	1a89      	subs	r1, r1, r2
 80132fc:	9a02      	ldr	r2, [sp, #8]
 80132fe:	40ca      	lsrs	r2, r1
 8013300:	0010      	movs	r0, r2
 8013302:	4088      	lsls	r0, r1
 8013304:	4298      	cmp	r0, r3
 8013306:	d103      	bne.n	8013310 <__ieee754_pow+0xc8>
 8013308:	2101      	movs	r1, #1
 801330a:	3502      	adds	r5, #2
 801330c:	400a      	ands	r2, r1
 801330e:	1aad      	subs	r5, r5, r2
 8013310:	2b00      	cmp	r3, #0
 8013312:	d03d      	beq.n	8013390 <__ieee754_pow+0x148>
 8013314:	0030      	movs	r0, r6
 8013316:	0039      	movs	r1, r7
 8013318:	f000 fcc2 	bl	8013ca0 <fabs>
 801331c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801331e:	9000      	str	r0, [sp, #0]
 8013320:	9101      	str	r1, [sp, #4]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d000      	beq.n	8013328 <__ieee754_pow+0xe0>
 8013326:	e093      	b.n	8013450 <__ieee754_pow+0x208>
 8013328:	4a75      	ldr	r2, [pc, #468]	@ (8013500 <__ieee754_pow+0x2b8>)
 801332a:	00bb      	lsls	r3, r7, #2
 801332c:	089b      	lsrs	r3, r3, #2
 801332e:	4293      	cmp	r3, r2
 8013330:	d002      	beq.n	8013338 <__ieee754_pow+0xf0>
 8013332:	2c00      	cmp	r4, #0
 8013334:	d000      	beq.n	8013338 <__ieee754_pow+0xf0>
 8013336:	e08b      	b.n	8013450 <__ieee754_pow+0x208>
 8013338:	9b06      	ldr	r3, [sp, #24]
 801333a:	2b00      	cmp	r3, #0
 801333c:	da07      	bge.n	801334e <__ieee754_pow+0x106>
 801333e:	9a00      	ldr	r2, [sp, #0]
 8013340:	9b01      	ldr	r3, [sp, #4]
 8013342:	2000      	movs	r0, #0
 8013344:	496e      	ldr	r1, [pc, #440]	@ (8013500 <__ieee754_pow+0x2b8>)
 8013346:	f7ee fb75 	bl	8001a34 <__aeabi_ddiv>
 801334a:	9000      	str	r0, [sp, #0]
 801334c:	9101      	str	r1, [sp, #4]
 801334e:	9b08      	ldr	r3, [sp, #32]
 8013350:	2b00      	cmp	r3, #0
 8013352:	da54      	bge.n	80133fe <__ieee754_pow+0x1b6>
 8013354:	4b66      	ldr	r3, [pc, #408]	@ (80134f0 <__ieee754_pow+0x2a8>)
 8013356:	18e4      	adds	r4, r4, r3
 8013358:	432c      	orrs	r4, r5
 801335a:	d000      	beq.n	801335e <__ieee754_pow+0x116>
 801335c:	e06d      	b.n	801343a <__ieee754_pow+0x1f2>
 801335e:	9a00      	ldr	r2, [sp, #0]
 8013360:	9b01      	ldr	r3, [sp, #4]
 8013362:	0010      	movs	r0, r2
 8013364:	0019      	movs	r1, r3
 8013366:	f7ef fa71 	bl	800284c <__aeabi_dsub>
 801336a:	0002      	movs	r2, r0
 801336c:	000b      	movs	r3, r1
 801336e:	e01c      	b.n	80133aa <__ieee754_pow+0x162>
 8013370:	2b00      	cmp	r3, #0
 8013372:	d1cf      	bne.n	8013314 <__ieee754_pow+0xcc>
 8013374:	3314      	adds	r3, #20
 8013376:	1a9a      	subs	r2, r3, r2
 8013378:	9b04      	ldr	r3, [sp, #16]
 801337a:	4113      	asrs	r3, r2
 801337c:	0019      	movs	r1, r3
 801337e:	4091      	lsls	r1, r2
 8013380:	000a      	movs	r2, r1
 8013382:	9904      	ldr	r1, [sp, #16]
 8013384:	428a      	cmp	r2, r1
 8013386:	d103      	bne.n	8013390 <__ieee754_pow+0x148>
 8013388:	2201      	movs	r2, #1
 801338a:	2502      	movs	r5, #2
 801338c:	4013      	ands	r3, r2
 801338e:	1aed      	subs	r5, r5, r3
 8013390:	4b5b      	ldr	r3, [pc, #364]	@ (8013500 <__ieee754_pow+0x2b8>)
 8013392:	9a04      	ldr	r2, [sp, #16]
 8013394:	429a      	cmp	r2, r3
 8013396:	d136      	bne.n	8013406 <__ieee754_pow+0x1be>
 8013398:	9b06      	ldr	r3, [sp, #24]
 801339a:	9600      	str	r6, [sp, #0]
 801339c:	9701      	str	r7, [sp, #4]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	da2d      	bge.n	80133fe <__ieee754_pow+0x1b6>
 80133a2:	0032      	movs	r2, r6
 80133a4:	003b      	movs	r3, r7
 80133a6:	2000      	movs	r0, #0
 80133a8:	4955      	ldr	r1, [pc, #340]	@ (8013500 <__ieee754_pow+0x2b8>)
 80133aa:	f7ee fb43 	bl	8001a34 <__aeabi_ddiv>
 80133ae:	e773      	b.n	8013298 <__ieee754_pow+0x50>
 80133b0:	2502      	movs	r5, #2
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d1ae      	bne.n	8013314 <__ieee754_pow+0xcc>
 80133b6:	9b04      	ldr	r3, [sp, #16]
 80133b8:	4a4c      	ldr	r2, [pc, #304]	@ (80134ec <__ieee754_pow+0x2a4>)
 80133ba:	4293      	cmp	r3, r2
 80133bc:	d1e8      	bne.n	8013390 <__ieee754_pow+0x148>
 80133be:	4b4c      	ldr	r3, [pc, #304]	@ (80134f0 <__ieee754_pow+0x2a8>)
 80133c0:	18e3      	adds	r3, r4, r3
 80133c2:	4333      	orrs	r3, r6
 80133c4:	d101      	bne.n	80133ca <__ieee754_pow+0x182>
 80133c6:	f000 fc3b 	bl	8013c40 <__ieee754_pow+0x9f8>
 80133ca:	4b4b      	ldr	r3, [pc, #300]	@ (80134f8 <__ieee754_pow+0x2b0>)
 80133cc:	429c      	cmp	r4, r3
 80133ce:	d909      	bls.n	80133e4 <__ieee754_pow+0x19c>
 80133d0:	9b06      	ldr	r3, [sp, #24]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	da01      	bge.n	80133da <__ieee754_pow+0x192>
 80133d6:	f000 fc37 	bl	8013c48 <__ieee754_pow+0xa00>
 80133da:	9b02      	ldr	r3, [sp, #8]
 80133dc:	9c03      	ldr	r4, [sp, #12]
 80133de:	9300      	str	r3, [sp, #0]
 80133e0:	9401      	str	r4, [sp, #4]
 80133e2:	e00c      	b.n	80133fe <__ieee754_pow+0x1b6>
 80133e4:	9b06      	ldr	r3, [sp, #24]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	db01      	blt.n	80133ee <__ieee754_pow+0x1a6>
 80133ea:	f000 fc2d 	bl	8013c48 <__ieee754_pow+0xa00>
 80133ee:	2280      	movs	r2, #128	@ 0x80
 80133f0:	0612      	lsls	r2, r2, #24
 80133f2:	4694      	mov	ip, r2
 80133f4:	9b02      	ldr	r3, [sp, #8]
 80133f6:	9300      	str	r3, [sp, #0]
 80133f8:	9b03      	ldr	r3, [sp, #12]
 80133fa:	4463      	add	r3, ip
 80133fc:	9301      	str	r3, [sp, #4]
 80133fe:	9800      	ldr	r0, [sp, #0]
 8013400:	9901      	ldr	r1, [sp, #4]
 8013402:	b015      	add	sp, #84	@ 0x54
 8013404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013406:	2380      	movs	r3, #128	@ 0x80
 8013408:	9a06      	ldr	r2, [sp, #24]
 801340a:	05db      	lsls	r3, r3, #23
 801340c:	429a      	cmp	r2, r3
 801340e:	d106      	bne.n	801341e <__ieee754_pow+0x1d6>
 8013410:	0032      	movs	r2, r6
 8013412:	003b      	movs	r3, r7
 8013414:	0030      	movs	r0, r6
 8013416:	0039      	movs	r1, r7
 8013418:	f7ee ff50 	bl	80022bc <__aeabi_dmul>
 801341c:	e73c      	b.n	8013298 <__ieee754_pow+0x50>
 801341e:	4b39      	ldr	r3, [pc, #228]	@ (8013504 <__ieee754_pow+0x2bc>)
 8013420:	9a06      	ldr	r2, [sp, #24]
 8013422:	429a      	cmp	r2, r3
 8013424:	d000      	beq.n	8013428 <__ieee754_pow+0x1e0>
 8013426:	e775      	b.n	8013314 <__ieee754_pow+0xcc>
 8013428:	9b08      	ldr	r3, [sp, #32]
 801342a:	2b00      	cmp	r3, #0
 801342c:	da00      	bge.n	8013430 <__ieee754_pow+0x1e8>
 801342e:	e771      	b.n	8013314 <__ieee754_pow+0xcc>
 8013430:	0030      	movs	r0, r6
 8013432:	0039      	movs	r1, r7
 8013434:	f000 fcd2 	bl	8013ddc <__ieee754_sqrt>
 8013438:	e72e      	b.n	8013298 <__ieee754_pow+0x50>
 801343a:	2d01      	cmp	r5, #1
 801343c:	d1df      	bne.n	80133fe <__ieee754_pow+0x1b6>
 801343e:	9800      	ldr	r0, [sp, #0]
 8013440:	2180      	movs	r1, #128	@ 0x80
 8013442:	0002      	movs	r2, r0
 8013444:	9801      	ldr	r0, [sp, #4]
 8013446:	0609      	lsls	r1, r1, #24
 8013448:	1843      	adds	r3, r0, r1
 801344a:	9200      	str	r2, [sp, #0]
 801344c:	9301      	str	r3, [sp, #4]
 801344e:	e7d6      	b.n	80133fe <__ieee754_pow+0x1b6>
 8013450:	0ffb      	lsrs	r3, r7, #31
 8013452:	3b01      	subs	r3, #1
 8013454:	001a      	movs	r2, r3
 8013456:	432a      	orrs	r2, r5
 8013458:	d104      	bne.n	8013464 <__ieee754_pow+0x21c>
 801345a:	0032      	movs	r2, r6
 801345c:	003b      	movs	r3, r7
 801345e:	0030      	movs	r0, r6
 8013460:	0039      	movs	r1, r7
 8013462:	e780      	b.n	8013366 <__ieee754_pow+0x11e>
 8013464:	3d01      	subs	r5, #1
 8013466:	2200      	movs	r2, #0
 8013468:	431d      	orrs	r5, r3
 801346a:	d015      	beq.n	8013498 <__ieee754_pow+0x250>
 801346c:	4b24      	ldr	r3, [pc, #144]	@ (8013500 <__ieee754_pow+0x2b8>)
 801346e:	9208      	str	r2, [sp, #32]
 8013470:	9309      	str	r3, [sp, #36]	@ 0x24
 8013472:	2384      	movs	r3, #132	@ 0x84
 8013474:	9a04      	ldr	r2, [sp, #16]
 8013476:	05db      	lsls	r3, r3, #23
 8013478:	429a      	cmp	r2, r3
 801347a:	d800      	bhi.n	801347e <__ieee754_pow+0x236>
 801347c:	e102      	b.n	8013684 <__ieee754_pow+0x43c>
 801347e:	4b22      	ldr	r3, [pc, #136]	@ (8013508 <__ieee754_pow+0x2c0>)
 8013480:	429a      	cmp	r2, r3
 8013482:	d912      	bls.n	80134aa <__ieee754_pow+0x262>
 8013484:	4b1c      	ldr	r3, [pc, #112]	@ (80134f8 <__ieee754_pow+0x2b0>)
 8013486:	429c      	cmp	r4, r3
 8013488:	d808      	bhi.n	801349c <__ieee754_pow+0x254>
 801348a:	9b06      	ldr	r3, [sp, #24]
 801348c:	2b00      	cmp	r3, #0
 801348e:	da08      	bge.n	80134a2 <__ieee754_pow+0x25a>
 8013490:	2000      	movs	r0, #0
 8013492:	f000 fc9b 	bl	8013dcc <__math_oflow>
 8013496:	e6ff      	b.n	8013298 <__ieee754_pow+0x50>
 8013498:	4b1c      	ldr	r3, [pc, #112]	@ (801350c <__ieee754_pow+0x2c4>)
 801349a:	e7e8      	b.n	801346e <__ieee754_pow+0x226>
 801349c:	9b06      	ldr	r3, [sp, #24]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	dcf6      	bgt.n	8013490 <__ieee754_pow+0x248>
 80134a2:	2000      	movs	r0, #0
 80134a4:	f000 fc8b 	bl	8013dbe <__math_uflow>
 80134a8:	e6f6      	b.n	8013298 <__ieee754_pow+0x50>
 80134aa:	4b19      	ldr	r3, [pc, #100]	@ (8013510 <__ieee754_pow+0x2c8>)
 80134ac:	429c      	cmp	r4, r3
 80134ae:	d80b      	bhi.n	80134c8 <__ieee754_pow+0x280>
 80134b0:	9808      	ldr	r0, [sp, #32]
 80134b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80134b4:	2300      	movs	r3, #0
 80134b6:	2200      	movs	r2, #0
 80134b8:	f7ec fedc 	bl	8000274 <__aeabi_dcmplt>
 80134bc:	1e43      	subs	r3, r0, #1
 80134be:	4198      	sbcs	r0, r3
 80134c0:	9b06      	ldr	r3, [sp, #24]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	daee      	bge.n	80134a4 <__ieee754_pow+0x25c>
 80134c6:	e7e4      	b.n	8013492 <__ieee754_pow+0x24a>
 80134c8:	4b0d      	ldr	r3, [pc, #52]	@ (8013500 <__ieee754_pow+0x2b8>)
 80134ca:	2200      	movs	r2, #0
 80134cc:	429c      	cmp	r4, r3
 80134ce:	d921      	bls.n	8013514 <__ieee754_pow+0x2cc>
 80134d0:	9808      	ldr	r0, [sp, #32]
 80134d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80134d4:	2300      	movs	r3, #0
 80134d6:	f7ec fecd 	bl	8000274 <__aeabi_dcmplt>
 80134da:	1e43      	subs	r3, r0, #1
 80134dc:	4198      	sbcs	r0, r3
 80134de:	9b06      	ldr	r3, [sp, #24]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	dcd6      	bgt.n	8013492 <__ieee754_pow+0x24a>
 80134e4:	e7de      	b.n	80134a4 <__ieee754_pow+0x25c>
 80134e6:	46c0      	nop			@ (mov r8, r8)
 80134e8:	fff00000 	.word	0xfff00000
 80134ec:	7ff00000 	.word	0x7ff00000
 80134f0:	c0100000 	.word	0xc0100000
 80134f4:	433fffff 	.word	0x433fffff
 80134f8:	3fefffff 	.word	0x3fefffff
 80134fc:	fffffc01 	.word	0xfffffc01
 8013500:	3ff00000 	.word	0x3ff00000
 8013504:	3fe00000 	.word	0x3fe00000
 8013508:	43f00000 	.word	0x43f00000
 801350c:	bff00000 	.word	0xbff00000
 8013510:	3feffffe 	.word	0x3feffffe
 8013514:	9800      	ldr	r0, [sp, #0]
 8013516:	9901      	ldr	r1, [sp, #4]
 8013518:	4b4f      	ldr	r3, [pc, #316]	@ (8013658 <__ieee754_pow+0x410>)
 801351a:	f7ef f997 	bl	800284c <__aeabi_dsub>
 801351e:	22c0      	movs	r2, #192	@ 0xc0
 8013520:	4b4e      	ldr	r3, [pc, #312]	@ (801365c <__ieee754_pow+0x414>)
 8013522:	05d2      	lsls	r2, r2, #23
 8013524:	0006      	movs	r6, r0
 8013526:	000f      	movs	r7, r1
 8013528:	f7ee fec8 	bl	80022bc <__aeabi_dmul>
 801352c:	4a4c      	ldr	r2, [pc, #304]	@ (8013660 <__ieee754_pow+0x418>)
 801352e:	9004      	str	r0, [sp, #16]
 8013530:	9105      	str	r1, [sp, #20]
 8013532:	4b4c      	ldr	r3, [pc, #304]	@ (8013664 <__ieee754_pow+0x41c>)
 8013534:	0030      	movs	r0, r6
 8013536:	0039      	movs	r1, r7
 8013538:	f7ee fec0 	bl	80022bc <__aeabi_dmul>
 801353c:	2200      	movs	r2, #0
 801353e:	9000      	str	r0, [sp, #0]
 8013540:	9101      	str	r1, [sp, #4]
 8013542:	4b49      	ldr	r3, [pc, #292]	@ (8013668 <__ieee754_pow+0x420>)
 8013544:	0030      	movs	r0, r6
 8013546:	0039      	movs	r1, r7
 8013548:	f7ee feb8 	bl	80022bc <__aeabi_dmul>
 801354c:	0002      	movs	r2, r0
 801354e:	000b      	movs	r3, r1
 8013550:	4846      	ldr	r0, [pc, #280]	@ (801366c <__ieee754_pow+0x424>)
 8013552:	4947      	ldr	r1, [pc, #284]	@ (8013670 <__ieee754_pow+0x428>)
 8013554:	f7ef f97a 	bl	800284c <__aeabi_dsub>
 8013558:	0032      	movs	r2, r6
 801355a:	003b      	movs	r3, r7
 801355c:	f7ee feae 	bl	80022bc <__aeabi_dmul>
 8013560:	0002      	movs	r2, r0
 8013562:	000b      	movs	r3, r1
 8013564:	2000      	movs	r0, #0
 8013566:	4943      	ldr	r1, [pc, #268]	@ (8013674 <__ieee754_pow+0x42c>)
 8013568:	f7ef f970 	bl	800284c <__aeabi_dsub>
 801356c:	0032      	movs	r2, r6
 801356e:	0004      	movs	r4, r0
 8013570:	000d      	movs	r5, r1
 8013572:	003b      	movs	r3, r7
 8013574:	0030      	movs	r0, r6
 8013576:	0039      	movs	r1, r7
 8013578:	f7ee fea0 	bl	80022bc <__aeabi_dmul>
 801357c:	0002      	movs	r2, r0
 801357e:	000b      	movs	r3, r1
 8013580:	0020      	movs	r0, r4
 8013582:	0029      	movs	r1, r5
 8013584:	f7ee fe9a 	bl	80022bc <__aeabi_dmul>
 8013588:	4a3b      	ldr	r2, [pc, #236]	@ (8013678 <__ieee754_pow+0x430>)
 801358a:	4b34      	ldr	r3, [pc, #208]	@ (801365c <__ieee754_pow+0x414>)
 801358c:	f7ee fe96 	bl	80022bc <__aeabi_dmul>
 8013590:	0002      	movs	r2, r0
 8013592:	000b      	movs	r3, r1
 8013594:	9800      	ldr	r0, [sp, #0]
 8013596:	9901      	ldr	r1, [sp, #4]
 8013598:	f7ef f958 	bl	800284c <__aeabi_dsub>
 801359c:	0002      	movs	r2, r0
 801359e:	000b      	movs	r3, r1
 80135a0:	0004      	movs	r4, r0
 80135a2:	000d      	movs	r5, r1
 80135a4:	9804      	ldr	r0, [sp, #16]
 80135a6:	9905      	ldr	r1, [sp, #20]
 80135a8:	f7ed fee0 	bl	800136c <__aeabi_dadd>
 80135ac:	9a04      	ldr	r2, [sp, #16]
 80135ae:	9b05      	ldr	r3, [sp, #20]
 80135b0:	2000      	movs	r0, #0
 80135b2:	9000      	str	r0, [sp, #0]
 80135b4:	9101      	str	r1, [sp, #4]
 80135b6:	f7ef f949 	bl	800284c <__aeabi_dsub>
 80135ba:	0002      	movs	r2, r0
 80135bc:	000b      	movs	r3, r1
 80135be:	0020      	movs	r0, r4
 80135c0:	0029      	movs	r1, r5
 80135c2:	f7ef f943 	bl	800284c <__aeabi_dsub>
 80135c6:	9b02      	ldr	r3, [sp, #8]
 80135c8:	9c03      	ldr	r4, [sp, #12]
 80135ca:	9304      	str	r3, [sp, #16]
 80135cc:	9405      	str	r4, [sp, #20]
 80135ce:	2300      	movs	r3, #0
 80135d0:	9304      	str	r3, [sp, #16]
 80135d2:	9c04      	ldr	r4, [sp, #16]
 80135d4:	9d05      	ldr	r5, [sp, #20]
 80135d6:	0006      	movs	r6, r0
 80135d8:	000f      	movs	r7, r1
 80135da:	9802      	ldr	r0, [sp, #8]
 80135dc:	9903      	ldr	r1, [sp, #12]
 80135de:	0022      	movs	r2, r4
 80135e0:	002b      	movs	r3, r5
 80135e2:	f7ef f933 	bl	800284c <__aeabi_dsub>
 80135e6:	9a00      	ldr	r2, [sp, #0]
 80135e8:	9b01      	ldr	r3, [sp, #4]
 80135ea:	f7ee fe67 	bl	80022bc <__aeabi_dmul>
 80135ee:	9a02      	ldr	r2, [sp, #8]
 80135f0:	9b03      	ldr	r3, [sp, #12]
 80135f2:	9006      	str	r0, [sp, #24]
 80135f4:	9107      	str	r1, [sp, #28]
 80135f6:	0030      	movs	r0, r6
 80135f8:	0039      	movs	r1, r7
 80135fa:	f7ee fe5f 	bl	80022bc <__aeabi_dmul>
 80135fe:	0002      	movs	r2, r0
 8013600:	000b      	movs	r3, r1
 8013602:	9806      	ldr	r0, [sp, #24]
 8013604:	9907      	ldr	r1, [sp, #28]
 8013606:	f7ed feb1 	bl	800136c <__aeabi_dadd>
 801360a:	0022      	movs	r2, r4
 801360c:	002b      	movs	r3, r5
 801360e:	9002      	str	r0, [sp, #8]
 8013610:	9103      	str	r1, [sp, #12]
 8013612:	9800      	ldr	r0, [sp, #0]
 8013614:	9901      	ldr	r1, [sp, #4]
 8013616:	f7ee fe51 	bl	80022bc <__aeabi_dmul>
 801361a:	000b      	movs	r3, r1
 801361c:	0002      	movs	r2, r0
 801361e:	0006      	movs	r6, r0
 8013620:	000f      	movs	r7, r1
 8013622:	9802      	ldr	r0, [sp, #8]
 8013624:	9903      	ldr	r1, [sp, #12]
 8013626:	f7ed fea1 	bl	800136c <__aeabi_dadd>
 801362a:	9000      	str	r0, [sp, #0]
 801362c:	9101      	str	r1, [sp, #4]
 801362e:	9c01      	ldr	r4, [sp, #4]
 8013630:	4b12      	ldr	r3, [pc, #72]	@ (801367c <__ieee754_pow+0x434>)
 8013632:	9406      	str	r4, [sp, #24]
 8013634:	429c      	cmp	r4, r3
 8013636:	dc00      	bgt.n	801363a <__ieee754_pow+0x3f2>
 8013638:	e222      	b.n	8013a80 <__ieee754_pow+0x838>
 801363a:	4a11      	ldr	r2, [pc, #68]	@ (8013680 <__ieee754_pow+0x438>)
 801363c:	18a3      	adds	r3, r4, r2
 801363e:	9a00      	ldr	r2, [sp, #0]
 8013640:	4313      	orrs	r3, r2
 8013642:	d100      	bne.n	8013646 <__ieee754_pow+0x3fe>
 8013644:	e1a0      	b.n	8013988 <__ieee754_pow+0x740>
 8013646:	9808      	ldr	r0, [sp, #32]
 8013648:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801364a:	2300      	movs	r3, #0
 801364c:	2200      	movs	r2, #0
 801364e:	f7ec fe11 	bl	8000274 <__aeabi_dcmplt>
 8013652:	1e43      	subs	r3, r0, #1
 8013654:	4198      	sbcs	r0, r3
 8013656:	e71c      	b.n	8013492 <__ieee754_pow+0x24a>
 8013658:	3ff00000 	.word	0x3ff00000
 801365c:	3ff71547 	.word	0x3ff71547
 8013660:	f85ddf44 	.word	0xf85ddf44
 8013664:	3e54ae0b 	.word	0x3e54ae0b
 8013668:	3fd00000 	.word	0x3fd00000
 801366c:	55555555 	.word	0x55555555
 8013670:	3fd55555 	.word	0x3fd55555
 8013674:	3fe00000 	.word	0x3fe00000
 8013678:	652b82fe 	.word	0x652b82fe
 801367c:	408fffff 	.word	0x408fffff
 8013680:	bf700000 	.word	0xbf700000
 8013684:	4be0      	ldr	r3, [pc, #896]	@ (8013a08 <__ieee754_pow+0x7c0>)
 8013686:	2200      	movs	r2, #0
 8013688:	423b      	tst	r3, r7
 801368a:	d10b      	bne.n	80136a4 <__ieee754_pow+0x45c>
 801368c:	9800      	ldr	r0, [sp, #0]
 801368e:	9901      	ldr	r1, [sp, #4]
 8013690:	2200      	movs	r2, #0
 8013692:	4bde      	ldr	r3, [pc, #888]	@ (8013a0c <__ieee754_pow+0x7c4>)
 8013694:	f7ee fe12 	bl	80022bc <__aeabi_dmul>
 8013698:	2235      	movs	r2, #53	@ 0x35
 801369a:	9000      	str	r0, [sp, #0]
 801369c:	9101      	str	r1, [sp, #4]
 801369e:	9b01      	ldr	r3, [sp, #4]
 80136a0:	4252      	negs	r2, r2
 80136a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80136a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136a6:	49da      	ldr	r1, [pc, #872]	@ (8013a10 <__ieee754_pow+0x7c8>)
 80136a8:	151b      	asrs	r3, r3, #20
 80136aa:	185b      	adds	r3, r3, r1
 80136ac:	189b      	adds	r3, r3, r2
 80136ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80136b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80136b2:	4dd8      	ldr	r5, [pc, #864]	@ (8013a14 <__ieee754_pow+0x7cc>)
 80136b4:	031b      	lsls	r3, r3, #12
 80136b6:	4ad8      	ldr	r2, [pc, #864]	@ (8013a18 <__ieee754_pow+0x7d0>)
 80136b8:	0b1b      	lsrs	r3, r3, #12
 80136ba:	2600      	movs	r6, #0
 80136bc:	431d      	orrs	r5, r3
 80136be:	4293      	cmp	r3, r2
 80136c0:	dd09      	ble.n	80136d6 <__ieee754_pow+0x48e>
 80136c2:	4ad6      	ldr	r2, [pc, #856]	@ (8013a1c <__ieee754_pow+0x7d4>)
 80136c4:	3601      	adds	r6, #1
 80136c6:	4293      	cmp	r3, r2
 80136c8:	dd05      	ble.n	80136d6 <__ieee754_pow+0x48e>
 80136ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136cc:	199b      	adds	r3, r3, r6
 80136ce:	2600      	movs	r6, #0
 80136d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80136d2:	4bd3      	ldr	r3, [pc, #844]	@ (8013a20 <__ieee754_pow+0x7d8>)
 80136d4:	18ed      	adds	r5, r5, r3
 80136d6:	9800      	ldr	r0, [sp, #0]
 80136d8:	9901      	ldr	r1, [sp, #4]
 80136da:	0029      	movs	r1, r5
 80136dc:	4bd1      	ldr	r3, [pc, #836]	@ (8013a24 <__ieee754_pow+0x7dc>)
 80136de:	00f2      	lsls	r2, r6, #3
 80136e0:	189b      	adds	r3, r3, r2
 80136e2:	685c      	ldr	r4, [r3, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	920f      	str	r2, [sp, #60]	@ 0x3c
 80136e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80136ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80136ec:	001a      	movs	r2, r3
 80136ee:	0023      	movs	r3, r4
 80136f0:	900c      	str	r0, [sp, #48]	@ 0x30
 80136f2:	910d      	str	r1, [sp, #52]	@ 0x34
 80136f4:	f7ef f8aa 	bl	800284c <__aeabi_dsub>
 80136f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80136fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80136fc:	9010      	str	r0, [sp, #64]	@ 0x40
 80136fe:	9111      	str	r1, [sp, #68]	@ 0x44
 8013700:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013702:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013704:	f7ed fe32 	bl	800136c <__aeabi_dadd>
 8013708:	0002      	movs	r2, r0
 801370a:	000b      	movs	r3, r1
 801370c:	2000      	movs	r0, #0
 801370e:	49c1      	ldr	r1, [pc, #772]	@ (8013a14 <__ieee754_pow+0x7cc>)
 8013710:	f7ee f990 	bl	8001a34 <__aeabi_ddiv>
 8013714:	0002      	movs	r2, r0
 8013716:	000b      	movs	r3, r1
 8013718:	9012      	str	r0, [sp, #72]	@ 0x48
 801371a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801371c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801371e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8013720:	f7ee fdcc 	bl	80022bc <__aeabi_dmul>
 8013724:	9006      	str	r0, [sp, #24]
 8013726:	9107      	str	r1, [sp, #28]
 8013728:	9b06      	ldr	r3, [sp, #24]
 801372a:	9c07      	ldr	r4, [sp, #28]
 801372c:	2180      	movs	r1, #128	@ 0x80
 801372e:	9304      	str	r3, [sp, #16]
 8013730:	9405      	str	r4, [sp, #20]
 8013732:	2080      	movs	r0, #128	@ 0x80
 8013734:	2300      	movs	r3, #0
 8013736:	2200      	movs	r2, #0
 8013738:	106d      	asrs	r5, r5, #1
 801373a:	0589      	lsls	r1, r1, #22
 801373c:	9304      	str	r3, [sp, #16]
 801373e:	4329      	orrs	r1, r5
 8013740:	0300      	lsls	r0, r0, #12
 8013742:	9b04      	ldr	r3, [sp, #16]
 8013744:	9c05      	ldr	r4, [sp, #20]
 8013746:	1809      	adds	r1, r1, r0
 8013748:	9300      	str	r3, [sp, #0]
 801374a:	9401      	str	r4, [sp, #4]
 801374c:	04b6      	lsls	r6, r6, #18
 801374e:	198b      	adds	r3, r1, r6
 8013750:	9800      	ldr	r0, [sp, #0]
 8013752:	9901      	ldr	r1, [sp, #4]
 8013754:	0014      	movs	r4, r2
 8013756:	001d      	movs	r5, r3
 8013758:	f7ee fdb0 	bl	80022bc <__aeabi_dmul>
 801375c:	0002      	movs	r2, r0
 801375e:	000b      	movs	r3, r1
 8013760:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8013762:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8013764:	f7ef f872 	bl	800284c <__aeabi_dsub>
 8013768:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801376a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801376c:	0006      	movs	r6, r0
 801376e:	000f      	movs	r7, r1
 8013770:	0020      	movs	r0, r4
 8013772:	0029      	movs	r1, r5
 8013774:	f7ef f86a 	bl	800284c <__aeabi_dsub>
 8013778:	0002      	movs	r2, r0
 801377a:	000b      	movs	r3, r1
 801377c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801377e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8013780:	f7ef f864 	bl	800284c <__aeabi_dsub>
 8013784:	9a00      	ldr	r2, [sp, #0]
 8013786:	9b01      	ldr	r3, [sp, #4]
 8013788:	f7ee fd98 	bl	80022bc <__aeabi_dmul>
 801378c:	0002      	movs	r2, r0
 801378e:	000b      	movs	r3, r1
 8013790:	0030      	movs	r0, r6
 8013792:	0039      	movs	r1, r7
 8013794:	f7ef f85a 	bl	800284c <__aeabi_dsub>
 8013798:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801379a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801379c:	f7ee fd8e 	bl	80022bc <__aeabi_dmul>
 80137a0:	9a06      	ldr	r2, [sp, #24]
 80137a2:	9b07      	ldr	r3, [sp, #28]
 80137a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80137a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80137a8:	0010      	movs	r0, r2
 80137aa:	0019      	movs	r1, r3
 80137ac:	f7ee fd86 	bl	80022bc <__aeabi_dmul>
 80137b0:	0006      	movs	r6, r0
 80137b2:	000f      	movs	r7, r1
 80137b4:	4a9c      	ldr	r2, [pc, #624]	@ (8013a28 <__ieee754_pow+0x7e0>)
 80137b6:	4b9d      	ldr	r3, [pc, #628]	@ (8013a2c <__ieee754_pow+0x7e4>)
 80137b8:	f7ee fd80 	bl	80022bc <__aeabi_dmul>
 80137bc:	4a9c      	ldr	r2, [pc, #624]	@ (8013a30 <__ieee754_pow+0x7e8>)
 80137be:	4b9d      	ldr	r3, [pc, #628]	@ (8013a34 <__ieee754_pow+0x7ec>)
 80137c0:	f7ed fdd4 	bl	800136c <__aeabi_dadd>
 80137c4:	0032      	movs	r2, r6
 80137c6:	003b      	movs	r3, r7
 80137c8:	f7ee fd78 	bl	80022bc <__aeabi_dmul>
 80137cc:	4a9a      	ldr	r2, [pc, #616]	@ (8013a38 <__ieee754_pow+0x7f0>)
 80137ce:	4b9b      	ldr	r3, [pc, #620]	@ (8013a3c <__ieee754_pow+0x7f4>)
 80137d0:	f7ed fdcc 	bl	800136c <__aeabi_dadd>
 80137d4:	0032      	movs	r2, r6
 80137d6:	003b      	movs	r3, r7
 80137d8:	f7ee fd70 	bl	80022bc <__aeabi_dmul>
 80137dc:	4a98      	ldr	r2, [pc, #608]	@ (8013a40 <__ieee754_pow+0x7f8>)
 80137de:	4b99      	ldr	r3, [pc, #612]	@ (8013a44 <__ieee754_pow+0x7fc>)
 80137e0:	f7ed fdc4 	bl	800136c <__aeabi_dadd>
 80137e4:	0032      	movs	r2, r6
 80137e6:	003b      	movs	r3, r7
 80137e8:	f7ee fd68 	bl	80022bc <__aeabi_dmul>
 80137ec:	4a96      	ldr	r2, [pc, #600]	@ (8013a48 <__ieee754_pow+0x800>)
 80137ee:	4b97      	ldr	r3, [pc, #604]	@ (8013a4c <__ieee754_pow+0x804>)
 80137f0:	f7ed fdbc 	bl	800136c <__aeabi_dadd>
 80137f4:	0032      	movs	r2, r6
 80137f6:	003b      	movs	r3, r7
 80137f8:	f7ee fd60 	bl	80022bc <__aeabi_dmul>
 80137fc:	4a94      	ldr	r2, [pc, #592]	@ (8013a50 <__ieee754_pow+0x808>)
 80137fe:	4b95      	ldr	r3, [pc, #596]	@ (8013a54 <__ieee754_pow+0x80c>)
 8013800:	f7ed fdb4 	bl	800136c <__aeabi_dadd>
 8013804:	0032      	movs	r2, r6
 8013806:	0004      	movs	r4, r0
 8013808:	000d      	movs	r5, r1
 801380a:	003b      	movs	r3, r7
 801380c:	0030      	movs	r0, r6
 801380e:	0039      	movs	r1, r7
 8013810:	f7ee fd54 	bl	80022bc <__aeabi_dmul>
 8013814:	0002      	movs	r2, r0
 8013816:	000b      	movs	r3, r1
 8013818:	0020      	movs	r0, r4
 801381a:	0029      	movs	r1, r5
 801381c:	f7ee fd4e 	bl	80022bc <__aeabi_dmul>
 8013820:	9a00      	ldr	r2, [sp, #0]
 8013822:	9b01      	ldr	r3, [sp, #4]
 8013824:	0004      	movs	r4, r0
 8013826:	000d      	movs	r5, r1
 8013828:	9806      	ldr	r0, [sp, #24]
 801382a:	9907      	ldr	r1, [sp, #28]
 801382c:	f7ed fd9e 	bl	800136c <__aeabi_dadd>
 8013830:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013832:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013834:	f7ee fd42 	bl	80022bc <__aeabi_dmul>
 8013838:	0022      	movs	r2, r4
 801383a:	002b      	movs	r3, r5
 801383c:	f7ed fd96 	bl	800136c <__aeabi_dadd>
 8013840:	9a00      	ldr	r2, [sp, #0]
 8013842:	9b01      	ldr	r3, [sp, #4]
 8013844:	900c      	str	r0, [sp, #48]	@ 0x30
 8013846:	910d      	str	r1, [sp, #52]	@ 0x34
 8013848:	0010      	movs	r0, r2
 801384a:	0019      	movs	r1, r3
 801384c:	f7ee fd36 	bl	80022bc <__aeabi_dmul>
 8013850:	2200      	movs	r2, #0
 8013852:	4b81      	ldr	r3, [pc, #516]	@ (8013a58 <__ieee754_pow+0x810>)
 8013854:	0004      	movs	r4, r0
 8013856:	000d      	movs	r5, r1
 8013858:	f7ed fd88 	bl	800136c <__aeabi_dadd>
 801385c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801385e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013860:	f7ed fd84 	bl	800136c <__aeabi_dadd>
 8013864:	2000      	movs	r0, #0
 8013866:	000f      	movs	r7, r1
 8013868:	0006      	movs	r6, r0
 801386a:	0002      	movs	r2, r0
 801386c:	000b      	movs	r3, r1
 801386e:	9800      	ldr	r0, [sp, #0]
 8013870:	9901      	ldr	r1, [sp, #4]
 8013872:	f7ee fd23 	bl	80022bc <__aeabi_dmul>
 8013876:	2200      	movs	r2, #0
 8013878:	9000      	str	r0, [sp, #0]
 801387a:	9101      	str	r1, [sp, #4]
 801387c:	4b76      	ldr	r3, [pc, #472]	@ (8013a58 <__ieee754_pow+0x810>)
 801387e:	0030      	movs	r0, r6
 8013880:	0039      	movs	r1, r7
 8013882:	f7ee ffe3 	bl	800284c <__aeabi_dsub>
 8013886:	0022      	movs	r2, r4
 8013888:	002b      	movs	r3, r5
 801388a:	f7ee ffdf 	bl	800284c <__aeabi_dsub>
 801388e:	0002      	movs	r2, r0
 8013890:	000b      	movs	r3, r1
 8013892:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8013894:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8013896:	f7ee ffd9 	bl	800284c <__aeabi_dsub>
 801389a:	9a06      	ldr	r2, [sp, #24]
 801389c:	9b07      	ldr	r3, [sp, #28]
 801389e:	f7ee fd0d 	bl	80022bc <__aeabi_dmul>
 80138a2:	0032      	movs	r2, r6
 80138a4:	0004      	movs	r4, r0
 80138a6:	000d      	movs	r5, r1
 80138a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80138aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80138ac:	003b      	movs	r3, r7
 80138ae:	f7ee fd05 	bl	80022bc <__aeabi_dmul>
 80138b2:	0002      	movs	r2, r0
 80138b4:	000b      	movs	r3, r1
 80138b6:	0020      	movs	r0, r4
 80138b8:	0029      	movs	r1, r5
 80138ba:	f7ed fd57 	bl	800136c <__aeabi_dadd>
 80138be:	0004      	movs	r4, r0
 80138c0:	000d      	movs	r5, r1
 80138c2:	0002      	movs	r2, r0
 80138c4:	000b      	movs	r3, r1
 80138c6:	9800      	ldr	r0, [sp, #0]
 80138c8:	9901      	ldr	r1, [sp, #4]
 80138ca:	f7ed fd4f 	bl	800136c <__aeabi_dadd>
 80138ce:	22e0      	movs	r2, #224	@ 0xe0
 80138d0:	2000      	movs	r0, #0
 80138d2:	4b62      	ldr	r3, [pc, #392]	@ (8013a5c <__ieee754_pow+0x814>)
 80138d4:	0612      	lsls	r2, r2, #24
 80138d6:	0006      	movs	r6, r0
 80138d8:	000f      	movs	r7, r1
 80138da:	f7ee fcef 	bl	80022bc <__aeabi_dmul>
 80138de:	9006      	str	r0, [sp, #24]
 80138e0:	9107      	str	r1, [sp, #28]
 80138e2:	9a00      	ldr	r2, [sp, #0]
 80138e4:	9b01      	ldr	r3, [sp, #4]
 80138e6:	0030      	movs	r0, r6
 80138e8:	0039      	movs	r1, r7
 80138ea:	f7ee ffaf 	bl	800284c <__aeabi_dsub>
 80138ee:	0002      	movs	r2, r0
 80138f0:	000b      	movs	r3, r1
 80138f2:	0020      	movs	r0, r4
 80138f4:	0029      	movs	r1, r5
 80138f6:	f7ee ffa9 	bl	800284c <__aeabi_dsub>
 80138fa:	4a59      	ldr	r2, [pc, #356]	@ (8013a60 <__ieee754_pow+0x818>)
 80138fc:	4b57      	ldr	r3, [pc, #348]	@ (8013a5c <__ieee754_pow+0x814>)
 80138fe:	f7ee fcdd 	bl	80022bc <__aeabi_dmul>
 8013902:	4a58      	ldr	r2, [pc, #352]	@ (8013a64 <__ieee754_pow+0x81c>)
 8013904:	0004      	movs	r4, r0
 8013906:	000d      	movs	r5, r1
 8013908:	0030      	movs	r0, r6
 801390a:	0039      	movs	r1, r7
 801390c:	4b56      	ldr	r3, [pc, #344]	@ (8013a68 <__ieee754_pow+0x820>)
 801390e:	f7ee fcd5 	bl	80022bc <__aeabi_dmul>
 8013912:	0002      	movs	r2, r0
 8013914:	000b      	movs	r3, r1
 8013916:	0020      	movs	r0, r4
 8013918:	0029      	movs	r1, r5
 801391a:	f7ed fd27 	bl	800136c <__aeabi_dadd>
 801391e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013920:	4b52      	ldr	r3, [pc, #328]	@ (8013a6c <__ieee754_pow+0x824>)
 8013922:	189b      	adds	r3, r3, r2
 8013924:	681a      	ldr	r2, [r3, #0]
 8013926:	685b      	ldr	r3, [r3, #4]
 8013928:	f7ed fd20 	bl	800136c <__aeabi_dadd>
 801392c:	900a      	str	r0, [sp, #40]	@ 0x28
 801392e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013930:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8013932:	f7ef fb85 	bl	8003040 <__aeabi_i2d>
 8013936:	0004      	movs	r4, r0
 8013938:	000d      	movs	r5, r1
 801393a:	9806      	ldr	r0, [sp, #24]
 801393c:	9907      	ldr	r1, [sp, #28]
 801393e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013940:	4b4b      	ldr	r3, [pc, #300]	@ (8013a70 <__ieee754_pow+0x828>)
 8013942:	189b      	adds	r3, r3, r2
 8013944:	681e      	ldr	r6, [r3, #0]
 8013946:	685f      	ldr	r7, [r3, #4]
 8013948:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801394a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801394c:	f7ed fd0e 	bl	800136c <__aeabi_dadd>
 8013950:	0032      	movs	r2, r6
 8013952:	003b      	movs	r3, r7
 8013954:	f7ed fd0a 	bl	800136c <__aeabi_dadd>
 8013958:	0022      	movs	r2, r4
 801395a:	002b      	movs	r3, r5
 801395c:	f7ed fd06 	bl	800136c <__aeabi_dadd>
 8013960:	2000      	movs	r0, #0
 8013962:	0022      	movs	r2, r4
 8013964:	002b      	movs	r3, r5
 8013966:	9000      	str	r0, [sp, #0]
 8013968:	9101      	str	r1, [sp, #4]
 801396a:	f7ee ff6f 	bl	800284c <__aeabi_dsub>
 801396e:	0032      	movs	r2, r6
 8013970:	003b      	movs	r3, r7
 8013972:	f7ee ff6b 	bl	800284c <__aeabi_dsub>
 8013976:	9a06      	ldr	r2, [sp, #24]
 8013978:	9b07      	ldr	r3, [sp, #28]
 801397a:	f7ee ff67 	bl	800284c <__aeabi_dsub>
 801397e:	0002      	movs	r2, r0
 8013980:	000b      	movs	r3, r1
 8013982:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013984:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013986:	e61c      	b.n	80135c2 <__ieee754_pow+0x37a>
 8013988:	4a3a      	ldr	r2, [pc, #232]	@ (8013a74 <__ieee754_pow+0x82c>)
 801398a:	4b3b      	ldr	r3, [pc, #236]	@ (8013a78 <__ieee754_pow+0x830>)
 801398c:	9802      	ldr	r0, [sp, #8]
 801398e:	9903      	ldr	r1, [sp, #12]
 8013990:	f7ed fcec 	bl	800136c <__aeabi_dadd>
 8013994:	0032      	movs	r2, r6
 8013996:	003b      	movs	r3, r7
 8013998:	9004      	str	r0, [sp, #16]
 801399a:	9105      	str	r1, [sp, #20]
 801399c:	9800      	ldr	r0, [sp, #0]
 801399e:	9901      	ldr	r1, [sp, #4]
 80139a0:	f7ee ff54 	bl	800284c <__aeabi_dsub>
 80139a4:	0002      	movs	r2, r0
 80139a6:	000b      	movs	r3, r1
 80139a8:	9804      	ldr	r0, [sp, #16]
 80139aa:	9905      	ldr	r1, [sp, #20]
 80139ac:	f7ec fc76 	bl	800029c <__aeabi_dcmpgt>
 80139b0:	2800      	cmp	r0, #0
 80139b2:	d000      	beq.n	80139b6 <__ieee754_pow+0x76e>
 80139b4:	e647      	b.n	8013646 <__ieee754_pow+0x3fe>
 80139b6:	2580      	movs	r5, #128	@ 0x80
 80139b8:	4b30      	ldr	r3, [pc, #192]	@ (8013a7c <__ieee754_pow+0x834>)
 80139ba:	036d      	lsls	r5, r5, #13
 80139bc:	1524      	asrs	r4, r4, #20
 80139be:	18e4      	adds	r4, r4, r3
 80139c0:	002b      	movs	r3, r5
 80139c2:	4123      	asrs	r3, r4
 80139c4:	9a06      	ldr	r2, [sp, #24]
 80139c6:	4912      	ldr	r1, [pc, #72]	@ (8013a10 <__ieee754_pow+0x7c8>)
 80139c8:	189b      	adds	r3, r3, r2
 80139ca:	005a      	lsls	r2, r3, #1
 80139cc:	4c14      	ldr	r4, [pc, #80]	@ (8013a20 <__ieee754_pow+0x7d8>)
 80139ce:	0d52      	lsrs	r2, r2, #21
 80139d0:	1852      	adds	r2, r2, r1
 80139d2:	4114      	asrs	r4, r2
 80139d4:	401c      	ands	r4, r3
 80139d6:	0021      	movs	r1, r4
 80139d8:	2414      	movs	r4, #20
 80139da:	031b      	lsls	r3, r3, #12
 80139dc:	0b1b      	lsrs	r3, r3, #12
 80139de:	432b      	orrs	r3, r5
 80139e0:	1aa2      	subs	r2, r4, r2
 80139e2:	4113      	asrs	r3, r2
 80139e4:	9300      	str	r3, [sp, #0]
 80139e6:	9b06      	ldr	r3, [sp, #24]
 80139e8:	2000      	movs	r0, #0
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	da02      	bge.n	80139f4 <__ieee754_pow+0x7ac>
 80139ee:	9b00      	ldr	r3, [sp, #0]
 80139f0:	425b      	negs	r3, r3
 80139f2:	9300      	str	r3, [sp, #0]
 80139f4:	0002      	movs	r2, r0
 80139f6:	000b      	movs	r3, r1
 80139f8:	0030      	movs	r0, r6
 80139fa:	0039      	movs	r1, r7
 80139fc:	f7ee ff26 	bl	800284c <__aeabi_dsub>
 8013a00:	0006      	movs	r6, r0
 8013a02:	000f      	movs	r7, r1
 8013a04:	e065      	b.n	8013ad2 <__ieee754_pow+0x88a>
 8013a06:	46c0      	nop			@ (mov r8, r8)
 8013a08:	7ff00000 	.word	0x7ff00000
 8013a0c:	43400000 	.word	0x43400000
 8013a10:	fffffc01 	.word	0xfffffc01
 8013a14:	3ff00000 	.word	0x3ff00000
 8013a18:	0003988e 	.word	0x0003988e
 8013a1c:	000bb679 	.word	0x000bb679
 8013a20:	fff00000 	.word	0xfff00000
 8013a24:	08014d28 	.word	0x08014d28
 8013a28:	4a454eef 	.word	0x4a454eef
 8013a2c:	3fca7e28 	.word	0x3fca7e28
 8013a30:	93c9db65 	.word	0x93c9db65
 8013a34:	3fcd864a 	.word	0x3fcd864a
 8013a38:	a91d4101 	.word	0xa91d4101
 8013a3c:	3fd17460 	.word	0x3fd17460
 8013a40:	518f264d 	.word	0x518f264d
 8013a44:	3fd55555 	.word	0x3fd55555
 8013a48:	db6fabff 	.word	0xdb6fabff
 8013a4c:	3fdb6db6 	.word	0x3fdb6db6
 8013a50:	33333303 	.word	0x33333303
 8013a54:	3fe33333 	.word	0x3fe33333
 8013a58:	40080000 	.word	0x40080000
 8013a5c:	3feec709 	.word	0x3feec709
 8013a60:	dc3a03fd 	.word	0xdc3a03fd
 8013a64:	145b01f5 	.word	0x145b01f5
 8013a68:	be3e2fe0 	.word	0xbe3e2fe0
 8013a6c:	08014d08 	.word	0x08014d08
 8013a70:	08014d18 	.word	0x08014d18
 8013a74:	652b82fe 	.word	0x652b82fe
 8013a78:	3c971547 	.word	0x3c971547
 8013a7c:	fffffc02 	.word	0xfffffc02
 8013a80:	9b01      	ldr	r3, [sp, #4]
 8013a82:	005c      	lsls	r4, r3, #1
 8013a84:	4b72      	ldr	r3, [pc, #456]	@ (8013c50 <__ieee754_pow+0xa08>)
 8013a86:	0864      	lsrs	r4, r4, #1
 8013a88:	429c      	cmp	r4, r3
 8013a8a:	d91c      	bls.n	8013ac6 <__ieee754_pow+0x87e>
 8013a8c:	4a71      	ldr	r2, [pc, #452]	@ (8013c54 <__ieee754_pow+0xa0c>)
 8013a8e:	9b01      	ldr	r3, [sp, #4]
 8013a90:	189b      	adds	r3, r3, r2
 8013a92:	9a00      	ldr	r2, [sp, #0]
 8013a94:	4313      	orrs	r3, r2
 8013a96:	d008      	beq.n	8013aaa <__ieee754_pow+0x862>
 8013a98:	9808      	ldr	r0, [sp, #32]
 8013a9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	f7ec fbe8 	bl	8000274 <__aeabi_dcmplt>
 8013aa4:	1e43      	subs	r3, r0, #1
 8013aa6:	4198      	sbcs	r0, r3
 8013aa8:	e4fc      	b.n	80134a4 <__ieee754_pow+0x25c>
 8013aaa:	0032      	movs	r2, r6
 8013aac:	9800      	ldr	r0, [sp, #0]
 8013aae:	9901      	ldr	r1, [sp, #4]
 8013ab0:	003b      	movs	r3, r7
 8013ab2:	f7ee fecb 	bl	800284c <__aeabi_dsub>
 8013ab6:	9a02      	ldr	r2, [sp, #8]
 8013ab8:	9b03      	ldr	r3, [sp, #12]
 8013aba:	f7ec fbf9 	bl	80002b0 <__aeabi_dcmpge>
 8013abe:	2800      	cmp	r0, #0
 8013ac0:	d1ea      	bne.n	8013a98 <__ieee754_pow+0x850>
 8013ac2:	4c65      	ldr	r4, [pc, #404]	@ (8013c58 <__ieee754_pow+0xa10>)
 8013ac4:	e777      	b.n	80139b6 <__ieee754_pow+0x76e>
 8013ac6:	9a04      	ldr	r2, [sp, #16]
 8013ac8:	4b64      	ldr	r3, [pc, #400]	@ (8013c5c <__ieee754_pow+0xa14>)
 8013aca:	9200      	str	r2, [sp, #0]
 8013acc:	429c      	cmp	r4, r3
 8013ace:	d900      	bls.n	8013ad2 <__ieee754_pow+0x88a>
 8013ad0:	e771      	b.n	80139b6 <__ieee754_pow+0x76e>
 8013ad2:	9a02      	ldr	r2, [sp, #8]
 8013ad4:	9b03      	ldr	r3, [sp, #12]
 8013ad6:	0030      	movs	r0, r6
 8013ad8:	0039      	movs	r1, r7
 8013ada:	f7ed fc47 	bl	800136c <__aeabi_dadd>
 8013ade:	2000      	movs	r0, #0
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8013c60 <__ieee754_pow+0xa18>)
 8013ae4:	9004      	str	r0, [sp, #16]
 8013ae6:	9105      	str	r1, [sp, #20]
 8013ae8:	f7ee fbe8 	bl	80022bc <__aeabi_dmul>
 8013aec:	0032      	movs	r2, r6
 8013aee:	003b      	movs	r3, r7
 8013af0:	9006      	str	r0, [sp, #24]
 8013af2:	9107      	str	r1, [sp, #28]
 8013af4:	9804      	ldr	r0, [sp, #16]
 8013af6:	9905      	ldr	r1, [sp, #20]
 8013af8:	f7ee fea8 	bl	800284c <__aeabi_dsub>
 8013afc:	0002      	movs	r2, r0
 8013afe:	000b      	movs	r3, r1
 8013b00:	9802      	ldr	r0, [sp, #8]
 8013b02:	9903      	ldr	r1, [sp, #12]
 8013b04:	f7ee fea2 	bl	800284c <__aeabi_dsub>
 8013b08:	4a56      	ldr	r2, [pc, #344]	@ (8013c64 <__ieee754_pow+0xa1c>)
 8013b0a:	4b57      	ldr	r3, [pc, #348]	@ (8013c68 <__ieee754_pow+0xa20>)
 8013b0c:	f7ee fbd6 	bl	80022bc <__aeabi_dmul>
 8013b10:	4a56      	ldr	r2, [pc, #344]	@ (8013c6c <__ieee754_pow+0xa24>)
 8013b12:	0004      	movs	r4, r0
 8013b14:	000d      	movs	r5, r1
 8013b16:	9804      	ldr	r0, [sp, #16]
 8013b18:	9905      	ldr	r1, [sp, #20]
 8013b1a:	4b55      	ldr	r3, [pc, #340]	@ (8013c70 <__ieee754_pow+0xa28>)
 8013b1c:	f7ee fbce 	bl	80022bc <__aeabi_dmul>
 8013b20:	0002      	movs	r2, r0
 8013b22:	000b      	movs	r3, r1
 8013b24:	0020      	movs	r0, r4
 8013b26:	0029      	movs	r1, r5
 8013b28:	f7ed fc20 	bl	800136c <__aeabi_dadd>
 8013b2c:	0004      	movs	r4, r0
 8013b2e:	000d      	movs	r5, r1
 8013b30:	0002      	movs	r2, r0
 8013b32:	000b      	movs	r3, r1
 8013b34:	9806      	ldr	r0, [sp, #24]
 8013b36:	9907      	ldr	r1, [sp, #28]
 8013b38:	f7ed fc18 	bl	800136c <__aeabi_dadd>
 8013b3c:	9a06      	ldr	r2, [sp, #24]
 8013b3e:	9b07      	ldr	r3, [sp, #28]
 8013b40:	0006      	movs	r6, r0
 8013b42:	000f      	movs	r7, r1
 8013b44:	f7ee fe82 	bl	800284c <__aeabi_dsub>
 8013b48:	0002      	movs	r2, r0
 8013b4a:	000b      	movs	r3, r1
 8013b4c:	0020      	movs	r0, r4
 8013b4e:	0029      	movs	r1, r5
 8013b50:	f7ee fe7c 	bl	800284c <__aeabi_dsub>
 8013b54:	0032      	movs	r2, r6
 8013b56:	9002      	str	r0, [sp, #8]
 8013b58:	9103      	str	r1, [sp, #12]
 8013b5a:	003b      	movs	r3, r7
 8013b5c:	0030      	movs	r0, r6
 8013b5e:	0039      	movs	r1, r7
 8013b60:	f7ee fbac 	bl	80022bc <__aeabi_dmul>
 8013b64:	0004      	movs	r4, r0
 8013b66:	000d      	movs	r5, r1
 8013b68:	4a42      	ldr	r2, [pc, #264]	@ (8013c74 <__ieee754_pow+0xa2c>)
 8013b6a:	4b43      	ldr	r3, [pc, #268]	@ (8013c78 <__ieee754_pow+0xa30>)
 8013b6c:	f7ee fba6 	bl	80022bc <__aeabi_dmul>
 8013b70:	4a42      	ldr	r2, [pc, #264]	@ (8013c7c <__ieee754_pow+0xa34>)
 8013b72:	4b43      	ldr	r3, [pc, #268]	@ (8013c80 <__ieee754_pow+0xa38>)
 8013b74:	f7ee fe6a 	bl	800284c <__aeabi_dsub>
 8013b78:	0022      	movs	r2, r4
 8013b7a:	002b      	movs	r3, r5
 8013b7c:	f7ee fb9e 	bl	80022bc <__aeabi_dmul>
 8013b80:	4a40      	ldr	r2, [pc, #256]	@ (8013c84 <__ieee754_pow+0xa3c>)
 8013b82:	4b41      	ldr	r3, [pc, #260]	@ (8013c88 <__ieee754_pow+0xa40>)
 8013b84:	f7ed fbf2 	bl	800136c <__aeabi_dadd>
 8013b88:	0022      	movs	r2, r4
 8013b8a:	002b      	movs	r3, r5
 8013b8c:	f7ee fb96 	bl	80022bc <__aeabi_dmul>
 8013b90:	4a3e      	ldr	r2, [pc, #248]	@ (8013c8c <__ieee754_pow+0xa44>)
 8013b92:	4b3f      	ldr	r3, [pc, #252]	@ (8013c90 <__ieee754_pow+0xa48>)
 8013b94:	f7ee fe5a 	bl	800284c <__aeabi_dsub>
 8013b98:	0022      	movs	r2, r4
 8013b9a:	002b      	movs	r3, r5
 8013b9c:	f7ee fb8e 	bl	80022bc <__aeabi_dmul>
 8013ba0:	4a3c      	ldr	r2, [pc, #240]	@ (8013c94 <__ieee754_pow+0xa4c>)
 8013ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8013c98 <__ieee754_pow+0xa50>)
 8013ba4:	f7ed fbe2 	bl	800136c <__aeabi_dadd>
 8013ba8:	0022      	movs	r2, r4
 8013baa:	002b      	movs	r3, r5
 8013bac:	f7ee fb86 	bl	80022bc <__aeabi_dmul>
 8013bb0:	0002      	movs	r2, r0
 8013bb2:	000b      	movs	r3, r1
 8013bb4:	0030      	movs	r0, r6
 8013bb6:	0039      	movs	r1, r7
 8013bb8:	f7ee fe48 	bl	800284c <__aeabi_dsub>
 8013bbc:	0004      	movs	r4, r0
 8013bbe:	000d      	movs	r5, r1
 8013bc0:	0002      	movs	r2, r0
 8013bc2:	000b      	movs	r3, r1
 8013bc4:	0030      	movs	r0, r6
 8013bc6:	0039      	movs	r1, r7
 8013bc8:	f7ee fb78 	bl	80022bc <__aeabi_dmul>
 8013bcc:	2380      	movs	r3, #128	@ 0x80
 8013bce:	9004      	str	r0, [sp, #16]
 8013bd0:	9105      	str	r1, [sp, #20]
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	0020      	movs	r0, r4
 8013bd6:	0029      	movs	r1, r5
 8013bd8:	05db      	lsls	r3, r3, #23
 8013bda:	f7ee fe37 	bl	800284c <__aeabi_dsub>
 8013bde:	0002      	movs	r2, r0
 8013be0:	000b      	movs	r3, r1
 8013be2:	9804      	ldr	r0, [sp, #16]
 8013be4:	9905      	ldr	r1, [sp, #20]
 8013be6:	f7ed ff25 	bl	8001a34 <__aeabi_ddiv>
 8013bea:	9a02      	ldr	r2, [sp, #8]
 8013bec:	9b03      	ldr	r3, [sp, #12]
 8013bee:	0004      	movs	r4, r0
 8013bf0:	000d      	movs	r5, r1
 8013bf2:	0030      	movs	r0, r6
 8013bf4:	0039      	movs	r1, r7
 8013bf6:	f7ee fb61 	bl	80022bc <__aeabi_dmul>
 8013bfa:	9a02      	ldr	r2, [sp, #8]
 8013bfc:	9b03      	ldr	r3, [sp, #12]
 8013bfe:	f7ed fbb5 	bl	800136c <__aeabi_dadd>
 8013c02:	0002      	movs	r2, r0
 8013c04:	000b      	movs	r3, r1
 8013c06:	0020      	movs	r0, r4
 8013c08:	0029      	movs	r1, r5
 8013c0a:	f7ee fe1f 	bl	800284c <__aeabi_dsub>
 8013c0e:	0032      	movs	r2, r6
 8013c10:	003b      	movs	r3, r7
 8013c12:	f7ee fe1b 	bl	800284c <__aeabi_dsub>
 8013c16:	0002      	movs	r2, r0
 8013c18:	000b      	movs	r3, r1
 8013c1a:	2000      	movs	r0, #0
 8013c1c:	491f      	ldr	r1, [pc, #124]	@ (8013c9c <__ieee754_pow+0xa54>)
 8013c1e:	f7ee fe15 	bl	800284c <__aeabi_dsub>
 8013c22:	9b00      	ldr	r3, [sp, #0]
 8013c24:	051b      	lsls	r3, r3, #20
 8013c26:	185b      	adds	r3, r3, r1
 8013c28:	151a      	asrs	r2, r3, #20
 8013c2a:	2a00      	cmp	r2, #0
 8013c2c:	dc06      	bgt.n	8013c3c <__ieee754_pow+0x9f4>
 8013c2e:	9a00      	ldr	r2, [sp, #0]
 8013c30:	f000 f83a 	bl	8013ca8 <scalbn>
 8013c34:	9a08      	ldr	r2, [sp, #32]
 8013c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c38:	f7ff fbee 	bl	8013418 <__ieee754_pow+0x1d0>
 8013c3c:	0019      	movs	r1, r3
 8013c3e:	e7f9      	b.n	8013c34 <__ieee754_pow+0x9ec>
 8013c40:	2300      	movs	r3, #0
 8013c42:	4c16      	ldr	r4, [pc, #88]	@ (8013c9c <__ieee754_pow+0xa54>)
 8013c44:	f7ff fbcb 	bl	80133de <__ieee754_pow+0x196>
 8013c48:	2300      	movs	r3, #0
 8013c4a:	2400      	movs	r4, #0
 8013c4c:	f7ff fbc7 	bl	80133de <__ieee754_pow+0x196>
 8013c50:	4090cbff 	.word	0x4090cbff
 8013c54:	3f6f3400 	.word	0x3f6f3400
 8013c58:	4090cc00 	.word	0x4090cc00
 8013c5c:	3fe00000 	.word	0x3fe00000
 8013c60:	3fe62e43 	.word	0x3fe62e43
 8013c64:	fefa39ef 	.word	0xfefa39ef
 8013c68:	3fe62e42 	.word	0x3fe62e42
 8013c6c:	0ca86c39 	.word	0x0ca86c39
 8013c70:	be205c61 	.word	0xbe205c61
 8013c74:	72bea4d0 	.word	0x72bea4d0
 8013c78:	3e663769 	.word	0x3e663769
 8013c7c:	c5d26bf1 	.word	0xc5d26bf1
 8013c80:	3ebbbd41 	.word	0x3ebbbd41
 8013c84:	af25de2c 	.word	0xaf25de2c
 8013c88:	3f11566a 	.word	0x3f11566a
 8013c8c:	16bebd93 	.word	0x16bebd93
 8013c90:	3f66c16c 	.word	0x3f66c16c
 8013c94:	5555553e 	.word	0x5555553e
 8013c98:	3fc55555 	.word	0x3fc55555
 8013c9c:	3ff00000 	.word	0x3ff00000

08013ca0 <fabs>:
 8013ca0:	0049      	lsls	r1, r1, #1
 8013ca2:	084b      	lsrs	r3, r1, #1
 8013ca4:	0019      	movs	r1, r3
 8013ca6:	4770      	bx	lr

08013ca8 <scalbn>:
 8013ca8:	004b      	lsls	r3, r1, #1
 8013caa:	b570      	push	{r4, r5, r6, lr}
 8013cac:	0d5b      	lsrs	r3, r3, #21
 8013cae:	0014      	movs	r4, r2
 8013cb0:	000d      	movs	r5, r1
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d10f      	bne.n	8013cd6 <scalbn+0x2e>
 8013cb6:	004b      	lsls	r3, r1, #1
 8013cb8:	085b      	lsrs	r3, r3, #1
 8013cba:	4303      	orrs	r3, r0
 8013cbc:	d012      	beq.n	8013ce4 <scalbn+0x3c>
 8013cbe:	4b23      	ldr	r3, [pc, #140]	@ (8013d4c <scalbn+0xa4>)
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	f7ee fafb 	bl	80022bc <__aeabi_dmul>
 8013cc6:	4b22      	ldr	r3, [pc, #136]	@ (8013d50 <scalbn+0xa8>)
 8013cc8:	429c      	cmp	r4, r3
 8013cca:	da0c      	bge.n	8013ce6 <scalbn+0x3e>
 8013ccc:	4a21      	ldr	r2, [pc, #132]	@ (8013d54 <scalbn+0xac>)
 8013cce:	4b22      	ldr	r3, [pc, #136]	@ (8013d58 <scalbn+0xb0>)
 8013cd0:	f7ee faf4 	bl	80022bc <__aeabi_dmul>
 8013cd4:	e006      	b.n	8013ce4 <scalbn+0x3c>
 8013cd6:	4a21      	ldr	r2, [pc, #132]	@ (8013d5c <scalbn+0xb4>)
 8013cd8:	4293      	cmp	r3, r2
 8013cda:	d108      	bne.n	8013cee <scalbn+0x46>
 8013cdc:	0002      	movs	r2, r0
 8013cde:	000b      	movs	r3, r1
 8013ce0:	f7ed fb44 	bl	800136c <__aeabi_dadd>
 8013ce4:	bd70      	pop	{r4, r5, r6, pc}
 8013ce6:	000d      	movs	r5, r1
 8013ce8:	004b      	lsls	r3, r1, #1
 8013cea:	0d5b      	lsrs	r3, r3, #21
 8013cec:	3b36      	subs	r3, #54	@ 0x36
 8013cee:	4a1c      	ldr	r2, [pc, #112]	@ (8013d60 <scalbn+0xb8>)
 8013cf0:	4294      	cmp	r4, r2
 8013cf2:	dd0a      	ble.n	8013d0a <scalbn+0x62>
 8013cf4:	4c1b      	ldr	r4, [pc, #108]	@ (8013d64 <scalbn+0xbc>)
 8013cf6:	4d1c      	ldr	r5, [pc, #112]	@ (8013d68 <scalbn+0xc0>)
 8013cf8:	2900      	cmp	r1, #0
 8013cfa:	da01      	bge.n	8013d00 <scalbn+0x58>
 8013cfc:	4c19      	ldr	r4, [pc, #100]	@ (8013d64 <scalbn+0xbc>)
 8013cfe:	4d1b      	ldr	r5, [pc, #108]	@ (8013d6c <scalbn+0xc4>)
 8013d00:	4a18      	ldr	r2, [pc, #96]	@ (8013d64 <scalbn+0xbc>)
 8013d02:	4b19      	ldr	r3, [pc, #100]	@ (8013d68 <scalbn+0xc0>)
 8013d04:	0020      	movs	r0, r4
 8013d06:	0029      	movs	r1, r5
 8013d08:	e7e2      	b.n	8013cd0 <scalbn+0x28>
 8013d0a:	18e2      	adds	r2, r4, r3
 8013d0c:	4b18      	ldr	r3, [pc, #96]	@ (8013d70 <scalbn+0xc8>)
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	dcf0      	bgt.n	8013cf4 <scalbn+0x4c>
 8013d12:	2a00      	cmp	r2, #0
 8013d14:	dd05      	ble.n	8013d22 <scalbn+0x7a>
 8013d16:	4b17      	ldr	r3, [pc, #92]	@ (8013d74 <scalbn+0xcc>)
 8013d18:	0512      	lsls	r2, r2, #20
 8013d1a:	402b      	ands	r3, r5
 8013d1c:	431a      	orrs	r2, r3
 8013d1e:	0011      	movs	r1, r2
 8013d20:	e7e0      	b.n	8013ce4 <scalbn+0x3c>
 8013d22:	0013      	movs	r3, r2
 8013d24:	3335      	adds	r3, #53	@ 0x35
 8013d26:	da08      	bge.n	8013d3a <scalbn+0x92>
 8013d28:	4c0a      	ldr	r4, [pc, #40]	@ (8013d54 <scalbn+0xac>)
 8013d2a:	4d0b      	ldr	r5, [pc, #44]	@ (8013d58 <scalbn+0xb0>)
 8013d2c:	2900      	cmp	r1, #0
 8013d2e:	da01      	bge.n	8013d34 <scalbn+0x8c>
 8013d30:	4c08      	ldr	r4, [pc, #32]	@ (8013d54 <scalbn+0xac>)
 8013d32:	4d11      	ldr	r5, [pc, #68]	@ (8013d78 <scalbn+0xd0>)
 8013d34:	4a07      	ldr	r2, [pc, #28]	@ (8013d54 <scalbn+0xac>)
 8013d36:	4b08      	ldr	r3, [pc, #32]	@ (8013d58 <scalbn+0xb0>)
 8013d38:	e7e4      	b.n	8013d04 <scalbn+0x5c>
 8013d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8013d74 <scalbn+0xcc>)
 8013d3c:	3236      	adds	r2, #54	@ 0x36
 8013d3e:	401d      	ands	r5, r3
 8013d40:	0512      	lsls	r2, r2, #20
 8013d42:	432a      	orrs	r2, r5
 8013d44:	0011      	movs	r1, r2
 8013d46:	4b0d      	ldr	r3, [pc, #52]	@ (8013d7c <scalbn+0xd4>)
 8013d48:	2200      	movs	r2, #0
 8013d4a:	e7c1      	b.n	8013cd0 <scalbn+0x28>
 8013d4c:	43500000 	.word	0x43500000
 8013d50:	ffff3cb0 	.word	0xffff3cb0
 8013d54:	c2f8f359 	.word	0xc2f8f359
 8013d58:	01a56e1f 	.word	0x01a56e1f
 8013d5c:	000007ff 	.word	0x000007ff
 8013d60:	0000c350 	.word	0x0000c350
 8013d64:	8800759c 	.word	0x8800759c
 8013d68:	7e37e43c 	.word	0x7e37e43c
 8013d6c:	fe37e43c 	.word	0xfe37e43c
 8013d70:	000007fe 	.word	0x000007fe
 8013d74:	800fffff 	.word	0x800fffff
 8013d78:	81a56e1f 	.word	0x81a56e1f
 8013d7c:	3c900000 	.word	0x3c900000

08013d80 <with_errno>:
 8013d80:	b570      	push	{r4, r5, r6, lr}
 8013d82:	000d      	movs	r5, r1
 8013d84:	0016      	movs	r6, r2
 8013d86:	0004      	movs	r4, r0
 8013d88:	f7fd fd1e 	bl	80117c8 <__errno>
 8013d8c:	0029      	movs	r1, r5
 8013d8e:	6006      	str	r6, [r0, #0]
 8013d90:	0020      	movs	r0, r4
 8013d92:	bd70      	pop	{r4, r5, r6, pc}

08013d94 <xflow>:
 8013d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d96:	0014      	movs	r4, r2
 8013d98:	001d      	movs	r5, r3
 8013d9a:	2800      	cmp	r0, #0
 8013d9c:	d002      	beq.n	8013da4 <xflow+0x10>
 8013d9e:	2180      	movs	r1, #128	@ 0x80
 8013da0:	0609      	lsls	r1, r1, #24
 8013da2:	185b      	adds	r3, r3, r1
 8013da4:	9200      	str	r2, [sp, #0]
 8013da6:	9301      	str	r3, [sp, #4]
 8013da8:	9a00      	ldr	r2, [sp, #0]
 8013daa:	9b01      	ldr	r3, [sp, #4]
 8013dac:	0020      	movs	r0, r4
 8013dae:	0029      	movs	r1, r5
 8013db0:	f7ee fa84 	bl	80022bc <__aeabi_dmul>
 8013db4:	2222      	movs	r2, #34	@ 0x22
 8013db6:	f7ff ffe3 	bl	8013d80 <with_errno>
 8013dba:	b003      	add	sp, #12
 8013dbc:	bd30      	pop	{r4, r5, pc}

08013dbe <__math_uflow>:
 8013dbe:	2380      	movs	r3, #128	@ 0x80
 8013dc0:	b510      	push	{r4, lr}
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	055b      	lsls	r3, r3, #21
 8013dc6:	f7ff ffe5 	bl	8013d94 <xflow>
 8013dca:	bd10      	pop	{r4, pc}

08013dcc <__math_oflow>:
 8013dcc:	23e0      	movs	r3, #224	@ 0xe0
 8013dce:	b510      	push	{r4, lr}
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	05db      	lsls	r3, r3, #23
 8013dd4:	f7ff ffde 	bl	8013d94 <xflow>
 8013dd8:	bd10      	pop	{r4, pc}
	...

08013ddc <__ieee754_sqrt>:
 8013ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dde:	000a      	movs	r2, r1
 8013de0:	000d      	movs	r5, r1
 8013de2:	496d      	ldr	r1, [pc, #436]	@ (8013f98 <__ieee754_sqrt+0x1bc>)
 8013de4:	0004      	movs	r4, r0
 8013de6:	0003      	movs	r3, r0
 8013de8:	0008      	movs	r0, r1
 8013dea:	b087      	sub	sp, #28
 8013dec:	4028      	ands	r0, r5
 8013dee:	4288      	cmp	r0, r1
 8013df0:	d111      	bne.n	8013e16 <__ieee754_sqrt+0x3a>
 8013df2:	0022      	movs	r2, r4
 8013df4:	002b      	movs	r3, r5
 8013df6:	0020      	movs	r0, r4
 8013df8:	0029      	movs	r1, r5
 8013dfa:	f7ee fa5f 	bl	80022bc <__aeabi_dmul>
 8013dfe:	0002      	movs	r2, r0
 8013e00:	000b      	movs	r3, r1
 8013e02:	0020      	movs	r0, r4
 8013e04:	0029      	movs	r1, r5
 8013e06:	f7ed fab1 	bl	800136c <__aeabi_dadd>
 8013e0a:	0004      	movs	r4, r0
 8013e0c:	000d      	movs	r5, r1
 8013e0e:	0020      	movs	r0, r4
 8013e10:	0029      	movs	r1, r5
 8013e12:	b007      	add	sp, #28
 8013e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e16:	2d00      	cmp	r5, #0
 8013e18:	dc11      	bgt.n	8013e3e <__ieee754_sqrt+0x62>
 8013e1a:	0069      	lsls	r1, r5, #1
 8013e1c:	0849      	lsrs	r1, r1, #1
 8013e1e:	4321      	orrs	r1, r4
 8013e20:	d0f5      	beq.n	8013e0e <__ieee754_sqrt+0x32>
 8013e22:	2000      	movs	r0, #0
 8013e24:	4285      	cmp	r5, r0
 8013e26:	d010      	beq.n	8013e4a <__ieee754_sqrt+0x6e>
 8013e28:	0022      	movs	r2, r4
 8013e2a:	002b      	movs	r3, r5
 8013e2c:	0020      	movs	r0, r4
 8013e2e:	0029      	movs	r1, r5
 8013e30:	f7ee fd0c 	bl	800284c <__aeabi_dsub>
 8013e34:	0002      	movs	r2, r0
 8013e36:	000b      	movs	r3, r1
 8013e38:	f7ed fdfc 	bl	8001a34 <__aeabi_ddiv>
 8013e3c:	e7e5      	b.n	8013e0a <__ieee754_sqrt+0x2e>
 8013e3e:	1528      	asrs	r0, r5, #20
 8013e40:	d115      	bne.n	8013e6e <__ieee754_sqrt+0x92>
 8013e42:	2480      	movs	r4, #128	@ 0x80
 8013e44:	2100      	movs	r1, #0
 8013e46:	0364      	lsls	r4, r4, #13
 8013e48:	e007      	b.n	8013e5a <__ieee754_sqrt+0x7e>
 8013e4a:	0ada      	lsrs	r2, r3, #11
 8013e4c:	3815      	subs	r0, #21
 8013e4e:	055b      	lsls	r3, r3, #21
 8013e50:	2a00      	cmp	r2, #0
 8013e52:	d0fa      	beq.n	8013e4a <__ieee754_sqrt+0x6e>
 8013e54:	e7f5      	b.n	8013e42 <__ieee754_sqrt+0x66>
 8013e56:	0052      	lsls	r2, r2, #1
 8013e58:	3101      	adds	r1, #1
 8013e5a:	4222      	tst	r2, r4
 8013e5c:	d0fb      	beq.n	8013e56 <__ieee754_sqrt+0x7a>
 8013e5e:	1e4c      	subs	r4, r1, #1
 8013e60:	1b00      	subs	r0, r0, r4
 8013e62:	2420      	movs	r4, #32
 8013e64:	001d      	movs	r5, r3
 8013e66:	1a64      	subs	r4, r4, r1
 8013e68:	40e5      	lsrs	r5, r4
 8013e6a:	408b      	lsls	r3, r1
 8013e6c:	432a      	orrs	r2, r5
 8013e6e:	494b      	ldr	r1, [pc, #300]	@ (8013f9c <__ieee754_sqrt+0x1c0>)
 8013e70:	0312      	lsls	r2, r2, #12
 8013e72:	1844      	adds	r4, r0, r1
 8013e74:	2180      	movs	r1, #128	@ 0x80
 8013e76:	0b12      	lsrs	r2, r2, #12
 8013e78:	0349      	lsls	r1, r1, #13
 8013e7a:	4311      	orrs	r1, r2
 8013e7c:	07c0      	lsls	r0, r0, #31
 8013e7e:	d403      	bmi.n	8013e88 <__ieee754_sqrt+0xac>
 8013e80:	0fda      	lsrs	r2, r3, #31
 8013e82:	0049      	lsls	r1, r1, #1
 8013e84:	1851      	adds	r1, r2, r1
 8013e86:	005b      	lsls	r3, r3, #1
 8013e88:	2500      	movs	r5, #0
 8013e8a:	1062      	asrs	r2, r4, #1
 8013e8c:	0049      	lsls	r1, r1, #1
 8013e8e:	2480      	movs	r4, #128	@ 0x80
 8013e90:	9205      	str	r2, [sp, #20]
 8013e92:	0fda      	lsrs	r2, r3, #31
 8013e94:	1852      	adds	r2, r2, r1
 8013e96:	2016      	movs	r0, #22
 8013e98:	0029      	movs	r1, r5
 8013e9a:	005b      	lsls	r3, r3, #1
 8013e9c:	03a4      	lsls	r4, r4, #14
 8013e9e:	190e      	adds	r6, r1, r4
 8013ea0:	4296      	cmp	r6, r2
 8013ea2:	dc02      	bgt.n	8013eaa <__ieee754_sqrt+0xce>
 8013ea4:	1931      	adds	r1, r6, r4
 8013ea6:	1b92      	subs	r2, r2, r6
 8013ea8:	192d      	adds	r5, r5, r4
 8013eaa:	0fde      	lsrs	r6, r3, #31
 8013eac:	0052      	lsls	r2, r2, #1
 8013eae:	3801      	subs	r0, #1
 8013eb0:	1992      	adds	r2, r2, r6
 8013eb2:	005b      	lsls	r3, r3, #1
 8013eb4:	0864      	lsrs	r4, r4, #1
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	d1f1      	bne.n	8013e9e <__ieee754_sqrt+0xc2>
 8013eba:	2620      	movs	r6, #32
 8013ebc:	2780      	movs	r7, #128	@ 0x80
 8013ebe:	0004      	movs	r4, r0
 8013ec0:	9604      	str	r6, [sp, #16]
 8013ec2:	063f      	lsls	r7, r7, #24
 8013ec4:	19c6      	adds	r6, r0, r7
 8013ec6:	46b4      	mov	ip, r6
 8013ec8:	4291      	cmp	r1, r2
 8013eca:	db02      	blt.n	8013ed2 <__ieee754_sqrt+0xf6>
 8013ecc:	d114      	bne.n	8013ef8 <__ieee754_sqrt+0x11c>
 8013ece:	429e      	cmp	r6, r3
 8013ed0:	d812      	bhi.n	8013ef8 <__ieee754_sqrt+0x11c>
 8013ed2:	4660      	mov	r0, ip
 8013ed4:	4666      	mov	r6, ip
 8013ed6:	19c0      	adds	r0, r0, r7
 8013ed8:	9100      	str	r1, [sp, #0]
 8013eda:	2e00      	cmp	r6, #0
 8013edc:	da03      	bge.n	8013ee6 <__ieee754_sqrt+0x10a>
 8013ede:	43c6      	mvns	r6, r0
 8013ee0:	0ff6      	lsrs	r6, r6, #31
 8013ee2:	198e      	adds	r6, r1, r6
 8013ee4:	9600      	str	r6, [sp, #0]
 8013ee6:	1a52      	subs	r2, r2, r1
 8013ee8:	4563      	cmp	r3, ip
 8013eea:	4189      	sbcs	r1, r1
 8013eec:	4249      	negs	r1, r1
 8013eee:	1a52      	subs	r2, r2, r1
 8013ef0:	4661      	mov	r1, ip
 8013ef2:	1a5b      	subs	r3, r3, r1
 8013ef4:	9900      	ldr	r1, [sp, #0]
 8013ef6:	19e4      	adds	r4, r4, r7
 8013ef8:	0fde      	lsrs	r6, r3, #31
 8013efa:	0052      	lsls	r2, r2, #1
 8013efc:	1992      	adds	r2, r2, r6
 8013efe:	9e04      	ldr	r6, [sp, #16]
 8013f00:	005b      	lsls	r3, r3, #1
 8013f02:	3e01      	subs	r6, #1
 8013f04:	087f      	lsrs	r7, r7, #1
 8013f06:	9604      	str	r6, [sp, #16]
 8013f08:	2e00      	cmp	r6, #0
 8013f0a:	d1db      	bne.n	8013ec4 <__ieee754_sqrt+0xe8>
 8013f0c:	431a      	orrs	r2, r3
 8013f0e:	d01f      	beq.n	8013f50 <__ieee754_sqrt+0x174>
 8013f10:	4e23      	ldr	r6, [pc, #140]	@ (8013fa0 <__ieee754_sqrt+0x1c4>)
 8013f12:	4f24      	ldr	r7, [pc, #144]	@ (8013fa4 <__ieee754_sqrt+0x1c8>)
 8013f14:	6830      	ldr	r0, [r6, #0]
 8013f16:	6871      	ldr	r1, [r6, #4]
 8013f18:	683a      	ldr	r2, [r7, #0]
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	9200      	str	r2, [sp, #0]
 8013f1e:	9301      	str	r3, [sp, #4]
 8013f20:	6832      	ldr	r2, [r6, #0]
 8013f22:	6873      	ldr	r3, [r6, #4]
 8013f24:	9202      	str	r2, [sp, #8]
 8013f26:	9303      	str	r3, [sp, #12]
 8013f28:	9a00      	ldr	r2, [sp, #0]
 8013f2a:	9b01      	ldr	r3, [sp, #4]
 8013f2c:	f7ee fc8e 	bl	800284c <__aeabi_dsub>
 8013f30:	0002      	movs	r2, r0
 8013f32:	000b      	movs	r3, r1
 8013f34:	9802      	ldr	r0, [sp, #8]
 8013f36:	9903      	ldr	r1, [sp, #12]
 8013f38:	f7ec f9a6 	bl	8000288 <__aeabi_dcmple>
 8013f3c:	2800      	cmp	r0, #0
 8013f3e:	d007      	beq.n	8013f50 <__ieee754_sqrt+0x174>
 8013f40:	6830      	ldr	r0, [r6, #0]
 8013f42:	6871      	ldr	r1, [r6, #4]
 8013f44:	683a      	ldr	r2, [r7, #0]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	1c67      	adds	r7, r4, #1
 8013f4a:	d10f      	bne.n	8013f6c <__ieee754_sqrt+0x190>
 8013f4c:	9c04      	ldr	r4, [sp, #16]
 8013f4e:	3501      	adds	r5, #1
 8013f50:	4b15      	ldr	r3, [pc, #84]	@ (8013fa8 <__ieee754_sqrt+0x1cc>)
 8013f52:	106a      	asrs	r2, r5, #1
 8013f54:	18d2      	adds	r2, r2, r3
 8013f56:	0863      	lsrs	r3, r4, #1
 8013f58:	07ed      	lsls	r5, r5, #31
 8013f5a:	d502      	bpl.n	8013f62 <__ieee754_sqrt+0x186>
 8013f5c:	2180      	movs	r1, #128	@ 0x80
 8013f5e:	0609      	lsls	r1, r1, #24
 8013f60:	430b      	orrs	r3, r1
 8013f62:	9905      	ldr	r1, [sp, #20]
 8013f64:	001c      	movs	r4, r3
 8013f66:	0509      	lsls	r1, r1, #20
 8013f68:	188d      	adds	r5, r1, r2
 8013f6a:	e750      	b.n	8013e0e <__ieee754_sqrt+0x32>
 8013f6c:	f7ed f9fe 	bl	800136c <__aeabi_dadd>
 8013f70:	6877      	ldr	r7, [r6, #4]
 8013f72:	6836      	ldr	r6, [r6, #0]
 8013f74:	0002      	movs	r2, r0
 8013f76:	000b      	movs	r3, r1
 8013f78:	0030      	movs	r0, r6
 8013f7a:	0039      	movs	r1, r7
 8013f7c:	f7ec f97a 	bl	8000274 <__aeabi_dcmplt>
 8013f80:	2800      	cmp	r0, #0
 8013f82:	d004      	beq.n	8013f8e <__ieee754_sqrt+0x1b2>
 8013f84:	3402      	adds	r4, #2
 8013f86:	4263      	negs	r3, r4
 8013f88:	4163      	adcs	r3, r4
 8013f8a:	18ed      	adds	r5, r5, r3
 8013f8c:	e7e0      	b.n	8013f50 <__ieee754_sqrt+0x174>
 8013f8e:	2301      	movs	r3, #1
 8013f90:	3401      	adds	r4, #1
 8013f92:	439c      	bics	r4, r3
 8013f94:	e7dc      	b.n	8013f50 <__ieee754_sqrt+0x174>
 8013f96:	46c0      	nop			@ (mov r8, r8)
 8013f98:	7ff00000 	.word	0x7ff00000
 8013f9c:	fffffc01 	.word	0xfffffc01
 8013fa0:	20000200 	.word	0x20000200
 8013fa4:	200001f8 	.word	0x200001f8
 8013fa8:	3fe00000 	.word	0x3fe00000

08013fac <_init>:
 8013fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fae:	46c0      	nop			@ (mov r8, r8)
 8013fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fb2:	bc08      	pop	{r3}
 8013fb4:	469e      	mov	lr, r3
 8013fb6:	4770      	bx	lr

08013fb8 <_fini>:
 8013fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fba:	46c0      	nop			@ (mov r8, r8)
 8013fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fbe:	bc08      	pop	{r3}
 8013fc0:	469e      	mov	lr, r3
 8013fc2:	4770      	bx	lr
